
PlsWork.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa34  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800abc4  0800abc4  0000bbc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac94  0800ac94  0000c1cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac94  0800ac94  0000bc94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac9c  0800ac9c  0000c1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac9c  0800ac9c  0000bc9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aca0  0800aca0  0000bca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  0800aca4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1cc  2**0
                  CONTENTS
 10 .bss          00001454  200001cc  200001cc  0000c1cc  2**2
                  ALLOC
 11 ._user_heap_stack 00006000  20001620  20001620  0000c1cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012b9a  00000000  00000000  0000c1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000345e  00000000  00000000  0001ed96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff8  00000000  00000000  000221f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c08  00000000  00000000  000231f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fd86  00000000  00000000  00023df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016a89  00000000  00000000  00043b7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b0af9  00000000  00000000  0005a607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010b100  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045c0  00000000  00000000  0010b144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  0010f704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001cc 	.word	0x200001cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800abac 	.word	0x0800abac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d0 	.word	0x200001d0
 80001cc:	0800abac 	.word	0x0800abac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <Error>:
#include "stm32f3xx_hal.h"
extern SPI_HandleTypeDef hspi1;
extern I2C_HandleTypeDef hi2c1;

void Error(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_9,GPIO_PIN_SET);
 8000284:	2201      	movs	r2, #1
 8000286:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800028a:	4802      	ldr	r0, [pc, #8]	@ (8000294 <Error+0x14>)
 800028c:	f001 fdf6 	bl	8001e7c <HAL_GPIO_WritePin>
}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}
 8000294:	48001000 	.word	0x48001000

08000298 <Success>:

void Success(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 800029c:	2200      	movs	r2, #0
 800029e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002a2:	4802      	ldr	r0, [pc, #8]	@ (80002ac <Success+0x14>)
 80002a4:	f001 fdea 	bl	8001e7c <HAL_GPIO_WritePin>
}
 80002a8:	bf00      	nop
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	48001000 	.word	0x48001000

080002b0 <I2C_Read>:

static uint8_t I2C_Read(uint16_t Addr, uint8_t Reg)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b088      	sub	sp, #32
 80002b4:	af04      	add	r7, sp, #16
 80002b6:	4603      	mov	r3, r0
 80002b8:	460a      	mov	r2, r1
 80002ba:	80fb      	strh	r3, [r7, #6]
 80002bc:	4613      	mov	r3, r2
 80002be:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_OK;
 80002c0:	2300      	movs	r3, #0
 80002c2:	73fb      	strb	r3, [r7, #15]
	uint8_t value = 0;
 80002c4:	2300      	movs	r3, #0
 80002c6:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 80002c8:	797b      	ldrb	r3, [r7, #5]
 80002ca:	b29a      	uxth	r2, r3
 80002cc:	88f9      	ldrh	r1, [r7, #6]
 80002ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002d2:	9302      	str	r3, [sp, #8]
 80002d4:	2301      	movs	r3, #1
 80002d6:	9301      	str	r3, [sp, #4]
 80002d8:	f107 030e 	add.w	r3, r7, #14
 80002dc:	9300      	str	r3, [sp, #0]
 80002de:	2301      	movs	r3, #1
 80002e0:	4808      	ldr	r0, [pc, #32]	@ (8000304 <I2C_Read+0x54>)
 80002e2:	f001 ffab 	bl	800223c <HAL_I2C_Mem_Read>
 80002e6:	4603      	mov	r3, r0
 80002e8:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) Error();
 80002ea:	7bfb      	ldrb	r3, [r7, #15]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d002      	beq.n	80002f6 <I2C_Read+0x46>
 80002f0:	f7ff ffc6 	bl	8000280 <Error>
 80002f4:	e001      	b.n	80002fa <I2C_Read+0x4a>
	else Success();
 80002f6:	f7ff ffcf 	bl	8000298 <Success>
	return value;
 80002fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80002fc:	4618      	mov	r0, r3
 80002fe:	3710      	adds	r7, #16
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	200001e8 	.word	0x200001e8

08000308 <I2C_Write>:

static void I2C_Write(uint16_t Addr, uint8_t Reg,  uint8_t Value)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b088      	sub	sp, #32
 800030c:	af04      	add	r7, sp, #16
 800030e:	4603      	mov	r3, r0
 8000310:	80fb      	strh	r3, [r7, #6]
 8000312:	460b      	mov	r3, r1
 8000314:	717b      	strb	r3, [r7, #5]
 8000316:	4613      	mov	r3, r2
 8000318:	713b      	strb	r3, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 800031a:	2300      	movs	r3, #0
 800031c:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Mem_Write(&hi2c1, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
 800031e:	797b      	ldrb	r3, [r7, #5]
 8000320:	b29a      	uxth	r2, r3
 8000322:	88f9      	ldrh	r1, [r7, #6]
 8000324:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000328:	9302      	str	r3, [sp, #8]
 800032a:	2301      	movs	r3, #1
 800032c:	9301      	str	r3, [sp, #4]
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	2301      	movs	r3, #1
 8000334:	4808      	ldr	r0, [pc, #32]	@ (8000358 <I2C_Write+0x50>)
 8000336:	f001 fe6d 	bl	8002014 <HAL_I2C_Mem_Write>
 800033a:	4603      	mov	r3, r0
 800033c:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) Error();
 800033e:	7bfb      	ldrb	r3, [r7, #15]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d002      	beq.n	800034a <I2C_Write+0x42>
 8000344:	f7ff ff9c 	bl	8000280 <Error>
	else Success();
}
 8000348:	e001      	b.n	800034e <I2C_Write+0x46>
	else Success();
 800034a:	f7ff ffa5 	bl	8000298 <Success>
}
 800034e:	bf00      	nop
 8000350:	3710      	adds	r7, #16
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	200001e8 	.word	0x200001e8

0800035c <I2C_ReadID>:

uint8_t I2C_ReadID(uint16_t Addr)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b084      	sub	sp, #16
 8000360:	af00      	add	r7, sp, #0
 8000362:	4603      	mov	r3, r0
 8000364:	80fb      	strh	r3, [r7, #6]
	uint8_t ctrl = 0x00;
 8000366:	2300      	movs	r3, #0
 8000368:	73fb      	strb	r3, [r7, #15]
	ctrl = I2C_Read(Addr, 0x0F);
 800036a:	88fb      	ldrh	r3, [r7, #6]
 800036c:	210f      	movs	r1, #15
 800036e:	4618      	mov	r0, r3
 8000370:	f7ff ff9e 	bl	80002b0 <I2C_Read>
 8000374:	4603      	mov	r3, r0
 8000376:	73fb      	strb	r3, [r7, #15]
	return ctrl;
 8000378:	7bfb      	ldrb	r3, [r7, #15]
}
 800037a:	4618      	mov	r0, r3
 800037c:	3710      	adds	r7, #16
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}

08000382 <Accel_Ini>:

void Accel_Ini(void)
{
 8000382:	b580      	push	{r7, lr}
 8000384:	b082      	sub	sp, #8
 8000386:	af00      	add	r7, sp, #0
	uint8_t ctrl;
	if (I2C_ReadID(0x33)==0x33)
 8000388:	2033      	movs	r0, #51	@ 0x33
 800038a:	f7ff ffe7 	bl	800035c <I2C_ReadID>
 800038e:	4603      	mov	r3, r0
 8000390:	2b33      	cmp	r3, #51	@ 0x33
 8000392:	d11f      	bne.n	80003d4 <Accel_Ini+0x52>
	{
		ctrl=0b10010111;
 8000394:	2397      	movs	r3, #151	@ 0x97
 8000396:	71fb      	strb	r3, [r7, #7]
		I2C_Write(0x32,0x20,ctrl);
 8000398:	79fb      	ldrb	r3, [r7, #7]
 800039a:	461a      	mov	r2, r3
 800039c:	2120      	movs	r1, #32
 800039e:	2032      	movs	r0, #50	@ 0x32
 80003a0:	f7ff ffb2 	bl	8000308 <I2C_Write>
		ctrl=0b00010000;
 80003a4:	2310      	movs	r3, #16
 80003a6:	71fb      	strb	r3, [r7, #7]
		I2C_Write(0x32,0x22,ctrl);
 80003a8:	79fb      	ldrb	r3, [r7, #7]
 80003aa:	461a      	mov	r2, r3
 80003ac:	2122      	movs	r1, #34	@ 0x22
 80003ae:	2032      	movs	r0, #50	@ 0x32
 80003b0:	f7ff ffaa 	bl	8000308 <I2C_Write>
		ctrl=0b00001000;
 80003b4:	2308      	movs	r3, #8
 80003b6:	71fb      	strb	r3, [r7, #7]
		I2C_Write(0x32,0x23,ctrl);
 80003b8:	79fb      	ldrb	r3, [r7, #7]
 80003ba:	461a      	mov	r2, r3
 80003bc:	2123      	movs	r1, #35	@ 0x23
 80003be:	2032      	movs	r0, #50	@ 0x32
 80003c0:	f7ff ffa2 	bl	8000308 <I2C_Write>
		ctrl=0b00000000;
 80003c4:	2300      	movs	r3, #0
 80003c6:	71fb      	strb	r3, [r7, #7]
		I2C_Write(0x32,0x25,ctrl);
 80003c8:	79fb      	ldrb	r3, [r7, #7]
 80003ca:	461a      	mov	r2, r3
 80003cc:	2125      	movs	r1, #37	@ 0x25
 80003ce:	2032      	movs	r0, #50	@ 0x32
 80003d0:	f7ff ff9a 	bl	8000308 <I2C_Write>
	}
	HAL_Delay(500);
 80003d4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80003d8:	f001 faa0 	bl	800191c <HAL_Delay>
}
 80003dc:	bf00      	nop
 80003de:	3708      	adds	r7, #8
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <Accel_GetXYZ>:

void Accel_GetXYZ(int16_t* pData)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
	uint8_t buffer[6];
	uint8_t i=0;
 80003ec:	2300      	movs	r3, #0
 80003ee:	73fb      	strb	r3, [r7, #15]

	buffer[0] = I2C_Read(0x32,0x28);
 80003f0:	2128      	movs	r1, #40	@ 0x28
 80003f2:	2032      	movs	r0, #50	@ 0x32
 80003f4:	f7ff ff5c 	bl	80002b0 <I2C_Read>
 80003f8:	4603      	mov	r3, r0
 80003fa:	723b      	strb	r3, [r7, #8]
	buffer[1] = I2C_Read(0x32,0x29);
 80003fc:	2129      	movs	r1, #41	@ 0x29
 80003fe:	2032      	movs	r0, #50	@ 0x32
 8000400:	f7ff ff56 	bl	80002b0 <I2C_Read>
 8000404:	4603      	mov	r3, r0
 8000406:	727b      	strb	r3, [r7, #9]
	buffer[2] = I2C_Read(0x32,0x2A);
 8000408:	212a      	movs	r1, #42	@ 0x2a
 800040a:	2032      	movs	r0, #50	@ 0x32
 800040c:	f7ff ff50 	bl	80002b0 <I2C_Read>
 8000410:	4603      	mov	r3, r0
 8000412:	72bb      	strb	r3, [r7, #10]
	buffer[3] = I2C_Read(0x32,0x2B);
 8000414:	212b      	movs	r1, #43	@ 0x2b
 8000416:	2032      	movs	r0, #50	@ 0x32
 8000418:	f7ff ff4a 	bl	80002b0 <I2C_Read>
 800041c:	4603      	mov	r3, r0
 800041e:	72fb      	strb	r3, [r7, #11]
	buffer[4] = I2C_Read(0x32,0x2C);
 8000420:	212c      	movs	r1, #44	@ 0x2c
 8000422:	2032      	movs	r0, #50	@ 0x32
 8000424:	f7ff ff44 	bl	80002b0 <I2C_Read>
 8000428:	4603      	mov	r3, r0
 800042a:	733b      	strb	r3, [r7, #12]
	buffer[5] = I2C_Read(0x32,0x2D);
 800042c:	212d      	movs	r1, #45	@ 0x2d
 800042e:	2032      	movs	r0, #50	@ 0x32
 8000430:	f7ff ff3e 	bl	80002b0 <I2C_Read>
 8000434:	4603      	mov	r3, r0
 8000436:	737b      	strb	r3, [r7, #13]

	for(i=0;i<3;i++)
 8000438:	2300      	movs	r3, #0
 800043a:	73fb      	strb	r3, [r7, #15]
 800043c:	e019      	b.n	8000472 <Accel_GetXYZ+0x8e>
	{
		pData[i]=((int16_t)((uint16_t)buffer[2*i+1]<<8)+buffer[2*i]);
 800043e:	7bfb      	ldrb	r3, [r7, #15]
 8000440:	005b      	lsls	r3, r3, #1
 8000442:	3301      	adds	r3, #1
 8000444:	3310      	adds	r3, #16
 8000446:	443b      	add	r3, r7
 8000448:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800044c:	021b      	lsls	r3, r3, #8
 800044e:	b29b      	uxth	r3, r3
 8000450:	7bfa      	ldrb	r2, [r7, #15]
 8000452:	0052      	lsls	r2, r2, #1
 8000454:	3210      	adds	r2, #16
 8000456:	443a      	add	r2, r7
 8000458:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800045c:	4413      	add	r3, r2
 800045e:	b299      	uxth	r1, r3
 8000460:	7bfb      	ldrb	r3, [r7, #15]
 8000462:	005b      	lsls	r3, r3, #1
 8000464:	687a      	ldr	r2, [r7, #4]
 8000466:	4413      	add	r3, r2
 8000468:	b20a      	sxth	r2, r1
 800046a:	801a      	strh	r2, [r3, #0]
	for(i=0;i<3;i++)
 800046c:	7bfb      	ldrb	r3, [r7, #15]
 800046e:	3301      	adds	r3, #1
 8000470:	73fb      	strb	r3, [r7, #15]
 8000472:	7bfb      	ldrb	r3, [r7, #15]
 8000474:	2b02      	cmp	r3, #2
 8000476:	d9e2      	bls.n	800043e <Accel_GetXYZ+0x5a>
	}
}
 8000478:	bf00      	nop
 800047a:	bf00      	nop
 800047c:	3710      	adds	r7, #16
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
	...

08000484 <SPIx_WriteRead>:

uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b086      	sub	sp, #24
 8000488:	af02      	add	r7, sp, #8
 800048a:	4603      	mov	r3, r0
 800048c:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 800048e:	2300      	movs	r3, #0
 8000490:	73fb      	strb	r3, [r7, #15]
	if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 8000492:	f107 020f 	add.w	r2, r7, #15
 8000496:	1df9      	adds	r1, r7, #7
 8000498:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800049c:	9300      	str	r3, [sp, #0]
 800049e:	2301      	movs	r3, #1
 80004a0:	4807      	ldr	r0, [pc, #28]	@ (80004c0 <SPIx_WriteRead+0x3c>)
 80004a2:	f005 fc70 	bl	8005d86 <HAL_SPI_TransmitReceive>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d002      	beq.n	80004b2 <SPIx_WriteRead+0x2e>
	{
		Error();
 80004ac:	f7ff fee8 	bl	8000280 <Error>
 80004b0:	e001      	b.n	80004b6 <SPIx_WriteRead+0x32>
	}
	else
	{
		Success();
 80004b2:	f7ff fef1 	bl	8000298 <Success>
	}
}
 80004b6:	bf00      	nop
 80004b8:	4618      	mov	r0, r3
 80004ba:	3710      	adds	r7, #16
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	2000023c 	.word	0x2000023c

080004c4 <Gyro_IO_Read>:

void Gyro_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	460b      	mov	r3, r1
 80004ce:	70fb      	strb	r3, [r7, #3]
 80004d0:	4613      	mov	r3, r2
 80004d2:	803b      	strh	r3, [r7, #0]
	if(NumByteToRead>0x01)
 80004d4:	883b      	ldrh	r3, [r7, #0]
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	d904      	bls.n	80004e4 <Gyro_IO_Read+0x20>
	{
		ReadAddr |= (uint8_t) (READWRITE_CMD | MULTIPLEBYTE_CMD);
 80004da:	78fb      	ldrb	r3, [r7, #3]
 80004dc:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80004e0:	70fb      	strb	r3, [r7, #3]
 80004e2:	e003      	b.n	80004ec <Gyro_IO_Read+0x28>
	}
	else
	{
		ReadAddr |= (uint8_t)READWRITE_CMD;
 80004e4:	78fb      	ldrb	r3, [r7, #3]
 80004e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80004ea:	70fb      	strb	r3, [r7, #3]
	}
	CS_ON;
 80004ec:	2200      	movs	r2, #0
 80004ee:	2108      	movs	r1, #8
 80004f0:	4810      	ldr	r0, [pc, #64]	@ (8000534 <Gyro_IO_Read+0x70>)
 80004f2:	f001 fcc3 	bl	8001e7c <HAL_GPIO_WritePin>
	SPIx_WriteRead(ReadAddr);
 80004f6:	78fb      	ldrb	r3, [r7, #3]
 80004f8:	4618      	mov	r0, r3
 80004fa:	f7ff ffc3 	bl	8000484 <SPIx_WriteRead>
	while(NumByteToRead > 0x00)
 80004fe:	e00c      	b.n	800051a <Gyro_IO_Read+0x56>
	{
		*pBuffer=SPIx_WriteRead(DUMMY_BYTE);
 8000500:	2000      	movs	r0, #0
 8000502:	f7ff ffbf 	bl	8000484 <SPIx_WriteRead>
 8000506:	4603      	mov	r3, r0
 8000508:	461a      	mov	r2, r3
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	701a      	strb	r2, [r3, #0]
		NumByteToRead--;
 800050e:	883b      	ldrh	r3, [r7, #0]
 8000510:	3b01      	subs	r3, #1
 8000512:	803b      	strh	r3, [r7, #0]
		pBuffer++;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	3301      	adds	r3, #1
 8000518:	607b      	str	r3, [r7, #4]
	while(NumByteToRead > 0x00)
 800051a:	883b      	ldrh	r3, [r7, #0]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d1ef      	bne.n	8000500 <Gyro_IO_Read+0x3c>
	}
	CS_OFF;
 8000520:	2201      	movs	r2, #1
 8000522:	2108      	movs	r1, #8
 8000524:	4803      	ldr	r0, [pc, #12]	@ (8000534 <Gyro_IO_Read+0x70>)
 8000526:	f001 fca9 	bl	8001e7c <HAL_GPIO_WritePin>
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	48001000 	.word	0x48001000

08000538 <Gyro_IO_Write>:

void Gyro_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	460b      	mov	r3, r1
 8000542:	70fb      	strb	r3, [r7, #3]
 8000544:	4613      	mov	r3, r2
 8000546:	803b      	strh	r3, [r7, #0]
	CS_OFF;
 8000548:	2201      	movs	r2, #1
 800054a:	2108      	movs	r1, #8
 800054c:	4815      	ldr	r0, [pc, #84]	@ (80005a4 <Gyro_IO_Write+0x6c>)
 800054e:	f001 fc95 	bl	8001e7c <HAL_GPIO_WritePin>
	if(NumByteToWrite>0x01)
 8000552:	883b      	ldrh	r3, [r7, #0]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d903      	bls.n	8000560 <Gyro_IO_Write+0x28>
	{
		WriteAddr |= (uint8_t) MULTIPLEBYTE_CMD;
 8000558:	78fb      	ldrb	r3, [r7, #3]
 800055a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800055e:	70fb      	strb	r3, [r7, #3]
	}
	CS_ON;
 8000560:	2200      	movs	r2, #0
 8000562:	2108      	movs	r1, #8
 8000564:	480f      	ldr	r0, [pc, #60]	@ (80005a4 <Gyro_IO_Write+0x6c>)
 8000566:	f001 fc89 	bl	8001e7c <HAL_GPIO_WritePin>
	SPIx_WriteRead(WriteAddr);
 800056a:	78fb      	ldrb	r3, [r7, #3]
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff ff89 	bl	8000484 <SPIx_WriteRead>
	while(NumByteToWrite > 0x00)
 8000572:	e00a      	b.n	800058a <Gyro_IO_Write+0x52>
	{
		SPIx_WriteRead(*pBuffer);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	4618      	mov	r0, r3
 800057a:	f7ff ff83 	bl	8000484 <SPIx_WriteRead>
		NumByteToWrite--;
 800057e:	883b      	ldrh	r3, [r7, #0]
 8000580:	3b01      	subs	r3, #1
 8000582:	803b      	strh	r3, [r7, #0]
		pBuffer++;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	3301      	adds	r3, #1
 8000588:	607b      	str	r3, [r7, #4]
	while(NumByteToWrite > 0x00)
 800058a:	883b      	ldrh	r3, [r7, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d1f1      	bne.n	8000574 <Gyro_IO_Write+0x3c>
	}
	CS_OFF;
 8000590:	2201      	movs	r2, #1
 8000592:	2108      	movs	r1, #8
 8000594:	4803      	ldr	r0, [pc, #12]	@ (80005a4 <Gyro_IO_Write+0x6c>)
 8000596:	f001 fc71 	bl	8001e7c <HAL_GPIO_WritePin>
}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	48001000 	.word	0x48001000

080005a8 <Gyro_ReadID>:

uint8_t Gyro_ReadID(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
	uint8_t ctrl = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	71fb      	strb	r3, [r7, #7]
	Gyro_IO_Read(&ctrl,0x0F,1);
 80005b2:	1dfb      	adds	r3, r7, #7
 80005b4:	2201      	movs	r2, #1
 80005b6:	210f      	movs	r1, #15
 80005b8:	4618      	mov	r0, r3
 80005ba:	f7ff ff83 	bl	80004c4 <Gyro_IO_Read>
	return ctrl;
 80005be:	79fb      	ldrb	r3, [r7, #7]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <Gyro_Ini>:

void Gyro_Ini(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
	uint8_t ctrl = 0x00;
 80005ce:	2300      	movs	r3, #0
 80005d0:	71fb      	strb	r3, [r7, #7]

	if(Gyro_ReadID() == 0xD4)
 80005d2:	f7ff ffe9 	bl	80005a8 <Gyro_ReadID>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2bd4      	cmp	r3, #212	@ 0xd4
 80005da:	d128      	bne.n	800062e <Gyro_Ini+0x66>
	{
		ctrl=0b01111111;
 80005dc:	237f      	movs	r3, #127	@ 0x7f
 80005de:	71fb      	strb	r3, [r7, #7]
		Gyro_IO_Write(&ctrl, 0x20,1);
 80005e0:	1dfb      	adds	r3, r7, #7
 80005e2:	2201      	movs	r2, #1
 80005e4:	2120      	movs	r1, #32
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff ffa6 	bl	8000538 <Gyro_IO_Write>
		ctrl=0b00000000;
 80005ec:	2300      	movs	r3, #0
 80005ee:	71fb      	strb	r3, [r7, #7]
		Gyro_IO_Write(&ctrl, 0x21,1);
 80005f0:	1dfb      	adds	r3, r7, #7
 80005f2:	2201      	movs	r2, #1
 80005f4:	2121      	movs	r1, #33	@ 0x21
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff ff9e 	bl	8000538 <Gyro_IO_Write>

		ctrl=0b00001000;
 80005fc:	2308      	movs	r3, #8
 80005fe:	71fb      	strb	r3, [r7, #7]
		Gyro_IO_Write(&ctrl, 0x22,1);
 8000600:	1dfb      	adds	r3, r7, #7
 8000602:	2201      	movs	r2, #1
 8000604:	2122      	movs	r1, #34	@ 0x22
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff ff96 	bl	8000538 <Gyro_IO_Write>

		ctrl=0b00010000;
 800060c:	2310      	movs	r3, #16
 800060e:	71fb      	strb	r3, [r7, #7]
		Gyro_IO_Write(&ctrl, 0x23,1);
 8000610:	1dfb      	adds	r3, r7, #7
 8000612:	2201      	movs	r2, #1
 8000614:	2123      	movs	r1, #35	@ 0x23
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff ff8e 	bl	8000538 <Gyro_IO_Write>
		ctrl=0b00010000;
 800061c:	2310      	movs	r3, #16
 800061e:	71fb      	strb	r3, [r7, #7]
		Gyro_IO_Write(&ctrl, 0x24,1);
 8000620:	1dfb      	adds	r3, r7, #7
 8000622:	2201      	movs	r2, #1
 8000624:	2124      	movs	r1, #36	@ 0x24
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff ff86 	bl	8000538 <Gyro_IO_Write>
 800062c:	e001      	b.n	8000632 <Gyro_Ini+0x6a>
	}
	else Error();
 800062e:	f7ff fe27 	bl	8000280 <Error>
	HAL_Delay(500);
 8000632:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000636:	f001 f971 	bl	800191c <HAL_Delay>
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}

08000642 <Gyro_GetXYZ>:

void Gyro_GetXYZ(int16_t* pData)
{
 8000642:	b580      	push	{r7, lr}
 8000644:	b086      	sub	sp, #24
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
	uint8_t buffer[6];
	float valueinfloat = 0;
 800064a:	f04f 0300 	mov.w	r3, #0
 800064e:	613b      	str	r3, [r7, #16]

	Gyro_IO_Read((uint8_t*)&buffer[0], 0x28,1);
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	2201      	movs	r2, #1
 8000656:	2128      	movs	r1, #40	@ 0x28
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff ff33 	bl	80004c4 <Gyro_IO_Read>
	Gyro_IO_Read((uint8_t*)&buffer[1], 0x29,1);
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	3301      	adds	r3, #1
 8000664:	2201      	movs	r2, #1
 8000666:	2129      	movs	r1, #41	@ 0x29
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ff2b 	bl	80004c4 <Gyro_IO_Read>
	Gyro_IO_Read((uint8_t*)&buffer[2], 0x2A,1);
 800066e:	f107 0308 	add.w	r3, r7, #8
 8000672:	3302      	adds	r3, #2
 8000674:	2201      	movs	r2, #1
 8000676:	212a      	movs	r1, #42	@ 0x2a
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ff23 	bl	80004c4 <Gyro_IO_Read>
	Gyro_IO_Read((uint8_t*)&buffer[3], 0x2B,1);
 800067e:	f107 0308 	add.w	r3, r7, #8
 8000682:	3303      	adds	r3, #3
 8000684:	2201      	movs	r2, #1
 8000686:	212b      	movs	r1, #43	@ 0x2b
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ff1b 	bl	80004c4 <Gyro_IO_Read>
	Gyro_IO_Read((uint8_t*)&buffer[4], 0x2C,1);
 800068e:	f107 0308 	add.w	r3, r7, #8
 8000692:	3304      	adds	r3, #4
 8000694:	2201      	movs	r2, #1
 8000696:	212c      	movs	r1, #44	@ 0x2c
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ff13 	bl	80004c4 <Gyro_IO_Read>
	Gyro_IO_Read((uint8_t*)&buffer[5], 0x2D,1);
 800069e:	f107 0308 	add.w	r3, r7, #8
 80006a2:	3305      	adds	r3, #5
 80006a4:	2201      	movs	r2, #1
 80006a6:	212d      	movs	r1, #45	@ 0x2d
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ff0b 	bl	80004c4 <Gyro_IO_Read>

	for(int i=0;i<3;i++)
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]
 80006b2:	e023      	b.n	80006fc <Gyro_GetXYZ+0xba>
	{
		valueinfloat = ((buffer[2*i+1] << 8) + buffer[2*i]);
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	3301      	adds	r3, #1
 80006ba:	3318      	adds	r3, #24
 80006bc:	443b      	add	r3, r7
 80006be:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80006c2:	021b      	lsls	r3, r3, #8
 80006c4:	697a      	ldr	r2, [r7, #20]
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	3218      	adds	r2, #24
 80006ca:	443a      	add	r2, r7
 80006cc:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80006d0:	4413      	add	r3, r2
 80006d2:	ee07 3a90 	vmov	s15, r3
 80006d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006da:	edc7 7a04 	vstr	s15, [r7, #16]
		pData[i]=(int16_t)valueinfloat;
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	4413      	add	r3, r2
 80006e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80006ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006ee:	ee17 2a90 	vmov	r2, s15
 80006f2:	b212      	sxth	r2, r2
 80006f4:	801a      	strh	r2, [r3, #0]
	for(int i=0;i<3;i++)
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	3301      	adds	r3, #1
 80006fa:	617b      	str	r3, [r7, #20]
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	2b02      	cmp	r3, #2
 8000700:	ddd8      	ble.n	80006b4 <Gyro_GetXYZ+0x72>
	}
}
 8000702:	bf00      	nop
 8000704:	bf00      	nop
 8000706:	3718      	adds	r7, #24
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000712:	f001 f89d 	bl	8001850 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000716:	f000 f8f5 	bl	8000904 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071a:	f000 f9dd 	bl	8000ad8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800071e:	f000 f95d 	bl	80009dc <MX_I2C1_Init>
  MX_SPI1_Init();
 8000722:	f000 f99b 	bl	8000a5c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000726:	f000 fbb9 	bl	8000e9c <MX_USB_DEVICE_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800072a:	f000 f94b 	bl	80009c4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  Gyro_Ini();
 800072e:	f7ff ff4b 	bl	80005c8 <Gyro_Ini>
  Accel_Ini();
 8000732:	f7ff fe26 	bl	8000382 <Accel_Ini>
  Accel_GetXYZ(AccelData);
 8000736:	486d      	ldr	r0, [pc, #436]	@ (80008ec <main+0x1e0>)
 8000738:	f7ff fe54 	bl	80003e4 <Accel_GetXYZ>
  Gyro_GetXYZ(GyroData);
 800073c:	486c      	ldr	r0, [pc, #432]	@ (80008f0 <main+0x1e4>)
 800073e:	f7ff ff80 	bl	8000642 <Gyro_GetXYZ>
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_14,GPIO_PIN_RESET);
	  sprintf(str1,"Hi");
	  CDC_Transmit_FS((uint8_t*)str1, strlen(str1));
	  HAL_Delay(500);
	  */
	  Accel_GetXYZ(AccelData);
 8000742:	486a      	ldr	r0, [pc, #424]	@ (80008ec <main+0x1e0>)
 8000744:	f7ff fe4e 	bl	80003e4 <Accel_GetXYZ>
	  sprintf(str1,"gX: %06d; gY: %06d; gZ: %06d; \n\r", GyroData[0], GyroData[1], GyroData[2]);
 8000748:	4b69      	ldr	r3, [pc, #420]	@ (80008f0 <main+0x1e4>)
 800074a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800074e:	461a      	mov	r2, r3
 8000750:	4b67      	ldr	r3, [pc, #412]	@ (80008f0 <main+0x1e4>)
 8000752:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000756:	4619      	mov	r1, r3
 8000758:	4b65      	ldr	r3, [pc, #404]	@ (80008f0 <main+0x1e4>)
 800075a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	460b      	mov	r3, r1
 8000762:	4964      	ldr	r1, [pc, #400]	@ (80008f4 <main+0x1e8>)
 8000764:	4864      	ldr	r0, [pc, #400]	@ (80008f8 <main+0x1ec>)
 8000766:	f009 fd81 	bl	800a26c <siprintf>
	  HAL_Delay(500);
 800076a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800076e:	f001 f8d5 	bl	800191c <HAL_Delay>
	  /*HAL_UART_Transmit(&huart1,(uint8_t*)str1, strlen(str1),0x1000);*/
	  CDC_Transmit_FS((uint8_t*)str1, strlen(str1));
 8000772:	4861      	ldr	r0, [pc, #388]	@ (80008f8 <main+0x1ec>)
 8000774:	f7ff fd2c 	bl	80001d0 <strlen>
 8000778:	4603      	mov	r3, r0
 800077a:	4619      	mov	r1, r3
 800077c:	485e      	ldr	r0, [pc, #376]	@ (80008f8 <main+0x1ec>)
 800077e:	f000 fc4b 	bl	8001018 <CDC_Transmit_FS>
	  if(AccelData[0] > 1500)
 8000782:	4b5a      	ldr	r3, [pc, #360]	@ (80008ec <main+0x1e0>)
 8000784:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000788:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800078c:	4293      	cmp	r3, r2
 800078e:	dd2c      	ble.n	80007ea <main+0xde>
	  {
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11 , GPIO_PIN_SET);
 8000790:	2201      	movs	r2, #1
 8000792:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000796:	4859      	ldr	r0, [pc, #356]	@ (80008fc <main+0x1f0>)
 8000798:	f001 fb70 	bl	8001e7c <HAL_GPIO_WritePin>
	      if(AccelData[1] > 1500)
 800079c:	4b53      	ldr	r3, [pc, #332]	@ (80008ec <main+0x1e0>)
 800079e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80007a2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80007a6:	4293      	cmp	r3, r2
 80007a8:	dd0c      	ble.n	80007c4 <main+0xb8>
	      {
	    	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11 , GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007b0:	4852      	ldr	r0, [pc, #328]	@ (80008fc <main+0x1f0>)
 80007b2:	f001 fb63 	bl	8001e7c <HAL_GPIO_WritePin>
	    	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12 , GPIO_PIN_SET);
 80007b6:	2201      	movs	r2, #1
 80007b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007bc:	484f      	ldr	r0, [pc, #316]	@ (80008fc <main+0x1f0>)
 80007be:	f001 fb5d 	bl	8001e7c <HAL_GPIO_WritePin>
 80007c2:	e05f      	b.n	8000884 <main+0x178>
	      }
	      else if(AccelData[1] < -1500)
 80007c4:	4b49      	ldr	r3, [pc, #292]	@ (80008ec <main+0x1e0>)
 80007c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80007ca:	4a4d      	ldr	r2, [pc, #308]	@ (8000900 <main+0x1f4>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	da59      	bge.n	8000884 <main+0x178>
	      {
	    	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11 , GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007d6:	4849      	ldr	r0, [pc, #292]	@ (80008fc <main+0x1f0>)
 80007d8:	f001 fb50 	bl	8001e7c <HAL_GPIO_WritePin>
	    	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10 , GPIO_PIN_SET);
 80007dc:	2201      	movs	r2, #1
 80007de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007e2:	4846      	ldr	r0, [pc, #280]	@ (80008fc <main+0x1f0>)
 80007e4:	f001 fb4a 	bl	8001e7c <HAL_GPIO_WritePin>
 80007e8:	e04c      	b.n	8000884 <main+0x178>
	      }
	  }
	  else if(AccelData[0] < -1500)
 80007ea:	4b40      	ldr	r3, [pc, #256]	@ (80008ec <main+0x1e0>)
 80007ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007f0:	4a43      	ldr	r2, [pc, #268]	@ (8000900 <main+0x1f4>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	da2c      	bge.n	8000850 <main+0x144>
	  {
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 80007f6:	2201      	movs	r2, #1
 80007f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007fc:	483f      	ldr	r0, [pc, #252]	@ (80008fc <main+0x1f0>)
 80007fe:	f001 fb3d 	bl	8001e7c <HAL_GPIO_WritePin>
	          if(AccelData[1] > 1500)
 8000802:	4b3a      	ldr	r3, [pc, #232]	@ (80008ec <main+0x1e0>)
 8000804:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000808:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800080c:	4293      	cmp	r3, r2
 800080e:	dd0c      	ble.n	800082a <main+0x11e>
	          {
	        	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000816:	4839      	ldr	r0, [pc, #228]	@ (80008fc <main+0x1f0>)
 8000818:	f001 fb30 	bl	8001e7c <HAL_GPIO_WritePin>
	        	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14 , GPIO_PIN_SET);
 800081c:	2201      	movs	r2, #1
 800081e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000822:	4836      	ldr	r0, [pc, #216]	@ (80008fc <main+0x1f0>)
 8000824:	f001 fb2a 	bl	8001e7c <HAL_GPIO_WritePin>
 8000828:	e02c      	b.n	8000884 <main+0x178>
	          }
	  else if(AccelData[1] < -1500)
 800082a:	4b30      	ldr	r3, [pc, #192]	@ (80008ec <main+0x1e0>)
 800082c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000830:	4a33      	ldr	r2, [pc, #204]	@ (8000900 <main+0x1f4>)
 8000832:	4293      	cmp	r3, r2
 8000834:	da26      	bge.n	8000884 <main+0x178>

	   {
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15 , GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800083c:	482f      	ldr	r0, [pc, #188]	@ (80008fc <main+0x1f0>)
 800083e:	f001 fb1d 	bl	8001e7c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8 , GPIO_PIN_SET);
 8000842:	2201      	movs	r2, #1
 8000844:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000848:	482c      	ldr	r0, [pc, #176]	@ (80008fc <main+0x1f0>)
 800084a:	f001 fb17 	bl	8001e7c <HAL_GPIO_WritePin>
 800084e:	e019      	b.n	8000884 <main+0x178>
	   }
	   }
	  else
	  {
	          if(AccelData[1] > 1500)
 8000850:	4b26      	ldr	r3, [pc, #152]	@ (80008ec <main+0x1e0>)
 8000852:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000856:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800085a:	4293      	cmp	r3, r2
 800085c:	dd06      	ble.n	800086c <main+0x160>
	          {
	        	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13 , GPIO_PIN_SET);
 800085e:	2201      	movs	r2, #1
 8000860:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000864:	4825      	ldr	r0, [pc, #148]	@ (80008fc <main+0x1f0>)
 8000866:	f001 fb09 	bl	8001e7c <HAL_GPIO_WritePin>
 800086a:	e00b      	b.n	8000884 <main+0x178>
	          }

	          else if(AccelData[1] < -1500)
 800086c:	4b1f      	ldr	r3, [pc, #124]	@ (80008ec <main+0x1e0>)
 800086e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000872:	4a23      	ldr	r2, [pc, #140]	@ (8000900 <main+0x1f4>)
 8000874:	4293      	cmp	r3, r2
 8000876:	da05      	bge.n	8000884 <main+0x178>
	          {
	        	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9 , GPIO_PIN_SET);
 8000878:	2201      	movs	r2, #1
 800087a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800087e:	481f      	ldr	r0, [pc, #124]	@ (80008fc <main+0x1f0>)
 8000880:	f001 fafc 	bl	8001e7c <HAL_GPIO_WritePin>
	          }
	  }
	  HAL_Delay(50);
 8000884:	2032      	movs	r0, #50	@ 0x32
 8000886:	f001 f849 	bl	800191c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000890:	481a      	ldr	r0, [pc, #104]	@ (80008fc <main+0x1f0>)
 8000892:	f001 faf3 	bl	8001e7c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15 , GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800089c:	4817      	ldr	r0, [pc, #92]	@ (80008fc <main+0x1f0>)
 800089e:	f001 faed 	bl	8001e7c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11 , GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008a8:	4814      	ldr	r0, [pc, #80]	@ (80008fc <main+0x1f0>)
 80008aa:	f001 fae7 	bl	8001e7c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8 , GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008b4:	4811      	ldr	r0, [pc, #68]	@ (80008fc <main+0x1f0>)
 80008b6:	f001 fae1 	bl	8001e7c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13 , GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008c0:	480e      	ldr	r0, [pc, #56]	@ (80008fc <main+0x1f0>)
 80008c2:	f001 fadb 	bl	8001e7c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14 , GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008cc:	480b      	ldr	r0, [pc, #44]	@ (80008fc <main+0x1f0>)
 80008ce:	f001 fad5 	bl	8001e7c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12 , GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008d8:	4808      	ldr	r0, [pc, #32]	@ (80008fc <main+0x1f0>)
 80008da:	f001 facf 	bl	8001e7c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10 , GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008e4:	4805      	ldr	r0, [pc, #20]	@ (80008fc <main+0x1f0>)
 80008e6:	f001 fac9 	bl	8001e7c <HAL_GPIO_WritePin>
  {
 80008ea:	e72a      	b.n	8000742 <main+0x36>
 80008ec:	20000304 	.word	0x20000304
 80008f0:	2000030c 	.word	0x2000030c
 80008f4:	0800abc4 	.word	0x0800abc4
 80008f8:	200002a0 	.word	0x200002a0
 80008fc:	48001000 	.word	0x48001000
 8000900:	fffffa24 	.word	0xfffffa24

08000904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b09e      	sub	sp, #120	@ 0x78
 8000908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800090e:	2228      	movs	r2, #40	@ 0x28
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f009 fcca 	bl	800a2ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000918:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000928:	463b      	mov	r3, r7
 800092a:	223c      	movs	r2, #60	@ 0x3c
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f009 fcbc 	bl	800a2ac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000934:	2303      	movs	r3, #3
 8000936:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000938:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800093c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000942:	2301      	movs	r3, #1
 8000944:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000946:	2310      	movs	r3, #16
 8000948:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094a:	2302      	movs	r3, #2
 800094c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800094e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000952:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000954:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000958:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800095a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800095e:	4618      	mov	r0, r3
 8000960:	f003 fda8 	bl	80044b4 <HAL_RCC_OscConfig>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800096a:	f000 f947 	bl	8000bfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096e:	230f      	movs	r3, #15
 8000970:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000972:	2302      	movs	r3, #2
 8000974:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000976:	2300      	movs	r3, #0
 8000978:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800097a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800097e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000980:	2300      	movs	r3, #0
 8000982:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000984:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000988:	2102      	movs	r1, #2
 800098a:	4618      	mov	r0, r3
 800098c:	f004 fdd0 	bl	8005530 <HAL_RCC_ClockConfig>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000996:	f000 f931 	bl	8000bfc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 800099a:	4b09      	ldr	r3, [pc, #36]	@ (80009c0 <SystemClock_Config+0xbc>)
 800099c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80009a2:	2300      	movs	r3, #0
 80009a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009a6:	463b      	mov	r3, r7
 80009a8:	4618      	mov	r0, r3
 80009aa:	f004 ff91 	bl	80058d0 <HAL_RCCEx_PeriphCLKConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80009b4:	f000 f922 	bl	8000bfc <Error_Handler>
  }
}
 80009b8:	bf00      	nop
 80009ba:	3778      	adds	r7, #120	@ 0x78
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	00020020 	.word	0x00020020

080009c4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* EXTI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2100      	movs	r1, #0
 80009cc:	2007      	movs	r0, #7
 80009ce:	f001 f8a4 	bl	8001b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80009d2:	2007      	movs	r0, #7
 80009d4:	f001 f8bd 	bl	8001b52 <HAL_NVIC_EnableIRQ>
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}

080009dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a50 <MX_I2C1_Init+0x74>)
 80009e2:	4a1c      	ldr	r2, [pc, #112]	@ (8000a54 <MX_I2C1_Init+0x78>)
 80009e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010020A;
 80009e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a50 <MX_I2C1_Init+0x74>)
 80009e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a58 <MX_I2C1_Init+0x7c>)
 80009ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009ec:	4b18      	ldr	r3, [pc, #96]	@ (8000a50 <MX_I2C1_Init+0x74>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f2:	4b17      	ldr	r3, [pc, #92]	@ (8000a50 <MX_I2C1_Init+0x74>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f8:	4b15      	ldr	r3, [pc, #84]	@ (8000a50 <MX_I2C1_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009fe:	4b14      	ldr	r3, [pc, #80]	@ (8000a50 <MX_I2C1_Init+0x74>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a04:	4b12      	ldr	r3, [pc, #72]	@ (8000a50 <MX_I2C1_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <MX_I2C1_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	@ (8000a50 <MX_I2C1_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a16:	480e      	ldr	r0, [pc, #56]	@ (8000a50 <MX_I2C1_Init+0x74>)
 8000a18:	f001 fa60 	bl	8001edc <HAL_I2C_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a22:	f000 f8eb 	bl	8000bfc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a26:	2100      	movs	r1, #0
 8000a28:	4809      	ldr	r0, [pc, #36]	@ (8000a50 <MX_I2C1_Init+0x74>)
 8000a2a:	f001 ffe3 	bl	80029f4 <HAL_I2CEx_ConfigAnalogFilter>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a34:	f000 f8e2 	bl	8000bfc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4805      	ldr	r0, [pc, #20]	@ (8000a50 <MX_I2C1_Init+0x74>)
 8000a3c:	f002 f825 	bl	8002a8a <HAL_I2CEx_ConfigDigitalFilter>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a46:	f000 f8d9 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	200001e8 	.word	0x200001e8
 8000a54:	40005400 	.word	0x40005400
 8000a58:	0010020a 	.word	0x0010020a

08000a5c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a60:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad0 <MX_SPI1_Init+0x74>)
 8000a62:	4a1c      	ldr	r2, [pc, #112]	@ (8000ad4 <MX_SPI1_Init+0x78>)
 8000a64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a66:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad0 <MX_SPI1_Init+0x74>)
 8000a68:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a6e:	4b18      	ldr	r3, [pc, #96]	@ (8000ad0 <MX_SPI1_Init+0x74>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a74:	4b16      	ldr	r3, [pc, #88]	@ (8000ad0 <MX_SPI1_Init+0x74>)
 8000a76:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000a7a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a7c:	4b14      	ldr	r3, [pc, #80]	@ (8000ad0 <MX_SPI1_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a82:	4b13      	ldr	r3, [pc, #76]	@ (8000ad0 <MX_SPI1_Init+0x74>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a88:	4b11      	ldr	r3, [pc, #68]	@ (8000ad0 <MX_SPI1_Init+0x74>)
 8000a8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a8e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a90:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad0 <MX_SPI1_Init+0x74>)
 8000a92:	2218      	movs	r2, #24
 8000a94:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad0 <MX_SPI1_Init+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad0 <MX_SPI1_Init+0x74>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad0 <MX_SPI1_Init+0x74>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000aa8:	4b09      	ldr	r3, [pc, #36]	@ (8000ad0 <MX_SPI1_Init+0x74>)
 8000aaa:	2207      	movs	r2, #7
 8000aac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000aae:	4b08      	ldr	r3, [pc, #32]	@ (8000ad0 <MX_SPI1_Init+0x74>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <MX_SPI1_Init+0x74>)
 8000ab6:	2208      	movs	r2, #8
 8000ab8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000aba:	4805      	ldr	r0, [pc, #20]	@ (8000ad0 <MX_SPI1_Init+0x74>)
 8000abc:	f005 f8b8 	bl	8005c30 <HAL_SPI_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ac6:	f000 f899 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	2000023c 	.word	0x2000023c
 8000ad4:	40013000 	.word	0x40013000

08000ad8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	@ 0x28
 8000adc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
 8000aec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aee:	4b38      	ldr	r3, [pc, #224]	@ (8000bd0 <MX_GPIO_Init+0xf8>)
 8000af0:	695b      	ldr	r3, [r3, #20]
 8000af2:	4a37      	ldr	r2, [pc, #220]	@ (8000bd0 <MX_GPIO_Init+0xf8>)
 8000af4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000af8:	6153      	str	r3, [r2, #20]
 8000afa:	4b35      	ldr	r3, [pc, #212]	@ (8000bd0 <MX_GPIO_Init+0xf8>)
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b06:	4b32      	ldr	r3, [pc, #200]	@ (8000bd0 <MX_GPIO_Init+0xf8>)
 8000b08:	695b      	ldr	r3, [r3, #20]
 8000b0a:	4a31      	ldr	r2, [pc, #196]	@ (8000bd0 <MX_GPIO_Init+0xf8>)
 8000b0c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b10:	6153      	str	r3, [r2, #20]
 8000b12:	4b2f      	ldr	r3, [pc, #188]	@ (8000bd0 <MX_GPIO_Init+0xf8>)
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1e:	4b2c      	ldr	r3, [pc, #176]	@ (8000bd0 <MX_GPIO_Init+0xf8>)
 8000b20:	695b      	ldr	r3, [r3, #20]
 8000b22:	4a2b      	ldr	r2, [pc, #172]	@ (8000bd0 <MX_GPIO_Init+0xf8>)
 8000b24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b28:	6153      	str	r3, [r2, #20]
 8000b2a:	4b29      	ldr	r3, [pc, #164]	@ (8000bd0 <MX_GPIO_Init+0xf8>)
 8000b2c:	695b      	ldr	r3, [r3, #20]
 8000b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b32:	60bb      	str	r3, [r7, #8]
 8000b34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b36:	4b26      	ldr	r3, [pc, #152]	@ (8000bd0 <MX_GPIO_Init+0xf8>)
 8000b38:	695b      	ldr	r3, [r3, #20]
 8000b3a:	4a25      	ldr	r2, [pc, #148]	@ (8000bd0 <MX_GPIO_Init+0xf8>)
 8000b3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b40:	6153      	str	r3, [r2, #20]
 8000b42:	4b23      	ldr	r3, [pc, #140]	@ (8000bd0 <MX_GPIO_Init+0xf8>)
 8000b44:	695b      	ldr	r3, [r3, #20]
 8000b46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000b54:	481f      	ldr	r0, [pc, #124]	@ (8000bd4 <MX_GPIO_Init+0xfc>)
 8000b56:	f001 f991 	bl	8001e7c <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8000b5a:	2314      	movs	r3, #20
 8000b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b5e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4819      	ldr	r0, [pc, #100]	@ (8000bd4 <MX_GPIO_Init+0xfc>)
 8000b70:	f001 f80a 	bl	8001b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE3 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000b74:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8000b78:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4811      	ldr	r0, [pc, #68]	@ (8000bd4 <MX_GPIO_Init+0xfc>)
 8000b8e:	f000 fffb 	bl	8001b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b92:	2301      	movs	r3, #1
 8000b94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b96:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000baa:	f000 ffed 	bl	8001b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bb2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4804      	ldr	r0, [pc, #16]	@ (8000bd4 <MX_GPIO_Init+0xfc>)
 8000bc4:	f000 ffe0 	bl	8001b88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bc8:	bf00      	nop
 8000bca:	3728      	adds	r7, #40	@ 0x28
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	48001000 	.word	0x48001000

08000bd8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_1)
 8000be2:	88fb      	ldrh	r3, [r7, #6]
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d102      	bne.n	8000bee <HAL_GPIO_EXTI_Callback+0x16>
	{
		Gyro_GetXYZ(GyroData);
 8000be8:	4803      	ldr	r0, [pc, #12]	@ (8000bf8 <HAL_GPIO_EXTI_Callback+0x20>)
 8000bea:	f7ff fd2a 	bl	8000642 <Gyro_GetXYZ>
	}
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	2000030c 	.word	0x2000030c

08000bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c00:	b672      	cpsid	i
}
 8000c02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <Error_Handler+0x8>

08000c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c4c <HAL_MspInit+0x44>)
 8000c10:	699b      	ldr	r3, [r3, #24]
 8000c12:	4a0e      	ldr	r2, [pc, #56]	@ (8000c4c <HAL_MspInit+0x44>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6193      	str	r3, [r2, #24]
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c4c <HAL_MspInit+0x44>)
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c26:	4b09      	ldr	r3, [pc, #36]	@ (8000c4c <HAL_MspInit+0x44>)
 8000c28:	69db      	ldr	r3, [r3, #28]
 8000c2a:	4a08      	ldr	r2, [pc, #32]	@ (8000c4c <HAL_MspInit+0x44>)
 8000c2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c30:	61d3      	str	r3, [r2, #28]
 8000c32:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <HAL_MspInit+0x44>)
 8000c34:	69db      	ldr	r3, [r3, #28]
 8000c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40021000 	.word	0x40021000

08000c50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	@ 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a17      	ldr	r2, [pc, #92]	@ (8000ccc <HAL_I2C_MspInit+0x7c>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d127      	bne.n	8000cc2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c72:	4b17      	ldr	r3, [pc, #92]	@ (8000cd0 <HAL_I2C_MspInit+0x80>)
 8000c74:	695b      	ldr	r3, [r3, #20]
 8000c76:	4a16      	ldr	r2, [pc, #88]	@ (8000cd0 <HAL_I2C_MspInit+0x80>)
 8000c78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c7c:	6153      	str	r3, [r2, #20]
 8000c7e:	4b14      	ldr	r3, [pc, #80]	@ (8000cd0 <HAL_I2C_MspInit+0x80>)
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c8a:	23c0      	movs	r3, #192	@ 0xc0
 8000c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c8e:	2312      	movs	r3, #18
 8000c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c96:	2303      	movs	r3, #3
 8000c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c9a:	2304      	movs	r3, #4
 8000c9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	480b      	ldr	r0, [pc, #44]	@ (8000cd4 <HAL_I2C_MspInit+0x84>)
 8000ca6:	f000 ff6f 	bl	8001b88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000caa:	4b09      	ldr	r3, [pc, #36]	@ (8000cd0 <HAL_I2C_MspInit+0x80>)
 8000cac:	69db      	ldr	r3, [r3, #28]
 8000cae:	4a08      	ldr	r2, [pc, #32]	@ (8000cd0 <HAL_I2C_MspInit+0x80>)
 8000cb0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cb4:	61d3      	str	r3, [r2, #28]
 8000cb6:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <HAL_I2C_MspInit+0x80>)
 8000cb8:	69db      	ldr	r3, [r3, #28]
 8000cba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000cc2:	bf00      	nop
 8000cc4:	3728      	adds	r7, #40	@ 0x28
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40005400 	.word	0x40005400
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	48000400 	.word	0x48000400

08000cd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08a      	sub	sp, #40	@ 0x28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a17      	ldr	r2, [pc, #92]	@ (8000d54 <HAL_SPI_MspInit+0x7c>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d128      	bne.n	8000d4c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cfa:	4b17      	ldr	r3, [pc, #92]	@ (8000d58 <HAL_SPI_MspInit+0x80>)
 8000cfc:	699b      	ldr	r3, [r3, #24]
 8000cfe:	4a16      	ldr	r2, [pc, #88]	@ (8000d58 <HAL_SPI_MspInit+0x80>)
 8000d00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d04:	6193      	str	r3, [r2, #24]
 8000d06:	4b14      	ldr	r3, [pc, #80]	@ (8000d58 <HAL_SPI_MspInit+0x80>)
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d12:	4b11      	ldr	r3, [pc, #68]	@ (8000d58 <HAL_SPI_MspInit+0x80>)
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	4a10      	ldr	r2, [pc, #64]	@ (8000d58 <HAL_SPI_MspInit+0x80>)
 8000d18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d1c:	6153      	str	r3, [r2, #20]
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d58 <HAL_SPI_MspInit+0x80>)
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d2a:	23e0      	movs	r3, #224	@ 0xe0
 8000d2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d36:	2303      	movs	r3, #3
 8000d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d3a:	2305      	movs	r3, #5
 8000d3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4619      	mov	r1, r3
 8000d44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d48:	f000 ff1e 	bl	8001b88 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d4c:	bf00      	nop
 8000d4e:	3728      	adds	r7, #40	@ 0x28
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40013000 	.word	0x40013000
 8000d58:	40021000 	.word	0x40021000

08000d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <NMI_Handler+0x4>

08000d64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <HardFault_Handler+0x4>

08000d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <MemManage_Handler+0x4>

08000d74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <BusFault_Handler+0x4>

08000d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <UsageFault_Handler+0x4>

08000d84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db2:	f000 fd93 	bl	80018dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}

08000dba <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000dbe:	2002      	movs	r0, #2
 8000dc0:	f001 f874 	bl	8001eac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000dcc:	4802      	ldr	r0, [pc, #8]	@ (8000dd8 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000dce:	f001 ff95 	bl	8002cfc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000fdc 	.word	0x20000fdc

08000ddc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de4:	4a14      	ldr	r2, [pc, #80]	@ (8000e38 <_sbrk+0x5c>)
 8000de6:	4b15      	ldr	r3, [pc, #84]	@ (8000e3c <_sbrk+0x60>)
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df0:	4b13      	ldr	r3, [pc, #76]	@ (8000e40 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d102      	bne.n	8000dfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df8:	4b11      	ldr	r3, [pc, #68]	@ (8000e40 <_sbrk+0x64>)
 8000dfa:	4a12      	ldr	r2, [pc, #72]	@ (8000e44 <_sbrk+0x68>)
 8000dfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dfe:	4b10      	ldr	r3, [pc, #64]	@ (8000e40 <_sbrk+0x64>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4413      	add	r3, r2
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d207      	bcs.n	8000e1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e0c:	f009 fa56 	bl	800a2bc <__errno>
 8000e10:	4603      	mov	r3, r0
 8000e12:	220c      	movs	r2, #12
 8000e14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e16:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1a:	e009      	b.n	8000e30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e1c:	4b08      	ldr	r3, [pc, #32]	@ (8000e40 <_sbrk+0x64>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e22:	4b07      	ldr	r3, [pc, #28]	@ (8000e40 <_sbrk+0x64>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	4a05      	ldr	r2, [pc, #20]	@ (8000e40 <_sbrk+0x64>)
 8000e2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	2000a000 	.word	0x2000a000
 8000e3c:	00004000 	.word	0x00004000
 8000e40:	20000314 	.word	0x20000314
 8000e44:	20001620 	.word	0x20001620

08000e48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e80 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e4c:	f000 fcee 	bl	800182c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e50:	480c      	ldr	r0, [pc, #48]	@ (8000e84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e52:	490d      	ldr	r1, [pc, #52]	@ (8000e88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e54:	4a0d      	ldr	r2, [pc, #52]	@ (8000e8c <LoopForever+0xe>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e58:	e002      	b.n	8000e60 <LoopCopyDataInit>

08000e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5e:	3304      	adds	r3, #4

08000e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e64:	d3f9      	bcc.n	8000e5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e66:	4a0a      	ldr	r2, [pc, #40]	@ (8000e90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e68:	4c0a      	ldr	r4, [pc, #40]	@ (8000e94 <LoopForever+0x16>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e6c:	e001      	b.n	8000e72 <LoopFillZerobss>

08000e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e70:	3204      	adds	r2, #4

08000e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e74:	d3fb      	bcc.n	8000e6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e76:	f009 fa27 	bl	800a2c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e7a:	f7ff fc47 	bl	800070c <main>

08000e7e <LoopForever>:

LoopForever:
    b LoopForever
 8000e7e:	e7fe      	b.n	8000e7e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e80:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e88:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8000e8c:	0800aca4 	.word	0x0800aca4
  ldr r2, =_sbss
 8000e90:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8000e94:	20001620 	.word	0x20001620

08000e98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e98:	e7fe      	b.n	8000e98 <ADC1_2_IRQHandler>
	...

08000e9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	4912      	ldr	r1, [pc, #72]	@ (8000eec <MX_USB_DEVICE_Init+0x50>)
 8000ea4:	4812      	ldr	r0, [pc, #72]	@ (8000ef0 <MX_USB_DEVICE_Init+0x54>)
 8000ea6:	f008 f943 	bl	8009130 <USBD_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8000eb0:	f7ff fea4 	bl	8000bfc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8000eb4:	490f      	ldr	r1, [pc, #60]	@ (8000ef4 <MX_USB_DEVICE_Init+0x58>)
 8000eb6:	480e      	ldr	r0, [pc, #56]	@ (8000ef0 <MX_USB_DEVICE_Init+0x54>)
 8000eb8:	f008 f965 	bl	8009186 <USBD_RegisterClass>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8000ec2:	f7ff fe9b 	bl	8000bfc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8000ec6:	490c      	ldr	r1, [pc, #48]	@ (8000ef8 <MX_USB_DEVICE_Init+0x5c>)
 8000ec8:	4809      	ldr	r0, [pc, #36]	@ (8000ef0 <MX_USB_DEVICE_Init+0x54>)
 8000eca:	f008 f893 	bl	8008ff4 <USBD_CDC_RegisterInterface>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8000ed4:	f7ff fe92 	bl	8000bfc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8000ed8:	4805      	ldr	r0, [pc, #20]	@ (8000ef0 <MX_USB_DEVICE_Init+0x54>)
 8000eda:	f008 f96e 	bl	80091ba <USBD_Start>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8000ee4:	f7ff fe8a 	bl	8000bfc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000010 	.word	0x20000010
 8000ef0:	20000318 	.word	0x20000318
 8000ef4:	20000078 	.word	0x20000078
 8000ef8:	20000000 	.word	0x20000000

08000efc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8000f00:	2200      	movs	r2, #0
 8000f02:	4905      	ldr	r1, [pc, #20]	@ (8000f18 <CDC_Init_FS+0x1c>)
 8000f04:	4805      	ldr	r0, [pc, #20]	@ (8000f1c <CDC_Init_FS+0x20>)
 8000f06:	f008 f88c 	bl	8009022 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8000f0a:	4905      	ldr	r1, [pc, #20]	@ (8000f20 <CDC_Init_FS+0x24>)
 8000f0c:	4803      	ldr	r0, [pc, #12]	@ (8000f1c <CDC_Init_FS+0x20>)
 8000f0e:	f008 f8a2 	bl	8009056 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8000f12:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	200009dc 	.word	0x200009dc
 8000f1c:	20000318 	.word	0x20000318
 8000f20:	200005dc 	.word	0x200005dc

08000f24 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8000f28:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	6039      	str	r1, [r7, #0]
 8000f3e:	71fb      	strb	r3, [r7, #7]
 8000f40:	4613      	mov	r3, r2
 8000f42:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	2b23      	cmp	r3, #35	@ 0x23
 8000f48:	d84a      	bhi.n	8000fe0 <CDC_Control_FS+0xac>
 8000f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8000f50 <CDC_Control_FS+0x1c>)
 8000f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f50:	08000fe1 	.word	0x08000fe1
 8000f54:	08000fe1 	.word	0x08000fe1
 8000f58:	08000fe1 	.word	0x08000fe1
 8000f5c:	08000fe1 	.word	0x08000fe1
 8000f60:	08000fe1 	.word	0x08000fe1
 8000f64:	08000fe1 	.word	0x08000fe1
 8000f68:	08000fe1 	.word	0x08000fe1
 8000f6c:	08000fe1 	.word	0x08000fe1
 8000f70:	08000fe1 	.word	0x08000fe1
 8000f74:	08000fe1 	.word	0x08000fe1
 8000f78:	08000fe1 	.word	0x08000fe1
 8000f7c:	08000fe1 	.word	0x08000fe1
 8000f80:	08000fe1 	.word	0x08000fe1
 8000f84:	08000fe1 	.word	0x08000fe1
 8000f88:	08000fe1 	.word	0x08000fe1
 8000f8c:	08000fe1 	.word	0x08000fe1
 8000f90:	08000fe1 	.word	0x08000fe1
 8000f94:	08000fe1 	.word	0x08000fe1
 8000f98:	08000fe1 	.word	0x08000fe1
 8000f9c:	08000fe1 	.word	0x08000fe1
 8000fa0:	08000fe1 	.word	0x08000fe1
 8000fa4:	08000fe1 	.word	0x08000fe1
 8000fa8:	08000fe1 	.word	0x08000fe1
 8000fac:	08000fe1 	.word	0x08000fe1
 8000fb0:	08000fe1 	.word	0x08000fe1
 8000fb4:	08000fe1 	.word	0x08000fe1
 8000fb8:	08000fe1 	.word	0x08000fe1
 8000fbc:	08000fe1 	.word	0x08000fe1
 8000fc0:	08000fe1 	.word	0x08000fe1
 8000fc4:	08000fe1 	.word	0x08000fe1
 8000fc8:	08000fe1 	.word	0x08000fe1
 8000fcc:	08000fe1 	.word	0x08000fe1
 8000fd0:	08000fe1 	.word	0x08000fe1
 8000fd4:	08000fe1 	.word	0x08000fe1
 8000fd8:	08000fe1 	.word	0x08000fe1
 8000fdc:	08000fe1 	.word	0x08000fe1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8000fe0:	bf00      	nop
  }

  return (USBD_OK);
 8000fe2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	4805      	ldr	r0, [pc, #20]	@ (8001014 <CDC_Receive_FS+0x24>)
 8000ffe:	f008 f82a 	bl	8009056 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8001002:	4804      	ldr	r0, [pc, #16]	@ (8001014 <CDC_Receive_FS+0x24>)
 8001004:	f008 f86a 	bl	80090dc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8001008:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000318 	.word	0x20000318

08001018 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8001024:	2300      	movs	r3, #0
 8001026:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8001028:	4b0d      	ldr	r3, [pc, #52]	@ (8001060 <CDC_Transmit_FS+0x48>)
 800102a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800102e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800103a:	2301      	movs	r3, #1
 800103c:	e00b      	b.n	8001056 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800103e:	887b      	ldrh	r3, [r7, #2]
 8001040:	461a      	mov	r2, r3
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	4806      	ldr	r0, [pc, #24]	@ (8001060 <CDC_Transmit_FS+0x48>)
 8001046:	f007 ffec 	bl	8009022 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800104a:	4805      	ldr	r0, [pc, #20]	@ (8001060 <CDC_Transmit_FS+0x48>)
 800104c:	f008 f817 	bl	800907e <USBD_CDC_TransmitPacket>
 8001050:	4603      	mov	r3, r0
 8001052:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8001054:	7bfb      	ldrb	r3, [r7, #15]
}
 8001056:	4618      	mov	r0, r3
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000318 	.word	0x20000318

08001064 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	6039      	str	r1, [r7, #0]
 800106e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	2212      	movs	r2, #18
 8001074:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8001076:	4b03      	ldr	r3, [pc, #12]	@ (8001084 <USBD_FS_DeviceDescriptor+0x20>)
}
 8001078:	4618      	mov	r0, r3
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	2000002c 	.word	0x2000002c

08001088 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	6039      	str	r1, [r7, #0]
 8001092:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	2204      	movs	r2, #4
 8001098:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800109a:	4b03      	ldr	r3, [pc, #12]	@ (80010a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	20000040 	.word	0x20000040

080010ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d105      	bne.n	80010ca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	4907      	ldr	r1, [pc, #28]	@ (80010e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80010c2:	4808      	ldr	r0, [pc, #32]	@ (80010e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80010c4:	f008 fff4 	bl	800a0b0 <USBD_GetString>
 80010c8:	e004      	b.n	80010d4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80010ca:	683a      	ldr	r2, [r7, #0]
 80010cc:	4904      	ldr	r1, [pc, #16]	@ (80010e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80010ce:	4805      	ldr	r0, [pc, #20]	@ (80010e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80010d0:	f008 ffee 	bl	800a0b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80010d4:	4b02      	ldr	r3, [pc, #8]	@ (80010e0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000ddc 	.word	0x20000ddc
 80010e4:	0800abe8 	.word	0x0800abe8

080010e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	6039      	str	r1, [r7, #0]
 80010f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	4904      	ldr	r1, [pc, #16]	@ (8001108 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80010f8:	4804      	ldr	r0, [pc, #16]	@ (800110c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80010fa:	f008 ffd9 	bl	800a0b0 <USBD_GetString>
  return USBD_StrDesc;
 80010fe:	4b02      	ldr	r3, [pc, #8]	@ (8001108 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000ddc 	.word	0x20000ddc
 800110c:	0800ac00 	.word	0x0800ac00

08001110 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	6039      	str	r1, [r7, #0]
 800111a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	221a      	movs	r2, #26
 8001120:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8001122:	f000 f843 	bl	80011ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8001126:	4b02      	ldr	r3, [pc, #8]	@ (8001130 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000044 	.word	0x20000044

08001134 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d105      	bne.n	8001152 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8001146:	683a      	ldr	r2, [r7, #0]
 8001148:	4907      	ldr	r1, [pc, #28]	@ (8001168 <USBD_FS_ConfigStrDescriptor+0x34>)
 800114a:	4808      	ldr	r0, [pc, #32]	@ (800116c <USBD_FS_ConfigStrDescriptor+0x38>)
 800114c:	f008 ffb0 	bl	800a0b0 <USBD_GetString>
 8001150:	e004      	b.n	800115c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	4904      	ldr	r1, [pc, #16]	@ (8001168 <USBD_FS_ConfigStrDescriptor+0x34>)
 8001156:	4805      	ldr	r0, [pc, #20]	@ (800116c <USBD_FS_ConfigStrDescriptor+0x38>)
 8001158:	f008 ffaa 	bl	800a0b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800115c:	4b02      	ldr	r3, [pc, #8]	@ (8001168 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000ddc 	.word	0x20000ddc
 800116c:	0800ac14 	.word	0x0800ac14

08001170 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d105      	bne.n	800118e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	4907      	ldr	r1, [pc, #28]	@ (80011a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8001186:	4808      	ldr	r0, [pc, #32]	@ (80011a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8001188:	f008 ff92 	bl	800a0b0 <USBD_GetString>
 800118c:	e004      	b.n	8001198 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800118e:	683a      	ldr	r2, [r7, #0]
 8001190:	4904      	ldr	r1, [pc, #16]	@ (80011a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8001192:	4805      	ldr	r0, [pc, #20]	@ (80011a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8001194:	f008 ff8c 	bl	800a0b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8001198:	4b02      	ldr	r3, [pc, #8]	@ (80011a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000ddc 	.word	0x20000ddc
 80011a8:	0800ac20 	.word	0x0800ac20

080011ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80011b2:	4b0f      	ldr	r3, [pc, #60]	@ (80011f0 <Get_SerialNum+0x44>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80011b8:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <Get_SerialNum+0x48>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80011be:	4b0e      	ldr	r3, [pc, #56]	@ (80011f8 <Get_SerialNum+0x4c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80011c4:	68fa      	ldr	r2, [r7, #12]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d009      	beq.n	80011e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80011d2:	2208      	movs	r2, #8
 80011d4:	4909      	ldr	r1, [pc, #36]	@ (80011fc <Get_SerialNum+0x50>)
 80011d6:	68f8      	ldr	r0, [r7, #12]
 80011d8:	f000 f814 	bl	8001204 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80011dc:	2204      	movs	r2, #4
 80011de:	4908      	ldr	r1, [pc, #32]	@ (8001200 <Get_SerialNum+0x54>)
 80011e0:	68b8      	ldr	r0, [r7, #8]
 80011e2:	f000 f80f 	bl	8001204 <IntToUnicode>
  }
}
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	1ffff7ac 	.word	0x1ffff7ac
 80011f4:	1ffff7b0 	.word	0x1ffff7b0
 80011f8:	1ffff7b4 	.word	0x1ffff7b4
 80011fc:	20000046 	.word	0x20000046
 8001200:	20000056 	.word	0x20000056

08001204 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8001204:	b480      	push	{r7}
 8001206:	b087      	sub	sp, #28
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	4613      	mov	r3, r2
 8001210:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8001216:	2300      	movs	r3, #0
 8001218:	75fb      	strb	r3, [r7, #23]
 800121a:	e027      	b.n	800126c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	0f1b      	lsrs	r3, r3, #28
 8001220:	2b09      	cmp	r3, #9
 8001222:	d80b      	bhi.n	800123c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	0f1b      	lsrs	r3, r3, #28
 8001228:	b2da      	uxtb	r2, r3
 800122a:	7dfb      	ldrb	r3, [r7, #23]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	4619      	mov	r1, r3
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	440b      	add	r3, r1
 8001234:	3230      	adds	r2, #48	@ 0x30
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	701a      	strb	r2, [r3, #0]
 800123a:	e00a      	b.n	8001252 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	0f1b      	lsrs	r3, r3, #28
 8001240:	b2da      	uxtb	r2, r3
 8001242:	7dfb      	ldrb	r3, [r7, #23]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	4619      	mov	r1, r3
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	440b      	add	r3, r1
 800124c:	3237      	adds	r2, #55	@ 0x37
 800124e:	b2d2      	uxtb	r2, r2
 8001250:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	011b      	lsls	r3, r3, #4
 8001256:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8001258:	7dfb      	ldrb	r3, [r7, #23]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	3301      	adds	r3, #1
 800125e:	68ba      	ldr	r2, [r7, #8]
 8001260:	4413      	add	r3, r2
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8001266:	7dfb      	ldrb	r3, [r7, #23]
 8001268:	3301      	adds	r3, #1
 800126a:	75fb      	strb	r3, [r7, #23]
 800126c:	7dfa      	ldrb	r2, [r7, #23]
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	429a      	cmp	r2, r3
 8001272:	d3d3      	bcc.n	800121c <IntToUnicode+0x18>
  }
}
 8001274:	bf00      	nop
 8001276:	bf00      	nop
 8001278:	371c      	adds	r7, #28
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	@ 0x28
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a1c      	ldr	r2, [pc, #112]	@ (8001314 <HAL_PCD_MspInit+0x90>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d131      	bne.n	800130a <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001318 <HAL_PCD_MspInit+0x94>)
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	4a1b      	ldr	r2, [pc, #108]	@ (8001318 <HAL_PCD_MspInit+0x94>)
 80012ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012b0:	6153      	str	r3, [r2, #20]
 80012b2:	4b19      	ldr	r3, [pc, #100]	@ (8001318 <HAL_PCD_MspInit+0x94>)
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80012be:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80012c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	2302      	movs	r3, #2
 80012c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012cc:	2303      	movs	r3, #3
 80012ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80012d0:	230e      	movs	r3, #14
 80012d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	4619      	mov	r1, r3
 80012da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012de:	f000 fc53 	bl	8001b88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80012e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001318 <HAL_PCD_MspInit+0x94>)
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	4a0c      	ldr	r2, [pc, #48]	@ (8001318 <HAL_PCD_MspInit+0x94>)
 80012e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80012ec:	61d3      	str	r3, [r2, #28]
 80012ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001318 <HAL_PCD_MspInit+0x94>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2100      	movs	r1, #0
 80012fe:	2014      	movs	r0, #20
 8001300:	f000 fc0b 	bl	8001b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8001304:	2014      	movs	r0, #20
 8001306:	f000 fc24 	bl	8001b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800130a:	bf00      	nop
 800130c:	3728      	adds	r7, #40	@ 0x28
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40005c00 	.word	0x40005c00
 8001318:	40021000 	.word	0x40021000

0800131c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8001330:	4619      	mov	r1, r3
 8001332:	4610      	mov	r0, r2
 8001334:	f007 ff8a 	bl	800924c <USBD_LL_SetupStage>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 8001352:	78fa      	ldrb	r2, [r7, #3]
 8001354:	6879      	ldr	r1, [r7, #4]
 8001356:	4613      	mov	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4413      	add	r3, r2
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	440b      	add	r3, r1
 8001360:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	78fb      	ldrb	r3, [r7, #3]
 8001368:	4619      	mov	r1, r3
 800136a:	f007 ffbc 	bl	80092e6 <USBD_LL_DataOutStage>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	460b      	mov	r3, r1
 8001380:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 8001388:	78fa      	ldrb	r2, [r7, #3]
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	4613      	mov	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	440b      	add	r3, r1
 8001396:	3324      	adds	r3, #36	@ 0x24
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	78fb      	ldrb	r3, [r7, #3]
 800139c:	4619      	mov	r1, r3
 800139e:	f008 f813 	bl	80093c8 <USBD_LL_DataInStage>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f008 f926 	bl	800960a <USBD_LL_SOF>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b084      	sub	sp, #16
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80013ce:	2301      	movs	r3, #1
 80013d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	795b      	ldrb	r3, [r3, #5]
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d001      	beq.n	80013de <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80013da:	f7ff fc0f 	bl	8000bfc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 80013e4:	7bfa      	ldrb	r2, [r7, #15]
 80013e6:	4611      	mov	r1, r2
 80013e8:	4618      	mov	r0, r3
 80013ea:	f008 f8d3 	bl	8009594 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f008 f88c 	bl	8009512 <USBD_LL_Reset>
}
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8001412:	4618      	mov	r0, r3
 8001414:	f008 f8ce 	bl	80095b4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	7a5b      	ldrb	r3, [r3, #9]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d005      	beq.n	800142c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8001420:	4b04      	ldr	r3, [pc, #16]	@ (8001434 <HAL_PCD_SuspendCallback+0x30>)
 8001422:	691b      	ldr	r3, [r3, #16]
 8001424:	4a03      	ldr	r2, [pc, #12]	@ (8001434 <HAL_PCD_SuspendCallback+0x30>)
 8001426:	f043 0306 	orr.w	r3, r3, #6
 800142a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8001446:	4618      	mov	r0, r3
 8001448:	f008 f8c9 	bl	80095de <USBD_LL_Resume>
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800145c:	4a28      	ldr	r2, [pc, #160]	@ (8001500 <USBD_LL_Init+0xac>)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f8c2 32d0 	str.w	r3, [r2, #720]	@ 0x2d0
  pdev->pData = &hpcd_USB_FS;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a26      	ldr	r2, [pc, #152]	@ (8001500 <USBD_LL_Init+0xac>)
 8001468:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800146c:	4b24      	ldr	r3, [pc, #144]	@ (8001500 <USBD_LL_Init+0xac>)
 800146e:	4a25      	ldr	r2, [pc, #148]	@ (8001504 <USBD_LL_Init+0xb0>)
 8001470:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001472:	4b23      	ldr	r3, [pc, #140]	@ (8001500 <USBD_LL_Init+0xac>)
 8001474:	2208      	movs	r2, #8
 8001476:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001478:	4b21      	ldr	r3, [pc, #132]	@ (8001500 <USBD_LL_Init+0xac>)
 800147a:	2202      	movs	r2, #2
 800147c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800147e:	4b20      	ldr	r3, [pc, #128]	@ (8001500 <USBD_LL_Init+0xac>)
 8001480:	2202      	movs	r2, #2
 8001482:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001484:	4b1e      	ldr	r3, [pc, #120]	@ (8001500 <USBD_LL_Init+0xac>)
 8001486:	2200      	movs	r2, #0
 8001488:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800148a:	4b1d      	ldr	r3, [pc, #116]	@ (8001500 <USBD_LL_Init+0xac>)
 800148c:	2200      	movs	r2, #0
 800148e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001490:	481b      	ldr	r0, [pc, #108]	@ (8001500 <USBD_LL_Init+0xac>)
 8001492:	f001 fb46 	bl	8002b22 <HAL_PCD_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800149c:	f7ff fbae 	bl	8000bfc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80014a6:	2318      	movs	r3, #24
 80014a8:	2200      	movs	r2, #0
 80014aa:	2100      	movs	r1, #0
 80014ac:	f002 ffbf 	bl	800442e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80014b6:	2358      	movs	r3, #88	@ 0x58
 80014b8:	2200      	movs	r2, #0
 80014ba:	2180      	movs	r1, #128	@ 0x80
 80014bc:	f002 ffb7 	bl	800442e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80014c6:	23c0      	movs	r3, #192	@ 0xc0
 80014c8:	2200      	movs	r2, #0
 80014ca:	2181      	movs	r1, #129	@ 0x81
 80014cc:	f002 ffaf 	bl	800442e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80014d6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80014da:	2200      	movs	r2, #0
 80014dc:	2101      	movs	r1, #1
 80014de:	f002 ffa6 	bl	800442e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80014e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014ec:	2200      	movs	r2, #0
 80014ee:	2182      	movs	r1, #130	@ 0x82
 80014f0:	f002 ff9d 	bl	800442e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000fdc 	.word	0x20000fdc
 8001504:	40005c00 	.word	0x40005c00

08001508 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001510:	2300      	movs	r3, #0
 8001512:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001514:	2300      	movs	r3, #0
 8001516:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800151e:	4618      	mov	r0, r3
 8001520:	f001 fbc6 	bl	8002cb0 <HAL_PCD_Start>
 8001524:	4603      	mov	r3, r0
 8001526:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	4618      	mov	r0, r3
 800152c:	f000 f952 	bl	80017d4 <USBD_Get_USB_Status>
 8001530:	4603      	mov	r3, r0
 8001532:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001534:	7bbb      	ldrb	r3, [r7, #14]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b084      	sub	sp, #16
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
 8001546:	4608      	mov	r0, r1
 8001548:	4611      	mov	r1, r2
 800154a:	461a      	mov	r2, r3
 800154c:	4603      	mov	r3, r0
 800154e:	70fb      	strb	r3, [r7, #3]
 8001550:	460b      	mov	r3, r1
 8001552:	70bb      	strb	r3, [r7, #2]
 8001554:	4613      	mov	r3, r2
 8001556:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001558:	2300      	movs	r3, #0
 800155a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800155c:	2300      	movs	r3, #0
 800155e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8001566:	78bb      	ldrb	r3, [r7, #2]
 8001568:	883a      	ldrh	r2, [r7, #0]
 800156a:	78f9      	ldrb	r1, [r7, #3]
 800156c:	f001 fcbe 	bl	8002eec <HAL_PCD_EP_Open>
 8001570:	4603      	mov	r3, r0
 8001572:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	4618      	mov	r0, r3
 8001578:	f000 f92c 	bl	80017d4 <USBD_Get_USB_Status>
 800157c:	4603      	mov	r3, r0
 800157e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001580:	7bbb      	ldrb	r3, [r7, #14]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b084      	sub	sp, #16
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	460b      	mov	r3, r1
 8001594:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001596:	2300      	movs	r3, #0
 8001598:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800159a:	2300      	movs	r3, #0
 800159c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80015a4:	78fa      	ldrb	r2, [r7, #3]
 80015a6:	4611      	mov	r1, r2
 80015a8:	4618      	mov	r0, r3
 80015aa:	f001 fcfc 	bl	8002fa6 <HAL_PCD_EP_Close>
 80015ae:	4603      	mov	r3, r0
 80015b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f000 f90d 	bl	80017d4 <USBD_Get_USB_Status>
 80015ba:	4603      	mov	r3, r0
 80015bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80015be:	7bbb      	ldrb	r3, [r7, #14]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80015d4:	2300      	movs	r3, #0
 80015d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80015d8:	2300      	movs	r3, #0
 80015da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80015e2:	78fa      	ldrb	r2, [r7, #3]
 80015e4:	4611      	mov	r1, r2
 80015e6:	4618      	mov	r0, r3
 80015e8:	f001 fda5 	bl	8003136 <HAL_PCD_EP_SetStall>
 80015ec:	4603      	mov	r3, r0
 80015ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 f8ee 	bl	80017d4 <USBD_Get_USB_Status>
 80015f8:	4603      	mov	r3, r0
 80015fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80015fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b084      	sub	sp, #16
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
 800160e:	460b      	mov	r3, r1
 8001610:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8001620:	78fa      	ldrb	r2, [r7, #3]
 8001622:	4611      	mov	r1, r2
 8001624:	4618      	mov	r0, r3
 8001626:	f001 fdd8 	bl	80031da <HAL_PCD_EP_ClrStall>
 800162a:	4603      	mov	r3, r0
 800162c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	4618      	mov	r0, r3
 8001632:	f000 f8cf 	bl	80017d4 <USBD_Get_USB_Status>
 8001636:	4603      	mov	r3, r0
 8001638:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800163a:	7bbb      	ldrb	r3, [r7, #14]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8001656:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8001658:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800165c:	2b00      	cmp	r3, #0
 800165e:	da0b      	bge.n	8001678 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8001660:	78fb      	ldrb	r3, [r7, #3]
 8001662:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001666:	68f9      	ldr	r1, [r7, #12]
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	440b      	add	r3, r1
 8001672:	3312      	adds	r3, #18
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	e00b      	b.n	8001690 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8001678:	78fb      	ldrb	r3, [r7, #3]
 800167a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800167e:	68f9      	ldr	r1, [r7, #12]
 8001680:	4613      	mov	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	440b      	add	r3, r1
 800168a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800168e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001690:	4618      	mov	r0, r3
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80016a8:	2300      	movs	r3, #0
 80016aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80016ac:	2300      	movs	r3, #0
 80016ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80016b6:	78fa      	ldrb	r2, [r7, #3]
 80016b8:	4611      	mov	r1, r2
 80016ba:	4618      	mov	r0, r3
 80016bc:	f001 fbf2 	bl	8002ea4 <HAL_PCD_SetAddress>
 80016c0:	4603      	mov	r3, r0
 80016c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 f884 	bl	80017d4 <USBD_Get_USB_Status>
 80016cc:	4603      	mov	r3, r0
 80016ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80016d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b086      	sub	sp, #24
 80016de:	af00      	add	r7, sp, #0
 80016e0:	60f8      	str	r0, [r7, #12]
 80016e2:	607a      	str	r2, [r7, #4]
 80016e4:	461a      	mov	r2, r3
 80016e6:	460b      	mov	r3, r1
 80016e8:	72fb      	strb	r3, [r7, #11]
 80016ea:	4613      	mov	r3, r2
 80016ec:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80016ee:	2300      	movs	r3, #0
 80016f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80016f2:	2300      	movs	r3, #0
 80016f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80016fc:	893b      	ldrh	r3, [r7, #8]
 80016fe:	7af9      	ldrb	r1, [r7, #11]
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	f001 fce1 	bl	80030c8 <HAL_PCD_EP_Transmit>
 8001706:	4603      	mov	r3, r0
 8001708:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800170a:	7dfb      	ldrb	r3, [r7, #23]
 800170c:	4618      	mov	r0, r3
 800170e:	f000 f861 	bl	80017d4 <USBD_Get_USB_Status>
 8001712:	4603      	mov	r3, r0
 8001714:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8001716:	7dbb      	ldrb	r3, [r7, #22]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	607a      	str	r2, [r7, #4]
 800172a:	461a      	mov	r2, r3
 800172c:	460b      	mov	r3, r1
 800172e:	72fb      	strb	r3, [r7, #11]
 8001730:	4613      	mov	r3, r2
 8001732:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001734:	2300      	movs	r3, #0
 8001736:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001738:	2300      	movs	r3, #0
 800173a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8001742:	893b      	ldrh	r3, [r7, #8]
 8001744:	7af9      	ldrb	r1, [r7, #11]
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	f001 fc75 	bl	8003036 <HAL_PCD_EP_Receive>
 800174c:	4603      	mov	r3, r0
 800174e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001750:	7dfb      	ldrb	r3, [r7, #23]
 8001752:	4618      	mov	r0, r3
 8001754:	f000 f83e 	bl	80017d4 <USBD_Get_USB_Status>
 8001758:	4603      	mov	r3, r0
 800175a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800175c:	7dbb      	ldrb	r3, [r7, #22]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	460b      	mov	r3, r1
 8001770:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8001778:	78fa      	ldrb	r2, [r7, #3]
 800177a:	4611      	mov	r1, r2
 800177c:	4618      	mov	r0, r3
 800177e:	f001 fc8b 	bl	8003098 <HAL_PCD_EP_GetRxCount>
 8001782:	4603      	mov	r3, r0
}
 8001784:	4618      	mov	r0, r3
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8001794:	4b03      	ldr	r3, [pc, #12]	@ (80017a4 <USBD_static_malloc+0x18>)
}
 8001796:	4618      	mov	r0, r3
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	200012b0 	.word	0x200012b0

080017a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]

}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80017de:	2300      	movs	r3, #0
 80017e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	2b03      	cmp	r3, #3
 80017e6:	d817      	bhi.n	8001818 <USBD_Get_USB_Status+0x44>
 80017e8:	a201      	add	r2, pc, #4	@ (adr r2, 80017f0 <USBD_Get_USB_Status+0x1c>)
 80017ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ee:	bf00      	nop
 80017f0:	08001801 	.word	0x08001801
 80017f4:	08001807 	.word	0x08001807
 80017f8:	0800180d 	.word	0x0800180d
 80017fc:	08001813 	.word	0x08001813
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8001800:	2300      	movs	r3, #0
 8001802:	73fb      	strb	r3, [r7, #15]
    break;
 8001804:	e00b      	b.n	800181e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8001806:	2302      	movs	r3, #2
 8001808:	73fb      	strb	r3, [r7, #15]
    break;
 800180a:	e008      	b.n	800181e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800180c:	2301      	movs	r3, #1
 800180e:	73fb      	strb	r3, [r7, #15]
    break;
 8001810:	e005      	b.n	800181e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8001812:	2302      	movs	r3, #2
 8001814:	73fb      	strb	r3, [r7, #15]
    break;
 8001816:	e002      	b.n	800181e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8001818:	2302      	movs	r3, #2
 800181a:	73fb      	strb	r3, [r7, #15]
    break;
 800181c:	bf00      	nop
  }
  return usb_status;
 800181e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001830:	4b06      	ldr	r3, [pc, #24]	@ (800184c <SystemInit+0x20>)
 8001832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001836:	4a05      	ldr	r2, [pc, #20]	@ (800184c <SystemInit+0x20>)
 8001838:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800183c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001854:	4b08      	ldr	r3, [pc, #32]	@ (8001878 <HAL_Init+0x28>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a07      	ldr	r2, [pc, #28]	@ (8001878 <HAL_Init+0x28>)
 800185a:	f043 0310 	orr.w	r3, r3, #16
 800185e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001860:	2003      	movs	r0, #3
 8001862:	f000 f94f 	bl	8001b04 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001866:	200f      	movs	r0, #15
 8001868:	f000 f808 	bl	800187c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800186c:	f7ff f9cc 	bl	8000c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40022000 	.word	0x40022000

0800187c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001884:	4b12      	ldr	r3, [pc, #72]	@ (80018d0 <HAL_InitTick+0x54>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b12      	ldr	r3, [pc, #72]	@ (80018d4 <HAL_InitTick+0x58>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	4619      	mov	r1, r3
 800188e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001892:	fbb3 f3f1 	udiv	r3, r3, r1
 8001896:	fbb2 f3f3 	udiv	r3, r2, r3
 800189a:	4618      	mov	r0, r3
 800189c:	f000 f967 	bl	8001b6e <HAL_SYSTICK_Config>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e00e      	b.n	80018c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b0f      	cmp	r3, #15
 80018ae:	d80a      	bhi.n	80018c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b0:	2200      	movs	r2, #0
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	f04f 30ff 	mov.w	r0, #4294967295
 80018b8:	f000 f92f 	bl	8001b1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018bc:	4a06      	ldr	r2, [pc, #24]	@ (80018d8 <HAL_InitTick+0x5c>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	e000      	b.n	80018c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000060 	.word	0x20000060
 80018d4:	20000068 	.word	0x20000068
 80018d8:	20000064 	.word	0x20000064

080018dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e0:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <HAL_IncTick+0x20>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <HAL_IncTick+0x24>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4413      	add	r3, r2
 80018ec:	4a04      	ldr	r2, [pc, #16]	@ (8001900 <HAL_IncTick+0x24>)
 80018ee:	6013      	str	r3, [r2, #0]
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	20000068 	.word	0x20000068
 8001900:	200014d0 	.word	0x200014d0

08001904 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return uwTick;  
 8001908:	4b03      	ldr	r3, [pc, #12]	@ (8001918 <HAL_GetTick+0x14>)
 800190a:	681b      	ldr	r3, [r3, #0]
}
 800190c:	4618      	mov	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	200014d0 	.word	0x200014d0

0800191c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001924:	f7ff ffee 	bl	8001904 <HAL_GetTick>
 8001928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001934:	d005      	beq.n	8001942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001936:	4b0a      	ldr	r3, [pc, #40]	@ (8001960 <HAL_Delay+0x44>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	461a      	mov	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4413      	add	r3, r2
 8001940:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001942:	bf00      	nop
 8001944:	f7ff ffde 	bl	8001904 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	429a      	cmp	r2, r3
 8001952:	d8f7      	bhi.n	8001944 <HAL_Delay+0x28>
  {
  }
}
 8001954:	bf00      	nop
 8001956:	bf00      	nop
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000068 	.word	0x20000068

08001964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001974:	4b0c      	ldr	r3, [pc, #48]	@ (80019a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001980:	4013      	ands	r3, r2
 8001982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800198c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001996:	4a04      	ldr	r2, [pc, #16]	@ (80019a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	60d3      	str	r3, [r2, #12]
}
 800199c:	bf00      	nop
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b0:	4b04      	ldr	r3, [pc, #16]	@ (80019c4 <__NVIC_GetPriorityGrouping+0x18>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	0a1b      	lsrs	r3, r3, #8
 80019b6:	f003 0307 	and.w	r3, r3, #7
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	db0b      	blt.n	80019f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	f003 021f 	and.w	r2, r3, #31
 80019e0:	4907      	ldr	r1, [pc, #28]	@ (8001a00 <__NVIC_EnableIRQ+0x38>)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	095b      	lsrs	r3, r3, #5
 80019e8:	2001      	movs	r0, #1
 80019ea:	fa00 f202 	lsl.w	r2, r0, r2
 80019ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000e100 	.word	0xe000e100

08001a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	6039      	str	r1, [r7, #0]
 8001a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	db0a      	blt.n	8001a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	490c      	ldr	r1, [pc, #48]	@ (8001a50 <__NVIC_SetPriority+0x4c>)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	0112      	lsls	r2, r2, #4
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	440b      	add	r3, r1
 8001a28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a2c:	e00a      	b.n	8001a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4908      	ldr	r1, [pc, #32]	@ (8001a54 <__NVIC_SetPriority+0x50>)
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	3b04      	subs	r3, #4
 8001a3c:	0112      	lsls	r2, r2, #4
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	440b      	add	r3, r1
 8001a42:	761a      	strb	r2, [r3, #24]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000e100 	.word	0xe000e100
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b089      	sub	sp, #36	@ 0x24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f1c3 0307 	rsb	r3, r3, #7
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	bf28      	it	cs
 8001a76:	2304      	movcs	r3, #4
 8001a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	2b06      	cmp	r3, #6
 8001a80:	d902      	bls.n	8001a88 <NVIC_EncodePriority+0x30>
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3b03      	subs	r3, #3
 8001a86:	e000      	b.n	8001a8a <NVIC_EncodePriority+0x32>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43da      	mvns	r2, r3
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	401a      	ands	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aaa:	43d9      	mvns	r1, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	4313      	orrs	r3, r2
         );
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3724      	adds	r7, #36	@ 0x24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ad0:	d301      	bcc.n	8001ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e00f      	b.n	8001af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8001b00 <SysTick_Config+0x40>)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ade:	210f      	movs	r1, #15
 8001ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae4:	f7ff ff8e 	bl	8001a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae8:	4b05      	ldr	r3, [pc, #20]	@ (8001b00 <SysTick_Config+0x40>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aee:	4b04      	ldr	r3, [pc, #16]	@ (8001b00 <SysTick_Config+0x40>)
 8001af0:	2207      	movs	r2, #7
 8001af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	e000e010 	.word	0xe000e010

08001b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ff29 	bl	8001964 <__NVIC_SetPriorityGrouping>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b086      	sub	sp, #24
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	4603      	mov	r3, r0
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
 8001b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b2c:	f7ff ff3e 	bl	80019ac <__NVIC_GetPriorityGrouping>
 8001b30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	68b9      	ldr	r1, [r7, #8]
 8001b36:	6978      	ldr	r0, [r7, #20]
 8001b38:	f7ff ff8e 	bl	8001a58 <NVIC_EncodePriority>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b42:	4611      	mov	r1, r2
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff5d 	bl	8001a04 <__NVIC_SetPriority>
}
 8001b4a:	bf00      	nop
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	4603      	mov	r3, r0
 8001b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ff31 	bl	80019c8 <__NVIC_EnableIRQ>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff ffa2 	bl	8001ac0 <SysTick_Config>
 8001b7c:	4603      	mov	r3, r0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b087      	sub	sp, #28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b96:	e154      	b.n	8001e42 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 8146 	beq.w	8001e3c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d005      	beq.n	8001bc8 <HAL_GPIO_Init+0x40>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 0303 	and.w	r3, r3, #3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d130      	bne.n	8001c2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	2203      	movs	r2, #3
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	68da      	ldr	r2, [r3, #12]
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bfe:	2201      	movs	r2, #1
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	091b      	lsrs	r3, r3, #4
 8001c14:	f003 0201 	and.w	r2, r3, #1
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	2b03      	cmp	r3, #3
 8001c34:	d017      	beq.n	8001c66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	2203      	movs	r2, #3
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43db      	mvns	r3, r3
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	689a      	ldr	r2, [r3, #8]
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d123      	bne.n	8001cba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	08da      	lsrs	r2, r3, #3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3208      	adds	r2, #8
 8001c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	220f      	movs	r2, #15
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	4013      	ands	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	691a      	ldr	r2, [r3, #16]
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	08da      	lsrs	r2, r3, #3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3208      	adds	r2, #8
 8001cb4:	6939      	ldr	r1, [r7, #16]
 8001cb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 0203 	and.w	r2, r3, #3
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 80a0 	beq.w	8001e3c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfc:	4b58      	ldr	r3, [pc, #352]	@ (8001e60 <HAL_GPIO_Init+0x2d8>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	4a57      	ldr	r2, [pc, #348]	@ (8001e60 <HAL_GPIO_Init+0x2d8>)
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	6193      	str	r3, [r2, #24]
 8001d08:	4b55      	ldr	r3, [pc, #340]	@ (8001e60 <HAL_GPIO_Init+0x2d8>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d14:	4a53      	ldr	r2, [pc, #332]	@ (8001e64 <HAL_GPIO_Init+0x2dc>)
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	089b      	lsrs	r3, r3, #2
 8001d1a:	3302      	adds	r3, #2
 8001d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	220f      	movs	r2, #15
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4013      	ands	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d3e:	d019      	beq.n	8001d74 <HAL_GPIO_Init+0x1ec>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a49      	ldr	r2, [pc, #292]	@ (8001e68 <HAL_GPIO_Init+0x2e0>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d013      	beq.n	8001d70 <HAL_GPIO_Init+0x1e8>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a48      	ldr	r2, [pc, #288]	@ (8001e6c <HAL_GPIO_Init+0x2e4>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d00d      	beq.n	8001d6c <HAL_GPIO_Init+0x1e4>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a47      	ldr	r2, [pc, #284]	@ (8001e70 <HAL_GPIO_Init+0x2e8>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d007      	beq.n	8001d68 <HAL_GPIO_Init+0x1e0>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a46      	ldr	r2, [pc, #280]	@ (8001e74 <HAL_GPIO_Init+0x2ec>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d101      	bne.n	8001d64 <HAL_GPIO_Init+0x1dc>
 8001d60:	2304      	movs	r3, #4
 8001d62:	e008      	b.n	8001d76 <HAL_GPIO_Init+0x1ee>
 8001d64:	2305      	movs	r3, #5
 8001d66:	e006      	b.n	8001d76 <HAL_GPIO_Init+0x1ee>
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e004      	b.n	8001d76 <HAL_GPIO_Init+0x1ee>
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	e002      	b.n	8001d76 <HAL_GPIO_Init+0x1ee>
 8001d70:	2301      	movs	r3, #1
 8001d72:	e000      	b.n	8001d76 <HAL_GPIO_Init+0x1ee>
 8001d74:	2300      	movs	r3, #0
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	f002 0203 	and.w	r2, r2, #3
 8001d7c:	0092      	lsls	r2, r2, #2
 8001d7e:	4093      	lsls	r3, r2
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d86:	4937      	ldr	r1, [pc, #220]	@ (8001e64 <HAL_GPIO_Init+0x2dc>)
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	089b      	lsrs	r3, r3, #2
 8001d8c:	3302      	adds	r3, #2
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d94:	4b38      	ldr	r3, [pc, #224]	@ (8001e78 <HAL_GPIO_Init+0x2f0>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	4013      	ands	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001db8:	4a2f      	ldr	r2, [pc, #188]	@ (8001e78 <HAL_GPIO_Init+0x2f0>)
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dbe:	4b2e      	ldr	r3, [pc, #184]	@ (8001e78 <HAL_GPIO_Init+0x2f0>)
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001de2:	4a25      	ldr	r2, [pc, #148]	@ (8001e78 <HAL_GPIO_Init+0x2f0>)
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001de8:	4b23      	ldr	r3, [pc, #140]	@ (8001e78 <HAL_GPIO_Init+0x2f0>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	43db      	mvns	r3, r3
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	4013      	ands	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e0c:	4a1a      	ldr	r2, [pc, #104]	@ (8001e78 <HAL_GPIO_Init+0x2f0>)
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e12:	4b19      	ldr	r3, [pc, #100]	@ (8001e78 <HAL_GPIO_Init+0x2f0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e36:	4a10      	ldr	r2, [pc, #64]	@ (8001e78 <HAL_GPIO_Init+0x2f0>)
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f47f aea3 	bne.w	8001b98 <HAL_GPIO_Init+0x10>
  }
}
 8001e52:	bf00      	nop
 8001e54:	bf00      	nop
 8001e56:	371c      	adds	r7, #28
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40010000 	.word	0x40010000
 8001e68:	48000400 	.word	0x48000400
 8001e6c:	48000800 	.word	0x48000800
 8001e70:	48000c00 	.word	0x48000c00
 8001e74:	48001000 	.word	0x48001000
 8001e78:	40010400 	.word	0x40010400

08001e7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	807b      	strh	r3, [r7, #2]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e8c:	787b      	ldrb	r3, [r7, #1]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e92:	887a      	ldrh	r2, [r7, #2]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e98:	e002      	b.n	8001ea0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e9a:	887a      	ldrh	r2, [r7, #2]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001eb6:	4b08      	ldr	r3, [pc, #32]	@ (8001ed8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001eb8:	695a      	ldr	r2, [r3, #20]
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d006      	beq.n	8001ed0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ec2:	4a05      	ldr	r2, [pc, #20]	@ (8001ed8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ec4:	88fb      	ldrh	r3, [r7, #6]
 8001ec6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ec8:	88fb      	ldrh	r3, [r7, #6]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7fe fe84 	bl	8000bd8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ed0:	bf00      	nop
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40010400 	.word	0x40010400

08001edc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e08d      	b.n	800200a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d106      	bne.n	8001f08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7fe fea4 	bl	8000c50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2224      	movs	r2, #36	@ 0x24
 8001f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f022 0201 	bic.w	r2, r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d107      	bne.n	8001f56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	e006      	b.n	8001f64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001f62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d108      	bne.n	8001f7e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f7a:	605a      	str	r2, [r3, #4]
 8001f7c:	e007      	b.n	8001f8e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6812      	ldr	r2, [r2, #0]
 8001f98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fa0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fb0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	691a      	ldr	r2, [r3, #16]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69d9      	ldr	r1, [r3, #28]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a1a      	ldr	r2, [r3, #32]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f042 0201 	orr.w	r2, r2, #1
 8001fea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2220      	movs	r2, #32
 8001ff6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b088      	sub	sp, #32
 8002018:	af02      	add	r7, sp, #8
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	4608      	mov	r0, r1
 800201e:	4611      	mov	r1, r2
 8002020:	461a      	mov	r2, r3
 8002022:	4603      	mov	r3, r0
 8002024:	817b      	strh	r3, [r7, #10]
 8002026:	460b      	mov	r3, r1
 8002028:	813b      	strh	r3, [r7, #8]
 800202a:	4613      	mov	r3, r2
 800202c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b20      	cmp	r3, #32
 8002038:	f040 80f9 	bne.w	800222e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800203c:	6a3b      	ldr	r3, [r7, #32]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d002      	beq.n	8002048 <HAL_I2C_Mem_Write+0x34>
 8002042:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002044:	2b00      	cmp	r3, #0
 8002046:	d105      	bne.n	8002054 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800204e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0ed      	b.n	8002230 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800205a:	2b01      	cmp	r3, #1
 800205c:	d101      	bne.n	8002062 <HAL_I2C_Mem_Write+0x4e>
 800205e:	2302      	movs	r3, #2
 8002060:	e0e6      	b.n	8002230 <HAL_I2C_Mem_Write+0x21c>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800206a:	f7ff fc4b 	bl	8001904 <HAL_GetTick>
 800206e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	2319      	movs	r3, #25
 8002076:	2201      	movs	r2, #1
 8002078:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f000 fac3 	bl	8002608 <I2C_WaitOnFlagUntilTimeout>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e0d1      	b.n	8002230 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2221      	movs	r2, #33	@ 0x21
 8002090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2240      	movs	r2, #64	@ 0x40
 8002098:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6a3a      	ldr	r2, [r7, #32]
 80020a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80020ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020b4:	88f8      	ldrh	r0, [r7, #6]
 80020b6:	893a      	ldrh	r2, [r7, #8]
 80020b8:	8979      	ldrh	r1, [r7, #10]
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	9301      	str	r3, [sp, #4]
 80020be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	4603      	mov	r3, r0
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f000 f9d3 	bl	8002470 <I2C_RequestMemoryWrite>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e0a9      	b.n	8002230 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	2bff      	cmp	r3, #255	@ 0xff
 80020e4:	d90e      	bls.n	8002104 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	22ff      	movs	r2, #255	@ 0xff
 80020ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	8979      	ldrh	r1, [r7, #10]
 80020f4:	2300      	movs	r3, #0
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f000 fc47 	bl	8002990 <I2C_TransferConfig>
 8002102:	e00f      	b.n	8002124 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002108:	b29a      	uxth	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002112:	b2da      	uxtb	r2, r3
 8002114:	8979      	ldrh	r1, [r7, #10]
 8002116:	2300      	movs	r3, #0
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f000 fc36 	bl	8002990 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f000 fac6 	bl	80026ba <I2C_WaitOnTXISFlagUntilTimeout>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e07b      	b.n	8002230 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213c:	781a      	ldrb	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002148:	1c5a      	adds	r2, r3, #1
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002152:	b29b      	uxth	r3, r3
 8002154:	3b01      	subs	r3, #1
 8002156:	b29a      	uxth	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002160:	3b01      	subs	r3, #1
 8002162:	b29a      	uxth	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800216c:	b29b      	uxth	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d034      	beq.n	80021dc <HAL_I2C_Mem_Write+0x1c8>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002176:	2b00      	cmp	r3, #0
 8002178:	d130      	bne.n	80021dc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002180:	2200      	movs	r2, #0
 8002182:	2180      	movs	r1, #128	@ 0x80
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f000 fa3f 	bl	8002608 <I2C_WaitOnFlagUntilTimeout>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e04d      	b.n	8002230 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002198:	b29b      	uxth	r3, r3
 800219a:	2bff      	cmp	r3, #255	@ 0xff
 800219c:	d90e      	bls.n	80021bc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	22ff      	movs	r2, #255	@ 0xff
 80021a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	8979      	ldrh	r1, [r7, #10]
 80021ac:	2300      	movs	r3, #0
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f000 fbeb 	bl	8002990 <I2C_TransferConfig>
 80021ba:	e00f      	b.n	80021dc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	8979      	ldrh	r1, [r7, #10]
 80021ce:	2300      	movs	r3, #0
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f000 fbda 	bl	8002990 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d19e      	bne.n	8002124 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 faac 	bl	8002748 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e01a      	b.n	8002230 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2220      	movs	r2, #32
 8002200:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6859      	ldr	r1, [r3, #4]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4b0a      	ldr	r3, [pc, #40]	@ (8002238 <HAL_I2C_Mem_Write+0x224>)
 800220e:	400b      	ands	r3, r1
 8002210:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2220      	movs	r2, #32
 8002216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	e000      	b.n	8002230 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800222e:	2302      	movs	r3, #2
  }
}
 8002230:	4618      	mov	r0, r3
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	fe00e800 	.word	0xfe00e800

0800223c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b088      	sub	sp, #32
 8002240:	af02      	add	r7, sp, #8
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	4608      	mov	r0, r1
 8002246:	4611      	mov	r1, r2
 8002248:	461a      	mov	r2, r3
 800224a:	4603      	mov	r3, r0
 800224c:	817b      	strh	r3, [r7, #10]
 800224e:	460b      	mov	r3, r1
 8002250:	813b      	strh	r3, [r7, #8]
 8002252:	4613      	mov	r3, r2
 8002254:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b20      	cmp	r3, #32
 8002260:	f040 80fd 	bne.w	800245e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002264:	6a3b      	ldr	r3, [r7, #32]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d002      	beq.n	8002270 <HAL_I2C_Mem_Read+0x34>
 800226a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800226c:	2b00      	cmp	r3, #0
 800226e:	d105      	bne.n	800227c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002276:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e0f1      	b.n	8002460 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002282:	2b01      	cmp	r3, #1
 8002284:	d101      	bne.n	800228a <HAL_I2C_Mem_Read+0x4e>
 8002286:	2302      	movs	r3, #2
 8002288:	e0ea      	b.n	8002460 <HAL_I2C_Mem_Read+0x224>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002292:	f7ff fb37 	bl	8001904 <HAL_GetTick>
 8002296:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	2319      	movs	r3, #25
 800229e:	2201      	movs	r2, #1
 80022a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 f9af 	bl	8002608 <I2C_WaitOnFlagUntilTimeout>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0d5      	b.n	8002460 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2222      	movs	r2, #34	@ 0x22
 80022b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2240      	movs	r2, #64	@ 0x40
 80022c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6a3a      	ldr	r2, [r7, #32]
 80022ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80022d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022dc:	88f8      	ldrh	r0, [r7, #6]
 80022de:	893a      	ldrh	r2, [r7, #8]
 80022e0:	8979      	ldrh	r1, [r7, #10]
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	9301      	str	r3, [sp, #4]
 80022e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	4603      	mov	r3, r0
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f000 f913 	bl	8002518 <I2C_RequestMemoryRead>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d005      	beq.n	8002304 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e0ad      	b.n	8002460 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002308:	b29b      	uxth	r3, r3
 800230a:	2bff      	cmp	r3, #255	@ 0xff
 800230c:	d90e      	bls.n	800232c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2201      	movs	r2, #1
 8002312:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002318:	b2da      	uxtb	r2, r3
 800231a:	8979      	ldrh	r1, [r7, #10]
 800231c:	4b52      	ldr	r3, [pc, #328]	@ (8002468 <HAL_I2C_Mem_Read+0x22c>)
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 fb33 	bl	8002990 <I2C_TransferConfig>
 800232a:	e00f      	b.n	800234c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002330:	b29a      	uxth	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800233a:	b2da      	uxtb	r2, r3
 800233c:	8979      	ldrh	r1, [r7, #10]
 800233e:	4b4a      	ldr	r3, [pc, #296]	@ (8002468 <HAL_I2C_Mem_Read+0x22c>)
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f000 fb22 	bl	8002990 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002352:	2200      	movs	r2, #0
 8002354:	2104      	movs	r1, #4
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 f956 	bl	8002608 <I2C_WaitOnFlagUntilTimeout>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e07c      	b.n	8002460 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002382:	3b01      	subs	r3, #1
 8002384:	b29a      	uxth	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800238e:	b29b      	uxth	r3, r3
 8002390:	3b01      	subs	r3, #1
 8002392:	b29a      	uxth	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800239c:	b29b      	uxth	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d034      	beq.n	800240c <HAL_I2C_Mem_Read+0x1d0>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d130      	bne.n	800240c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023b0:	2200      	movs	r2, #0
 80023b2:	2180      	movs	r1, #128	@ 0x80
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 f927 	bl	8002608 <I2C_WaitOnFlagUntilTimeout>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e04d      	b.n	8002460 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	2bff      	cmp	r3, #255	@ 0xff
 80023cc:	d90e      	bls.n	80023ec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2201      	movs	r2, #1
 80023d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	8979      	ldrh	r1, [r7, #10]
 80023dc:	2300      	movs	r3, #0
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 fad3 	bl	8002990 <I2C_TransferConfig>
 80023ea:	e00f      	b.n	800240c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	8979      	ldrh	r1, [r7, #10]
 80023fe:	2300      	movs	r3, #0
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f000 fac2 	bl	8002990 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002410:	b29b      	uxth	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d19a      	bne.n	800234c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 f994 	bl	8002748 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e01a      	b.n	8002460 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2220      	movs	r2, #32
 8002430:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6859      	ldr	r1, [r3, #4]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	4b0b      	ldr	r3, [pc, #44]	@ (800246c <HAL_I2C_Mem_Read+0x230>)
 800243e:	400b      	ands	r3, r1
 8002440:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2220      	movs	r2, #32
 8002446:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800245a:	2300      	movs	r3, #0
 800245c:	e000      	b.n	8002460 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800245e:	2302      	movs	r3, #2
  }
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	80002400 	.word	0x80002400
 800246c:	fe00e800 	.word	0xfe00e800

08002470 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af02      	add	r7, sp, #8
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	4608      	mov	r0, r1
 800247a:	4611      	mov	r1, r2
 800247c:	461a      	mov	r2, r3
 800247e:	4603      	mov	r3, r0
 8002480:	817b      	strh	r3, [r7, #10]
 8002482:	460b      	mov	r3, r1
 8002484:	813b      	strh	r3, [r7, #8]
 8002486:	4613      	mov	r3, r2
 8002488:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800248a:	88fb      	ldrh	r3, [r7, #6]
 800248c:	b2da      	uxtb	r2, r3
 800248e:	8979      	ldrh	r1, [r7, #10]
 8002490:	4b20      	ldr	r3, [pc, #128]	@ (8002514 <I2C_RequestMemoryWrite+0xa4>)
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f000 fa79 	bl	8002990 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800249e:	69fa      	ldr	r2, [r7, #28]
 80024a0:	69b9      	ldr	r1, [r7, #24]
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f000 f909 	bl	80026ba <I2C_WaitOnTXISFlagUntilTimeout>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e02c      	b.n	800250c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80024b2:	88fb      	ldrh	r3, [r7, #6]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d105      	bne.n	80024c4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024b8:	893b      	ldrh	r3, [r7, #8]
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80024c2:	e015      	b.n	80024f0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80024c4:	893b      	ldrh	r3, [r7, #8]
 80024c6:	0a1b      	lsrs	r3, r3, #8
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	b2da      	uxtb	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024d2:	69fa      	ldr	r2, [r7, #28]
 80024d4:	69b9      	ldr	r1, [r7, #24]
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 f8ef 	bl	80026ba <I2C_WaitOnTXISFlagUntilTimeout>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e012      	b.n	800250c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024e6:	893b      	ldrh	r3, [r7, #8]
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	2200      	movs	r2, #0
 80024f8:	2180      	movs	r1, #128	@ 0x80
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 f884 	bl	8002608 <I2C_WaitOnFlagUntilTimeout>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	80002000 	.word	0x80002000

08002518 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af02      	add	r7, sp, #8
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	4608      	mov	r0, r1
 8002522:	4611      	mov	r1, r2
 8002524:	461a      	mov	r2, r3
 8002526:	4603      	mov	r3, r0
 8002528:	817b      	strh	r3, [r7, #10]
 800252a:	460b      	mov	r3, r1
 800252c:	813b      	strh	r3, [r7, #8]
 800252e:	4613      	mov	r3, r2
 8002530:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002532:	88fb      	ldrh	r3, [r7, #6]
 8002534:	b2da      	uxtb	r2, r3
 8002536:	8979      	ldrh	r1, [r7, #10]
 8002538:	4b20      	ldr	r3, [pc, #128]	@ (80025bc <I2C_RequestMemoryRead+0xa4>)
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	2300      	movs	r3, #0
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 fa26 	bl	8002990 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002544:	69fa      	ldr	r2, [r7, #28]
 8002546:	69b9      	ldr	r1, [r7, #24]
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 f8b6 	bl	80026ba <I2C_WaitOnTXISFlagUntilTimeout>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e02c      	b.n	80025b2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002558:	88fb      	ldrh	r3, [r7, #6]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d105      	bne.n	800256a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800255e:	893b      	ldrh	r3, [r7, #8]
 8002560:	b2da      	uxtb	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	629a      	str	r2, [r3, #40]	@ 0x28
 8002568:	e015      	b.n	8002596 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800256a:	893b      	ldrh	r3, [r7, #8]
 800256c:	0a1b      	lsrs	r3, r3, #8
 800256e:	b29b      	uxth	r3, r3
 8002570:	b2da      	uxtb	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002578:	69fa      	ldr	r2, [r7, #28]
 800257a:	69b9      	ldr	r1, [r7, #24]
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f000 f89c 	bl	80026ba <I2C_WaitOnTXISFlagUntilTimeout>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e012      	b.n	80025b2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800258c:	893b      	ldrh	r3, [r7, #8]
 800258e:	b2da      	uxtb	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	2200      	movs	r2, #0
 800259e:	2140      	movs	r1, #64	@ 0x40
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f000 f831 	bl	8002608 <I2C_WaitOnFlagUntilTimeout>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e000      	b.n	80025b2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	80002000 	.word	0x80002000

080025c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d103      	bne.n	80025de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2200      	movs	r2, #0
 80025dc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d007      	beq.n	80025fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699a      	ldr	r2, [r3, #24]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0201 	orr.w	r2, r2, #1
 80025fa:	619a      	str	r2, [r3, #24]
  }
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	603b      	str	r3, [r7, #0]
 8002614:	4613      	mov	r3, r2
 8002616:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002618:	e03b      	b.n	8002692 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	6839      	ldr	r1, [r7, #0]
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 f8d6 	bl	80027d0 <I2C_IsErrorOccurred>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e041      	b.n	80026b2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002634:	d02d      	beq.n	8002692 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002636:	f7ff f965 	bl	8001904 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	429a      	cmp	r2, r3
 8002644:	d302      	bcc.n	800264c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d122      	bne.n	8002692 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699a      	ldr	r2, [r3, #24]
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	4013      	ands	r3, r2
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	429a      	cmp	r2, r3
 800265a:	bf0c      	ite	eq
 800265c:	2301      	moveq	r3, #1
 800265e:	2300      	movne	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	461a      	mov	r2, r3
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	429a      	cmp	r2, r3
 8002668:	d113      	bne.n	8002692 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800266e:	f043 0220 	orr.w	r2, r3, #32
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2220      	movs	r2, #32
 800267a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e00f      	b.n	80026b2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	699a      	ldr	r2, [r3, #24]
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	4013      	ands	r3, r2
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	429a      	cmp	r2, r3
 80026a0:	bf0c      	ite	eq
 80026a2:	2301      	moveq	r3, #1
 80026a4:	2300      	movne	r3, #0
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	461a      	mov	r2, r3
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d0b4      	beq.n	800261a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b084      	sub	sp, #16
 80026be:	af00      	add	r7, sp, #0
 80026c0:	60f8      	str	r0, [r7, #12]
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026c6:	e033      	b.n	8002730 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	68b9      	ldr	r1, [r7, #8]
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 f87f 	bl	80027d0 <I2C_IsErrorOccurred>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e031      	b.n	8002740 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e2:	d025      	beq.n	8002730 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026e4:	f7ff f90e 	bl	8001904 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d302      	bcc.n	80026fa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d11a      	bne.n	8002730 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b02      	cmp	r3, #2
 8002706:	d013      	beq.n	8002730 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800270c:	f043 0220 	orr.w	r2, r3, #32
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2220      	movs	r2, #32
 8002718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e007      	b.n	8002740 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b02      	cmp	r3, #2
 800273c:	d1c4      	bne.n	80026c8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002754:	e02f      	b.n	80027b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	68b9      	ldr	r1, [r7, #8]
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 f838 	bl	80027d0 <I2C_IsErrorOccurred>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e02d      	b.n	80027c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800276a:	f7ff f8cb 	bl	8001904 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	68ba      	ldr	r2, [r7, #8]
 8002776:	429a      	cmp	r2, r3
 8002778:	d302      	bcc.n	8002780 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d11a      	bne.n	80027b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	f003 0320 	and.w	r3, r3, #32
 800278a:	2b20      	cmp	r3, #32
 800278c:	d013      	beq.n	80027b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002792:	f043 0220 	orr.w	r2, r3, #32
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2220      	movs	r2, #32
 800279e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e007      	b.n	80027c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	f003 0320 	and.w	r3, r3, #32
 80027c0:	2b20      	cmp	r3, #32
 80027c2:	d1c8      	bne.n	8002756 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
	...

080027d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08a      	sub	sp, #40	@ 0x28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80027ea:	2300      	movs	r3, #0
 80027ec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	f003 0310 	and.w	r3, r3, #16
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d068      	beq.n	80028ce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2210      	movs	r2, #16
 8002802:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002804:	e049      	b.n	800289a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280c:	d045      	beq.n	800289a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800280e:	f7ff f879 	bl	8001904 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	429a      	cmp	r2, r3
 800281c:	d302      	bcc.n	8002824 <I2C_IsErrorOccurred+0x54>
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d13a      	bne.n	800289a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800282e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002836:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002842:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002846:	d121      	bne.n	800288c <I2C_IsErrorOccurred+0xbc>
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800284e:	d01d      	beq.n	800288c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002850:	7cfb      	ldrb	r3, [r7, #19]
 8002852:	2b20      	cmp	r3, #32
 8002854:	d01a      	beq.n	800288c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002864:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002866:	f7ff f84d 	bl	8001904 <HAL_GetTick>
 800286a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800286c:	e00e      	b.n	800288c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800286e:	f7ff f849 	bl	8001904 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b19      	cmp	r3, #25
 800287a:	d907      	bls.n	800288c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800287c:	6a3b      	ldr	r3, [r7, #32]
 800287e:	f043 0320 	orr.w	r3, r3, #32
 8002882:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800288a:	e006      	b.n	800289a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	f003 0320 	and.w	r3, r3, #32
 8002896:	2b20      	cmp	r3, #32
 8002898:	d1e9      	bne.n	800286e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	f003 0320 	and.w	r3, r3, #32
 80028a4:	2b20      	cmp	r3, #32
 80028a6:	d003      	beq.n	80028b0 <I2C_IsErrorOccurred+0xe0>
 80028a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0aa      	beq.n	8002806 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80028b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d103      	bne.n	80028c0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2220      	movs	r2, #32
 80028be:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80028c0:	6a3b      	ldr	r3, [r7, #32]
 80028c2:	f043 0304 	orr.w	r3, r3, #4
 80028c6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00b      	beq.n	80028f8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80028e0:	6a3b      	ldr	r3, [r7, #32]
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00b      	beq.n	800291a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002902:	6a3b      	ldr	r3, [r7, #32]
 8002904:	f043 0308 	orr.w	r3, r3, #8
 8002908:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002912:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00b      	beq.n	800293c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002924:	6a3b      	ldr	r3, [r7, #32]
 8002926:	f043 0302 	orr.w	r3, r3, #2
 800292a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002934:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800293c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002940:	2b00      	cmp	r3, #0
 8002942:	d01c      	beq.n	800297e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f7ff fe3b 	bl	80025c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6859      	ldr	r1, [r3, #4]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	4b0d      	ldr	r3, [pc, #52]	@ (800298c <I2C_IsErrorOccurred+0x1bc>)
 8002956:	400b      	ands	r3, r1
 8002958:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	431a      	orrs	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2220      	movs	r2, #32
 800296a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800297e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002982:	4618      	mov	r0, r3
 8002984:	3728      	adds	r7, #40	@ 0x28
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	fe00e800 	.word	0xfe00e800

08002990 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002990:	b480      	push	{r7}
 8002992:	b087      	sub	sp, #28
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	607b      	str	r3, [r7, #4]
 800299a:	460b      	mov	r3, r1
 800299c:	817b      	strh	r3, [r7, #10]
 800299e:	4613      	mov	r3, r2
 80029a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029a2:	897b      	ldrh	r3, [r7, #10]
 80029a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80029a8:	7a7b      	ldrb	r3, [r7, #9]
 80029aa:	041b      	lsls	r3, r3, #16
 80029ac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029b0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80029be:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	0d5b      	lsrs	r3, r3, #21
 80029ca:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80029ce:	4b08      	ldr	r3, [pc, #32]	@ (80029f0 <I2C_TransferConfig+0x60>)
 80029d0:	430b      	orrs	r3, r1
 80029d2:	43db      	mvns	r3, r3
 80029d4:	ea02 0103 	and.w	r1, r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	430a      	orrs	r2, r1
 80029e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80029e2:	bf00      	nop
 80029e4:	371c      	adds	r7, #28
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	03ff63ff 	.word	0x03ff63ff

080029f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b20      	cmp	r3, #32
 8002a08:	d138      	bne.n	8002a7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d101      	bne.n	8002a18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a14:	2302      	movs	r3, #2
 8002a16:	e032      	b.n	8002a7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2224      	movs	r2, #36	@ 0x24
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0201 	bic.w	r2, r2, #1
 8002a36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6819      	ldr	r1, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0201 	orr.w	r2, r2, #1
 8002a66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	e000      	b.n	8002a7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a7c:	2302      	movs	r3, #2
  }
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b085      	sub	sp, #20
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
 8002a92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b20      	cmp	r3, #32
 8002a9e:	d139      	bne.n	8002b14 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d101      	bne.n	8002aae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e033      	b.n	8002b16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2224      	movs	r2, #36	@ 0x24
 8002aba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 0201 	bic.w	r2, r2, #1
 8002acc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002adc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	021b      	lsls	r3, r3, #8
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0201 	orr.w	r2, r2, #1
 8002afe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2220      	movs	r2, #32
 8002b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b10:	2300      	movs	r3, #0
 8002b12:	e000      	b.n	8002b16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b14:	2302      	movs	r3, #2
  }
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b084      	sub	sp, #16
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e0b9      	b.n	8002ca8 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d106      	bne.n	8002b4e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7fe fb9b 	bl	8001284 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2203      	movs	r2, #3
 8002b52:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f003 fcb1 	bl	80064c2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b60:	2300      	movs	r3, #0
 8002b62:	73fb      	strb	r3, [r7, #15]
 8002b64:	e03e      	b.n	8002be4 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b66:	7bfa      	ldrb	r2, [r7, #15]
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	440b      	add	r3, r1
 8002b74:	3311      	adds	r3, #17
 8002b76:	2201      	movs	r2, #1
 8002b78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b7a:	7bfa      	ldrb	r2, [r7, #15]
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	440b      	add	r3, r1
 8002b88:	3310      	adds	r3, #16
 8002b8a:	7bfa      	ldrb	r2, [r7, #15]
 8002b8c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b8e:	7bfa      	ldrb	r2, [r7, #15]
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	4613      	mov	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	440b      	add	r3, r1
 8002b9c:	3313      	adds	r3, #19
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ba2:	7bfa      	ldrb	r2, [r7, #15]
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	440b      	add	r3, r1
 8002bb0:	3320      	adds	r3, #32
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bb6:	7bfa      	ldrb	r2, [r7, #15]
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	440b      	add	r3, r1
 8002bc4:	3324      	adds	r3, #36	@ 0x24
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bca:	7bfb      	ldrb	r3, [r7, #15]
 8002bcc:	6879      	ldr	r1, [r7, #4]
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	440b      	add	r3, r1
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bde:	7bfb      	ldrb	r3, [r7, #15]
 8002be0:	3301      	adds	r3, #1
 8002be2:	73fb      	strb	r3, [r7, #15]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	791b      	ldrb	r3, [r3, #4]
 8002be8:	7bfa      	ldrb	r2, [r7, #15]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d3bb      	bcc.n	8002b66 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bee:	2300      	movs	r3, #0
 8002bf0:	73fb      	strb	r3, [r7, #15]
 8002bf2:	e044      	b.n	8002c7e <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bf4:	7bfa      	ldrb	r2, [r7, #15]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	440b      	add	r3, r1
 8002c02:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002c06:	2200      	movs	r2, #0
 8002c08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c0a:	7bfa      	ldrb	r2, [r7, #15]
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	440b      	add	r3, r1
 8002c18:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002c1c:	7bfa      	ldrb	r2, [r7, #15]
 8002c1e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c20:	7bfa      	ldrb	r2, [r7, #15]
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	440b      	add	r3, r1
 8002c2e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002c32:	2200      	movs	r2, #0
 8002c34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c36:	7bfa      	ldrb	r2, [r7, #15]
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	440b      	add	r3, r1
 8002c44:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c4c:	7bfa      	ldrb	r2, [r7, #15]
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	4613      	mov	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	440b      	add	r3, r1
 8002c5a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c62:	7bfa      	ldrb	r2, [r7, #15]
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	4613      	mov	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	440b      	add	r3, r1
 8002c70:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	73fb      	strb	r3, [r7, #15]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	791b      	ldrb	r3, [r3, #4]
 8002c82:	7bfa      	ldrb	r2, [r7, #15]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d3b5      	bcc.n	8002bf4 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6818      	ldr	r0, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3304      	adds	r3, #4
 8002c90:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002c94:	f003 fc30 	bl	80064f8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d101      	bne.n	8002cc6 <HAL_PCD_Start+0x16>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e016      	b.n	8002cf4 <HAL_PCD_Start+0x44>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f003 fbde 	bl	8006494 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002cd8:	2101      	movs	r1, #1
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7fe fd6e 	bl	80017bc <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f005 fe9b 	bl	8008a20 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f005 fe94 	bl	8008a36 <USB_ReadInterrupts>
 8002d0e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fab1 	bl	8003282 <PCD_EP_ISR_Handler>

    return;
 8002d20:	e0bd      	b.n	8002e9e <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d013      	beq.n	8002d54 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d3e:	b292      	uxth	r2, r2
 8002d40:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7fe fb3e 	bl	80013c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f8a9 	bl	8002ea4 <HAL_PCD_SetAddress>

    return;
 8002d52:	e0a4      	b.n	8002e9e <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00c      	beq.n	8002d78 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002d70:	b292      	uxth	r2, r2
 8002d72:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002d76:	e092      	b.n	8002e9e <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00c      	beq.n	8002d9c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d94:	b292      	uxth	r2, r2
 8002d96:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002d9a:	e080      	b.n	8002e9e <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d027      	beq.n	8002df6 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0204 	bic.w	r2, r2, #4
 8002db8:	b292      	uxth	r2, r2
 8002dba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 0208 	bic.w	r2, r2, #8
 8002dd0:	b292      	uxth	r2, r2
 8002dd2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7fe fb2e 	bl	8001438 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002dee:	b292      	uxth	r2, r2
 8002df0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002df4:	e053      	b.n	8002e9e <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d027      	beq.n	8002e50 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 0208 	orr.w	r2, r2, #8
 8002e12:	b292      	uxth	r2, r2
 8002e14:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e2a:	b292      	uxth	r2, r2
 8002e2c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0204 	orr.w	r2, r2, #4
 8002e42:	b292      	uxth	r2, r2
 8002e44:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f7fe fadb 	bl	8001404 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002e4e:	e026      	b.n	8002e9e <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00f      	beq.n	8002e7a <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e6c:	b292      	uxth	r2, r2
 8002e6e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7fe fa99 	bl	80013aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002e78:	e011      	b.n	8002e9e <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00c      	beq.n	8002e9e <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e96:	b292      	uxth	r2, r2
 8002e98:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002e9c:	bf00      	nop
  }
}
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	460b      	mov	r3, r1
 8002eae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d101      	bne.n	8002ebe <HAL_PCD_SetAddress+0x1a>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e012      	b.n	8002ee4 <HAL_PCD_SetAddress+0x40>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	78fa      	ldrb	r2, [r7, #3]
 8002eca:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	78fa      	ldrb	r2, [r7, #3]
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f005 fd8f 	bl	80089f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	4608      	mov	r0, r1
 8002ef6:	4611      	mov	r1, r2
 8002ef8:	461a      	mov	r2, r3
 8002efa:	4603      	mov	r3, r0
 8002efc:	70fb      	strb	r3, [r7, #3]
 8002efe:	460b      	mov	r3, r1
 8002f00:	803b      	strh	r3, [r7, #0]
 8002f02:	4613      	mov	r3, r2
 8002f04:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f06:	2300      	movs	r3, #0
 8002f08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	da0e      	bge.n	8002f30 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f12:	78fb      	ldrb	r3, [r7, #3]
 8002f14:	f003 0207 	and.w	r2, r3, #7
 8002f18:	4613      	mov	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	3310      	adds	r3, #16
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	4413      	add	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	705a      	strb	r2, [r3, #1]
 8002f2e:	e00e      	b.n	8002f4e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f30:	78fb      	ldrb	r3, [r7, #3]
 8002f32:	f003 0207 	and.w	r2, r3, #7
 8002f36:	4613      	mov	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4413      	add	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	4413      	add	r3, r2
 8002f46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f4e:	78fb      	ldrb	r3, [r7, #3]
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f5a:	883a      	ldrh	r2, [r7, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	78ba      	ldrb	r2, [r7, #2]
 8002f64:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f66:	78bb      	ldrb	r3, [r7, #2]
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d102      	bne.n	8002f72 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_PCD_EP_Open+0x94>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e00e      	b.n	8002f9e <HAL_PCD_EP_Open+0xb2>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68f9      	ldr	r1, [r7, #12]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f003 fad0 	bl	8006534 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002f9c:	7afb      	ldrb	r3, [r7, #11]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b084      	sub	sp, #16
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
 8002fae:	460b      	mov	r3, r1
 8002fb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	da0e      	bge.n	8002fd8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fba:	78fb      	ldrb	r3, [r7, #3]
 8002fbc:	f003 0207 	and.w	r2, r3, #7
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	3310      	adds	r3, #16
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	4413      	add	r3, r2
 8002fce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	705a      	strb	r2, [r3, #1]
 8002fd6:	e00e      	b.n	8002ff6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fd8:	78fb      	ldrb	r3, [r7, #3]
 8002fda:	f003 0207 	and.w	r2, r3, #7
 8002fde:	4613      	mov	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	4413      	add	r3, r2
 8002fee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ff6:	78fb      	ldrb	r3, [r7, #3]
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003008:	2b01      	cmp	r3, #1
 800300a:	d101      	bne.n	8003010 <HAL_PCD_EP_Close+0x6a>
 800300c:	2302      	movs	r3, #2
 800300e:	e00e      	b.n	800302e <HAL_PCD_EP_Close+0x88>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68f9      	ldr	r1, [r7, #12]
 800301e:	4618      	mov	r0, r3
 8003020:	f003 fe4c 	bl	8006cbc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b086      	sub	sp, #24
 800303a:	af00      	add	r7, sp, #0
 800303c:	60f8      	str	r0, [r7, #12]
 800303e:	607a      	str	r2, [r7, #4]
 8003040:	603b      	str	r3, [r7, #0]
 8003042:	460b      	mov	r3, r1
 8003044:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003046:	7afb      	ldrb	r3, [r7, #11]
 8003048:	f003 0207 	and.w	r2, r3, #7
 800304c:	4613      	mov	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	4413      	add	r3, r2
 800305c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2200      	movs	r2, #0
 800306e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	2200      	movs	r2, #0
 8003074:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003076:	7afb      	ldrb	r3, [r7, #11]
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	b2da      	uxtb	r2, r3
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6979      	ldr	r1, [r7, #20]
 8003088:	4618      	mov	r0, r3
 800308a:	f004 f804 	bl	8007096 <USB_EPStartXfer>

  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	460b      	mov	r3, r1
 80030a2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80030a4:	78fb      	ldrb	r3, [r7, #3]
 80030a6:	f003 0207 	and.w	r2, r3, #7
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	4613      	mov	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	440b      	add	r3, r1
 80030b6:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80030ba:	681b      	ldr	r3, [r3, #0]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	607a      	str	r2, [r7, #4]
 80030d2:	603b      	str	r3, [r7, #0]
 80030d4:	460b      	mov	r3, r1
 80030d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030d8:	7afb      	ldrb	r3, [r7, #11]
 80030da:	f003 0207 	and.w	r2, r3, #7
 80030de:	4613      	mov	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	3310      	adds	r3, #16
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	4413      	add	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	2200      	movs	r2, #0
 800310c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2201      	movs	r2, #1
 8003112:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003114:	7afb      	ldrb	r3, [r7, #11]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	b2da      	uxtb	r2, r3
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6979      	ldr	r1, [r7, #20]
 8003126:	4618      	mov	r0, r3
 8003128:	f003 ffb5 	bl	8007096 <USB_EPStartXfer>

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3718      	adds	r7, #24
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b084      	sub	sp, #16
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
 800313e:	460b      	mov	r3, r1
 8003140:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003142:	78fb      	ldrb	r3, [r7, #3]
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	7912      	ldrb	r2, [r2, #4]
 800314c:	4293      	cmp	r3, r2
 800314e:	d901      	bls.n	8003154 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e03e      	b.n	80031d2 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003154:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003158:	2b00      	cmp	r3, #0
 800315a:	da0e      	bge.n	800317a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800315c:	78fb      	ldrb	r3, [r7, #3]
 800315e:	f003 0207 	and.w	r2, r3, #7
 8003162:	4613      	mov	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	3310      	adds	r3, #16
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	4413      	add	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2201      	movs	r2, #1
 8003176:	705a      	strb	r2, [r3, #1]
 8003178:	e00c      	b.n	8003194 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800317a:	78fa      	ldrb	r2, [r7, #3]
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	4413      	add	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2201      	movs	r2, #1
 8003198:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800319a:	78fb      	ldrb	r3, [r7, #3]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d101      	bne.n	80031b4 <HAL_PCD_EP_SetStall+0x7e>
 80031b0:	2302      	movs	r3, #2
 80031b2:	e00e      	b.n	80031d2 <HAL_PCD_EP_SetStall+0x9c>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68f9      	ldr	r1, [r7, #12]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f005 fb19 	bl	80087fa <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b084      	sub	sp, #16
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
 80031e2:	460b      	mov	r3, r1
 80031e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80031e6:	78fb      	ldrb	r3, [r7, #3]
 80031e8:	f003 030f 	and.w	r3, r3, #15
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	7912      	ldrb	r2, [r2, #4]
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d901      	bls.n	80031f8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e040      	b.n	800327a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	da0e      	bge.n	800321e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003200:	78fb      	ldrb	r3, [r7, #3]
 8003202:	f003 0207 	and.w	r2, r3, #7
 8003206:	4613      	mov	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	3310      	adds	r3, #16
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	4413      	add	r3, r2
 8003214:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2201      	movs	r2, #1
 800321a:	705a      	strb	r2, [r3, #1]
 800321c:	e00e      	b.n	800323c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800321e:	78fb      	ldrb	r3, [r7, #3]
 8003220:	f003 0207 	and.w	r2, r3, #7
 8003224:	4613      	mov	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	4413      	add	r3, r2
 8003234:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003242:	78fb      	ldrb	r3, [r7, #3]
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	b2da      	uxtb	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003254:	2b01      	cmp	r3, #1
 8003256:	d101      	bne.n	800325c <HAL_PCD_EP_ClrStall+0x82>
 8003258:	2302      	movs	r3, #2
 800325a:	e00e      	b.n	800327a <HAL_PCD_EP_ClrStall+0xa0>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68f9      	ldr	r1, [r7, #12]
 800326a:	4618      	mov	r0, r3
 800326c:	f005 fb16 	bl	800889c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b096      	sub	sp, #88	@ 0x58
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800328a:	e3bb      	b.n	8003a04 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003294:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003298:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800329c:	b2db      	uxtb	r3, r3
 800329e:	f003 030f 	and.w	r3, r3, #15
 80032a2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 80032a6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f040 8175 	bne.w	800359a <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80032b0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80032b4:	f003 0310 	and.w	r3, r3, #16
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d14e      	bne.n	800335a <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80032c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032cc:	81fb      	strh	r3, [r7, #14]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	89fb      	ldrh	r3, [r7, #14]
 80032d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032dc:	b29b      	uxth	r3, r3
 80032de:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3310      	adds	r3, #16
 80032e4:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	461a      	mov	r2, r3
 80032f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	4413      	add	r3, r2
 80032fa:	3302      	adds	r3, #2
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6812      	ldr	r2, [r2, #0]
 8003302:	4413      	add	r3, r2
 8003304:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003308:	881b      	ldrh	r3, [r3, #0]
 800330a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800330e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003310:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003312:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003314:	695a      	ldr	r2, [r3, #20]
 8003316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	441a      	add	r2, r3
 800331c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800331e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003320:	2100      	movs	r1, #0
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7fe f827 	bl	8001376 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	7b1b      	ldrb	r3, [r3, #12]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 8368 	beq.w	8003a04 <PCD_EP_ISR_Handler+0x782>
 8003334:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	2b00      	cmp	r3, #0
 800333a:	f040 8363 	bne.w	8003a04 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	7b1b      	ldrb	r3, [r3, #12]
 8003342:	b2db      	uxtb	r3, r3
 8003344:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003348:	b2da      	uxtb	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	731a      	strb	r2, [r3, #12]
 8003358:	e354      	b.n	8003a04 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003360:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	881b      	ldrh	r3, [r3, #0]
 8003368:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800336c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003370:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003374:	2b00      	cmp	r3, #0
 8003376:	d034      	beq.n	80033e2 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003380:	b29b      	uxth	r3, r3
 8003382:	461a      	mov	r2, r3
 8003384:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	4413      	add	r3, r2
 800338c:	3306      	adds	r3, #6
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6812      	ldr	r2, [r2, #0]
 8003394:	4413      	add	r3, r2
 8003396:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033a2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6818      	ldr	r0, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80033ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033b0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80033b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033b4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	f005 fb93 	bl	8008ae2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80033c8:	4013      	ands	r3, r2
 80033ca:	823b      	strh	r3, [r7, #16]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	8a3a      	ldrh	r2, [r7, #16]
 80033d2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80033d6:	b292      	uxth	r2, r2
 80033d8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7fd ff9e 	bl	800131c <HAL_PCD_SetupStageCallback>
 80033e0:	e310      	b.n	8003a04 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80033e2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f280 830c 	bge.w	8003a04 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	881b      	ldrh	r3, [r3, #0]
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80033f8:	4013      	ands	r3, r2
 80033fa:	83fb      	strh	r3, [r7, #30]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	8bfa      	ldrh	r2, [r7, #30]
 8003402:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003406:	b292      	uxth	r2, r2
 8003408:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003412:	b29b      	uxth	r3, r3
 8003414:	461a      	mov	r2, r3
 8003416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	4413      	add	r3, r2
 800341e:	3306      	adds	r3, #6
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6812      	ldr	r2, [r2, #0]
 8003426:	4413      	add	r3, r2
 8003428:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800342c:	881b      	ldrh	r3, [r3, #0]
 800342e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003432:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003434:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d019      	beq.n	8003472 <PCD_EP_ISR_Handler+0x1f0>
 800343e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d015      	beq.n	8003472 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6818      	ldr	r0, [r3, #0]
 800344a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800344c:	6959      	ldr	r1, [r3, #20]
 800344e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003450:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003452:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003454:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003456:	b29b      	uxth	r3, r3
 8003458:	f005 fb43 	bl	8008ae2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800345c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800345e:	695a      	ldr	r2, [r3, #20]
 8003460:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	441a      	add	r2, r3
 8003466:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003468:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800346a:	2100      	movs	r1, #0
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7fd ff67 	bl	8001340 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	881b      	ldrh	r3, [r3, #0]
 8003478:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800347c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003480:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003484:	2b00      	cmp	r3, #0
 8003486:	f040 82bd 	bne.w	8003a04 <PCD_EP_ISR_Handler+0x782>
 800348a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800348e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003492:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003496:	f000 82b5 	beq.w	8003a04 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	61bb      	str	r3, [r7, #24]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	461a      	mov	r2, r3
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	4413      	add	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80034b8:	617b      	str	r3, [r7, #20]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	b29b      	uxth	r3, r3
 80034c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	801a      	strh	r2, [r3, #0]
 80034ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10a      	bne.n	80034e8 <PCD_EP_ISR_Handler+0x266>
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	881b      	ldrh	r3, [r3, #0]
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	801a      	strh	r2, [r3, #0]
 80034e6:	e039      	b.n	800355c <PCD_EP_ISR_Handler+0x2da>
 80034e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80034ee:	d818      	bhi.n	8003522 <PCD_EP_ISR_Handler+0x2a0>
 80034f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	085b      	lsrs	r3, r3, #1
 80034f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80034f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b00      	cmp	r3, #0
 8003502:	d002      	beq.n	800350a <PCD_EP_ISR_Handler+0x288>
 8003504:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003506:	3301      	adds	r3, #1
 8003508:	647b      	str	r3, [r7, #68]	@ 0x44
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	881b      	ldrh	r3, [r3, #0]
 800350e:	b29a      	uxth	r2, r3
 8003510:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003512:	b29b      	uxth	r3, r3
 8003514:	029b      	lsls	r3, r3, #10
 8003516:	b29b      	uxth	r3, r3
 8003518:	4313      	orrs	r3, r2
 800351a:	b29a      	uxth	r2, r3
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	801a      	strh	r2, [r3, #0]
 8003520:	e01c      	b.n	800355c <PCD_EP_ISR_Handler+0x2da>
 8003522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	095b      	lsrs	r3, r3, #5
 8003528:	647b      	str	r3, [r7, #68]	@ 0x44
 800352a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	f003 031f 	and.w	r3, r3, #31
 8003532:	2b00      	cmp	r3, #0
 8003534:	d102      	bne.n	800353c <PCD_EP_ISR_Handler+0x2ba>
 8003536:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003538:	3b01      	subs	r3, #1
 800353a:	647b      	str	r3, [r7, #68]	@ 0x44
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	b29a      	uxth	r2, r3
 8003542:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003544:	b29b      	uxth	r3, r3
 8003546:	029b      	lsls	r3, r3, #10
 8003548:	b29b      	uxth	r3, r3
 800354a:	4313      	orrs	r3, r2
 800354c:	b29b      	uxth	r3, r3
 800354e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003556:	b29a      	uxth	r2, r3
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	b29b      	uxth	r3, r3
 8003564:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003568:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800356c:	827b      	strh	r3, [r7, #18]
 800356e:	8a7b      	ldrh	r3, [r7, #18]
 8003570:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003574:	827b      	strh	r3, [r7, #18]
 8003576:	8a7b      	ldrh	r3, [r7, #18]
 8003578:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800357c:	827b      	strh	r3, [r7, #18]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	8a7b      	ldrh	r3, [r7, #18]
 8003584:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003588:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800358c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003590:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003594:	b29b      	uxth	r3, r3
 8003596:	8013      	strh	r3, [r2, #0]
 8003598:	e234      	b.n	8003a04 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	881b      	ldrh	r3, [r3, #0]
 80035aa:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80035ae:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f280 80fc 	bge.w	80037b0 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	461a      	mov	r2, r3
 80035be:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	881b      	ldrh	r3, [r3, #0]
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80035ce:	4013      	ands	r3, r2
 80035d0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	461a      	mov	r2, r3
 80035da:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80035e6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80035ea:	b292      	uxth	r2, r2
 80035ec:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80035ee:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80035f2:	4613      	mov	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	4413      	add	r3, r2
 8003602:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003604:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003606:	7b1b      	ldrb	r3, [r3, #12]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d125      	bne.n	8003658 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003614:	b29b      	uxth	r3, r3
 8003616:	461a      	mov	r2, r3
 8003618:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	4413      	add	r3, r2
 8003620:	3306      	adds	r3, #6
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6812      	ldr	r2, [r2, #0]
 8003628:	4413      	add	r3, r2
 800362a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003634:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003638:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 8092 	beq.w	8003766 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003648:	6959      	ldr	r1, [r3, #20]
 800364a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800364c:	88da      	ldrh	r2, [r3, #6]
 800364e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003652:	f005 fa46 	bl	8008ae2 <USB_ReadPMA>
 8003656:	e086      	b.n	8003766 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003658:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800365a:	78db      	ldrb	r3, [r3, #3]
 800365c:	2b02      	cmp	r3, #2
 800365e:	d10a      	bne.n	8003676 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003660:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003664:	461a      	mov	r2, r3
 8003666:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f9d9 	bl	8003a20 <HAL_PCD_EP_DB_Receive>
 800366e:	4603      	mov	r3, r0
 8003670:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003674:	e077      	b.n	8003766 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	461a      	mov	r2, r3
 800367c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	881b      	ldrh	r3, [r3, #0]
 8003686:	b29b      	uxth	r3, r3
 8003688:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800368c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003690:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	461a      	mov	r2, r3
 800369a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	441a      	add	r2, r3
 80036a2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80036a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	461a      	mov	r2, r3
 80036c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d024      	beq.n	800371e <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036dc:	b29b      	uxth	r3, r3
 80036de:	461a      	mov	r2, r3
 80036e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	4413      	add	r3, r2
 80036e8:	3302      	adds	r3, #2
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	6812      	ldr	r2, [r2, #0]
 80036f0:	4413      	add	r3, r2
 80036f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80036f6:	881b      	ldrh	r3, [r3, #0]
 80036f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036fc:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003700:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003704:	2b00      	cmp	r3, #0
 8003706:	d02e      	beq.n	8003766 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6818      	ldr	r0, [r3, #0]
 800370c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800370e:	6959      	ldr	r1, [r3, #20]
 8003710:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003712:	891a      	ldrh	r2, [r3, #8]
 8003714:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003718:	f005 f9e3 	bl	8008ae2 <USB_ReadPMA>
 800371c:	e023      	b.n	8003766 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003726:	b29b      	uxth	r3, r3
 8003728:	461a      	mov	r2, r3
 800372a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	4413      	add	r3, r2
 8003732:	3306      	adds	r3, #6
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6812      	ldr	r2, [r2, #0]
 800373a:	4413      	add	r3, r2
 800373c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003740:	881b      	ldrh	r3, [r3, #0]
 8003742:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003746:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800374a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800374e:	2b00      	cmp	r3, #0
 8003750:	d009      	beq.n	8003766 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6818      	ldr	r0, [r3, #0]
 8003756:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003758:	6959      	ldr	r1, [r3, #20]
 800375a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800375c:	895a      	ldrh	r2, [r3, #10]
 800375e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003762:	f005 f9be 	bl	8008ae2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003766:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003768:	69da      	ldr	r2, [r3, #28]
 800376a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800376e:	441a      	add	r2, r3
 8003770:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003772:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003774:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003776:	695a      	ldr	r2, [r3, #20]
 8003778:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800377c:	441a      	add	r2, r3
 800377e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003780:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d005      	beq.n	8003796 <PCD_EP_ISR_Handler+0x514>
 800378a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800378e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	429a      	cmp	r2, r3
 8003794:	d206      	bcs.n	80037a4 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003796:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	4619      	mov	r1, r3
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7fd fdcf 	bl	8001340 <HAL_PCD_DataOutStageCallback>
 80037a2:	e005      	b.n	80037b0 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037aa:	4618      	mov	r0, r3
 80037ac:	f003 fc73 	bl	8007096 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80037b0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80037b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 8123 	beq.w	8003a04 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80037be:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80037c2:	4613      	mov	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4413      	add	r3, r2
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	3310      	adds	r3, #16
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	4413      	add	r3, r2
 80037d0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	461a      	mov	r2, r3
 80037d8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80037e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037ec:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	461a      	mov	r2, r3
 80037f6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	441a      	add	r2, r3
 80037fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003802:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003806:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800380a:	b29b      	uxth	r3, r3
 800380c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800380e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003810:	78db      	ldrb	r3, [r3, #3]
 8003812:	2b01      	cmp	r3, #1
 8003814:	f040 80a2 	bne.w	800395c <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8003818:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800381a:	2200      	movs	r2, #0
 800381c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800381e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003820:	7b1b      	ldrb	r3, [r3, #12]
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 8093 	beq.w	800394e <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003828:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800382c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003830:	2b00      	cmp	r3, #0
 8003832:	d046      	beq.n	80038c2 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003834:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003836:	785b      	ldrb	r3, [r3, #1]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d126      	bne.n	800388a <PCD_EP_ISR_Handler+0x608>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	627b      	str	r3, [r7, #36]	@ 0x24
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800384a:	b29b      	uxth	r3, r3
 800384c:	461a      	mov	r2, r3
 800384e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003850:	4413      	add	r3, r2
 8003852:	627b      	str	r3, [r7, #36]	@ 0x24
 8003854:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	011a      	lsls	r2, r3, #4
 800385a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385c:	4413      	add	r3, r2
 800385e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003862:	623b      	str	r3, [r7, #32]
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	881b      	ldrh	r3, [r3, #0]
 8003868:	b29b      	uxth	r3, r3
 800386a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800386e:	b29a      	uxth	r2, r3
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	801a      	strh	r2, [r3, #0]
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	881b      	ldrh	r3, [r3, #0]
 8003878:	b29b      	uxth	r3, r3
 800387a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800387e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003882:	b29a      	uxth	r2, r3
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	801a      	strh	r2, [r3, #0]
 8003888:	e061      	b.n	800394e <PCD_EP_ISR_Handler+0x6cc>
 800388a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800388c:	785b      	ldrb	r3, [r3, #1]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d15d      	bne.n	800394e <PCD_EP_ISR_Handler+0x6cc>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	461a      	mov	r2, r3
 80038a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038a6:	4413      	add	r3, r2
 80038a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	011a      	lsls	r2, r3, #4
 80038b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038b2:	4413      	add	r3, r2
 80038b4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80038b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038bc:	2200      	movs	r2, #0
 80038be:	801a      	strh	r2, [r3, #0]
 80038c0:	e045      	b.n	800394e <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ca:	785b      	ldrb	r3, [r3, #1]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d126      	bne.n	800391e <PCD_EP_ISR_Handler+0x69c>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038de:	b29b      	uxth	r3, r3
 80038e0:	461a      	mov	r2, r3
 80038e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038e4:	4413      	add	r3, r2
 80038e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80038e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	011a      	lsls	r2, r3, #4
 80038ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038f0:	4413      	add	r3, r2
 80038f2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80038f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80038f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038fa:	881b      	ldrh	r3, [r3, #0]
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003902:	b29a      	uxth	r2, r3
 8003904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003906:	801a      	strh	r2, [r3, #0]
 8003908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800390a:	881b      	ldrh	r3, [r3, #0]
 800390c:	b29b      	uxth	r3, r3
 800390e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003912:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003916:	b29a      	uxth	r2, r3
 8003918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800391a:	801a      	strh	r2, [r3, #0]
 800391c:	e017      	b.n	800394e <PCD_EP_ISR_Handler+0x6cc>
 800391e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003920:	785b      	ldrb	r3, [r3, #1]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d113      	bne.n	800394e <PCD_EP_ISR_Handler+0x6cc>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800392e:	b29b      	uxth	r3, r3
 8003930:	461a      	mov	r2, r3
 8003932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003934:	4413      	add	r3, r2
 8003936:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003938:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	011a      	lsls	r2, r3, #4
 800393e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003940:	4413      	add	r3, r2
 8003942:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003946:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800394a:	2200      	movs	r2, #0
 800394c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800394e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	4619      	mov	r1, r3
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7fd fd0e 	bl	8001376 <HAL_PCD_DataInStageCallback>
 800395a:	e053      	b.n	8003a04 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800395c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003964:	2b00      	cmp	r3, #0
 8003966:	d146      	bne.n	80039f6 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003970:	b29b      	uxth	r3, r3
 8003972:	461a      	mov	r2, r3
 8003974:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	4413      	add	r3, r2
 800397c:	3302      	adds	r3, #2
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6812      	ldr	r2, [r2, #0]
 8003984:	4413      	add	r3, r2
 8003986:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003990:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003994:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003996:	699a      	ldr	r2, [r3, #24]
 8003998:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800399c:	429a      	cmp	r2, r3
 800399e:	d907      	bls.n	80039b0 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80039a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039a2:	699a      	ldr	r2, [r3, #24]
 80039a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80039a8:	1ad2      	subs	r2, r2, r3
 80039aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039ac:	619a      	str	r2, [r3, #24]
 80039ae:	e002      	b.n	80039b6 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80039b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039b2:	2200      	movs	r2, #0
 80039b4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80039b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d106      	bne.n	80039cc <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	4619      	mov	r1, r3
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f7fd fcd6 	bl	8001376 <HAL_PCD_DataInStageCallback>
 80039ca:	e01b      	b.n	8003a04 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80039cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039ce:	695a      	ldr	r2, [r3, #20]
 80039d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80039d4:	441a      	add	r2, r3
 80039d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039d8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80039da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039dc:	69da      	ldr	r2, [r3, #28]
 80039de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80039e2:	441a      	add	r2, r3
 80039e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039e6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039ee:	4618      	mov	r0, r3
 80039f0:	f003 fb51 	bl	8007096 <USB_EPStartXfer>
 80039f4:	e006      	b.n	8003a04 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80039f6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80039fa:	461a      	mov	r2, r3
 80039fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f91b 	bl	8003c3a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	b21b      	sxth	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f6ff ac3b 	blt.w	800328c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3758      	adds	r7, #88	@ 0x58
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b088      	sub	sp, #32
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003a2e:	88fb      	ldrh	r3, [r7, #6]
 8003a30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d07e      	beq.n	8003b36 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	461a      	mov	r2, r3
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	4413      	add	r3, r2
 8003a4c:	3302      	adds	r3, #2
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	6812      	ldr	r2, [r2, #0]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003a5a:	881b      	ldrh	r3, [r3, #0]
 8003a5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a60:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	699a      	ldr	r2, [r3, #24]
 8003a66:	8b7b      	ldrh	r3, [r7, #26]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d306      	bcc.n	8003a7a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	699a      	ldr	r2, [r3, #24]
 8003a70:	8b7b      	ldrh	r3, [r7, #26]
 8003a72:	1ad2      	subs	r2, r2, r3
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	619a      	str	r2, [r3, #24]
 8003a78:	e002      	b.n	8003a80 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d123      	bne.n	8003ad0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	881b      	ldrh	r3, [r3, #0]
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aa2:	833b      	strh	r3, [r7, #24]
 8003aa4:	8b3b      	ldrh	r3, [r7, #24]
 8003aa6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003aaa:	833b      	strh	r3, [r7, #24]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	441a      	add	r2, r3
 8003aba:	8b3b      	ldrh	r3, [r7, #24]
 8003abc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ac0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ac4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ac8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003ad0:	88fb      	ldrh	r3, [r7, #6]
 8003ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d01f      	beq.n	8003b1a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4413      	add	r3, r2
 8003ae8:	881b      	ldrh	r3, [r3, #0]
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003af0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003af4:	82fb      	strh	r3, [r7, #22]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	461a      	mov	r2, r3
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	441a      	add	r2, r3
 8003b04:	8afb      	ldrh	r3, [r7, #22]
 8003b06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b12:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003b1a:	8b7b      	ldrh	r3, [r7, #26]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 8087 	beq.w	8003c30 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6818      	ldr	r0, [r3, #0]
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	6959      	ldr	r1, [r3, #20]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	891a      	ldrh	r2, [r3, #8]
 8003b2e:	8b7b      	ldrh	r3, [r7, #26]
 8003b30:	f004 ffd7 	bl	8008ae2 <USB_ReadPMA>
 8003b34:	e07c      	b.n	8003c30 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	461a      	mov	r2, r3
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	4413      	add	r3, r2
 8003b4a:	3306      	adds	r3, #6
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	6812      	ldr	r2, [r2, #0]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b58:	881b      	ldrh	r3, [r3, #0]
 8003b5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b5e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	699a      	ldr	r2, [r3, #24]
 8003b64:	8b7b      	ldrh	r3, [r7, #26]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d306      	bcc.n	8003b78 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	699a      	ldr	r2, [r3, #24]
 8003b6e:	8b7b      	ldrh	r3, [r7, #26]
 8003b70:	1ad2      	subs	r2, r2, r3
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	619a      	str	r2, [r3, #24]
 8003b76:	e002      	b.n	8003b7e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d123      	bne.n	8003bce <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ba0:	83fb      	strh	r3, [r7, #30]
 8003ba2:	8bfb      	ldrh	r3, [r7, #30]
 8003ba4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003ba8:	83fb      	strh	r3, [r7, #30]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	441a      	add	r2, r3
 8003bb8:	8bfb      	ldrh	r3, [r7, #30]
 8003bba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003bce:	88fb      	ldrh	r3, [r7, #6]
 8003bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d11f      	bne.n	8003c18 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	881b      	ldrh	r3, [r3, #0]
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bf2:	83bb      	strh	r3, [r7, #28]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	441a      	add	r2, r3
 8003c02:	8bbb      	ldrh	r3, [r7, #28]
 8003c04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c10:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003c18:	8b7b      	ldrh	r3, [r7, #26]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d008      	beq.n	8003c30 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6818      	ldr	r0, [r3, #0]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	6959      	ldr	r1, [r3, #20]
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	895a      	ldrh	r2, [r3, #10]
 8003c2a:	8b7b      	ldrh	r3, [r7, #26]
 8003c2c:	f004 ff59 	bl	8008ae2 <USB_ReadPMA>
    }
  }

  return count;
 8003c30:	8b7b      	ldrh	r3, [r7, #26]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3720      	adds	r7, #32
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b0a4      	sub	sp, #144	@ 0x90
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	60f8      	str	r0, [r7, #12]
 8003c42:	60b9      	str	r1, [r7, #8]
 8003c44:	4613      	mov	r3, r2
 8003c46:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c48:	88fb      	ldrh	r3, [r7, #6]
 8003c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 81dd 	beq.w	800400e <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	461a      	mov	r2, r3
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	4413      	add	r3, r2
 8003c68:	3302      	adds	r3, #2
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	6812      	ldr	r2, [r2, #0]
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c76:	881b      	ldrh	r3, [r3, #0]
 8003c78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c7c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	699a      	ldr	r2, [r3, #24]
 8003c84:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d907      	bls.n	8003c9c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	699a      	ldr	r2, [r3, #24]
 8003c90:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003c94:	1ad2      	subs	r2, r2, r3
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	619a      	str	r2, [r3, #24]
 8003c9a:	e002      	b.n	8003ca2 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f040 80b9 	bne.w	8003e1e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	785b      	ldrb	r3, [r3, #1]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d126      	bne.n	8003d02 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cc8:	4413      	add	r3, r2
 8003cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	011a      	lsls	r2, r3, #4
 8003cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003cda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cde:	881b      	ldrh	r3, [r3, #0]
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cea:	801a      	strh	r2, [r3, #0]
 8003cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cee:	881b      	ldrh	r3, [r3, #0]
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cfe:	801a      	strh	r2, [r3, #0]
 8003d00:	e01a      	b.n	8003d38 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	785b      	ldrb	r3, [r3, #1]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d116      	bne.n	8003d38 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d1e:	4413      	add	r3, r2
 8003d20:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	011a      	lsls	r2, r3, #4
 8003d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003d30:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d34:	2200      	movs	r2, #0
 8003d36:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	785b      	ldrb	r3, [r3, #1]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d126      	bne.n	8003d94 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	61fb      	str	r3, [r7, #28]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	461a      	mov	r2, r3
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	61fb      	str	r3, [r7, #28]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	011a      	lsls	r2, r3, #4
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	4413      	add	r3, r2
 8003d68:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003d6c:	61bb      	str	r3, [r7, #24]
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	801a      	strh	r2, [r3, #0]
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	881b      	ldrh	r3, [r3, #0]
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	801a      	strh	r2, [r3, #0]
 8003d92:	e017      	b.n	8003dc4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	785b      	ldrb	r3, [r3, #1]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d113      	bne.n	8003dc4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	461a      	mov	r2, r3
 8003da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003daa:	4413      	add	r3, r2
 8003dac:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	011a      	lsls	r2, r3, #4
 8003db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db6:	4413      	add	r3, r2
 8003db8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003dbc:	623b      	str	r3, [r7, #32]
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	4619      	mov	r1, r3
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f7fd fad3 	bl	8001376 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003dd0:	88fb      	ldrh	r3, [r7, #6]
 8003dd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 82fc 	beq.w	80043d4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	461a      	mov	r2, r3
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003df2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003df6:	82fb      	strh	r3, [r7, #22]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	441a      	add	r2, r3
 8003e06:	8afb      	ldrh	r3, [r7, #22]
 8003e08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	8013      	strh	r3, [r2, #0]
 8003e1c:	e2da      	b.n	80043d4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e1e:	88fb      	ldrh	r3, [r7, #6]
 8003e20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d021      	beq.n	8003e6c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4413      	add	r3, r2
 8003e36:	881b      	ldrh	r3, [r3, #0]
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e42:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	441a      	add	r2, r3
 8003e54:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003e58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e60:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	f040 82ae 	bne.w	80043d4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	695a      	ldr	r2, [r3, #20]
 8003e7c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003e80:	441a      	add	r2, r3
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	69da      	ldr	r2, [r3, #28]
 8003e8a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003e8e:	441a      	add	r2, r3
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	6a1a      	ldr	r2, [r3, #32]
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d30b      	bcc.n	8003eb8 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	6a1a      	ldr	r2, [r3, #32]
 8003eac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003eb0:	1ad2      	subs	r2, r2, r3
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	621a      	str	r2, [r3, #32]
 8003eb6:	e017      	b.n	8003ee8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d108      	bne.n	8003ed2 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003ec0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003ec4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003ed0:	e00a      	b.n	8003ee8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	785b      	ldrb	r3, [r3, #1]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d165      	bne.n	8003fbc <HAL_PCD_EP_DB_Transmit+0x382>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	461a      	mov	r2, r3
 8003f02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f04:	4413      	add	r3, r2
 8003f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	011a      	lsls	r2, r3, #4
 8003f0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f10:	4413      	add	r3, r2
 8003f12:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003f16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f1a:	881b      	ldrh	r3, [r3, #0]
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f26:	801a      	strh	r2, [r3, #0]
 8003f28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10a      	bne.n	8003f46 <HAL_PCD_EP_DB_Transmit+0x30c>
 8003f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f32:	881b      	ldrh	r3, [r3, #0]
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f42:	801a      	strh	r2, [r3, #0]
 8003f44:	e057      	b.n	8003ff6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003f46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f4a:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f4c:	d818      	bhi.n	8003f80 <HAL_PCD_EP_DB_Transmit+0x346>
 8003f4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f52:	085b      	lsrs	r3, r3, #1
 8003f54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d002      	beq.n	8003f68 <HAL_PCD_EP_DB_Transmit+0x32e>
 8003f62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f64:	3301      	adds	r3, #1
 8003f66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f6a:	881b      	ldrh	r3, [r3, #0]
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	029b      	lsls	r3, r3, #10
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	4313      	orrs	r3, r2
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f7c:	801a      	strh	r2, [r3, #0]
 8003f7e:	e03a      	b.n	8003ff6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003f80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f84:	095b      	lsrs	r3, r3, #5
 8003f86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f8c:	f003 031f 	and.w	r3, r3, #31
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d102      	bne.n	8003f9a <HAL_PCD_EP_DB_Transmit+0x360>
 8003f94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f96:	3b01      	subs	r3, #1
 8003f98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f9c:	881b      	ldrh	r3, [r3, #0]
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	029b      	lsls	r3, r3, #10
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb8:	801a      	strh	r2, [r3, #0]
 8003fba:	e01c      	b.n	8003ff6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	785b      	ldrb	r3, [r3, #1]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d118      	bne.n	8003ff6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fd8:	4413      	add	r3, r2
 8003fda:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	011a      	lsls	r2, r3, #4
 8003fe2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003fea:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ff4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6818      	ldr	r0, [r3, #0]
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	6959      	ldr	r1, [r3, #20]
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	891a      	ldrh	r2, [r3, #8]
 8004002:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004006:	b29b      	uxth	r3, r3
 8004008:	f004 fd25 	bl	8008a56 <USB_WritePMA>
 800400c:	e1e2      	b.n	80043d4 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004016:	b29b      	uxth	r3, r3
 8004018:	461a      	mov	r2, r3
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	4413      	add	r3, r2
 8004022:	3306      	adds	r3, #6
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	6812      	ldr	r2, [r2, #0]
 800402a:	4413      	add	r3, r2
 800402c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004030:	881b      	ldrh	r3, [r3, #0]
 8004032:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004036:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	699a      	ldr	r2, [r3, #24]
 800403e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004042:	429a      	cmp	r2, r3
 8004044:	d307      	bcc.n	8004056 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	699a      	ldr	r2, [r3, #24]
 800404a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800404e:	1ad2      	subs	r2, r2, r3
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	619a      	str	r2, [r3, #24]
 8004054:	e002      	b.n	800405c <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	2200      	movs	r2, #0
 800405a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	2b00      	cmp	r3, #0
 8004062:	f040 80c0 	bne.w	80041e6 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	785b      	ldrb	r3, [r3, #1]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d126      	bne.n	80040bc <HAL_PCD_EP_DB_Transmit+0x482>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800407c:	b29b      	uxth	r3, r3
 800407e:	461a      	mov	r2, r3
 8004080:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004082:	4413      	add	r3, r2
 8004084:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	011a      	lsls	r2, r3, #4
 800408c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800408e:	4413      	add	r3, r2
 8004090:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004094:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004096:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004098:	881b      	ldrh	r3, [r3, #0]
 800409a:	b29b      	uxth	r3, r3
 800409c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040a4:	801a      	strh	r2, [r3, #0]
 80040a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040b8:	801a      	strh	r2, [r3, #0]
 80040ba:	e01a      	b.n	80040f2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	785b      	ldrb	r3, [r3, #1]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d116      	bne.n	80040f2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	667b      	str	r3, [r7, #100]	@ 0x64
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	461a      	mov	r2, r3
 80040d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040d8:	4413      	add	r3, r2
 80040da:	667b      	str	r3, [r7, #100]	@ 0x64
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	011a      	lsls	r2, r3, #4
 80040e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040e4:	4413      	add	r3, r2
 80040e6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80040ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80040ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040ee:	2200      	movs	r2, #0
 80040f0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	677b      	str	r3, [r7, #116]	@ 0x74
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	785b      	ldrb	r3, [r3, #1]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d12b      	bne.n	8004158 <HAL_PCD_EP_DB_Transmit+0x51e>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800410e:	b29b      	uxth	r3, r3
 8004110:	461a      	mov	r2, r3
 8004112:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004114:	4413      	add	r3, r2
 8004116:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	011a      	lsls	r2, r3, #4
 800411e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004120:	4413      	add	r3, r2
 8004122:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004126:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800412a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800412e:	881b      	ldrh	r3, [r3, #0]
 8004130:	b29b      	uxth	r3, r3
 8004132:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004136:	b29a      	uxth	r2, r3
 8004138:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800413c:	801a      	strh	r2, [r3, #0]
 800413e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004142:	881b      	ldrh	r3, [r3, #0]
 8004144:	b29b      	uxth	r3, r3
 8004146:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800414a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800414e:	b29a      	uxth	r2, r3
 8004150:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004154:	801a      	strh	r2, [r3, #0]
 8004156:	e017      	b.n	8004188 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	785b      	ldrb	r3, [r3, #1]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d113      	bne.n	8004188 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004168:	b29b      	uxth	r3, r3
 800416a:	461a      	mov	r2, r3
 800416c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800416e:	4413      	add	r3, r2
 8004170:	677b      	str	r3, [r7, #116]	@ 0x74
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	011a      	lsls	r2, r3, #4
 8004178:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800417a:	4413      	add	r3, r2
 800417c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004180:	673b      	str	r3, [r7, #112]	@ 0x70
 8004182:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004184:	2200      	movs	r2, #0
 8004186:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	4619      	mov	r1, r3
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f7fd f8f1 	bl	8001376 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004194:	88fb      	ldrh	r3, [r7, #6]
 8004196:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800419a:	2b00      	cmp	r3, #0
 800419c:	f040 811a 	bne.w	80043d4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	461a      	mov	r2, r3
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	881b      	ldrh	r3, [r3, #0]
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041ba:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	441a      	add	r2, r3
 80041cc:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80041d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	8013      	strh	r3, [r2, #0]
 80041e4:	e0f6      	b.n	80043d4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80041e6:	88fb      	ldrh	r3, [r7, #6]
 80041e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d121      	bne.n	8004234 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	461a      	mov	r2, r3
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4413      	add	r3, r2
 80041fe:	881b      	ldrh	r3, [r3, #0]
 8004200:	b29b      	uxth	r3, r3
 8004202:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004206:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800420a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	461a      	mov	r2, r3
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	441a      	add	r2, r3
 800421c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004220:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004224:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004228:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800422c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004230:	b29b      	uxth	r3, r3
 8004232:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800423a:	2b01      	cmp	r3, #1
 800423c:	f040 80ca 	bne.w	80043d4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	695a      	ldr	r2, [r3, #20]
 8004244:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004248:	441a      	add	r2, r3
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	69da      	ldr	r2, [r3, #28]
 8004252:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004256:	441a      	add	r2, r3
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	6a1a      	ldr	r2, [r3, #32]
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	429a      	cmp	r2, r3
 8004266:	d30b      	bcc.n	8004280 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	6a1a      	ldr	r2, [r3, #32]
 8004274:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004278:	1ad2      	subs	r2, r2, r3
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	621a      	str	r2, [r3, #32]
 800427e:	e017      	b.n	80042b0 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d108      	bne.n	800429a <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004288:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800428c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004298:	e00a      	b.n	80042b0 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	2200      	movs	r2, #0
 80042a6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	785b      	ldrb	r3, [r3, #1]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d165      	bne.n	800438a <HAL_PCD_EP_DB_Transmit+0x750>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	461a      	mov	r2, r3
 80042d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042d2:	4413      	add	r3, r2
 80042d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	011a      	lsls	r2, r3, #4
 80042dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042de:	4413      	add	r3, r2
 80042e0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80042e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80042e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042e8:	881b      	ldrh	r3, [r3, #0]
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042f4:	801a      	strh	r2, [r3, #0]
 80042f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10a      	bne.n	8004314 <HAL_PCD_EP_DB_Transmit+0x6da>
 80042fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004300:	881b      	ldrh	r3, [r3, #0]
 8004302:	b29b      	uxth	r3, r3
 8004304:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004308:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800430c:	b29a      	uxth	r2, r3
 800430e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004310:	801a      	strh	r2, [r3, #0]
 8004312:	e054      	b.n	80043be <HAL_PCD_EP_DB_Transmit+0x784>
 8004314:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004318:	2b3e      	cmp	r3, #62	@ 0x3e
 800431a:	d818      	bhi.n	800434e <HAL_PCD_EP_DB_Transmit+0x714>
 800431c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004320:	085b      	lsrs	r3, r3, #1
 8004322:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004324:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8004330:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004332:	3301      	adds	r3, #1
 8004334:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004336:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004338:	881b      	ldrh	r3, [r3, #0]
 800433a:	b29a      	uxth	r2, r3
 800433c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800433e:	b29b      	uxth	r3, r3
 8004340:	029b      	lsls	r3, r3, #10
 8004342:	b29b      	uxth	r3, r3
 8004344:	4313      	orrs	r3, r2
 8004346:	b29a      	uxth	r2, r3
 8004348:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800434a:	801a      	strh	r2, [r3, #0]
 800434c:	e037      	b.n	80043be <HAL_PCD_EP_DB_Transmit+0x784>
 800434e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004352:	095b      	lsrs	r3, r3, #5
 8004354:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004356:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800435a:	f003 031f 	and.w	r3, r3, #31
 800435e:	2b00      	cmp	r3, #0
 8004360:	d102      	bne.n	8004368 <HAL_PCD_EP_DB_Transmit+0x72e>
 8004362:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004364:	3b01      	subs	r3, #1
 8004366:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004368:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	b29a      	uxth	r2, r3
 800436e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004370:	b29b      	uxth	r3, r3
 8004372:	029b      	lsls	r3, r3, #10
 8004374:	b29b      	uxth	r3, r3
 8004376:	4313      	orrs	r3, r2
 8004378:	b29b      	uxth	r3, r3
 800437a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800437e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004382:	b29a      	uxth	r2, r3
 8004384:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004386:	801a      	strh	r2, [r3, #0]
 8004388:	e019      	b.n	80043be <HAL_PCD_EP_DB_Transmit+0x784>
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	785b      	ldrb	r3, [r3, #1]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d115      	bne.n	80043be <HAL_PCD_EP_DB_Transmit+0x784>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800439a:	b29b      	uxth	r3, r3
 800439c:	461a      	mov	r2, r3
 800439e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043a0:	4413      	add	r3, r2
 80043a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	011a      	lsls	r2, r3, #4
 80043aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043ac:	4413      	add	r3, r2
 80043ae:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80043b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80043b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043bc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6818      	ldr	r0, [r3, #0]
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	6959      	ldr	r1, [r3, #20]
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	895a      	ldrh	r2, [r3, #10]
 80043ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	f004 fb41 	bl	8008a56 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	461a      	mov	r2, r3
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4413      	add	r3, r2
 80043e2:	881b      	ldrh	r3, [r3, #0]
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043ee:	82bb      	strh	r3, [r7, #20]
 80043f0:	8abb      	ldrh	r3, [r7, #20]
 80043f2:	f083 0310 	eor.w	r3, r3, #16
 80043f6:	82bb      	strh	r3, [r7, #20]
 80043f8:	8abb      	ldrh	r3, [r7, #20]
 80043fa:	f083 0320 	eor.w	r3, r3, #32
 80043fe:	82bb      	strh	r3, [r7, #20]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	461a      	mov	r2, r3
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	441a      	add	r2, r3
 800440e:	8abb      	ldrh	r3, [r7, #20]
 8004410:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004414:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004418:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800441c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004420:	b29b      	uxth	r3, r3
 8004422:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3790      	adds	r7, #144	@ 0x90
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800442e:	b480      	push	{r7}
 8004430:	b087      	sub	sp, #28
 8004432:	af00      	add	r7, sp, #0
 8004434:	60f8      	str	r0, [r7, #12]
 8004436:	607b      	str	r3, [r7, #4]
 8004438:	460b      	mov	r3, r1
 800443a:	817b      	strh	r3, [r7, #10]
 800443c:	4613      	mov	r3, r2
 800443e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004440:	897b      	ldrh	r3, [r7, #10]
 8004442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004446:	b29b      	uxth	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00b      	beq.n	8004464 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800444c:	897b      	ldrh	r3, [r7, #10]
 800444e:	f003 0207 	and.w	r2, r3, #7
 8004452:	4613      	mov	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4413      	add	r3, r2
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	3310      	adds	r3, #16
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	4413      	add	r3, r2
 8004460:	617b      	str	r3, [r7, #20]
 8004462:	e009      	b.n	8004478 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004464:	897a      	ldrh	r2, [r7, #10]
 8004466:	4613      	mov	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	4413      	add	r3, r2
 8004476:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004478:	893b      	ldrh	r3, [r7, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d107      	bne.n	800448e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	2200      	movs	r2, #0
 8004482:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	b29a      	uxth	r2, r3
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	80da      	strh	r2, [r3, #6]
 800448c:	e00b      	b.n	80044a6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2201      	movs	r2, #1
 8004492:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	b29a      	uxth	r2, r3
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	0c1b      	lsrs	r3, r3, #16
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	371c      	adds	r7, #28
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044c4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d102      	bne.n	80044da <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	f001 b823 	b.w	8005520 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f000 817d 	beq.w	80047ea <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80044f0:	4bbc      	ldr	r3, [pc, #752]	@ (80047e4 <HAL_RCC_OscConfig+0x330>)
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f003 030c 	and.w	r3, r3, #12
 80044f8:	2b04      	cmp	r3, #4
 80044fa:	d00c      	beq.n	8004516 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044fc:	4bb9      	ldr	r3, [pc, #740]	@ (80047e4 <HAL_RCC_OscConfig+0x330>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f003 030c 	and.w	r3, r3, #12
 8004504:	2b08      	cmp	r3, #8
 8004506:	d15c      	bne.n	80045c2 <HAL_RCC_OscConfig+0x10e>
 8004508:	4bb6      	ldr	r3, [pc, #728]	@ (80047e4 <HAL_RCC_OscConfig+0x330>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004514:	d155      	bne.n	80045c2 <HAL_RCC_OscConfig+0x10e>
 8004516:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800451a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8004522:	fa93 f3a3 	rbit	r3, r3
 8004526:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800452a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800452e:	fab3 f383 	clz	r3, r3
 8004532:	b2db      	uxtb	r3, r3
 8004534:	095b      	lsrs	r3, r3, #5
 8004536:	b2db      	uxtb	r3, r3
 8004538:	f043 0301 	orr.w	r3, r3, #1
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b01      	cmp	r3, #1
 8004540:	d102      	bne.n	8004548 <HAL_RCC_OscConfig+0x94>
 8004542:	4ba8      	ldr	r3, [pc, #672]	@ (80047e4 <HAL_RCC_OscConfig+0x330>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	e015      	b.n	8004574 <HAL_RCC_OscConfig+0xc0>
 8004548:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800454c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004550:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8004554:	fa93 f3a3 	rbit	r3, r3
 8004558:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800455c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004560:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8004564:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8004568:	fa93 f3a3 	rbit	r3, r3
 800456c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8004570:	4b9c      	ldr	r3, [pc, #624]	@ (80047e4 <HAL_RCC_OscConfig+0x330>)
 8004572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004574:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004578:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800457c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8004580:	fa92 f2a2 	rbit	r2, r2
 8004584:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8004588:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800458c:	fab2 f282 	clz	r2, r2
 8004590:	b2d2      	uxtb	r2, r2
 8004592:	f042 0220 	orr.w	r2, r2, #32
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	f002 021f 	and.w	r2, r2, #31
 800459c:	2101      	movs	r1, #1
 800459e:	fa01 f202 	lsl.w	r2, r1, r2
 80045a2:	4013      	ands	r3, r2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 811f 	beq.w	80047e8 <HAL_RCC_OscConfig+0x334>
 80045aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f040 8116 	bne.w	80047e8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	f000 bfaf 	b.w	8005520 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045d2:	d106      	bne.n	80045e2 <HAL_RCC_OscConfig+0x12e>
 80045d4:	4b83      	ldr	r3, [pc, #524]	@ (80047e4 <HAL_RCC_OscConfig+0x330>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a82      	ldr	r2, [pc, #520]	@ (80047e4 <HAL_RCC_OscConfig+0x330>)
 80045da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045de:	6013      	str	r3, [r2, #0]
 80045e0:	e036      	b.n	8004650 <HAL_RCC_OscConfig+0x19c>
 80045e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10c      	bne.n	800460c <HAL_RCC_OscConfig+0x158>
 80045f2:	4b7c      	ldr	r3, [pc, #496]	@ (80047e4 <HAL_RCC_OscConfig+0x330>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a7b      	ldr	r2, [pc, #492]	@ (80047e4 <HAL_RCC_OscConfig+0x330>)
 80045f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045fc:	6013      	str	r3, [r2, #0]
 80045fe:	4b79      	ldr	r3, [pc, #484]	@ (80047e4 <HAL_RCC_OscConfig+0x330>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a78      	ldr	r2, [pc, #480]	@ (80047e4 <HAL_RCC_OscConfig+0x330>)
 8004604:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004608:	6013      	str	r3, [r2, #0]
 800460a:	e021      	b.n	8004650 <HAL_RCC_OscConfig+0x19c>
 800460c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004610:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800461c:	d10c      	bne.n	8004638 <HAL_RCC_OscConfig+0x184>
 800461e:	4b71      	ldr	r3, [pc, #452]	@ (80047e4 <HAL_RCC_OscConfig+0x330>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a70      	ldr	r2, [pc, #448]	@ (80047e4 <HAL_RCC_OscConfig+0x330>)
 8004624:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004628:	6013      	str	r3, [r2, #0]
 800462a:	4b6e      	ldr	r3, [pc, #440]	@ (80047e4 <HAL_RCC_OscConfig+0x330>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a6d      	ldr	r2, [pc, #436]	@ (80047e4 <HAL_RCC_OscConfig+0x330>)
 8004630:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004634:	6013      	str	r3, [r2, #0]
 8004636:	e00b      	b.n	8004650 <HAL_RCC_OscConfig+0x19c>
 8004638:	4b6a      	ldr	r3, [pc, #424]	@ (80047e4 <HAL_RCC_OscConfig+0x330>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a69      	ldr	r2, [pc, #420]	@ (80047e4 <HAL_RCC_OscConfig+0x330>)
 800463e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004642:	6013      	str	r3, [r2, #0]
 8004644:	4b67      	ldr	r3, [pc, #412]	@ (80047e4 <HAL_RCC_OscConfig+0x330>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a66      	ldr	r2, [pc, #408]	@ (80047e4 <HAL_RCC_OscConfig+0x330>)
 800464a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800464e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004650:	4b64      	ldr	r3, [pc, #400]	@ (80047e4 <HAL_RCC_OscConfig+0x330>)
 8004652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004654:	f023 020f 	bic.w	r2, r3, #15
 8004658:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800465c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	495f      	ldr	r1, [pc, #380]	@ (80047e4 <HAL_RCC_OscConfig+0x330>)
 8004666:	4313      	orrs	r3, r2
 8004668:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800466a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800466e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d059      	beq.n	800472e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800467a:	f7fd f943 	bl	8001904 <HAL_GetTick>
 800467e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004682:	e00a      	b.n	800469a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004684:	f7fd f93e 	bl	8001904 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	2b64      	cmp	r3, #100	@ 0x64
 8004692:	d902      	bls.n	800469a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	f000 bf43 	b.w	8005520 <HAL_RCC_OscConfig+0x106c>
 800469a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800469e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80046a6:	fa93 f3a3 	rbit	r3, r3
 80046aa:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80046ae:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046b2:	fab3 f383 	clz	r3, r3
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	095b      	lsrs	r3, r3, #5
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	f043 0301 	orr.w	r3, r3, #1
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d102      	bne.n	80046cc <HAL_RCC_OscConfig+0x218>
 80046c6:	4b47      	ldr	r3, [pc, #284]	@ (80047e4 <HAL_RCC_OscConfig+0x330>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	e015      	b.n	80046f8 <HAL_RCC_OscConfig+0x244>
 80046cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80046d0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80046d8:	fa93 f3a3 	rbit	r3, r3
 80046dc:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80046e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80046e4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80046e8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80046ec:	fa93 f3a3 	rbit	r3, r3
 80046f0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80046f4:	4b3b      	ldr	r3, [pc, #236]	@ (80047e4 <HAL_RCC_OscConfig+0x330>)
 80046f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80046fc:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8004700:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8004704:	fa92 f2a2 	rbit	r2, r2
 8004708:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 800470c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8004710:	fab2 f282 	clz	r2, r2
 8004714:	b2d2      	uxtb	r2, r2
 8004716:	f042 0220 	orr.w	r2, r2, #32
 800471a:	b2d2      	uxtb	r2, r2
 800471c:	f002 021f 	and.w	r2, r2, #31
 8004720:	2101      	movs	r1, #1
 8004722:	fa01 f202 	lsl.w	r2, r1, r2
 8004726:	4013      	ands	r3, r2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d0ab      	beq.n	8004684 <HAL_RCC_OscConfig+0x1d0>
 800472c:	e05d      	b.n	80047ea <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800472e:	f7fd f8e9 	bl	8001904 <HAL_GetTick>
 8004732:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004736:	e00a      	b.n	800474e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004738:	f7fd f8e4 	bl	8001904 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b64      	cmp	r3, #100	@ 0x64
 8004746:	d902      	bls.n	800474e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	f000 bee9 	b.w	8005520 <HAL_RCC_OscConfig+0x106c>
 800474e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004752:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004756:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800475a:	fa93 f3a3 	rbit	r3, r3
 800475e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8004762:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004766:	fab3 f383 	clz	r3, r3
 800476a:	b2db      	uxtb	r3, r3
 800476c:	095b      	lsrs	r3, r3, #5
 800476e:	b2db      	uxtb	r3, r3
 8004770:	f043 0301 	orr.w	r3, r3, #1
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b01      	cmp	r3, #1
 8004778:	d102      	bne.n	8004780 <HAL_RCC_OscConfig+0x2cc>
 800477a:	4b1a      	ldr	r3, [pc, #104]	@ (80047e4 <HAL_RCC_OscConfig+0x330>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	e015      	b.n	80047ac <HAL_RCC_OscConfig+0x2f8>
 8004780:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004784:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004788:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800478c:	fa93 f3a3 	rbit	r3, r3
 8004790:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8004794:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004798:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800479c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80047a0:	fa93 f3a3 	rbit	r3, r3
 80047a4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80047a8:	4b0e      	ldr	r3, [pc, #56]	@ (80047e4 <HAL_RCC_OscConfig+0x330>)
 80047aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80047b0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80047b4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80047b8:	fa92 f2a2 	rbit	r2, r2
 80047bc:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80047c0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80047c4:	fab2 f282 	clz	r2, r2
 80047c8:	b2d2      	uxtb	r2, r2
 80047ca:	f042 0220 	orr.w	r2, r2, #32
 80047ce:	b2d2      	uxtb	r2, r2
 80047d0:	f002 021f 	and.w	r2, r2, #31
 80047d4:	2101      	movs	r1, #1
 80047d6:	fa01 f202 	lsl.w	r2, r1, r2
 80047da:	4013      	ands	r3, r2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1ab      	bne.n	8004738 <HAL_RCC_OscConfig+0x284>
 80047e0:	e003      	b.n	80047ea <HAL_RCC_OscConfig+0x336>
 80047e2:	bf00      	nop
 80047e4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f000 817d 	beq.w	8004afa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004800:	4ba6      	ldr	r3, [pc, #664]	@ (8004a9c <HAL_RCC_OscConfig+0x5e8>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f003 030c 	and.w	r3, r3, #12
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00b      	beq.n	8004824 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800480c:	4ba3      	ldr	r3, [pc, #652]	@ (8004a9c <HAL_RCC_OscConfig+0x5e8>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f003 030c 	and.w	r3, r3, #12
 8004814:	2b08      	cmp	r3, #8
 8004816:	d172      	bne.n	80048fe <HAL_RCC_OscConfig+0x44a>
 8004818:	4ba0      	ldr	r3, [pc, #640]	@ (8004a9c <HAL_RCC_OscConfig+0x5e8>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d16c      	bne.n	80048fe <HAL_RCC_OscConfig+0x44a>
 8004824:	2302      	movs	r3, #2
 8004826:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800482a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800482e:	fa93 f3a3 	rbit	r3, r3
 8004832:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8004836:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800483a:	fab3 f383 	clz	r3, r3
 800483e:	b2db      	uxtb	r3, r3
 8004840:	095b      	lsrs	r3, r3, #5
 8004842:	b2db      	uxtb	r3, r3
 8004844:	f043 0301 	orr.w	r3, r3, #1
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b01      	cmp	r3, #1
 800484c:	d102      	bne.n	8004854 <HAL_RCC_OscConfig+0x3a0>
 800484e:	4b93      	ldr	r3, [pc, #588]	@ (8004a9c <HAL_RCC_OscConfig+0x5e8>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	e013      	b.n	800487c <HAL_RCC_OscConfig+0x3c8>
 8004854:	2302      	movs	r3, #2
 8004856:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800485a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800485e:	fa93 f3a3 	rbit	r3, r3
 8004862:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8004866:	2302      	movs	r3, #2
 8004868:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800486c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004870:	fa93 f3a3 	rbit	r3, r3
 8004874:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8004878:	4b88      	ldr	r3, [pc, #544]	@ (8004a9c <HAL_RCC_OscConfig+0x5e8>)
 800487a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487c:	2202      	movs	r2, #2
 800487e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8004882:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8004886:	fa92 f2a2 	rbit	r2, r2
 800488a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800488e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004892:	fab2 f282 	clz	r2, r2
 8004896:	b2d2      	uxtb	r2, r2
 8004898:	f042 0220 	orr.w	r2, r2, #32
 800489c:	b2d2      	uxtb	r2, r2
 800489e:	f002 021f 	and.w	r2, r2, #31
 80048a2:	2101      	movs	r1, #1
 80048a4:	fa01 f202 	lsl.w	r2, r1, r2
 80048a8:	4013      	ands	r3, r2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00a      	beq.n	80048c4 <HAL_RCC_OscConfig+0x410>
 80048ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d002      	beq.n	80048c4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	f000 be2e 	b.w	8005520 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048c4:	4b75      	ldr	r3, [pc, #468]	@ (8004a9c <HAL_RCC_OscConfig+0x5e8>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	21f8      	movs	r1, #248	@ 0xf8
 80048da:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048de:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80048e2:	fa91 f1a1 	rbit	r1, r1
 80048e6:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80048ea:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80048ee:	fab1 f181 	clz	r1, r1
 80048f2:	b2c9      	uxtb	r1, r1
 80048f4:	408b      	lsls	r3, r1
 80048f6:	4969      	ldr	r1, [pc, #420]	@ (8004a9c <HAL_RCC_OscConfig+0x5e8>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048fc:	e0fd      	b.n	8004afa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004902:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	2b00      	cmp	r3, #0
 800490c:	f000 8088 	beq.w	8004a20 <HAL_RCC_OscConfig+0x56c>
 8004910:	2301      	movs	r3, #1
 8004912:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004916:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800491a:	fa93 f3a3 	rbit	r3, r3
 800491e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8004922:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004926:	fab3 f383 	clz	r3, r3
 800492a:	b2db      	uxtb	r3, r3
 800492c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004930:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	461a      	mov	r2, r3
 8004938:	2301      	movs	r3, #1
 800493a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800493c:	f7fc ffe2 	bl	8001904 <HAL_GetTick>
 8004940:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004944:	e00a      	b.n	800495c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004946:	f7fc ffdd 	bl	8001904 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d902      	bls.n	800495c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	f000 bde2 	b.w	8005520 <HAL_RCC_OscConfig+0x106c>
 800495c:	2302      	movs	r3, #2
 800495e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004962:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8004966:	fa93 f3a3 	rbit	r3, r3
 800496a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800496e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004972:	fab3 f383 	clz	r3, r3
 8004976:	b2db      	uxtb	r3, r3
 8004978:	095b      	lsrs	r3, r3, #5
 800497a:	b2db      	uxtb	r3, r3
 800497c:	f043 0301 	orr.w	r3, r3, #1
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b01      	cmp	r3, #1
 8004984:	d102      	bne.n	800498c <HAL_RCC_OscConfig+0x4d8>
 8004986:	4b45      	ldr	r3, [pc, #276]	@ (8004a9c <HAL_RCC_OscConfig+0x5e8>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	e013      	b.n	80049b4 <HAL_RCC_OscConfig+0x500>
 800498c:	2302      	movs	r3, #2
 800498e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004992:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8004996:	fa93 f3a3 	rbit	r3, r3
 800499a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800499e:	2302      	movs	r3, #2
 80049a0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80049a4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80049a8:	fa93 f3a3 	rbit	r3, r3
 80049ac:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80049b0:	4b3a      	ldr	r3, [pc, #232]	@ (8004a9c <HAL_RCC_OscConfig+0x5e8>)
 80049b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b4:	2202      	movs	r2, #2
 80049b6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80049ba:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80049be:	fa92 f2a2 	rbit	r2, r2
 80049c2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80049c6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80049ca:	fab2 f282 	clz	r2, r2
 80049ce:	b2d2      	uxtb	r2, r2
 80049d0:	f042 0220 	orr.w	r2, r2, #32
 80049d4:	b2d2      	uxtb	r2, r2
 80049d6:	f002 021f 	and.w	r2, r2, #31
 80049da:	2101      	movs	r1, #1
 80049dc:	fa01 f202 	lsl.w	r2, r1, r2
 80049e0:	4013      	ands	r3, r2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d0af      	beq.n	8004946 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049e6:	4b2d      	ldr	r3, [pc, #180]	@ (8004a9c <HAL_RCC_OscConfig+0x5e8>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	21f8      	movs	r1, #248	@ 0xf8
 80049fc:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a00:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004a04:	fa91 f1a1 	rbit	r1, r1
 8004a08:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8004a0c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8004a10:	fab1 f181 	clz	r1, r1
 8004a14:	b2c9      	uxtb	r1, r1
 8004a16:	408b      	lsls	r3, r1
 8004a18:	4920      	ldr	r1, [pc, #128]	@ (8004a9c <HAL_RCC_OscConfig+0x5e8>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	600b      	str	r3, [r1, #0]
 8004a1e:	e06c      	b.n	8004afa <HAL_RCC_OscConfig+0x646>
 8004a20:	2301      	movs	r3, #1
 8004a22:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a26:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004a2a:	fa93 f3a3 	rbit	r3, r3
 8004a2e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8004a32:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a36:	fab3 f383 	clz	r3, r3
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004a40:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	461a      	mov	r2, r3
 8004a48:	2300      	movs	r3, #0
 8004a4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a4c:	f7fc ff5a 	bl	8001904 <HAL_GetTick>
 8004a50:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a54:	e00a      	b.n	8004a6c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a56:	f7fc ff55 	bl	8001904 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d902      	bls.n	8004a6c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	f000 bd5a 	b.w	8005520 <HAL_RCC_OscConfig+0x106c>
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a72:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004a76:	fa93 f3a3 	rbit	r3, r3
 8004a7a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8004a7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a82:	fab3 f383 	clz	r3, r3
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	095b      	lsrs	r3, r3, #5
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	f043 0301 	orr.w	r3, r3, #1
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d104      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x5ec>
 8004a96:	4b01      	ldr	r3, [pc, #4]	@ (8004a9c <HAL_RCC_OscConfig+0x5e8>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	e015      	b.n	8004ac8 <HAL_RCC_OscConfig+0x614>
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004aaa:	fa93 f3a3 	rbit	r3, r3
 8004aae:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004ab8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004abc:	fa93 f3a3 	rbit	r3, r3
 8004ac0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8004ac4:	4bc8      	ldr	r3, [pc, #800]	@ (8004de8 <HAL_RCC_OscConfig+0x934>)
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac8:	2202      	movs	r2, #2
 8004aca:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8004ace:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8004ad2:	fa92 f2a2 	rbit	r2, r2
 8004ad6:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8004ada:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8004ade:	fab2 f282 	clz	r2, r2
 8004ae2:	b2d2      	uxtb	r2, r2
 8004ae4:	f042 0220 	orr.w	r2, r2, #32
 8004ae8:	b2d2      	uxtb	r2, r2
 8004aea:	f002 021f 	and.w	r2, r2, #31
 8004aee:	2101      	movs	r1, #1
 8004af0:	fa01 f202 	lsl.w	r2, r1, r2
 8004af4:	4013      	ands	r3, r2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1ad      	bne.n	8004a56 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004afa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004afe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0308 	and.w	r3, r3, #8
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f000 8110 	beq.w	8004d30 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b14:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d079      	beq.n	8004c14 <HAL_RCC_OscConfig+0x760>
 8004b20:	2301      	movs	r3, #1
 8004b22:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b26:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004b2a:	fa93 f3a3 	rbit	r3, r3
 8004b2e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8004b32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b36:	fab3 f383 	clz	r3, r3
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	4bab      	ldr	r3, [pc, #684]	@ (8004dec <HAL_RCC_OscConfig+0x938>)
 8004b40:	4413      	add	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	461a      	mov	r2, r3
 8004b46:	2301      	movs	r3, #1
 8004b48:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b4a:	f7fc fedb 	bl	8001904 <HAL_GetTick>
 8004b4e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b52:	e00a      	b.n	8004b6a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b54:	f7fc fed6 	bl	8001904 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d902      	bls.n	8004b6a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	f000 bcdb 	b.w	8005520 <HAL_RCC_OscConfig+0x106c>
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b70:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8004b74:	fa93 f3a3 	rbit	r3, r3
 8004b78:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004b7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b80:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004b84:	2202      	movs	r2, #2
 8004b86:	601a      	str	r2, [r3, #0]
 8004b88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b8c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	fa93 f2a3 	rbit	r2, r3
 8004b96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ba4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ba8:	2202      	movs	r2, #2
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	fa93 f2a3 	rbit	r2, r3
 8004bba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bbe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004bc2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bc4:	4b88      	ldr	r3, [pc, #544]	@ (8004de8 <HAL_RCC_OscConfig+0x934>)
 8004bc6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004bc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bcc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004bd0:	2102      	movs	r1, #2
 8004bd2:	6019      	str	r1, [r3, #0]
 8004bd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bd8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	fa93 f1a3 	rbit	r1, r3
 8004be2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004be6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004bea:	6019      	str	r1, [r3, #0]
  return result;
 8004bec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bf0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	fab3 f383 	clz	r3, r3
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	f003 031f 	and.w	r3, r3, #31
 8004c06:	2101      	movs	r1, #1
 8004c08:	fa01 f303 	lsl.w	r3, r1, r3
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d0a0      	beq.n	8004b54 <HAL_RCC_OscConfig+0x6a0>
 8004c12:	e08d      	b.n	8004d30 <HAL_RCC_OscConfig+0x87c>
 8004c14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c18:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c24:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	fa93 f2a3 	rbit	r2, r3
 8004c2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c32:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004c36:	601a      	str	r2, [r3, #0]
  return result;
 8004c38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c3c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004c40:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c42:	fab3 f383 	clz	r3, r3
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	461a      	mov	r2, r3
 8004c4a:	4b68      	ldr	r3, [pc, #416]	@ (8004dec <HAL_RCC_OscConfig+0x938>)
 8004c4c:	4413      	add	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	461a      	mov	r2, r3
 8004c52:	2300      	movs	r3, #0
 8004c54:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c56:	f7fc fe55 	bl	8001904 <HAL_GetTick>
 8004c5a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c5e:	e00a      	b.n	8004c76 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c60:	f7fc fe50 	bl	8001904 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d902      	bls.n	8004c76 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	f000 bc55 	b.w	8005520 <HAL_RCC_OscConfig+0x106c>
 8004c76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c7a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004c7e:	2202      	movs	r2, #2
 8004c80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c86:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	fa93 f2a3 	rbit	r2, r3
 8004c90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c94:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004c98:	601a      	str	r2, [r3, #0]
 8004c9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c9e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004caa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	fa93 f2a3 	rbit	r2, r3
 8004cb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cb8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cc2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cce:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	fa93 f2a3 	rbit	r2, r3
 8004cd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cdc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004ce0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ce2:	4b41      	ldr	r3, [pc, #260]	@ (8004de8 <HAL_RCC_OscConfig+0x934>)
 8004ce4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ce6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cea:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004cee:	2102      	movs	r1, #2
 8004cf0:	6019      	str	r1, [r3, #0]
 8004cf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cf6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	fa93 f1a3 	rbit	r1, r3
 8004d00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d04:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004d08:	6019      	str	r1, [r3, #0]
  return result;
 8004d0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d0e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	fab3 f383 	clz	r3, r3
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	f003 031f 	and.w	r3, r3, #31
 8004d24:	2101      	movs	r1, #1
 8004d26:	fa01 f303 	lsl.w	r3, r1, r3
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d197      	bne.n	8004c60 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d34:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0304 	and.w	r3, r3, #4
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 81a1 	beq.w	8005088 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d46:	2300      	movs	r3, #0
 8004d48:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d4c:	4b26      	ldr	r3, [pc, #152]	@ (8004de8 <HAL_RCC_OscConfig+0x934>)
 8004d4e:	69db      	ldr	r3, [r3, #28]
 8004d50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d116      	bne.n	8004d86 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d58:	4b23      	ldr	r3, [pc, #140]	@ (8004de8 <HAL_RCC_OscConfig+0x934>)
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	4a22      	ldr	r2, [pc, #136]	@ (8004de8 <HAL_RCC_OscConfig+0x934>)
 8004d5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d62:	61d3      	str	r3, [r2, #28]
 8004d64:	4b20      	ldr	r3, [pc, #128]	@ (8004de8 <HAL_RCC_OscConfig+0x934>)
 8004d66:	69db      	ldr	r3, [r3, #28]
 8004d68:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8004d6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d70:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d7a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004d7e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004d80:	2301      	movs	r3, #1
 8004d82:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d86:	4b1a      	ldr	r3, [pc, #104]	@ (8004df0 <HAL_RCC_OscConfig+0x93c>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d11a      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d92:	4b17      	ldr	r3, [pc, #92]	@ (8004df0 <HAL_RCC_OscConfig+0x93c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a16      	ldr	r2, [pc, #88]	@ (8004df0 <HAL_RCC_OscConfig+0x93c>)
 8004d98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d9c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d9e:	f7fc fdb1 	bl	8001904 <HAL_GetTick>
 8004da2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004da6:	e009      	b.n	8004dbc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004da8:	f7fc fdac 	bl	8001904 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	2b64      	cmp	r3, #100	@ 0x64
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e3b1      	b.n	8005520 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8004df0 <HAL_RCC_OscConfig+0x93c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d0ef      	beq.n	8004da8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dcc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d10d      	bne.n	8004df4 <HAL_RCC_OscConfig+0x940>
 8004dd8:	4b03      	ldr	r3, [pc, #12]	@ (8004de8 <HAL_RCC_OscConfig+0x934>)
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	4a02      	ldr	r2, [pc, #8]	@ (8004de8 <HAL_RCC_OscConfig+0x934>)
 8004dde:	f043 0301 	orr.w	r3, r3, #1
 8004de2:	6213      	str	r3, [r2, #32]
 8004de4:	e03c      	b.n	8004e60 <HAL_RCC_OscConfig+0x9ac>
 8004de6:	bf00      	nop
 8004de8:	40021000 	.word	0x40021000
 8004dec:	10908120 	.word	0x10908120
 8004df0:	40007000 	.word	0x40007000
 8004df4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004df8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10c      	bne.n	8004e1e <HAL_RCC_OscConfig+0x96a>
 8004e04:	4bc1      	ldr	r3, [pc, #772]	@ (800510c <HAL_RCC_OscConfig+0xc58>)
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	4ac0      	ldr	r2, [pc, #768]	@ (800510c <HAL_RCC_OscConfig+0xc58>)
 8004e0a:	f023 0301 	bic.w	r3, r3, #1
 8004e0e:	6213      	str	r3, [r2, #32]
 8004e10:	4bbe      	ldr	r3, [pc, #760]	@ (800510c <HAL_RCC_OscConfig+0xc58>)
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	4abd      	ldr	r2, [pc, #756]	@ (800510c <HAL_RCC_OscConfig+0xc58>)
 8004e16:	f023 0304 	bic.w	r3, r3, #4
 8004e1a:	6213      	str	r3, [r2, #32]
 8004e1c:	e020      	b.n	8004e60 <HAL_RCC_OscConfig+0x9ac>
 8004e1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	2b05      	cmp	r3, #5
 8004e2c:	d10c      	bne.n	8004e48 <HAL_RCC_OscConfig+0x994>
 8004e2e:	4bb7      	ldr	r3, [pc, #732]	@ (800510c <HAL_RCC_OscConfig+0xc58>)
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	4ab6      	ldr	r2, [pc, #728]	@ (800510c <HAL_RCC_OscConfig+0xc58>)
 8004e34:	f043 0304 	orr.w	r3, r3, #4
 8004e38:	6213      	str	r3, [r2, #32]
 8004e3a:	4bb4      	ldr	r3, [pc, #720]	@ (800510c <HAL_RCC_OscConfig+0xc58>)
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	4ab3      	ldr	r2, [pc, #716]	@ (800510c <HAL_RCC_OscConfig+0xc58>)
 8004e40:	f043 0301 	orr.w	r3, r3, #1
 8004e44:	6213      	str	r3, [r2, #32]
 8004e46:	e00b      	b.n	8004e60 <HAL_RCC_OscConfig+0x9ac>
 8004e48:	4bb0      	ldr	r3, [pc, #704]	@ (800510c <HAL_RCC_OscConfig+0xc58>)
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	4aaf      	ldr	r2, [pc, #700]	@ (800510c <HAL_RCC_OscConfig+0xc58>)
 8004e4e:	f023 0301 	bic.w	r3, r3, #1
 8004e52:	6213      	str	r3, [r2, #32]
 8004e54:	4bad      	ldr	r3, [pc, #692]	@ (800510c <HAL_RCC_OscConfig+0xc58>)
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	4aac      	ldr	r2, [pc, #688]	@ (800510c <HAL_RCC_OscConfig+0xc58>)
 8004e5a:	f023 0304 	bic.w	r3, r3, #4
 8004e5e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e64:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 8081 	beq.w	8004f74 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e72:	f7fc fd47 	bl	8001904 <HAL_GetTick>
 8004e76:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e7a:	e00b      	b.n	8004e94 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e7c:	f7fc fd42 	bl	8001904 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d901      	bls.n	8004e94 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e345      	b.n	8005520 <HAL_RCC_OscConfig+0x106c>
 8004e94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e98:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ea4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	fa93 f2a3 	rbit	r2, r3
 8004eae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004eb2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004eb6:	601a      	str	r2, [r3, #0]
 8004eb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ebc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ec8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	fa93 f2a3 	rbit	r2, r3
 8004ed2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ed6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004eda:	601a      	str	r2, [r3, #0]
  return result;
 8004edc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ee0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004ee4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ee6:	fab3 f383 	clz	r3, r3
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	095b      	lsrs	r3, r3, #5
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	f043 0302 	orr.w	r3, r3, #2
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d102      	bne.n	8004f00 <HAL_RCC_OscConfig+0xa4c>
 8004efa:	4b84      	ldr	r3, [pc, #528]	@ (800510c <HAL_RCC_OscConfig+0xc58>)
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	e013      	b.n	8004f28 <HAL_RCC_OscConfig+0xa74>
 8004f00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f04:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004f08:	2202      	movs	r2, #2
 8004f0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f10:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	fa93 f2a3 	rbit	r2, r3
 8004f1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f1e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	4b79      	ldr	r3, [pc, #484]	@ (800510c <HAL_RCC_OscConfig+0xc58>)
 8004f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f28:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004f2c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004f30:	2102      	movs	r1, #2
 8004f32:	6011      	str	r1, [r2, #0]
 8004f34:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004f38:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004f3c:	6812      	ldr	r2, [r2, #0]
 8004f3e:	fa92 f1a2 	rbit	r1, r2
 8004f42:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004f46:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004f4a:	6011      	str	r1, [r2, #0]
  return result;
 8004f4c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004f50:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004f54:	6812      	ldr	r2, [r2, #0]
 8004f56:	fab2 f282 	clz	r2, r2
 8004f5a:	b2d2      	uxtb	r2, r2
 8004f5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f60:	b2d2      	uxtb	r2, r2
 8004f62:	f002 021f 	and.w	r2, r2, #31
 8004f66:	2101      	movs	r1, #1
 8004f68:	fa01 f202 	lsl.w	r2, r1, r2
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d084      	beq.n	8004e7c <HAL_RCC_OscConfig+0x9c8>
 8004f72:	e07f      	b.n	8005074 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f74:	f7fc fcc6 	bl	8001904 <HAL_GetTick>
 8004f78:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f7c:	e00b      	b.n	8004f96 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f7e:	f7fc fcc1 	bl	8001904 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e2c4      	b.n	8005520 <HAL_RCC_OscConfig+0x106c>
 8004f96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f9a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fa6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	fa93 f2a3 	rbit	r2, r3
 8004fb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fb4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fbe:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	601a      	str	r2, [r3, #0]
 8004fc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fca:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	fa93 f2a3 	rbit	r2, r3
 8004fd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fd8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004fdc:	601a      	str	r2, [r3, #0]
  return result;
 8004fde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fe2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004fe6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fe8:	fab3 f383 	clz	r3, r3
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	095b      	lsrs	r3, r3, #5
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	f043 0302 	orr.w	r3, r3, #2
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d102      	bne.n	8005002 <HAL_RCC_OscConfig+0xb4e>
 8004ffc:	4b43      	ldr	r3, [pc, #268]	@ (800510c <HAL_RCC_OscConfig+0xc58>)
 8004ffe:	6a1b      	ldr	r3, [r3, #32]
 8005000:	e013      	b.n	800502a <HAL_RCC_OscConfig+0xb76>
 8005002:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005006:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800500a:	2202      	movs	r2, #2
 800500c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800500e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005012:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	fa93 f2a3 	rbit	r2, r3
 800501c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005020:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	4b39      	ldr	r3, [pc, #228]	@ (800510c <HAL_RCC_OscConfig+0xc58>)
 8005028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800502e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8005032:	2102      	movs	r1, #2
 8005034:	6011      	str	r1, [r2, #0]
 8005036:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800503a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800503e:	6812      	ldr	r2, [r2, #0]
 8005040:	fa92 f1a2 	rbit	r1, r2
 8005044:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005048:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800504c:	6011      	str	r1, [r2, #0]
  return result;
 800504e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005052:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8005056:	6812      	ldr	r2, [r2, #0]
 8005058:	fab2 f282 	clz	r2, r2
 800505c:	b2d2      	uxtb	r2, r2
 800505e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005062:	b2d2      	uxtb	r2, r2
 8005064:	f002 021f 	and.w	r2, r2, #31
 8005068:	2101      	movs	r1, #1
 800506a:	fa01 f202 	lsl.w	r2, r1, r2
 800506e:	4013      	ands	r3, r2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d184      	bne.n	8004f7e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005074:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8005078:	2b01      	cmp	r3, #1
 800507a:	d105      	bne.n	8005088 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800507c:	4b23      	ldr	r3, [pc, #140]	@ (800510c <HAL_RCC_OscConfig+0xc58>)
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	4a22      	ldr	r2, [pc, #136]	@ (800510c <HAL_RCC_OscConfig+0xc58>)
 8005082:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005086:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005088:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800508c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	69db      	ldr	r3, [r3, #28]
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 8242 	beq.w	800551e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800509a:	4b1c      	ldr	r3, [pc, #112]	@ (800510c <HAL_RCC_OscConfig+0xc58>)
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f003 030c 	and.w	r3, r3, #12
 80050a2:	2b08      	cmp	r3, #8
 80050a4:	f000 8213 	beq.w	80054ce <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	69db      	ldr	r3, [r3, #28]
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	f040 8162 	bne.w	800537e <HAL_RCC_OscConfig+0xeca>
 80050ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050be:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80050c2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80050c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050cc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	fa93 f2a3 	rbit	r2, r3
 80050d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050da:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80050de:	601a      	str	r2, [r3, #0]
  return result;
 80050e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050e4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80050e8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ea:	fab3 f383 	clz	r3, r3
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80050f4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	461a      	mov	r2, r3
 80050fc:	2300      	movs	r3, #0
 80050fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005100:	f7fc fc00 	bl	8001904 <HAL_GetTick>
 8005104:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005108:	e00c      	b.n	8005124 <HAL_RCC_OscConfig+0xc70>
 800510a:	bf00      	nop
 800510c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005110:	f7fc fbf8 	bl	8001904 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	2b02      	cmp	r3, #2
 800511e:	d901      	bls.n	8005124 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e1fd      	b.n	8005520 <HAL_RCC_OscConfig+0x106c>
 8005124:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005128:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800512c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005130:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005132:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005136:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	fa93 f2a3 	rbit	r2, r3
 8005140:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005144:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8005148:	601a      	str	r2, [r3, #0]
  return result;
 800514a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800514e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8005152:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005154:	fab3 f383 	clz	r3, r3
 8005158:	b2db      	uxtb	r3, r3
 800515a:	095b      	lsrs	r3, r3, #5
 800515c:	b2db      	uxtb	r3, r3
 800515e:	f043 0301 	orr.w	r3, r3, #1
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b01      	cmp	r3, #1
 8005166:	d102      	bne.n	800516e <HAL_RCC_OscConfig+0xcba>
 8005168:	4bb0      	ldr	r3, [pc, #704]	@ (800542c <HAL_RCC_OscConfig+0xf78>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	e027      	b.n	80051be <HAL_RCC_OscConfig+0xd0a>
 800516e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005172:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8005176:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800517a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800517c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005180:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	fa93 f2a3 	rbit	r2, r3
 800518a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800518e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005198:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800519c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80051a0:	601a      	str	r2, [r3, #0]
 80051a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051a6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	fa93 f2a3 	rbit	r2, r3
 80051b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051b4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80051b8:	601a      	str	r2, [r3, #0]
 80051ba:	4b9c      	ldr	r3, [pc, #624]	@ (800542c <HAL_RCC_OscConfig+0xf78>)
 80051bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051be:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80051c2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80051c6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80051ca:	6011      	str	r1, [r2, #0]
 80051cc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80051d0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80051d4:	6812      	ldr	r2, [r2, #0]
 80051d6:	fa92 f1a2 	rbit	r1, r2
 80051da:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80051de:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80051e2:	6011      	str	r1, [r2, #0]
  return result;
 80051e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80051e8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80051ec:	6812      	ldr	r2, [r2, #0]
 80051ee:	fab2 f282 	clz	r2, r2
 80051f2:	b2d2      	uxtb	r2, r2
 80051f4:	f042 0220 	orr.w	r2, r2, #32
 80051f8:	b2d2      	uxtb	r2, r2
 80051fa:	f002 021f 	and.w	r2, r2, #31
 80051fe:	2101      	movs	r1, #1
 8005200:	fa01 f202 	lsl.w	r2, r1, r2
 8005204:	4013      	ands	r3, r2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d182      	bne.n	8005110 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800520a:	4b88      	ldr	r3, [pc, #544]	@ (800542c <HAL_RCC_OscConfig+0xf78>)
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005212:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005216:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800521e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005222:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	430b      	orrs	r3, r1
 800522c:	497f      	ldr	r1, [pc, #508]	@ (800542c <HAL_RCC_OscConfig+0xf78>)
 800522e:	4313      	orrs	r3, r2
 8005230:	604b      	str	r3, [r1, #4]
 8005232:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005236:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800523a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800523e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005240:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005244:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	fa93 f2a3 	rbit	r2, r3
 800524e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005252:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005256:	601a      	str	r2, [r3, #0]
  return result;
 8005258:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800525c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005260:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005262:	fab3 f383 	clz	r3, r3
 8005266:	b2db      	uxtb	r3, r3
 8005268:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800526c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	461a      	mov	r2, r3
 8005274:	2301      	movs	r3, #1
 8005276:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005278:	f7fc fb44 	bl	8001904 <HAL_GetTick>
 800527c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005280:	e009      	b.n	8005296 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005282:	f7fc fb3f 	bl	8001904 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b02      	cmp	r3, #2
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e144      	b.n	8005520 <HAL_RCC_OscConfig+0x106c>
 8005296:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800529a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800529e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80052a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052a8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	fa93 f2a3 	rbit	r2, r3
 80052b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052b6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80052ba:	601a      	str	r2, [r3, #0]
  return result;
 80052bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052c0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80052c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052c6:	fab3 f383 	clz	r3, r3
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	095b      	lsrs	r3, r3, #5
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	f043 0301 	orr.w	r3, r3, #1
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d102      	bne.n	80052e0 <HAL_RCC_OscConfig+0xe2c>
 80052da:	4b54      	ldr	r3, [pc, #336]	@ (800542c <HAL_RCC_OscConfig+0xf78>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	e027      	b.n	8005330 <HAL_RCC_OscConfig+0xe7c>
 80052e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052e4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80052e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80052ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052f2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	fa93 f2a3 	rbit	r2, r3
 80052fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005300:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800530a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800530e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005312:	601a      	str	r2, [r3, #0]
 8005314:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005318:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	fa93 f2a3 	rbit	r2, r3
 8005322:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005326:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	4b3f      	ldr	r3, [pc, #252]	@ (800542c <HAL_RCC_OscConfig+0xf78>)
 800532e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005330:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005334:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8005338:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800533c:	6011      	str	r1, [r2, #0]
 800533e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005342:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8005346:	6812      	ldr	r2, [r2, #0]
 8005348:	fa92 f1a2 	rbit	r1, r2
 800534c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005350:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005354:	6011      	str	r1, [r2, #0]
  return result;
 8005356:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800535a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800535e:	6812      	ldr	r2, [r2, #0]
 8005360:	fab2 f282 	clz	r2, r2
 8005364:	b2d2      	uxtb	r2, r2
 8005366:	f042 0220 	orr.w	r2, r2, #32
 800536a:	b2d2      	uxtb	r2, r2
 800536c:	f002 021f 	and.w	r2, r2, #31
 8005370:	2101      	movs	r1, #1
 8005372:	fa01 f202 	lsl.w	r2, r1, r2
 8005376:	4013      	ands	r3, r2
 8005378:	2b00      	cmp	r3, #0
 800537a:	d082      	beq.n	8005282 <HAL_RCC_OscConfig+0xdce>
 800537c:	e0cf      	b.n	800551e <HAL_RCC_OscConfig+0x106a>
 800537e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005382:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005386:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800538a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800538c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005390:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	fa93 f2a3 	rbit	r2, r3
 800539a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800539e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80053a2:	601a      	str	r2, [r3, #0]
  return result;
 80053a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053a8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80053ac:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ae:	fab3 f383 	clz	r3, r3
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80053b8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	461a      	mov	r2, r3
 80053c0:	2300      	movs	r3, #0
 80053c2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c4:	f7fc fa9e 	bl	8001904 <HAL_GetTick>
 80053c8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053cc:	e009      	b.n	80053e2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053ce:	f7fc fa99 	bl	8001904 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e09e      	b.n	8005520 <HAL_RCC_OscConfig+0x106c>
 80053e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053e6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80053ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80053ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053f4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	fa93 f2a3 	rbit	r2, r3
 80053fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005402:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005406:	601a      	str	r2, [r3, #0]
  return result;
 8005408:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800540c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005410:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005412:	fab3 f383 	clz	r3, r3
 8005416:	b2db      	uxtb	r3, r3
 8005418:	095b      	lsrs	r3, r3, #5
 800541a:	b2db      	uxtb	r3, r3
 800541c:	f043 0301 	orr.w	r3, r3, #1
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b01      	cmp	r3, #1
 8005424:	d104      	bne.n	8005430 <HAL_RCC_OscConfig+0xf7c>
 8005426:	4b01      	ldr	r3, [pc, #4]	@ (800542c <HAL_RCC_OscConfig+0xf78>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	e029      	b.n	8005480 <HAL_RCC_OscConfig+0xfcc>
 800542c:	40021000 	.word	0x40021000
 8005430:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005434:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005438:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800543c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800543e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005442:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	fa93 f2a3 	rbit	r2, r3
 800544c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005450:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8005454:	601a      	str	r2, [r3, #0]
 8005456:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800545a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800545e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005468:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	fa93 f2a3 	rbit	r2, r3
 8005472:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005476:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800547a:	601a      	str	r2, [r3, #0]
 800547c:	4b2b      	ldr	r3, [pc, #172]	@ (800552c <HAL_RCC_OscConfig+0x1078>)
 800547e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005480:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005484:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8005488:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800548c:	6011      	str	r1, [r2, #0]
 800548e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005492:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8005496:	6812      	ldr	r2, [r2, #0]
 8005498:	fa92 f1a2 	rbit	r1, r2
 800549c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80054a0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80054a4:	6011      	str	r1, [r2, #0]
  return result;
 80054a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80054aa:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80054ae:	6812      	ldr	r2, [r2, #0]
 80054b0:	fab2 f282 	clz	r2, r2
 80054b4:	b2d2      	uxtb	r2, r2
 80054b6:	f042 0220 	orr.w	r2, r2, #32
 80054ba:	b2d2      	uxtb	r2, r2
 80054bc:	f002 021f 	and.w	r2, r2, #31
 80054c0:	2101      	movs	r1, #1
 80054c2:	fa01 f202 	lsl.w	r2, r1, r2
 80054c6:	4013      	ands	r3, r2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d180      	bne.n	80053ce <HAL_RCC_OscConfig+0xf1a>
 80054cc:	e027      	b.n	800551e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80054d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d101      	bne.n	80054e2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e01e      	b.n	8005520 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80054e2:	4b12      	ldr	r3, [pc, #72]	@ (800552c <HAL_RCC_OscConfig+0x1078>)
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80054ea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80054ee:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80054f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80054f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d10b      	bne.n	800551a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005502:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8005506:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800550a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800550e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005516:	429a      	cmp	r2, r3
 8005518:	d001      	beq.n	800551e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e000      	b.n	8005520 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	40021000 	.word	0x40021000

08005530 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b09e      	sub	sp, #120	@ 0x78
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800553a:	2300      	movs	r3, #0
 800553c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e162      	b.n	800580e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005548:	4b90      	ldr	r3, [pc, #576]	@ (800578c <HAL_RCC_ClockConfig+0x25c>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0307 	and.w	r3, r3, #7
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	429a      	cmp	r2, r3
 8005554:	d910      	bls.n	8005578 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005556:	4b8d      	ldr	r3, [pc, #564]	@ (800578c <HAL_RCC_ClockConfig+0x25c>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f023 0207 	bic.w	r2, r3, #7
 800555e:	498b      	ldr	r1, [pc, #556]	@ (800578c <HAL_RCC_ClockConfig+0x25c>)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	4313      	orrs	r3, r2
 8005564:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005566:	4b89      	ldr	r3, [pc, #548]	@ (800578c <HAL_RCC_ClockConfig+0x25c>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0307 	and.w	r3, r3, #7
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	429a      	cmp	r2, r3
 8005572:	d001      	beq.n	8005578 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e14a      	b.n	800580e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	2b00      	cmp	r3, #0
 8005582:	d008      	beq.n	8005596 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005584:	4b82      	ldr	r3, [pc, #520]	@ (8005790 <HAL_RCC_ClockConfig+0x260>)
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	497f      	ldr	r1, [pc, #508]	@ (8005790 <HAL_RCC_ClockConfig+0x260>)
 8005592:	4313      	orrs	r3, r2
 8005594:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 80dc 	beq.w	800575c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d13c      	bne.n	8005626 <HAL_RCC_ClockConfig+0xf6>
 80055ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80055b0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80055b4:	fa93 f3a3 	rbit	r3, r3
 80055b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80055ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055bc:	fab3 f383 	clz	r3, r3
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	095b      	lsrs	r3, r3, #5
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	f043 0301 	orr.w	r3, r3, #1
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d102      	bne.n	80055d6 <HAL_RCC_ClockConfig+0xa6>
 80055d0:	4b6f      	ldr	r3, [pc, #444]	@ (8005790 <HAL_RCC_ClockConfig+0x260>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	e00f      	b.n	80055f6 <HAL_RCC_ClockConfig+0xc6>
 80055d6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80055da:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055de:	fa93 f3a3 	rbit	r3, r3
 80055e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80055e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80055e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80055ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055ec:	fa93 f3a3 	rbit	r3, r3
 80055f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055f2:	4b67      	ldr	r3, [pc, #412]	@ (8005790 <HAL_RCC_ClockConfig+0x260>)
 80055f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80055fa:	65ba      	str	r2, [r7, #88]	@ 0x58
 80055fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80055fe:	fa92 f2a2 	rbit	r2, r2
 8005602:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8005604:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005606:	fab2 f282 	clz	r2, r2
 800560a:	b2d2      	uxtb	r2, r2
 800560c:	f042 0220 	orr.w	r2, r2, #32
 8005610:	b2d2      	uxtb	r2, r2
 8005612:	f002 021f 	and.w	r2, r2, #31
 8005616:	2101      	movs	r1, #1
 8005618:	fa01 f202 	lsl.w	r2, r1, r2
 800561c:	4013      	ands	r3, r2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d17b      	bne.n	800571a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e0f3      	b.n	800580e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	2b02      	cmp	r3, #2
 800562c:	d13c      	bne.n	80056a8 <HAL_RCC_ClockConfig+0x178>
 800562e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005632:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005634:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005636:	fa93 f3a3 	rbit	r3, r3
 800563a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800563c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800563e:	fab3 f383 	clz	r3, r3
 8005642:	b2db      	uxtb	r3, r3
 8005644:	095b      	lsrs	r3, r3, #5
 8005646:	b2db      	uxtb	r3, r3
 8005648:	f043 0301 	orr.w	r3, r3, #1
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b01      	cmp	r3, #1
 8005650:	d102      	bne.n	8005658 <HAL_RCC_ClockConfig+0x128>
 8005652:	4b4f      	ldr	r3, [pc, #316]	@ (8005790 <HAL_RCC_ClockConfig+0x260>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	e00f      	b.n	8005678 <HAL_RCC_ClockConfig+0x148>
 8005658:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800565c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800565e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005660:	fa93 f3a3 	rbit	r3, r3
 8005664:	647b      	str	r3, [r7, #68]	@ 0x44
 8005666:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800566a:	643b      	str	r3, [r7, #64]	@ 0x40
 800566c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800566e:	fa93 f3a3 	rbit	r3, r3
 8005672:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005674:	4b46      	ldr	r3, [pc, #280]	@ (8005790 <HAL_RCC_ClockConfig+0x260>)
 8005676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005678:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800567c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800567e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005680:	fa92 f2a2 	rbit	r2, r2
 8005684:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8005686:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005688:	fab2 f282 	clz	r2, r2
 800568c:	b2d2      	uxtb	r2, r2
 800568e:	f042 0220 	orr.w	r2, r2, #32
 8005692:	b2d2      	uxtb	r2, r2
 8005694:	f002 021f 	and.w	r2, r2, #31
 8005698:	2101      	movs	r1, #1
 800569a:	fa01 f202 	lsl.w	r2, r1, r2
 800569e:	4013      	ands	r3, r2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d13a      	bne.n	800571a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e0b2      	b.n	800580e <HAL_RCC_ClockConfig+0x2de>
 80056a8:	2302      	movs	r3, #2
 80056aa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ae:	fa93 f3a3 	rbit	r3, r3
 80056b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80056b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056b6:	fab3 f383 	clz	r3, r3
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	095b      	lsrs	r3, r3, #5
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	f043 0301 	orr.w	r3, r3, #1
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d102      	bne.n	80056d0 <HAL_RCC_ClockConfig+0x1a0>
 80056ca:	4b31      	ldr	r3, [pc, #196]	@ (8005790 <HAL_RCC_ClockConfig+0x260>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	e00d      	b.n	80056ec <HAL_RCC_ClockConfig+0x1bc>
 80056d0:	2302      	movs	r3, #2
 80056d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d6:	fa93 f3a3 	rbit	r3, r3
 80056da:	627b      	str	r3, [r7, #36]	@ 0x24
 80056dc:	2302      	movs	r3, #2
 80056de:	623b      	str	r3, [r7, #32]
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	fa93 f3a3 	rbit	r3, r3
 80056e6:	61fb      	str	r3, [r7, #28]
 80056e8:	4b29      	ldr	r3, [pc, #164]	@ (8005790 <HAL_RCC_ClockConfig+0x260>)
 80056ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ec:	2202      	movs	r2, #2
 80056ee:	61ba      	str	r2, [r7, #24]
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	fa92 f2a2 	rbit	r2, r2
 80056f6:	617a      	str	r2, [r7, #20]
  return result;
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	fab2 f282 	clz	r2, r2
 80056fe:	b2d2      	uxtb	r2, r2
 8005700:	f042 0220 	orr.w	r2, r2, #32
 8005704:	b2d2      	uxtb	r2, r2
 8005706:	f002 021f 	and.w	r2, r2, #31
 800570a:	2101      	movs	r1, #1
 800570c:	fa01 f202 	lsl.w	r2, r1, r2
 8005710:	4013      	ands	r3, r2
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e079      	b.n	800580e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800571a:	4b1d      	ldr	r3, [pc, #116]	@ (8005790 <HAL_RCC_ClockConfig+0x260>)
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f023 0203 	bic.w	r2, r3, #3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	491a      	ldr	r1, [pc, #104]	@ (8005790 <HAL_RCC_ClockConfig+0x260>)
 8005728:	4313      	orrs	r3, r2
 800572a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800572c:	f7fc f8ea 	bl	8001904 <HAL_GetTick>
 8005730:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005732:	e00a      	b.n	800574a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005734:	f7fc f8e6 	bl	8001904 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005742:	4293      	cmp	r3, r2
 8005744:	d901      	bls.n	800574a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e061      	b.n	800580e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800574a:	4b11      	ldr	r3, [pc, #68]	@ (8005790 <HAL_RCC_ClockConfig+0x260>)
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f003 020c 	and.w	r2, r3, #12
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	429a      	cmp	r2, r3
 800575a:	d1eb      	bne.n	8005734 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800575c:	4b0b      	ldr	r3, [pc, #44]	@ (800578c <HAL_RCC_ClockConfig+0x25c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0307 	and.w	r3, r3, #7
 8005764:	683a      	ldr	r2, [r7, #0]
 8005766:	429a      	cmp	r2, r3
 8005768:	d214      	bcs.n	8005794 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800576a:	4b08      	ldr	r3, [pc, #32]	@ (800578c <HAL_RCC_ClockConfig+0x25c>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f023 0207 	bic.w	r2, r3, #7
 8005772:	4906      	ldr	r1, [pc, #24]	@ (800578c <HAL_RCC_ClockConfig+0x25c>)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	4313      	orrs	r3, r2
 8005778:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800577a:	4b04      	ldr	r3, [pc, #16]	@ (800578c <HAL_RCC_ClockConfig+0x25c>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0307 	and.w	r3, r3, #7
 8005782:	683a      	ldr	r2, [r7, #0]
 8005784:	429a      	cmp	r2, r3
 8005786:	d005      	beq.n	8005794 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e040      	b.n	800580e <HAL_RCC_ClockConfig+0x2de>
 800578c:	40022000 	.word	0x40022000
 8005790:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	2b00      	cmp	r3, #0
 800579e:	d008      	beq.n	80057b2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005818 <HAL_RCC_ClockConfig+0x2e8>)
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	491a      	ldr	r1, [pc, #104]	@ (8005818 <HAL_RCC_ClockConfig+0x2e8>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0308 	and.w	r3, r3, #8
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d009      	beq.n	80057d2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057be:	4b16      	ldr	r3, [pc, #88]	@ (8005818 <HAL_RCC_ClockConfig+0x2e8>)
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	4912      	ldr	r1, [pc, #72]	@ (8005818 <HAL_RCC_ClockConfig+0x2e8>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80057d2:	f000 f829 	bl	8005828 <HAL_RCC_GetSysClockFreq>
 80057d6:	4601      	mov	r1, r0
 80057d8:	4b0f      	ldr	r3, [pc, #60]	@ (8005818 <HAL_RCC_ClockConfig+0x2e8>)
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80057e0:	22f0      	movs	r2, #240	@ 0xf0
 80057e2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	fa92 f2a2 	rbit	r2, r2
 80057ea:	60fa      	str	r2, [r7, #12]
  return result;
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	fab2 f282 	clz	r2, r2
 80057f2:	b2d2      	uxtb	r2, r2
 80057f4:	40d3      	lsrs	r3, r2
 80057f6:	4a09      	ldr	r2, [pc, #36]	@ (800581c <HAL_RCC_ClockConfig+0x2ec>)
 80057f8:	5cd3      	ldrb	r3, [r2, r3]
 80057fa:	fa21 f303 	lsr.w	r3, r1, r3
 80057fe:	4a08      	ldr	r2, [pc, #32]	@ (8005820 <HAL_RCC_ClockConfig+0x2f0>)
 8005800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005802:	4b08      	ldr	r3, [pc, #32]	@ (8005824 <HAL_RCC_ClockConfig+0x2f4>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4618      	mov	r0, r3
 8005808:	f7fc f838 	bl	800187c <HAL_InitTick>
  
  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3778      	adds	r7, #120	@ 0x78
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	40021000 	.word	0x40021000
 800581c:	0800ac30 	.word	0x0800ac30
 8005820:	20000060 	.word	0x20000060
 8005824:	20000064 	.word	0x20000064

08005828 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005828:	b480      	push	{r7}
 800582a:	b087      	sub	sp, #28
 800582c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800582e:	2300      	movs	r3, #0
 8005830:	60fb      	str	r3, [r7, #12]
 8005832:	2300      	movs	r3, #0
 8005834:	60bb      	str	r3, [r7, #8]
 8005836:	2300      	movs	r3, #0
 8005838:	617b      	str	r3, [r7, #20]
 800583a:	2300      	movs	r3, #0
 800583c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800583e:	2300      	movs	r3, #0
 8005840:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005842:	4b1e      	ldr	r3, [pc, #120]	@ (80058bc <HAL_RCC_GetSysClockFreq+0x94>)
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f003 030c 	and.w	r3, r3, #12
 800584e:	2b04      	cmp	r3, #4
 8005850:	d002      	beq.n	8005858 <HAL_RCC_GetSysClockFreq+0x30>
 8005852:	2b08      	cmp	r3, #8
 8005854:	d003      	beq.n	800585e <HAL_RCC_GetSysClockFreq+0x36>
 8005856:	e026      	b.n	80058a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005858:	4b19      	ldr	r3, [pc, #100]	@ (80058c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800585a:	613b      	str	r3, [r7, #16]
      break;
 800585c:	e026      	b.n	80058ac <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	0c9b      	lsrs	r3, r3, #18
 8005862:	f003 030f 	and.w	r3, r3, #15
 8005866:	4a17      	ldr	r2, [pc, #92]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005868:	5cd3      	ldrb	r3, [r2, r3]
 800586a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800586c:	4b13      	ldr	r3, [pc, #76]	@ (80058bc <HAL_RCC_GetSysClockFreq+0x94>)
 800586e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005870:	f003 030f 	and.w	r3, r3, #15
 8005874:	4a14      	ldr	r2, [pc, #80]	@ (80058c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005876:	5cd3      	ldrb	r3, [r2, r3]
 8005878:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d008      	beq.n	8005896 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005884:	4a0e      	ldr	r2, [pc, #56]	@ (80058c0 <HAL_RCC_GetSysClockFreq+0x98>)
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	fbb2 f2f3 	udiv	r2, r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	fb02 f303 	mul.w	r3, r2, r3
 8005892:	617b      	str	r3, [r7, #20]
 8005894:	e004      	b.n	80058a0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a0c      	ldr	r2, [pc, #48]	@ (80058cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800589a:	fb02 f303 	mul.w	r3, r2, r3
 800589e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	613b      	str	r3, [r7, #16]
      break;
 80058a4:	e002      	b.n	80058ac <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80058a6:	4b06      	ldr	r3, [pc, #24]	@ (80058c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80058a8:	613b      	str	r3, [r7, #16]
      break;
 80058aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058ac:	693b      	ldr	r3, [r7, #16]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	371c      	adds	r7, #28
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	40021000 	.word	0x40021000
 80058c0:	007a1200 	.word	0x007a1200
 80058c4:	0800ac40 	.word	0x0800ac40
 80058c8:	0800ac50 	.word	0x0800ac50
 80058cc:	003d0900 	.word	0x003d0900

080058d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b092      	sub	sp, #72	@ 0x48
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058d8:	2300      	movs	r3, #0
 80058da:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80058dc:	2300      	movs	r3, #0
 80058de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80058e0:	2300      	movs	r3, #0
 80058e2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f000 80d4 	beq.w	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058f4:	4b4e      	ldr	r3, [pc, #312]	@ (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058f6:	69db      	ldr	r3, [r3, #28]
 80058f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d10e      	bne.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005900:	4b4b      	ldr	r3, [pc, #300]	@ (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005902:	69db      	ldr	r3, [r3, #28]
 8005904:	4a4a      	ldr	r2, [pc, #296]	@ (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005906:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800590a:	61d3      	str	r3, [r2, #28]
 800590c:	4b48      	ldr	r3, [pc, #288]	@ (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800590e:	69db      	ldr	r3, [r3, #28]
 8005910:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005914:	60bb      	str	r3, [r7, #8]
 8005916:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005918:	2301      	movs	r3, #1
 800591a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800591e:	4b45      	ldr	r3, [pc, #276]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005926:	2b00      	cmp	r3, #0
 8005928:	d118      	bne.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800592a:	4b42      	ldr	r3, [pc, #264]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a41      	ldr	r2, [pc, #260]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005930:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005934:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005936:	f7fb ffe5 	bl	8001904 <HAL_GetTick>
 800593a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800593c:	e008      	b.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800593e:	f7fb ffe1 	bl	8001904 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	2b64      	cmp	r3, #100	@ 0x64
 800594a:	d901      	bls.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e169      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005950:	4b38      	ldr	r3, [pc, #224]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005958:	2b00      	cmp	r3, #0
 800595a:	d0f0      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800595c:	4b34      	ldr	r3, [pc, #208]	@ (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800595e:	6a1b      	ldr	r3, [r3, #32]
 8005960:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005964:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005966:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005968:	2b00      	cmp	r3, #0
 800596a:	f000 8084 	beq.w	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005976:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005978:	429a      	cmp	r2, r3
 800597a:	d07c      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800597c:	4b2c      	ldr	r3, [pc, #176]	@ (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800597e:	6a1b      	ldr	r3, [r3, #32]
 8005980:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005984:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005986:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800598a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800598c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800598e:	fa93 f3a3 	rbit	r3, r3
 8005992:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005996:	fab3 f383 	clz	r3, r3
 800599a:	b2db      	uxtb	r3, r3
 800599c:	461a      	mov	r2, r3
 800599e:	4b26      	ldr	r3, [pc, #152]	@ (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80059a0:	4413      	add	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	461a      	mov	r2, r3
 80059a6:	2301      	movs	r3, #1
 80059a8:	6013      	str	r3, [r2, #0]
 80059aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80059ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059b2:	fa93 f3a3 	rbit	r3, r3
 80059b6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80059b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80059ba:	fab3 f383 	clz	r3, r3
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	461a      	mov	r2, r3
 80059c2:	4b1d      	ldr	r3, [pc, #116]	@ (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80059c4:	4413      	add	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	461a      	mov	r2, r3
 80059ca:	2300      	movs	r3, #0
 80059cc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80059ce:	4a18      	ldr	r2, [pc, #96]	@ (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059d2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80059d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d04b      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059de:	f7fb ff91 	bl	8001904 <HAL_GetTick>
 80059e2:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059e4:	e00a      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059e6:	f7fb ff8d 	bl	8001904 <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d901      	bls.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e113      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80059fc:	2302      	movs	r3, #2
 80059fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a02:	fa93 f3a3 	rbit	r3, r3
 8005a06:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a08:	2302      	movs	r3, #2
 8005a0a:	623b      	str	r3, [r7, #32]
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	fa93 f3a3 	rbit	r3, r3
 8005a12:	61fb      	str	r3, [r7, #28]
  return result;
 8005a14:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a16:	fab3 f383 	clz	r3, r3
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	095b      	lsrs	r3, r3, #5
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	f043 0302 	orr.w	r3, r3, #2
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d108      	bne.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005a2a:	4b01      	ldr	r3, [pc, #4]	@ (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	e00d      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005a30:	40021000 	.word	0x40021000
 8005a34:	40007000 	.word	0x40007000
 8005a38:	10908100 	.word	0x10908100
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	fa93 f3a3 	rbit	r3, r3
 8005a46:	617b      	str	r3, [r7, #20]
 8005a48:	4b78      	ldr	r3, [pc, #480]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a4c:	2202      	movs	r2, #2
 8005a4e:	613a      	str	r2, [r7, #16]
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	fa92 f2a2 	rbit	r2, r2
 8005a56:	60fa      	str	r2, [r7, #12]
  return result;
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	fab2 f282 	clz	r2, r2
 8005a5e:	b2d2      	uxtb	r2, r2
 8005a60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a64:	b2d2      	uxtb	r2, r2
 8005a66:	f002 021f 	and.w	r2, r2, #31
 8005a6a:	2101      	movs	r1, #1
 8005a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8005a70:	4013      	ands	r3, r2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d0b7      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005a76:	4b6d      	ldr	r3, [pc, #436]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	496a      	ldr	r1, [pc, #424]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005a88:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d105      	bne.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a90:	4b66      	ldr	r3, [pc, #408]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a92:	69db      	ldr	r3, [r3, #28]
 8005a94:	4a65      	ldr	r2, [pc, #404]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a9a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0301 	and.w	r3, r3, #1
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d008      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005aa8:	4b60      	ldr	r3, [pc, #384]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aac:	f023 0203 	bic.w	r2, r3, #3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	495d      	ldr	r1, [pc, #372]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0302 	and.w	r3, r3, #2
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d008      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ac6:	4b59      	ldr	r3, [pc, #356]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	4956      	ldr	r1, [pc, #344]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0304 	and.w	r3, r3, #4
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d008      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005ae4:	4b51      	ldr	r3, [pc, #324]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ae8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	494e      	ldr	r1, [pc, #312]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0320 	and.w	r3, r3, #32
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d008      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b02:	4b4a      	ldr	r3, [pc, #296]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b06:	f023 0210 	bic.w	r2, r3, #16
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	4947      	ldr	r1, [pc, #284]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d008      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005b20:	4b42      	ldr	r3, [pc, #264]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b2c:	493f      	ldr	r1, [pc, #252]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d008      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b3e:	4b3b      	ldr	r3, [pc, #236]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b42:	f023 0220 	bic.w	r2, r3, #32
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	4938      	ldr	r1, [pc, #224]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0308 	and.w	r3, r3, #8
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d008      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b5c:	4b33      	ldr	r3, [pc, #204]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b60:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	695b      	ldr	r3, [r3, #20]
 8005b68:	4930      	ldr	r1, [pc, #192]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0310 	and.w	r3, r3, #16
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d008      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b7a:	4b2c      	ldr	r3, [pc, #176]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b7e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	4929      	ldr	r1, [pc, #164]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d008      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005b98:	4b24      	ldr	r3, [pc, #144]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba4:	4921      	ldr	r1, [pc, #132]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d008      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bba:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc2:	491a      	ldr	r1, [pc, #104]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d008      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005bd4:	4b15      	ldr	r3, [pc, #84]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd8:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be0:	4912      	ldr	r1, [pc, #72]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d008      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bf6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bfe:	490b      	ldr	r1, [pc, #44]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c00:	4313      	orrs	r3, r2
 8005c02:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d008      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005c10:	4b06      	ldr	r3, [pc, #24]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c14:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c1c:	4903      	ldr	r1, [pc, #12]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3748      	adds	r7, #72	@ 0x48
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	40021000 	.word	0x40021000

08005c30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e09d      	b.n	8005d7e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d108      	bne.n	8005c5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c52:	d009      	beq.n	8005c68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	61da      	str	r2, [r3, #28]
 8005c5a:	e005      	b.n	8005c68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d106      	bne.n	8005c88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f7fb f828 	bl	8000cd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c9e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ca8:	d902      	bls.n	8005cb0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005caa:	2300      	movs	r3, #0
 8005cac:	60fb      	str	r3, [r7, #12]
 8005cae:	e002      	b.n	8005cb6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005cb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005cb4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005cbe:	d007      	beq.n	8005cd0 <HAL_SPI_Init+0xa0>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005cc8:	d002      	beq.n	8005cd0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005ce0:	431a      	orrs	r2, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	431a      	orrs	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	695b      	ldr	r3, [r3, #20]
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	431a      	orrs	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cfe:	431a      	orrs	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	69db      	ldr	r3, [r3, #28]
 8005d04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d08:	431a      	orrs	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d12:	ea42 0103 	orr.w	r1, r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d1a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	430a      	orrs	r2, r1
 8005d24:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	699b      	ldr	r3, [r3, #24]
 8005d2a:	0c1b      	lsrs	r3, r3, #16
 8005d2c:	f003 0204 	and.w	r2, r3, #4
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d34:	f003 0310 	and.w	r3, r3, #16
 8005d38:	431a      	orrs	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d3e:	f003 0308 	and.w	r3, r3, #8
 8005d42:	431a      	orrs	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005d4c:	ea42 0103 	orr.w	r1, r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	69da      	ldr	r2, [r3, #28]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d6c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b08a      	sub	sp, #40	@ 0x28
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	60f8      	str	r0, [r7, #12]
 8005d8e:	60b9      	str	r1, [r7, #8]
 8005d90:	607a      	str	r2, [r7, #4]
 8005d92:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005d94:	2301      	movs	r3, #1
 8005d96:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d101      	bne.n	8005dac <HAL_SPI_TransmitReceive+0x26>
 8005da8:	2302      	movs	r3, #2
 8005daa:	e20a      	b.n	80061c2 <HAL_SPI_TransmitReceive+0x43c>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005db4:	f7fb fda6 	bl	8001904 <HAL_GetTick>
 8005db8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005dc0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005dc8:	887b      	ldrh	r3, [r7, #2]
 8005dca:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005dcc:	887b      	ldrh	r3, [r7, #2]
 8005dce:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005dd0:	7efb      	ldrb	r3, [r7, #27]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d00e      	beq.n	8005df4 <HAL_SPI_TransmitReceive+0x6e>
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ddc:	d106      	bne.n	8005dec <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d102      	bne.n	8005dec <HAL_SPI_TransmitReceive+0x66>
 8005de6:	7efb      	ldrb	r3, [r7, #27]
 8005de8:	2b04      	cmp	r3, #4
 8005dea:	d003      	beq.n	8005df4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005dec:	2302      	movs	r3, #2
 8005dee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005df2:	e1e0      	b.n	80061b6 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d005      	beq.n	8005e06 <HAL_SPI_TransmitReceive+0x80>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d002      	beq.n	8005e06 <HAL_SPI_TransmitReceive+0x80>
 8005e00:	887b      	ldrh	r3, [r7, #2]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d103      	bne.n	8005e0e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005e0c:	e1d3      	b.n	80061b6 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b04      	cmp	r3, #4
 8005e18:	d003      	beq.n	8005e22 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2205      	movs	r2, #5
 8005e1e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	887a      	ldrh	r2, [r7, #2]
 8005e32:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	887a      	ldrh	r2, [r7, #2]
 8005e3a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	887a      	ldrh	r2, [r7, #2]
 8005e48:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	887a      	ldrh	r2, [r7, #2]
 8005e4e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e64:	d802      	bhi.n	8005e6c <HAL_SPI_TransmitReceive+0xe6>
 8005e66:	8a3b      	ldrh	r3, [r7, #16]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d908      	bls.n	8005e7e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685a      	ldr	r2, [r3, #4]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005e7a:	605a      	str	r2, [r3, #4]
 8005e7c:	e007      	b.n	8005e8e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	685a      	ldr	r2, [r3, #4]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005e8c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e98:	2b40      	cmp	r3, #64	@ 0x40
 8005e9a:	d007      	beq.n	8005eac <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005eaa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005eb4:	f240 8081 	bls.w	8005fba <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d002      	beq.n	8005ec6 <HAL_SPI_TransmitReceive+0x140>
 8005ec0:	8a7b      	ldrh	r3, [r7, #18]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d16d      	bne.n	8005fa2 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eca:	881a      	ldrh	r2, [r3, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ed6:	1c9a      	adds	r2, r3, #2
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005eea:	e05a      	b.n	8005fa2 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f003 0302 	and.w	r3, r3, #2
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d11b      	bne.n	8005f32 <HAL_SPI_TransmitReceive+0x1ac>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d016      	beq.n	8005f32 <HAL_SPI_TransmitReceive+0x1ac>
 8005f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d113      	bne.n	8005f32 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f0e:	881a      	ldrh	r2, [r3, #0]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f1a:	1c9a      	adds	r2, r3, #2
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	3b01      	subs	r3, #1
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f003 0301 	and.w	r3, r3, #1
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d11c      	bne.n	8005f7a <HAL_SPI_TransmitReceive+0x1f4>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d016      	beq.n	8005f7a <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68da      	ldr	r2, [r3, #12]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f56:	b292      	uxth	r2, r2
 8005f58:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f5e:	1c9a      	adds	r2, r3, #2
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f76:	2301      	movs	r3, #1
 8005f78:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f7a:	f7fb fcc3 	bl	8001904 <HAL_GetTick>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d80b      	bhi.n	8005fa2 <HAL_SPI_TransmitReceive+0x21c>
 8005f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f90:	d007      	beq.n	8005fa2 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005fa0:	e109      	b.n	80061b6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d19f      	bne.n	8005eec <HAL_SPI_TransmitReceive+0x166>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d199      	bne.n	8005eec <HAL_SPI_TransmitReceive+0x166>
 8005fb8:	e0e3      	b.n	8006182 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d003      	beq.n	8005fca <HAL_SPI_TransmitReceive+0x244>
 8005fc2:	8a7b      	ldrh	r3, [r7, #18]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	f040 80cf 	bne.w	8006168 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d912      	bls.n	8005ffa <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd8:	881a      	ldrh	r2, [r3, #0]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fe4:	1c9a      	adds	r2, r3, #2
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	3b02      	subs	r3, #2
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ff8:	e0b6      	b.n	8006168 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	330c      	adds	r3, #12
 8006004:	7812      	ldrb	r2, [r2, #0]
 8006006:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800600c:	1c5a      	adds	r2, r3, #1
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006016:	b29b      	uxth	r3, r3
 8006018:	3b01      	subs	r3, #1
 800601a:	b29a      	uxth	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006020:	e0a2      	b.n	8006168 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	f003 0302 	and.w	r3, r3, #2
 800602c:	2b02      	cmp	r3, #2
 800602e:	d134      	bne.n	800609a <HAL_SPI_TransmitReceive+0x314>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006034:	b29b      	uxth	r3, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	d02f      	beq.n	800609a <HAL_SPI_TransmitReceive+0x314>
 800603a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800603c:	2b01      	cmp	r3, #1
 800603e:	d12c      	bne.n	800609a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006044:	b29b      	uxth	r3, r3
 8006046:	2b01      	cmp	r3, #1
 8006048:	d912      	bls.n	8006070 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800604e:	881a      	ldrh	r2, [r3, #0]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800605a:	1c9a      	adds	r2, r3, #2
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006064:	b29b      	uxth	r3, r3
 8006066:	3b02      	subs	r3, #2
 8006068:	b29a      	uxth	r2, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800606e:	e012      	b.n	8006096 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	330c      	adds	r3, #12
 800607a:	7812      	ldrb	r2, [r2, #0]
 800607c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800608c:	b29b      	uxth	r3, r3
 800608e:	3b01      	subs	r3, #1
 8006090:	b29a      	uxth	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006096:	2300      	movs	r3, #0
 8006098:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d148      	bne.n	800613a <HAL_SPI_TransmitReceive+0x3b4>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d042      	beq.n	800613a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d923      	bls.n	8006108 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68da      	ldr	r2, [r3, #12]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ca:	b292      	uxth	r2, r2
 80060cc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d2:	1c9a      	adds	r2, r3, #2
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80060de:	b29b      	uxth	r3, r3
 80060e0:	3b02      	subs	r3, #2
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d81f      	bhi.n	8006136 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006104:	605a      	str	r2, [r3, #4]
 8006106:	e016      	b.n	8006136 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f103 020c 	add.w	r2, r3, #12
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006114:	7812      	ldrb	r2, [r2, #0]
 8006116:	b2d2      	uxtb	r2, r2
 8006118:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800611e:	1c5a      	adds	r2, r3, #1
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800612a:	b29b      	uxth	r3, r3
 800612c:	3b01      	subs	r3, #1
 800612e:	b29a      	uxth	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006136:	2301      	movs	r3, #1
 8006138:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800613a:	f7fb fbe3 	bl	8001904 <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006146:	429a      	cmp	r2, r3
 8006148:	d803      	bhi.n	8006152 <HAL_SPI_TransmitReceive+0x3cc>
 800614a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800614c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006150:	d102      	bne.n	8006158 <HAL_SPI_TransmitReceive+0x3d2>
 8006152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006154:	2b00      	cmp	r3, #0
 8006156:	d107      	bne.n	8006168 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8006166:	e026      	b.n	80061b6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800616c:	b29b      	uxth	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	f47f af57 	bne.w	8006022 <HAL_SPI_TransmitReceive+0x29c>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800617a:	b29b      	uxth	r3, r3
 800617c:	2b00      	cmp	r3, #0
 800617e:	f47f af50 	bne.w	8006022 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006182:	69fa      	ldr	r2, [r7, #28]
 8006184:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f000 f93e 	bl	8006408 <SPI_EndRxTxTransaction>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d005      	beq.n	800619e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2220      	movs	r2, #32
 800619c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d003      	beq.n	80061ae <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061ac:	e003      	b.n	80061b6 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80061be:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3728      	adds	r7, #40	@ 0x28
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
	...

080061cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b088      	sub	sp, #32
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	603b      	str	r3, [r7, #0]
 80061d8:	4613      	mov	r3, r2
 80061da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061dc:	f7fb fb92 	bl	8001904 <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e4:	1a9b      	subs	r3, r3, r2
 80061e6:	683a      	ldr	r2, [r7, #0]
 80061e8:	4413      	add	r3, r2
 80061ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80061ec:	f7fb fb8a 	bl	8001904 <HAL_GetTick>
 80061f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061f2:	4b39      	ldr	r3, [pc, #228]	@ (80062d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	015b      	lsls	r3, r3, #5
 80061f8:	0d1b      	lsrs	r3, r3, #20
 80061fa:	69fa      	ldr	r2, [r7, #28]
 80061fc:	fb02 f303 	mul.w	r3, r2, r3
 8006200:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006202:	e054      	b.n	80062ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800620a:	d050      	beq.n	80062ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800620c:	f7fb fb7a 	bl	8001904 <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	69fa      	ldr	r2, [r7, #28]
 8006218:	429a      	cmp	r2, r3
 800621a:	d902      	bls.n	8006222 <SPI_WaitFlagStateUntilTimeout+0x56>
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d13d      	bne.n	800629e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	685a      	ldr	r2, [r3, #4]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006230:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800623a:	d111      	bne.n	8006260 <SPI_WaitFlagStateUntilTimeout+0x94>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006244:	d004      	beq.n	8006250 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800624e:	d107      	bne.n	8006260 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800625e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006264:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006268:	d10f      	bne.n	800628a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006278:	601a      	str	r2, [r3, #0]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006288:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2201      	movs	r2, #1
 800628e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e017      	b.n	80062ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d101      	bne.n	80062a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80062a4:	2300      	movs	r3, #0
 80062a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	3b01      	subs	r3, #1
 80062ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	689a      	ldr	r2, [r3, #8]
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	4013      	ands	r3, r2
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	bf0c      	ite	eq
 80062be:	2301      	moveq	r3, #1
 80062c0:	2300      	movne	r3, #0
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	461a      	mov	r2, r3
 80062c6:	79fb      	ldrb	r3, [r7, #7]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d19b      	bne.n	8006204 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3720      	adds	r7, #32
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	20000060 	.word	0x20000060

080062dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b08a      	sub	sp, #40	@ 0x28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
 80062e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80062ea:	2300      	movs	r3, #0
 80062ec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80062ee:	f7fb fb09 	bl	8001904 <HAL_GetTick>
 80062f2:	4602      	mov	r2, r0
 80062f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f6:	1a9b      	subs	r3, r3, r2
 80062f8:	683a      	ldr	r2, [r7, #0]
 80062fa:	4413      	add	r3, r2
 80062fc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80062fe:	f7fb fb01 	bl	8001904 <HAL_GetTick>
 8006302:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	330c      	adds	r3, #12
 800630a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800630c:	4b3d      	ldr	r3, [pc, #244]	@ (8006404 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	4613      	mov	r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4413      	add	r3, r2
 8006316:	00da      	lsls	r2, r3, #3
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	0d1b      	lsrs	r3, r3, #20
 800631c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800631e:	fb02 f303 	mul.w	r3, r2, r3
 8006322:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006324:	e060      	b.n	80063e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800632c:	d107      	bne.n	800633e <SPI_WaitFifoStateUntilTimeout+0x62>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d104      	bne.n	800633e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	b2db      	uxtb	r3, r3
 800633a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800633c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006344:	d050      	beq.n	80063e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006346:	f7fb fadd 	bl	8001904 <HAL_GetTick>
 800634a:	4602      	mov	r2, r0
 800634c:	6a3b      	ldr	r3, [r7, #32]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006352:	429a      	cmp	r2, r3
 8006354:	d902      	bls.n	800635c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006358:	2b00      	cmp	r3, #0
 800635a:	d13d      	bne.n	80063d8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	685a      	ldr	r2, [r3, #4]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800636a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006374:	d111      	bne.n	800639a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800637e:	d004      	beq.n	800638a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006388:	d107      	bne.n	800639a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006398:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800639e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063a2:	d10f      	bne.n	80063c4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80063b2:	601a      	str	r2, [r3, #0]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80063c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e010      	b.n	80063fa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80063de:	2300      	movs	r3, #0
 80063e0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	3b01      	subs	r3, #1
 80063e6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	689a      	ldr	r2, [r3, #8]
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	4013      	ands	r3, r2
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d196      	bne.n	8006326 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3728      	adds	r7, #40	@ 0x28
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	20000060 	.word	0x20000060

08006408 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b086      	sub	sp, #24
 800640c:	af02      	add	r7, sp, #8
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	2200      	movs	r2, #0
 800641c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f7ff ff5b 	bl	80062dc <SPI_WaitFifoStateUntilTimeout>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d007      	beq.n	800643c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006430:	f043 0220 	orr.w	r2, r3, #32
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e027      	b.n	800648c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	2200      	movs	r2, #0
 8006444:	2180      	movs	r1, #128	@ 0x80
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f7ff fec0 	bl	80061cc <SPI_WaitFlagStateUntilTimeout>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d007      	beq.n	8006462 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006456:	f043 0220 	orr.w	r2, r3, #32
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e014      	b.n	800648c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	2200      	movs	r2, #0
 800646a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f7ff ff34 	bl	80062dc <SPI_WaitFifoStateUntilTimeout>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d007      	beq.n	800648a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800647e:	f043 0220 	orr.w	r2, r3, #32
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e000      	b.n	800648c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80064a4:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80064a8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3714      	adds	r7, #20
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b085      	sub	sp, #20
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80064ca:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80064ce:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	b29b      	uxth	r3, r3
 80064dc:	43db      	mvns	r3, r3
 80064de:	b29b      	uxth	r3, r3
 80064e0:	4013      	ands	r3, r2
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3714      	adds	r7, #20
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	1d3b      	adds	r3, r7, #4
 8006502:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2201      	movs	r2, #1
 800650a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3714      	adds	r7, #20
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006534:	b480      	push	{r7}
 8006536:	b09d      	sub	sp, #116	@ 0x74
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800653e:	2300      	movs	r3, #0
 8006540:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4413      	add	r3, r2
 800654e:	881b      	ldrh	r3, [r3, #0]
 8006550:	b29b      	uxth	r3, r3
 8006552:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006556:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800655a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	78db      	ldrb	r3, [r3, #3]
 8006562:	2b03      	cmp	r3, #3
 8006564:	d81f      	bhi.n	80065a6 <USB_ActivateEndpoint+0x72>
 8006566:	a201      	add	r2, pc, #4	@ (adr r2, 800656c <USB_ActivateEndpoint+0x38>)
 8006568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800656c:	0800657d 	.word	0x0800657d
 8006570:	08006599 	.word	0x08006599
 8006574:	080065af 	.word	0x080065af
 8006578:	0800658b 	.word	0x0800658b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800657c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006580:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006584:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006588:	e012      	b.n	80065b0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800658a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800658e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006592:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006596:	e00b      	b.n	80065b0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006598:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800659c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80065a0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80065a4:	e004      	b.n	80065b0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80065ac:	e000      	b.n	80065b0 <USB_ActivateEndpoint+0x7c>
      break;
 80065ae:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	441a      	add	r2, r3
 80065ba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80065be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4413      	add	r3, r2
 80065dc:	881b      	ldrh	r3, [r3, #0]
 80065de:	b29b      	uxth	r3, r3
 80065e0:	b21b      	sxth	r3, r3
 80065e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ea:	b21a      	sxth	r2, r3
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	b21b      	sxth	r3, r3
 80065f2:	4313      	orrs	r3, r2
 80065f4:	b21b      	sxth	r3, r3
 80065f6:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	441a      	add	r2, r3
 8006604:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006608:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800660c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006610:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006614:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006618:	b29b      	uxth	r3, r3
 800661a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	7b1b      	ldrb	r3, [r3, #12]
 8006620:	2b00      	cmp	r3, #0
 8006622:	f040 8178 	bne.w	8006916 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	785b      	ldrb	r3, [r3, #1]
 800662a:	2b00      	cmp	r3, #0
 800662c:	f000 8084 	beq.w	8006738 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	61bb      	str	r3, [r7, #24]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800663a:	b29b      	uxth	r3, r3
 800663c:	461a      	mov	r2, r3
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	4413      	add	r3, r2
 8006642:	61bb      	str	r3, [r7, #24]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	011a      	lsls	r2, r3, #4
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	4413      	add	r3, r2
 800664e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006652:	617b      	str	r3, [r7, #20]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	88db      	ldrh	r3, [r3, #6]
 8006658:	085b      	lsrs	r3, r3, #1
 800665a:	b29b      	uxth	r3, r3
 800665c:	005b      	lsls	r3, r3, #1
 800665e:	b29a      	uxth	r2, r3
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4413      	add	r3, r2
 800666e:	881b      	ldrh	r3, [r3, #0]
 8006670:	827b      	strh	r3, [r7, #18]
 8006672:	8a7b      	ldrh	r3, [r7, #18]
 8006674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006678:	2b00      	cmp	r3, #0
 800667a:	d01b      	beq.n	80066b4 <USB_ActivateEndpoint+0x180>
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4413      	add	r3, r2
 8006686:	881b      	ldrh	r3, [r3, #0]
 8006688:	b29b      	uxth	r3, r3
 800668a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800668e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006692:	823b      	strh	r3, [r7, #16]
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	441a      	add	r2, r3
 800669e:	8a3b      	ldrh	r3, [r7, #16]
 80066a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066ac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	78db      	ldrb	r3, [r3, #3]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d020      	beq.n	80066fe <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	4413      	add	r3, r2
 80066c6:	881b      	ldrh	r3, [r3, #0]
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066d2:	81bb      	strh	r3, [r7, #12]
 80066d4:	89bb      	ldrh	r3, [r7, #12]
 80066d6:	f083 0320 	eor.w	r3, r3, #32
 80066da:	81bb      	strh	r3, [r7, #12]
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	441a      	add	r2, r3
 80066e6:	89bb      	ldrh	r3, [r7, #12]
 80066e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	8013      	strh	r3, [r2, #0]
 80066fc:	e2d5      	b.n	8006caa <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4413      	add	r3, r2
 8006708:	881b      	ldrh	r3, [r3, #0]
 800670a:	b29b      	uxth	r3, r3
 800670c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006710:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006714:	81fb      	strh	r3, [r7, #14]
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	441a      	add	r2, r3
 8006720:	89fb      	ldrh	r3, [r7, #14]
 8006722:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006726:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800672a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800672e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006732:	b29b      	uxth	r3, r3
 8006734:	8013      	strh	r3, [r2, #0]
 8006736:	e2b8      	b.n	8006caa <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	633b      	str	r3, [r7, #48]	@ 0x30
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006742:	b29b      	uxth	r3, r3
 8006744:	461a      	mov	r2, r3
 8006746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006748:	4413      	add	r3, r2
 800674a:	633b      	str	r3, [r7, #48]	@ 0x30
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	011a      	lsls	r2, r3, #4
 8006752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006754:	4413      	add	r3, r2
 8006756:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800675a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	88db      	ldrh	r3, [r3, #6]
 8006760:	085b      	lsrs	r3, r3, #1
 8006762:	b29b      	uxth	r3, r3
 8006764:	005b      	lsls	r3, r3, #1
 8006766:	b29a      	uxth	r2, r3
 8006768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800676a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006776:	b29b      	uxth	r3, r3
 8006778:	461a      	mov	r2, r3
 800677a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800677c:	4413      	add	r3, r2
 800677e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	011a      	lsls	r2, r3, #4
 8006786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006788:	4413      	add	r3, r2
 800678a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800678e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006792:	881b      	ldrh	r3, [r3, #0]
 8006794:	b29b      	uxth	r3, r3
 8006796:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800679a:	b29a      	uxth	r2, r3
 800679c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679e:	801a      	strh	r2, [r3, #0]
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d10a      	bne.n	80067be <USB_ActivateEndpoint+0x28a>
 80067a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067aa:	881b      	ldrh	r3, [r3, #0]
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ba:	801a      	strh	r2, [r3, #0]
 80067bc:	e039      	b.n	8006832 <USB_ActivateEndpoint+0x2fe>
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	2b3e      	cmp	r3, #62	@ 0x3e
 80067c4:	d818      	bhi.n	80067f8 <USB_ActivateEndpoint+0x2c4>
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	085b      	lsrs	r3, r3, #1
 80067cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d002      	beq.n	80067e0 <USB_ActivateEndpoint+0x2ac>
 80067da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067dc:	3301      	adds	r3, #1
 80067de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e2:	881b      	ldrh	r3, [r3, #0]
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	029b      	lsls	r3, r3, #10
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	4313      	orrs	r3, r2
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f4:	801a      	strh	r2, [r3, #0]
 80067f6:	e01c      	b.n	8006832 <USB_ActivateEndpoint+0x2fe>
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	095b      	lsrs	r3, r3, #5
 80067fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	f003 031f 	and.w	r3, r3, #31
 8006808:	2b00      	cmp	r3, #0
 800680a:	d102      	bne.n	8006812 <USB_ActivateEndpoint+0x2de>
 800680c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800680e:	3b01      	subs	r3, #1
 8006810:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006814:	881b      	ldrh	r3, [r3, #0]
 8006816:	b29a      	uxth	r2, r3
 8006818:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800681a:	b29b      	uxth	r3, r3
 800681c:	029b      	lsls	r3, r3, #10
 800681e:	b29b      	uxth	r3, r3
 8006820:	4313      	orrs	r3, r2
 8006822:	b29b      	uxth	r3, r3
 8006824:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006828:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800682c:	b29a      	uxth	r2, r3
 800682e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006830:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	4413      	add	r3, r2
 800683c:	881b      	ldrh	r3, [r3, #0]
 800683e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006840:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006842:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d01b      	beq.n	8006882 <USB_ActivateEndpoint+0x34e>
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4413      	add	r3, r2
 8006854:	881b      	ldrh	r3, [r3, #0]
 8006856:	b29b      	uxth	r3, r3
 8006858:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800685c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006860:	843b      	strh	r3, [r7, #32]
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	441a      	add	r2, r3
 800686c:	8c3b      	ldrh	r3, [r7, #32]
 800686e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006872:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006876:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800687a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800687e:	b29b      	uxth	r3, r3
 8006880:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d124      	bne.n	80068d4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	4413      	add	r3, r2
 8006894:	881b      	ldrh	r3, [r3, #0]
 8006896:	b29b      	uxth	r3, r3
 8006898:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800689c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068a0:	83bb      	strh	r3, [r7, #28]
 80068a2:	8bbb      	ldrh	r3, [r7, #28]
 80068a4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80068a8:	83bb      	strh	r3, [r7, #28]
 80068aa:	8bbb      	ldrh	r3, [r7, #28]
 80068ac:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80068b0:	83bb      	strh	r3, [r7, #28]
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	441a      	add	r2, r3
 80068bc:	8bbb      	ldrh	r3, [r7, #28]
 80068be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	8013      	strh	r3, [r2, #0]
 80068d2:	e1ea      	b.n	8006caa <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	4413      	add	r3, r2
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068ea:	83fb      	strh	r3, [r7, #30]
 80068ec:	8bfb      	ldrh	r3, [r7, #30]
 80068ee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80068f2:	83fb      	strh	r3, [r7, #30]
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	441a      	add	r2, r3
 80068fe:	8bfb      	ldrh	r3, [r7, #30]
 8006900:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006904:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006908:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800690c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006910:	b29b      	uxth	r3, r3
 8006912:	8013      	strh	r3, [r2, #0]
 8006914:	e1c9      	b.n	8006caa <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	78db      	ldrb	r3, [r3, #3]
 800691a:	2b02      	cmp	r3, #2
 800691c:	d11e      	bne.n	800695c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	881b      	ldrh	r3, [r3, #0]
 800692a:	b29b      	uxth	r3, r3
 800692c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006930:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006934:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	441a      	add	r2, r3
 8006942:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006946:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800694a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800694e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006952:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006956:	b29b      	uxth	r3, r3
 8006958:	8013      	strh	r3, [r2, #0]
 800695a:	e01d      	b.n	8006998 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4413      	add	r3, r2
 8006966:	881b      	ldrh	r3, [r3, #0]
 8006968:	b29b      	uxth	r3, r3
 800696a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800696e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006972:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	441a      	add	r2, r3
 8006980:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006984:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006988:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800698c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006990:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006994:	b29b      	uxth	r3, r3
 8006996:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	461a      	mov	r2, r3
 80069a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069a8:	4413      	add	r3, r2
 80069aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	011a      	lsls	r2, r3, #4
 80069b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069b4:	4413      	add	r3, r2
 80069b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80069ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	891b      	ldrh	r3, [r3, #8]
 80069c0:	085b      	lsrs	r3, r3, #1
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	005b      	lsls	r3, r3, #1
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80069ca:	801a      	strh	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	461a      	mov	r2, r3
 80069da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069dc:	4413      	add	r3, r2
 80069de:	657b      	str	r3, [r7, #84]	@ 0x54
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	011a      	lsls	r2, r3, #4
 80069e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069e8:	4413      	add	r3, r2
 80069ea:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80069ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	895b      	ldrh	r3, [r3, #10]
 80069f4:	085b      	lsrs	r3, r3, #1
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	005b      	lsls	r3, r3, #1
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069fe:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	785b      	ldrb	r3, [r3, #1]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f040 8093 	bne.w	8006b30 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	881b      	ldrh	r3, [r3, #0]
 8006a16:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006a1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006a1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d01b      	beq.n	8006a5e <USB_ActivateEndpoint+0x52a>
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4413      	add	r3, r2
 8006a30:	881b      	ldrh	r3, [r3, #0]
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a3c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	441a      	add	r2, r3
 8006a48:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006a4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a52:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006a56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	4413      	add	r3, r2
 8006a68:	881b      	ldrh	r3, [r3, #0]
 8006a6a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006a6c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006a6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d01b      	beq.n	8006aae <USB_ActivateEndpoint+0x57a>
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	4413      	add	r3, r2
 8006a80:	881b      	ldrh	r3, [r3, #0]
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a8c:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	441a      	add	r2, r3
 8006a98:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006a9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aa2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006aa6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4413      	add	r3, r2
 8006ab8:	881b      	ldrh	r3, [r3, #0]
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ac0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ac4:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006ac6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006ac8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006acc:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006ace:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006ad0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006ad4:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	441a      	add	r2, r3
 8006ae0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006ae2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ae6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006aee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	4413      	add	r3, r2
 8006b00:	881b      	ldrh	r3, [r3, #0]
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b0c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	441a      	add	r2, r3
 8006b18:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006b1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	8013      	strh	r3, [r2, #0]
 8006b2e:	e0bc      	b.n	8006caa <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	4413      	add	r3, r2
 8006b3a:	881b      	ldrh	r3, [r3, #0]
 8006b3c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006b40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006b44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d01d      	beq.n	8006b88 <USB_ActivateEndpoint+0x654>
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	881b      	ldrh	r3, [r3, #0]
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b62:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	441a      	add	r2, r3
 8006b70:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006b74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	4413      	add	r3, r2
 8006b92:	881b      	ldrh	r3, [r3, #0]
 8006b94:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006b98:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d01d      	beq.n	8006be0 <USB_ActivateEndpoint+0x6ac>
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	4413      	add	r3, r2
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bba:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	441a      	add	r2, r3
 8006bc8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006bcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bd8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	78db      	ldrb	r3, [r3, #3]
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d024      	beq.n	8006c32 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	4413      	add	r3, r2
 8006bf2:	881b      	ldrh	r3, [r3, #0]
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bfe:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006c02:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006c06:	f083 0320 	eor.w	r3, r3, #32
 8006c0a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	441a      	add	r2, r3
 8006c18:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006c1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	8013      	strh	r3, [r2, #0]
 8006c30:	e01d      	b.n	8006c6e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	4413      	add	r3, r2
 8006c3c:	881b      	ldrh	r3, [r3, #0]
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c48:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	441a      	add	r2, r3
 8006c56:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006c5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4413      	add	r3, r2
 8006c78:	881b      	ldrh	r3, [r3, #0]
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c84:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	441a      	add	r2, r3
 8006c92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006c96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ca2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006caa:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3774      	adds	r7, #116	@ 0x74
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop

08006cbc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b08d      	sub	sp, #52	@ 0x34
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	7b1b      	ldrb	r3, [r3, #12]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f040 808e 	bne.w	8006dec <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	785b      	ldrb	r3, [r3, #1]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d044      	beq.n	8006d62 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4413      	add	r3, r2
 8006ce2:	881b      	ldrh	r3, [r3, #0]
 8006ce4:	81bb      	strh	r3, [r7, #12]
 8006ce6:	89bb      	ldrh	r3, [r7, #12]
 8006ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d01b      	beq.n	8006d28 <USB_DeactivateEndpoint+0x6c>
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	4413      	add	r3, r2
 8006cfa:	881b      	ldrh	r3, [r3, #0]
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d06:	817b      	strh	r3, [r7, #10]
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	441a      	add	r2, r3
 8006d12:	897b      	ldrh	r3, [r7, #10]
 8006d14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d20:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	881b      	ldrh	r3, [r3, #0]
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d3e:	813b      	strh	r3, [r7, #8]
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	441a      	add	r2, r3
 8006d4a:	893b      	ldrh	r3, [r7, #8]
 8006d4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	8013      	strh	r3, [r2, #0]
 8006d60:	e192      	b.n	8007088 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	881b      	ldrh	r3, [r3, #0]
 8006d6e:	827b      	strh	r3, [r7, #18]
 8006d70:	8a7b      	ldrh	r3, [r7, #18]
 8006d72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d01b      	beq.n	8006db2 <USB_DeactivateEndpoint+0xf6>
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	881b      	ldrh	r3, [r3, #0]
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d90:	823b      	strh	r3, [r7, #16]
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	441a      	add	r2, r3
 8006d9c:	8a3b      	ldrh	r3, [r7, #16]
 8006d9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006da2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006da6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006daa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4413      	add	r3, r2
 8006dbc:	881b      	ldrh	r3, [r3, #0]
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006dc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dc8:	81fb      	strh	r3, [r7, #14]
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	441a      	add	r2, r3
 8006dd4:	89fb      	ldrh	r3, [r7, #14]
 8006dd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006de2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	8013      	strh	r3, [r2, #0]
 8006dea:	e14d      	b.n	8007088 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	785b      	ldrb	r3, [r3, #1]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f040 80a5 	bne.w	8006f40 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	4413      	add	r3, r2
 8006e00:	881b      	ldrh	r3, [r3, #0]
 8006e02:	843b      	strh	r3, [r7, #32]
 8006e04:	8c3b      	ldrh	r3, [r7, #32]
 8006e06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d01b      	beq.n	8006e46 <USB_DeactivateEndpoint+0x18a>
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	4413      	add	r3, r2
 8006e18:	881b      	ldrh	r3, [r3, #0]
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e24:	83fb      	strh	r3, [r7, #30]
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	441a      	add	r2, r3
 8006e30:	8bfb      	ldrh	r3, [r7, #30]
 8006e32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e3a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	4413      	add	r3, r2
 8006e50:	881b      	ldrh	r3, [r3, #0]
 8006e52:	83bb      	strh	r3, [r7, #28]
 8006e54:	8bbb      	ldrh	r3, [r7, #28]
 8006e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d01b      	beq.n	8006e96 <USB_DeactivateEndpoint+0x1da>
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	4413      	add	r3, r2
 8006e68:	881b      	ldrh	r3, [r3, #0]
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e74:	837b      	strh	r3, [r7, #26]
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	441a      	add	r2, r3
 8006e80:	8b7b      	ldrh	r3, [r7, #26]
 8006e82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e8e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4413      	add	r3, r2
 8006ea0:	881b      	ldrh	r3, [r3, #0]
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ea8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eac:	833b      	strh	r3, [r7, #24]
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	441a      	add	r2, r3
 8006eb8:	8b3b      	ldrh	r3, [r7, #24]
 8006eba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ebe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ec2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ec6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	4413      	add	r3, r2
 8006ed8:	881b      	ldrh	r3, [r3, #0]
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ee0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ee4:	82fb      	strh	r3, [r7, #22]
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	441a      	add	r2, r3
 8006ef0:	8afb      	ldrh	r3, [r7, #22]
 8006ef2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ef6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006efa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006efe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4413      	add	r3, r2
 8006f10:	881b      	ldrh	r3, [r3, #0]
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f1c:	82bb      	strh	r3, [r7, #20]
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	441a      	add	r2, r3
 8006f28:	8abb      	ldrh	r3, [r7, #20]
 8006f2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	8013      	strh	r3, [r2, #0]
 8006f3e:	e0a3      	b.n	8007088 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	4413      	add	r3, r2
 8006f4a:	881b      	ldrh	r3, [r3, #0]
 8006f4c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006f4e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006f50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d01b      	beq.n	8006f90 <USB_DeactivateEndpoint+0x2d4>
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4413      	add	r3, r2
 8006f62:	881b      	ldrh	r3, [r3, #0]
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f6e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	441a      	add	r2, r3
 8006f7a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006f7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	4413      	add	r3, r2
 8006f9a:	881b      	ldrh	r3, [r3, #0]
 8006f9c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006f9e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d01b      	beq.n	8006fe0 <USB_DeactivateEndpoint+0x324>
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	4413      	add	r3, r2
 8006fb2:	881b      	ldrh	r3, [r3, #0]
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fbe:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	441a      	add	r2, r3
 8006fca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006fcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fd8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4413      	add	r3, r2
 8006fea:	881b      	ldrh	r3, [r3, #0]
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ff6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	441a      	add	r2, r3
 8007002:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007004:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007008:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800700c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007010:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007014:	b29b      	uxth	r3, r3
 8007016:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	4413      	add	r3, r2
 8007022:	881b      	ldrh	r3, [r3, #0]
 8007024:	b29b      	uxth	r3, r3
 8007026:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800702a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800702e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	441a      	add	r2, r3
 800703a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800703c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007040:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007044:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007048:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800704c:	b29b      	uxth	r3, r3
 800704e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	4413      	add	r3, r2
 800705a:	881b      	ldrh	r3, [r3, #0]
 800705c:	b29b      	uxth	r3, r3
 800705e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007066:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	441a      	add	r2, r3
 8007072:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007074:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007078:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800707c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007080:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007084:	b29b      	uxth	r3, r3
 8007086:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3734      	adds	r7, #52	@ 0x34
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr

08007096 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b0c2      	sub	sp, #264	@ 0x108
 800709a:	af00      	add	r7, sp, #0
 800709c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070a4:	6018      	str	r0, [r3, #0]
 80070a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ae:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80070b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	785b      	ldrb	r3, [r3, #1]
 80070bc:	2b01      	cmp	r3, #1
 80070be:	f040 86b7 	bne.w	8007e30 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80070c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	699a      	ldr	r2, [r3, #24]
 80070ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d908      	bls.n	80070f0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80070de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80070ee:	e007      	b.n	8007100 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80070f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007104:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	7b1b      	ldrb	r3, [r3, #12]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d13a      	bne.n	8007186 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007114:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	6959      	ldr	r1, [r3, #20]
 800711c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007120:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	88da      	ldrh	r2, [r3, #6]
 8007128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800712c:	b29b      	uxth	r3, r3
 800712e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007132:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007136:	6800      	ldr	r0, [r0, #0]
 8007138:	f001 fc8d 	bl	8008a56 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800713c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007140:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	613b      	str	r3, [r7, #16]
 8007148:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800714c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007156:	b29b      	uxth	r3, r3
 8007158:	461a      	mov	r2, r3
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	4413      	add	r3, r2
 800715e:	613b      	str	r3, [r7, #16]
 8007160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007164:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	011a      	lsls	r2, r3, #4
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	4413      	add	r3, r2
 8007172:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007176:	60fb      	str	r3, [r7, #12]
 8007178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800717c:	b29a      	uxth	r2, r3
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	801a      	strh	r2, [r3, #0]
 8007182:	f000 be1f 	b.w	8007dc4 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007186:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800718a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	78db      	ldrb	r3, [r3, #3]
 8007192:	2b02      	cmp	r3, #2
 8007194:	f040 8462 	bne.w	8007a5c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800719c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	6a1a      	ldr	r2, [r3, #32]
 80071a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	f240 83df 	bls.w	8007974 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80071b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4413      	add	r3, r2
 80071d0:	881b      	ldrh	r3, [r3, #0]
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071dc:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80071e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	441a      	add	r2, r3
 80071fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80071fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007202:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007206:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800720a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800720e:	b29b      	uxth	r3, r3
 8007210:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007212:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007216:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6a1a      	ldr	r2, [r3, #32]
 800721e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007222:	1ad2      	subs	r2, r2, r3
 8007224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007228:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007234:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800723e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	4413      	add	r3, r2
 800724a:	881b      	ldrh	r3, [r3, #0]
 800724c:	b29b      	uxth	r3, r3
 800724e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007252:	2b00      	cmp	r3, #0
 8007254:	f000 81c7 	beq.w	80075e6 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007258:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800725c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	633b      	str	r3, [r7, #48]	@ 0x30
 8007264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007268:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	785b      	ldrb	r3, [r3, #1]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d177      	bne.n	8007364 <USB_EPStartXfer+0x2ce>
 8007274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007278:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007280:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007284:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800728e:	b29b      	uxth	r3, r3
 8007290:	461a      	mov	r2, r3
 8007292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007294:	4413      	add	r3, r2
 8007296:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800729c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	011a      	lsls	r2, r3, #4
 80072a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a8:	4413      	add	r3, r2
 80072aa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80072ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80072b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b2:	881b      	ldrh	r3, [r3, #0]
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072be:	801a      	strh	r2, [r3, #0]
 80072c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10a      	bne.n	80072de <USB_EPStartXfer+0x248>
 80072c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ca:	881b      	ldrh	r3, [r3, #0]
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072da:	801a      	strh	r2, [r3, #0]
 80072dc:	e067      	b.n	80073ae <USB_EPStartXfer+0x318>
 80072de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80072e4:	d81c      	bhi.n	8007320 <USB_EPStartXfer+0x28a>
 80072e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ea:	085b      	lsrs	r3, r3, #1
 80072ec:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80072f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072f4:	f003 0301 	and.w	r3, r3, #1
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d004      	beq.n	8007306 <USB_EPStartXfer+0x270>
 80072fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007300:	3301      	adds	r3, #1
 8007302:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007308:	881b      	ldrh	r3, [r3, #0]
 800730a:	b29a      	uxth	r2, r3
 800730c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007310:	b29b      	uxth	r3, r3
 8007312:	029b      	lsls	r3, r3, #10
 8007314:	b29b      	uxth	r3, r3
 8007316:	4313      	orrs	r3, r2
 8007318:	b29a      	uxth	r2, r3
 800731a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731c:	801a      	strh	r2, [r3, #0]
 800731e:	e046      	b.n	80073ae <USB_EPStartXfer+0x318>
 8007320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007324:	095b      	lsrs	r3, r3, #5
 8007326:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800732a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800732e:	f003 031f 	and.w	r3, r3, #31
 8007332:	2b00      	cmp	r3, #0
 8007334:	d104      	bne.n	8007340 <USB_EPStartXfer+0x2aa>
 8007336:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800733a:	3b01      	subs	r3, #1
 800733c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007342:	881b      	ldrh	r3, [r3, #0]
 8007344:	b29a      	uxth	r2, r3
 8007346:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800734a:	b29b      	uxth	r3, r3
 800734c:	029b      	lsls	r3, r3, #10
 800734e:	b29b      	uxth	r3, r3
 8007350:	4313      	orrs	r3, r2
 8007352:	b29b      	uxth	r3, r3
 8007354:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007358:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800735c:	b29a      	uxth	r2, r3
 800735e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007360:	801a      	strh	r2, [r3, #0]
 8007362:	e024      	b.n	80073ae <USB_EPStartXfer+0x318>
 8007364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007368:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	785b      	ldrb	r3, [r3, #1]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d11c      	bne.n	80073ae <USB_EPStartXfer+0x318>
 8007374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007378:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007382:	b29b      	uxth	r3, r3
 8007384:	461a      	mov	r2, r3
 8007386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007388:	4413      	add	r3, r2
 800738a:	633b      	str	r3, [r7, #48]	@ 0x30
 800738c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007390:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	011a      	lsls	r2, r3, #4
 800739a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800739c:	4413      	add	r3, r2
 800739e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80073a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80073ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	895b      	ldrh	r3, [r3, #10]
 80073ba:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	6959      	ldr	r1, [r3, #20]
 80073ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80073d4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80073d8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80073dc:	6800      	ldr	r0, [r0, #0]
 80073de:	f001 fb3a 	bl	8008a56 <USB_WritePMA>
            ep->xfer_buff += len;
 80073e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	695a      	ldr	r2, [r3, #20]
 80073ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073f2:	441a      	add	r2, r3
 80073f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007400:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007404:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	6a1a      	ldr	r2, [r3, #32]
 800740c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007410:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	429a      	cmp	r2, r3
 800741a:	d90f      	bls.n	800743c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800741c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007420:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	6a1a      	ldr	r2, [r3, #32]
 8007428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800742c:	1ad2      	subs	r2, r2, r3
 800742e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007432:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	621a      	str	r2, [r3, #32]
 800743a:	e00e      	b.n	800745a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800743c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007440:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	6a1b      	ldr	r3, [r3, #32]
 8007448:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800744c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007450:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2200      	movs	r2, #0
 8007458:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800745a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800745e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	785b      	ldrb	r3, [r3, #1]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d177      	bne.n	800755a <USB_EPStartXfer+0x4c4>
 800746a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800746e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	61bb      	str	r3, [r7, #24]
 8007476:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800747a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007484:	b29b      	uxth	r3, r3
 8007486:	461a      	mov	r2, r3
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	4413      	add	r3, r2
 800748c:	61bb      	str	r3, [r7, #24]
 800748e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007492:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	011a      	lsls	r2, r3, #4
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	4413      	add	r3, r2
 80074a0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80074a4:	617b      	str	r3, [r7, #20]
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	881b      	ldrh	r3, [r3, #0]
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	801a      	strh	r2, [r3, #0]
 80074b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d10a      	bne.n	80074d4 <USB_EPStartXfer+0x43e>
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	881b      	ldrh	r3, [r3, #0]
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	801a      	strh	r2, [r3, #0]
 80074d2:	e06d      	b.n	80075b0 <USB_EPStartXfer+0x51a>
 80074d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80074da:	d81c      	bhi.n	8007516 <USB_EPStartXfer+0x480>
 80074dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074e0:	085b      	lsrs	r3, r3, #1
 80074e2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80074e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ea:	f003 0301 	and.w	r3, r3, #1
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d004      	beq.n	80074fc <USB_EPStartXfer+0x466>
 80074f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074f6:	3301      	adds	r3, #1
 80074f8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	881b      	ldrh	r3, [r3, #0]
 8007500:	b29a      	uxth	r2, r3
 8007502:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007506:	b29b      	uxth	r3, r3
 8007508:	029b      	lsls	r3, r3, #10
 800750a:	b29b      	uxth	r3, r3
 800750c:	4313      	orrs	r3, r2
 800750e:	b29a      	uxth	r2, r3
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	801a      	strh	r2, [r3, #0]
 8007514:	e04c      	b.n	80075b0 <USB_EPStartXfer+0x51a>
 8007516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800751a:	095b      	lsrs	r3, r3, #5
 800751c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007524:	f003 031f 	and.w	r3, r3, #31
 8007528:	2b00      	cmp	r3, #0
 800752a:	d104      	bne.n	8007536 <USB_EPStartXfer+0x4a0>
 800752c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007530:	3b01      	subs	r3, #1
 8007532:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	881b      	ldrh	r3, [r3, #0]
 800753a:	b29a      	uxth	r2, r3
 800753c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007540:	b29b      	uxth	r3, r3
 8007542:	029b      	lsls	r3, r3, #10
 8007544:	b29b      	uxth	r3, r3
 8007546:	4313      	orrs	r3, r2
 8007548:	b29b      	uxth	r3, r3
 800754a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800754e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007552:	b29a      	uxth	r2, r3
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	801a      	strh	r2, [r3, #0]
 8007558:	e02a      	b.n	80075b0 <USB_EPStartXfer+0x51a>
 800755a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800755e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	785b      	ldrb	r3, [r3, #1]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d122      	bne.n	80075b0 <USB_EPStartXfer+0x51a>
 800756a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800756e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	623b      	str	r3, [r7, #32]
 8007576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800757a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007584:	b29b      	uxth	r3, r3
 8007586:	461a      	mov	r2, r3
 8007588:	6a3b      	ldr	r3, [r7, #32]
 800758a:	4413      	add	r3, r2
 800758c:	623b      	str	r3, [r7, #32]
 800758e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007592:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	011a      	lsls	r2, r3, #4
 800759c:	6a3b      	ldr	r3, [r7, #32]
 800759e:	4413      	add	r3, r2
 80075a0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80075a4:	61fb      	str	r3, [r7, #28]
 80075a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80075b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	891b      	ldrh	r3, [r3, #8]
 80075bc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	6959      	ldr	r1, [r3, #20]
 80075cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80075d6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80075da:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80075de:	6800      	ldr	r0, [r0, #0]
 80075e0:	f001 fa39 	bl	8008a56 <USB_WritePMA>
 80075e4:	e3ee      	b.n	8007dc4 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80075e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	785b      	ldrb	r3, [r3, #1]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d177      	bne.n	80076e6 <USB_EPStartXfer+0x650>
 80075f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007602:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007606:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007610:	b29b      	uxth	r3, r3
 8007612:	461a      	mov	r2, r3
 8007614:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007616:	4413      	add	r3, r2
 8007618:	64bb      	str	r3, [r7, #72]	@ 0x48
 800761a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800761e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	011a      	lsls	r2, r3, #4
 8007628:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800762a:	4413      	add	r3, r2
 800762c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007630:	647b      	str	r3, [r7, #68]	@ 0x44
 8007632:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007634:	881b      	ldrh	r3, [r3, #0]
 8007636:	b29b      	uxth	r3, r3
 8007638:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800763c:	b29a      	uxth	r2, r3
 800763e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007640:	801a      	strh	r2, [r3, #0]
 8007642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007646:	2b00      	cmp	r3, #0
 8007648:	d10a      	bne.n	8007660 <USB_EPStartXfer+0x5ca>
 800764a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800764c:	881b      	ldrh	r3, [r3, #0]
 800764e:	b29b      	uxth	r3, r3
 8007650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007658:	b29a      	uxth	r2, r3
 800765a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800765c:	801a      	strh	r2, [r3, #0]
 800765e:	e06d      	b.n	800773c <USB_EPStartXfer+0x6a6>
 8007660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007664:	2b3e      	cmp	r3, #62	@ 0x3e
 8007666:	d81c      	bhi.n	80076a2 <USB_EPStartXfer+0x60c>
 8007668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800766c:	085b      	lsrs	r3, r3, #1
 800766e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007676:	f003 0301 	and.w	r3, r3, #1
 800767a:	2b00      	cmp	r3, #0
 800767c:	d004      	beq.n	8007688 <USB_EPStartXfer+0x5f2>
 800767e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007682:	3301      	adds	r3, #1
 8007684:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007688:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800768a:	881b      	ldrh	r3, [r3, #0]
 800768c:	b29a      	uxth	r2, r3
 800768e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007692:	b29b      	uxth	r3, r3
 8007694:	029b      	lsls	r3, r3, #10
 8007696:	b29b      	uxth	r3, r3
 8007698:	4313      	orrs	r3, r2
 800769a:	b29a      	uxth	r2, r3
 800769c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800769e:	801a      	strh	r2, [r3, #0]
 80076a0:	e04c      	b.n	800773c <USB_EPStartXfer+0x6a6>
 80076a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076a6:	095b      	lsrs	r3, r3, #5
 80076a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80076ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076b0:	f003 031f 	and.w	r3, r3, #31
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d104      	bne.n	80076c2 <USB_EPStartXfer+0x62c>
 80076b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80076bc:	3b01      	subs	r3, #1
 80076be:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80076c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076c4:	881b      	ldrh	r3, [r3, #0]
 80076c6:	b29a      	uxth	r2, r3
 80076c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	029b      	lsls	r3, r3, #10
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	4313      	orrs	r3, r2
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076de:	b29a      	uxth	r2, r3
 80076e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076e2:	801a      	strh	r2, [r3, #0]
 80076e4:	e02a      	b.n	800773c <USB_EPStartXfer+0x6a6>
 80076e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	785b      	ldrb	r3, [r3, #1]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d122      	bne.n	800773c <USB_EPStartXfer+0x6a6>
 80076f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	653b      	str	r3, [r7, #80]	@ 0x50
 8007702:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007706:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007710:	b29b      	uxth	r3, r3
 8007712:	461a      	mov	r2, r3
 8007714:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007716:	4413      	add	r3, r2
 8007718:	653b      	str	r3, [r7, #80]	@ 0x50
 800771a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800771e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	011a      	lsls	r2, r3, #4
 8007728:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800772a:	4413      	add	r3, r2
 800772c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007730:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007736:	b29a      	uxth	r2, r3
 8007738:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800773a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800773c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007740:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	891b      	ldrh	r3, [r3, #8]
 8007748:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800774c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007750:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	6959      	ldr	r1, [r3, #20]
 8007758:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800775c:	b29b      	uxth	r3, r3
 800775e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007762:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007766:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800776a:	6800      	ldr	r0, [r0, #0]
 800776c:	f001 f973 	bl	8008a56 <USB_WritePMA>
            ep->xfer_buff += len;
 8007770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007774:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	695a      	ldr	r2, [r3, #20]
 800777c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007780:	441a      	add	r2, r3
 8007782:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007786:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800778e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007792:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	6a1a      	ldr	r2, [r3, #32]
 800779a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800779e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d90f      	bls.n	80077ca <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80077aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	6a1a      	ldr	r2, [r3, #32]
 80077b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ba:	1ad2      	subs	r2, r2, r3
 80077bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	621a      	str	r2, [r3, #32]
 80077c8:	e00e      	b.n	80077e8 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80077ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	6a1b      	ldr	r3, [r3, #32]
 80077d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80077da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2200      	movs	r2, #0
 80077e6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80077e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80077f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	785b      	ldrb	r3, [r3, #1]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d177      	bne.n	80078f4 <USB_EPStartXfer+0x85e>
 8007804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007808:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007814:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800781e:	b29b      	uxth	r3, r3
 8007820:	461a      	mov	r2, r3
 8007822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007824:	4413      	add	r3, r2
 8007826:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007828:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800782c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	011a      	lsls	r2, r3, #4
 8007836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007838:	4413      	add	r3, r2
 800783a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800783e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007842:	881b      	ldrh	r3, [r3, #0]
 8007844:	b29b      	uxth	r3, r3
 8007846:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800784a:	b29a      	uxth	r2, r3
 800784c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800784e:	801a      	strh	r2, [r3, #0]
 8007850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007854:	2b00      	cmp	r3, #0
 8007856:	d10a      	bne.n	800786e <USB_EPStartXfer+0x7d8>
 8007858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800785a:	881b      	ldrh	r3, [r3, #0]
 800785c:	b29b      	uxth	r3, r3
 800785e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007862:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007866:	b29a      	uxth	r2, r3
 8007868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800786a:	801a      	strh	r2, [r3, #0]
 800786c:	e067      	b.n	800793e <USB_EPStartXfer+0x8a8>
 800786e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007872:	2b3e      	cmp	r3, #62	@ 0x3e
 8007874:	d81c      	bhi.n	80078b0 <USB_EPStartXfer+0x81a>
 8007876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800787a:	085b      	lsrs	r3, r3, #1
 800787c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007884:	f003 0301 	and.w	r3, r3, #1
 8007888:	2b00      	cmp	r3, #0
 800788a:	d004      	beq.n	8007896 <USB_EPStartXfer+0x800>
 800788c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007890:	3301      	adds	r3, #1
 8007892:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007898:	881b      	ldrh	r3, [r3, #0]
 800789a:	b29a      	uxth	r2, r3
 800789c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	029b      	lsls	r3, r3, #10
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	4313      	orrs	r3, r2
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078ac:	801a      	strh	r2, [r3, #0]
 80078ae:	e046      	b.n	800793e <USB_EPStartXfer+0x8a8>
 80078b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078b4:	095b      	lsrs	r3, r3, #5
 80078b6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80078ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078be:	f003 031f 	and.w	r3, r3, #31
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d104      	bne.n	80078d0 <USB_EPStartXfer+0x83a>
 80078c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078ca:	3b01      	subs	r3, #1
 80078cc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80078d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078d2:	881b      	ldrh	r3, [r3, #0]
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078da:	b29b      	uxth	r3, r3
 80078dc:	029b      	lsls	r3, r3, #10
 80078de:	b29b      	uxth	r3, r3
 80078e0:	4313      	orrs	r3, r2
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078f0:	801a      	strh	r2, [r3, #0]
 80078f2:	e024      	b.n	800793e <USB_EPStartXfer+0x8a8>
 80078f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	785b      	ldrb	r3, [r3, #1]
 8007900:	2b01      	cmp	r3, #1
 8007902:	d11c      	bne.n	800793e <USB_EPStartXfer+0x8a8>
 8007904:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007908:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007912:	b29b      	uxth	r3, r3
 8007914:	461a      	mov	r2, r3
 8007916:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007918:	4413      	add	r3, r2
 800791a:	643b      	str	r3, [r7, #64]	@ 0x40
 800791c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007920:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	011a      	lsls	r2, r3, #4
 800792a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800792c:	4413      	add	r3, r2
 800792e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007932:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007938:	b29a      	uxth	r2, r3
 800793a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800793c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800793e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007942:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	895b      	ldrh	r3, [r3, #10]
 800794a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800794e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007952:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6959      	ldr	r1, [r3, #20]
 800795a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800795e:	b29b      	uxth	r3, r3
 8007960:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007964:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007968:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800796c:	6800      	ldr	r0, [r0, #0]
 800796e:	f001 f872 	bl	8008a56 <USB_WritePMA>
 8007972:	e227      	b.n	8007dc4 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007978:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	6a1b      	ldr	r3, [r3, #32]
 8007980:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007984:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007988:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007992:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	4413      	add	r3, r2
 800799e:	881b      	ldrh	r3, [r3, #0]
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80079a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079aa:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80079ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	441a      	add	r2, r3
 80079c8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80079cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079dc:	b29b      	uxth	r3, r3
 80079de:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80079e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80079ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	461a      	mov	r2, r3
 80079fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a00:	4413      	add	r3, r2
 8007a02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	011a      	lsls	r2, r3, #4
 8007a12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a14:	4413      	add	r3, r2
 8007a16:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007a1a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a24:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007a26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	891b      	ldrh	r3, [r3, #8]
 8007a32:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	6959      	ldr	r1, [r3, #20]
 8007a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007a4c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007a50:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007a54:	6800      	ldr	r0, [r0, #0]
 8007a56:	f000 fffe 	bl	8008a56 <USB_WritePMA>
 8007a5a:	e1b3      	b.n	8007dc4 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	6a1a      	ldr	r2, [r3, #32]
 8007a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a6c:	1ad2      	subs	r2, r2, r3
 8007a6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007a7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	4413      	add	r3, r2
 8007a94:	881b      	ldrh	r3, [r3, #0]
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f000 80c6 	beq.w	8007c2e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007aa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aa6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	673b      	str	r3, [r7, #112]	@ 0x70
 8007aae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ab2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	785b      	ldrb	r3, [r3, #1]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d177      	bne.n	8007bae <USB_EPStartXfer+0xb18>
 8007abe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ac2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007aca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ace:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	461a      	mov	r2, r3
 8007adc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007ade:	4413      	add	r3, r2
 8007ae0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ae2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ae6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	011a      	lsls	r2, r3, #4
 8007af0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007af2:	4413      	add	r3, r2
 8007af4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007af8:	667b      	str	r3, [r7, #100]	@ 0x64
 8007afa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007afc:	881b      	ldrh	r3, [r3, #0]
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b04:	b29a      	uxth	r2, r3
 8007b06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b08:	801a      	strh	r2, [r3, #0]
 8007b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d10a      	bne.n	8007b28 <USB_EPStartXfer+0xa92>
 8007b12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b14:	881b      	ldrh	r3, [r3, #0]
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b24:	801a      	strh	r2, [r3, #0]
 8007b26:	e067      	b.n	8007bf8 <USB_EPStartXfer+0xb62>
 8007b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b2c:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b2e:	d81c      	bhi.n	8007b6a <USB_EPStartXfer+0xad4>
 8007b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b34:	085b      	lsrs	r3, r3, #1
 8007b36:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b3e:	f003 0301 	and.w	r3, r3, #1
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d004      	beq.n	8007b50 <USB_EPStartXfer+0xaba>
 8007b46:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007b50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b52:	881b      	ldrh	r3, [r3, #0]
 8007b54:	b29a      	uxth	r2, r3
 8007b56:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	029b      	lsls	r3, r3, #10
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	4313      	orrs	r3, r2
 8007b62:	b29a      	uxth	r2, r3
 8007b64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b66:	801a      	strh	r2, [r3, #0]
 8007b68:	e046      	b.n	8007bf8 <USB_EPStartXfer+0xb62>
 8007b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b6e:	095b      	lsrs	r3, r3, #5
 8007b70:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b78:	f003 031f 	and.w	r3, r3, #31
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d104      	bne.n	8007b8a <USB_EPStartXfer+0xaf4>
 8007b80:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007b84:	3b01      	subs	r3, #1
 8007b86:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007b8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b8c:	881b      	ldrh	r3, [r3, #0]
 8007b8e:	b29a      	uxth	r2, r3
 8007b90:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	029b      	lsls	r3, r3, #10
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ba2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007baa:	801a      	strh	r2, [r3, #0]
 8007bac:	e024      	b.n	8007bf8 <USB_EPStartXfer+0xb62>
 8007bae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	785b      	ldrb	r3, [r3, #1]
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d11c      	bne.n	8007bf8 <USB_EPStartXfer+0xb62>
 8007bbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	461a      	mov	r2, r3
 8007bd0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007bd2:	4413      	add	r3, r2
 8007bd4:	673b      	str	r3, [r7, #112]	@ 0x70
 8007bd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	011a      	lsls	r2, r3, #4
 8007be4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007be6:	4413      	add	r3, r2
 8007be8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007bec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007bf6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007bf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	895b      	ldrh	r3, [r3, #10]
 8007c04:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	6959      	ldr	r1, [r3, #20]
 8007c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007c1e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007c22:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007c26:	6800      	ldr	r0, [r0, #0]
 8007c28:	f000 ff15 	bl	8008a56 <USB_WritePMA>
 8007c2c:	e0ca      	b.n	8007dc4 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007c2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	785b      	ldrb	r3, [r3, #1]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d177      	bne.n	8007d2e <USB_EPStartXfer+0xc98>
 8007c3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007c4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007c5e:	4413      	add	r3, r2
 8007c60:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007c62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	011a      	lsls	r2, r3, #4
 8007c70:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007c72:	4413      	add	r3, r2
 8007c74:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007c78:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007c7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c7c:	881b      	ldrh	r3, [r3, #0]
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c88:	801a      	strh	r2, [r3, #0]
 8007c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d10a      	bne.n	8007ca8 <USB_EPStartXfer+0xc12>
 8007c92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c94:	881b      	ldrh	r3, [r3, #0]
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ca0:	b29a      	uxth	r2, r3
 8007ca2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ca4:	801a      	strh	r2, [r3, #0]
 8007ca6:	e073      	b.n	8007d90 <USB_EPStartXfer+0xcfa>
 8007ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cac:	2b3e      	cmp	r3, #62	@ 0x3e
 8007cae:	d81c      	bhi.n	8007cea <USB_EPStartXfer+0xc54>
 8007cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cb4:	085b      	lsrs	r3, r3, #1
 8007cb6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cbe:	f003 0301 	and.w	r3, r3, #1
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d004      	beq.n	8007cd0 <USB_EPStartXfer+0xc3a>
 8007cc6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007cca:	3301      	adds	r3, #1
 8007ccc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007cd0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cd2:	881b      	ldrh	r3, [r3, #0]
 8007cd4:	b29a      	uxth	r2, r3
 8007cd6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	029b      	lsls	r3, r3, #10
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	b29a      	uxth	r2, r3
 8007ce4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ce6:	801a      	strh	r2, [r3, #0]
 8007ce8:	e052      	b.n	8007d90 <USB_EPStartXfer+0xcfa>
 8007cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cee:	095b      	lsrs	r3, r3, #5
 8007cf0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cf8:	f003 031f 	and.w	r3, r3, #31
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d104      	bne.n	8007d0a <USB_EPStartXfer+0xc74>
 8007d00:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007d04:	3b01      	subs	r3, #1
 8007d06:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007d0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d0c:	881b      	ldrh	r3, [r3, #0]
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	029b      	lsls	r3, r3, #10
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d26:	b29a      	uxth	r2, r3
 8007d28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d2a:	801a      	strh	r2, [r3, #0]
 8007d2c:	e030      	b.n	8007d90 <USB_EPStartXfer+0xcfa>
 8007d2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	785b      	ldrb	r3, [r3, #1]
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d128      	bne.n	8007d90 <USB_EPStartXfer+0xcfa>
 8007d3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d62:	4413      	add	r3, r2
 8007d64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	011a      	lsls	r2, r3, #4
 8007d76:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d7a:	4413      	add	r3, r2
 8007d7c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007d80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d88:	b29a      	uxth	r2, r3
 8007d8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007d8e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007d90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	891b      	ldrh	r3, [r3, #8]
 8007d9c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007da0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007da4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	6959      	ldr	r1, [r3, #20]
 8007dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007db6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007dba:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007dbe:	6800      	ldr	r0, [r0, #0]
 8007dc0:	f000 fe49 	bl	8008a56 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007dc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	4413      	add	r3, r2
 8007dde:	881b      	ldrh	r3, [r3, #0]
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007de6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dea:	817b      	strh	r3, [r7, #10]
 8007dec:	897b      	ldrh	r3, [r7, #10]
 8007dee:	f083 0310 	eor.w	r3, r3, #16
 8007df2:	817b      	strh	r3, [r7, #10]
 8007df4:	897b      	ldrh	r3, [r7, #10]
 8007df6:	f083 0320 	eor.w	r3, r3, #32
 8007dfa:	817b      	strh	r3, [r7, #10]
 8007dfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	441a      	add	r2, r3
 8007e16:	897b      	ldrh	r3, [r7, #10]
 8007e18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	8013      	strh	r3, [r2, #0]
 8007e2c:	f000 bcdf 	b.w	80087ee <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007e30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	7b1b      	ldrb	r3, [r3, #12]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f040 80bc 	bne.w	8007fba <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007e42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	699a      	ldr	r2, [r3, #24]
 8007e4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d917      	bls.n	8007e8e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007e5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007e6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	699a      	ldr	r2, [r3, #24]
 8007e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e7e:	1ad2      	subs	r2, r2, r3
 8007e80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	619a      	str	r2, [r3, #24]
 8007e8c:	e00e      	b.n	8007eac <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007e8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	699b      	ldr	r3, [r3, #24]
 8007e9a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007e9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ea2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007eac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007eba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ebe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	461a      	mov	r2, r3
 8007ecc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007ed0:	4413      	add	r3, r2
 8007ed2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007ed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	011a      	lsls	r2, r3, #4
 8007ee4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007ee8:	4413      	add	r3, r2
 8007eea:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007eee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007ef2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ef6:	881b      	ldrh	r3, [r3, #0]
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007efe:	b29a      	uxth	r2, r3
 8007f00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f04:	801a      	strh	r2, [r3, #0]
 8007f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d10d      	bne.n	8007f2a <USB_EPStartXfer+0xe94>
 8007f0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f12:	881b      	ldrh	r3, [r3, #0]
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f24:	801a      	strh	r2, [r3, #0]
 8007f26:	f000 bc28 	b.w	800877a <USB_EPStartXfer+0x16e4>
 8007f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f2e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f30:	d81f      	bhi.n	8007f72 <USB_EPStartXfer+0xedc>
 8007f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f36:	085b      	lsrs	r3, r3, #1
 8007f38:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f40:	f003 0301 	and.w	r3, r3, #1
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d004      	beq.n	8007f52 <USB_EPStartXfer+0xebc>
 8007f48:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f56:	881b      	ldrh	r3, [r3, #0]
 8007f58:	b29a      	uxth	r2, r3
 8007f5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	029b      	lsls	r3, r3, #10
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	4313      	orrs	r3, r2
 8007f66:	b29a      	uxth	r2, r3
 8007f68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f6c:	801a      	strh	r2, [r3, #0]
 8007f6e:	f000 bc04 	b.w	800877a <USB_EPStartXfer+0x16e4>
 8007f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f76:	095b      	lsrs	r3, r3, #5
 8007f78:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f80:	f003 031f 	and.w	r3, r3, #31
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d104      	bne.n	8007f92 <USB_EPStartXfer+0xefc>
 8007f88:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f96:	881b      	ldrh	r3, [r3, #0]
 8007f98:	b29a      	uxth	r2, r3
 8007f9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	029b      	lsls	r3, r3, #10
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fb0:	b29a      	uxth	r2, r3
 8007fb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007fb6:	801a      	strh	r2, [r3, #0]
 8007fb8:	e3df      	b.n	800877a <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007fba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	78db      	ldrb	r3, [r3, #3]
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	f040 8218 	bne.w	80083fc <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007fcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	785b      	ldrb	r3, [r3, #1]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f040 809d 	bne.w	8008118 <USB_EPStartXfer+0x1082>
 8007fde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fe2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007fec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ff0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008002:	4413      	add	r3, r2
 8008004:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800800c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	011a      	lsls	r2, r3, #4
 8008016:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800801a:	4413      	add	r3, r2
 800801c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008020:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008024:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008028:	881b      	ldrh	r3, [r3, #0]
 800802a:	b29b      	uxth	r3, r3
 800802c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008030:	b29a      	uxth	r2, r3
 8008032:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008036:	801a      	strh	r2, [r3, #0]
 8008038:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800803c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d10c      	bne.n	8008062 <USB_EPStartXfer+0xfcc>
 8008048:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800804c:	881b      	ldrh	r3, [r3, #0]
 800804e:	b29b      	uxth	r3, r3
 8008050:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008054:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008058:	b29a      	uxth	r2, r3
 800805a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800805e:	801a      	strh	r2, [r3, #0]
 8008060:	e08f      	b.n	8008182 <USB_EPStartXfer+0x10ec>
 8008062:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008066:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008070:	d826      	bhi.n	80080c0 <USB_EPStartXfer+0x102a>
 8008072:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008076:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	085b      	lsrs	r3, r3, #1
 8008080:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008084:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008088:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	691b      	ldr	r3, [r3, #16]
 8008090:	f003 0301 	and.w	r3, r3, #1
 8008094:	2b00      	cmp	r3, #0
 8008096:	d004      	beq.n	80080a2 <USB_EPStartXfer+0x100c>
 8008098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800809c:	3301      	adds	r3, #1
 800809e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80080a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080a6:	881b      	ldrh	r3, [r3, #0]
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	029b      	lsls	r3, r3, #10
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	4313      	orrs	r3, r2
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080bc:	801a      	strh	r2, [r3, #0]
 80080be:	e060      	b.n	8008182 <USB_EPStartXfer+0x10ec>
 80080c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	691b      	ldr	r3, [r3, #16]
 80080cc:	095b      	lsrs	r3, r3, #5
 80080ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80080d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	f003 031f 	and.w	r3, r3, #31
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d104      	bne.n	80080f0 <USB_EPStartXfer+0x105a>
 80080e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080ea:	3b01      	subs	r3, #1
 80080ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80080f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080f4:	881b      	ldrh	r3, [r3, #0]
 80080f6:	b29a      	uxth	r2, r3
 80080f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	029b      	lsls	r3, r3, #10
 8008100:	b29b      	uxth	r3, r3
 8008102:	4313      	orrs	r3, r2
 8008104:	b29b      	uxth	r3, r3
 8008106:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800810a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800810e:	b29a      	uxth	r2, r3
 8008110:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008114:	801a      	strh	r2, [r3, #0]
 8008116:	e034      	b.n	8008182 <USB_EPStartXfer+0x10ec>
 8008118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800811c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	785b      	ldrb	r3, [r3, #1]
 8008124:	2b01      	cmp	r3, #1
 8008126:	d12c      	bne.n	8008182 <USB_EPStartXfer+0x10ec>
 8008128:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800812c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008136:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800813a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008144:	b29b      	uxth	r3, r3
 8008146:	461a      	mov	r2, r3
 8008148:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800814c:	4413      	add	r3, r2
 800814e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008156:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	011a      	lsls	r2, r3, #4
 8008160:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008164:	4413      	add	r3, r2
 8008166:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800816a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800816e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008172:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	b29a      	uxth	r2, r3
 800817c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008180:	801a      	strh	r2, [r3, #0]
 8008182:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008186:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008190:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008194:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	785b      	ldrb	r3, [r3, #1]
 800819c:	2b00      	cmp	r3, #0
 800819e:	f040 809d 	bne.w	80082dc <USB_EPStartXfer+0x1246>
 80081a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80081b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081be:	b29b      	uxth	r3, r3
 80081c0:	461a      	mov	r2, r3
 80081c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80081c6:	4413      	add	r3, r2
 80081c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80081cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	011a      	lsls	r2, r3, #4
 80081da:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80081de:	4413      	add	r3, r2
 80081e0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80081e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80081e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80081ec:	881b      	ldrh	r3, [r3, #0]
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80081fa:	801a      	strh	r2, [r3, #0]
 80081fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008200:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d10c      	bne.n	8008226 <USB_EPStartXfer+0x1190>
 800820c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008210:	881b      	ldrh	r3, [r3, #0]
 8008212:	b29b      	uxth	r3, r3
 8008214:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008218:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800821c:	b29a      	uxth	r2, r3
 800821e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008222:	801a      	strh	r2, [r3, #0]
 8008224:	e088      	b.n	8008338 <USB_EPStartXfer+0x12a2>
 8008226:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800822a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	2b3e      	cmp	r3, #62	@ 0x3e
 8008234:	d826      	bhi.n	8008284 <USB_EPStartXfer+0x11ee>
 8008236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800823a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	085b      	lsrs	r3, r3, #1
 8008244:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800824c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	691b      	ldr	r3, [r3, #16]
 8008254:	f003 0301 	and.w	r3, r3, #1
 8008258:	2b00      	cmp	r3, #0
 800825a:	d004      	beq.n	8008266 <USB_EPStartXfer+0x11d0>
 800825c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008260:	3301      	adds	r3, #1
 8008262:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008266:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800826a:	881b      	ldrh	r3, [r3, #0]
 800826c:	b29a      	uxth	r2, r3
 800826e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008272:	b29b      	uxth	r3, r3
 8008274:	029b      	lsls	r3, r3, #10
 8008276:	b29b      	uxth	r3, r3
 8008278:	4313      	orrs	r3, r2
 800827a:	b29a      	uxth	r2, r3
 800827c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008280:	801a      	strh	r2, [r3, #0]
 8008282:	e059      	b.n	8008338 <USB_EPStartXfer+0x12a2>
 8008284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	095b      	lsrs	r3, r3, #5
 8008292:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008296:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800829a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	691b      	ldr	r3, [r3, #16]
 80082a2:	f003 031f 	and.w	r3, r3, #31
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d104      	bne.n	80082b4 <USB_EPStartXfer+0x121e>
 80082aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082ae:	3b01      	subs	r3, #1
 80082b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80082b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082b8:	881b      	ldrh	r3, [r3, #0]
 80082ba:	b29a      	uxth	r2, r3
 80082bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	029b      	lsls	r3, r3, #10
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	4313      	orrs	r3, r2
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082d2:	b29a      	uxth	r2, r3
 80082d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082d8:	801a      	strh	r2, [r3, #0]
 80082da:	e02d      	b.n	8008338 <USB_EPStartXfer+0x12a2>
 80082dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	785b      	ldrb	r3, [r3, #1]
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d125      	bne.n	8008338 <USB_EPStartXfer+0x12a2>
 80082ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	461a      	mov	r2, r3
 80082fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008302:	4413      	add	r3, r2
 8008304:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008308:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800830c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	011a      	lsls	r2, r3, #4
 8008316:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800831a:	4413      	add	r3, r2
 800831c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008320:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008324:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008328:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	691b      	ldr	r3, [r3, #16]
 8008330:	b29a      	uxth	r2, r3
 8008332:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008336:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800833c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	69db      	ldr	r3, [r3, #28]
 8008344:	2b00      	cmp	r3, #0
 8008346:	f000 8218 	beq.w	800877a <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800834a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800834e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008358:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	4413      	add	r3, r2
 8008364:	881b      	ldrh	r3, [r3, #0]
 8008366:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800836a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800836e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008372:	2b00      	cmp	r3, #0
 8008374:	d005      	beq.n	8008382 <USB_EPStartXfer+0x12ec>
 8008376:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800837a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800837e:	2b00      	cmp	r3, #0
 8008380:	d10d      	bne.n	800839e <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008382:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008386:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800838a:	2b00      	cmp	r3, #0
 800838c:	f040 81f5 	bne.w	800877a <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008390:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008398:	2b00      	cmp	r3, #0
 800839a:	f040 81ee 	bne.w	800877a <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800839e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	4413      	add	r3, r2
 80083b8:	881b      	ldrh	r3, [r3, #0]
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083c4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80083c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	441a      	add	r2, r3
 80083e2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80083e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083f2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	8013      	strh	r3, [r2, #0]
 80083fa:	e1be      	b.n	800877a <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80083fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008400:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	78db      	ldrb	r3, [r3, #3]
 8008408:	2b01      	cmp	r3, #1
 800840a:	f040 81b4 	bne.w	8008776 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800840e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008412:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	699a      	ldr	r2, [r3, #24]
 800841a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800841e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	429a      	cmp	r2, r3
 8008428:	d917      	bls.n	800845a <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800842a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800842e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800843a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800843e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	699a      	ldr	r2, [r3, #24]
 8008446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800844a:	1ad2      	subs	r2, r2, r3
 800844c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008450:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	619a      	str	r2, [r3, #24]
 8008458:	e00e      	b.n	8008478 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800845a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800845e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	699b      	ldr	r3, [r3, #24]
 8008466:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800846a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800846e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2200      	movs	r2, #0
 8008476:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800847c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	785b      	ldrb	r3, [r3, #1]
 8008484:	2b00      	cmp	r3, #0
 8008486:	f040 8085 	bne.w	8008594 <USB_EPStartXfer+0x14fe>
 800848a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800848e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008498:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800849c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	461a      	mov	r2, r3
 80084aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80084ae:	4413      	add	r3, r2
 80084b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80084b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	011a      	lsls	r2, r3, #4
 80084c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80084c6:	4413      	add	r3, r2
 80084c8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80084cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80084d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80084d4:	881b      	ldrh	r3, [r3, #0]
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084dc:	b29a      	uxth	r2, r3
 80084de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80084e2:	801a      	strh	r2, [r3, #0]
 80084e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d10c      	bne.n	8008506 <USB_EPStartXfer+0x1470>
 80084ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80084f0:	881b      	ldrh	r3, [r3, #0]
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084fc:	b29a      	uxth	r2, r3
 80084fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008502:	801a      	strh	r2, [r3, #0]
 8008504:	e077      	b.n	80085f6 <USB_EPStartXfer+0x1560>
 8008506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800850a:	2b3e      	cmp	r3, #62	@ 0x3e
 800850c:	d81e      	bhi.n	800854c <USB_EPStartXfer+0x14b6>
 800850e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008512:	085b      	lsrs	r3, r3, #1
 8008514:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800851c:	f003 0301 	and.w	r3, r3, #1
 8008520:	2b00      	cmp	r3, #0
 8008522:	d004      	beq.n	800852e <USB_EPStartXfer+0x1498>
 8008524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008528:	3301      	adds	r3, #1
 800852a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800852e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008532:	881b      	ldrh	r3, [r3, #0]
 8008534:	b29a      	uxth	r2, r3
 8008536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800853a:	b29b      	uxth	r3, r3
 800853c:	029b      	lsls	r3, r3, #10
 800853e:	b29b      	uxth	r3, r3
 8008540:	4313      	orrs	r3, r2
 8008542:	b29a      	uxth	r2, r3
 8008544:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008548:	801a      	strh	r2, [r3, #0]
 800854a:	e054      	b.n	80085f6 <USB_EPStartXfer+0x1560>
 800854c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008550:	095b      	lsrs	r3, r3, #5
 8008552:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800855a:	f003 031f 	and.w	r3, r3, #31
 800855e:	2b00      	cmp	r3, #0
 8008560:	d104      	bne.n	800856c <USB_EPStartXfer+0x14d6>
 8008562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008566:	3b01      	subs	r3, #1
 8008568:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800856c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008570:	881b      	ldrh	r3, [r3, #0]
 8008572:	b29a      	uxth	r2, r3
 8008574:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008578:	b29b      	uxth	r3, r3
 800857a:	029b      	lsls	r3, r3, #10
 800857c:	b29b      	uxth	r3, r3
 800857e:	4313      	orrs	r3, r2
 8008580:	b29b      	uxth	r3, r3
 8008582:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008586:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800858a:	b29a      	uxth	r2, r3
 800858c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008590:	801a      	strh	r2, [r3, #0]
 8008592:	e030      	b.n	80085f6 <USB_EPStartXfer+0x1560>
 8008594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008598:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	785b      	ldrb	r3, [r3, #1]
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d128      	bne.n	80085f6 <USB_EPStartXfer+0x1560>
 80085a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80085b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	461a      	mov	r2, r3
 80085c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80085c8:	4413      	add	r3, r2
 80085ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80085ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	011a      	lsls	r2, r3, #4
 80085dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80085e0:	4413      	add	r3, r2
 80085e2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80085e6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80085ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80085f4:	801a      	strh	r2, [r3, #0]
 80085f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008604:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008608:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	785b      	ldrb	r3, [r3, #1]
 8008610:	2b00      	cmp	r3, #0
 8008612:	f040 8085 	bne.w	8008720 <USB_EPStartXfer+0x168a>
 8008616:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800861a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008624:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008628:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008632:	b29b      	uxth	r3, r3
 8008634:	461a      	mov	r2, r3
 8008636:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800863a:	4413      	add	r3, r2
 800863c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008640:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008644:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	011a      	lsls	r2, r3, #4
 800864e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008652:	4413      	add	r3, r2
 8008654:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008658:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800865c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008660:	881b      	ldrh	r3, [r3, #0]
 8008662:	b29b      	uxth	r3, r3
 8008664:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008668:	b29a      	uxth	r2, r3
 800866a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800866e:	801a      	strh	r2, [r3, #0]
 8008670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008674:	2b00      	cmp	r3, #0
 8008676:	d10c      	bne.n	8008692 <USB_EPStartXfer+0x15fc>
 8008678:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800867c:	881b      	ldrh	r3, [r3, #0]
 800867e:	b29b      	uxth	r3, r3
 8008680:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008684:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008688:	b29a      	uxth	r2, r3
 800868a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800868e:	801a      	strh	r2, [r3, #0]
 8008690:	e073      	b.n	800877a <USB_EPStartXfer+0x16e4>
 8008692:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008696:	2b3e      	cmp	r3, #62	@ 0x3e
 8008698:	d81e      	bhi.n	80086d8 <USB_EPStartXfer+0x1642>
 800869a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800869e:	085b      	lsrs	r3, r3, #1
 80086a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80086a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086a8:	f003 0301 	and.w	r3, r3, #1
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d004      	beq.n	80086ba <USB_EPStartXfer+0x1624>
 80086b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086b4:	3301      	adds	r3, #1
 80086b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80086ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80086be:	881b      	ldrh	r3, [r3, #0]
 80086c0:	b29a      	uxth	r2, r3
 80086c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	029b      	lsls	r3, r3, #10
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	4313      	orrs	r3, r2
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80086d4:	801a      	strh	r2, [r3, #0]
 80086d6:	e050      	b.n	800877a <USB_EPStartXfer+0x16e4>
 80086d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086dc:	095b      	lsrs	r3, r3, #5
 80086de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80086e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086e6:	f003 031f 	and.w	r3, r3, #31
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d104      	bne.n	80086f8 <USB_EPStartXfer+0x1662>
 80086ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086f2:	3b01      	subs	r3, #1
 80086f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80086f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80086fc:	881b      	ldrh	r3, [r3, #0]
 80086fe:	b29a      	uxth	r2, r3
 8008700:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008704:	b29b      	uxth	r3, r3
 8008706:	029b      	lsls	r3, r3, #10
 8008708:	b29b      	uxth	r3, r3
 800870a:	4313      	orrs	r3, r2
 800870c:	b29b      	uxth	r3, r3
 800870e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008712:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008716:	b29a      	uxth	r2, r3
 8008718:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800871c:	801a      	strh	r2, [r3, #0]
 800871e:	e02c      	b.n	800877a <USB_EPStartXfer+0x16e4>
 8008720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008724:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	785b      	ldrb	r3, [r3, #1]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d124      	bne.n	800877a <USB_EPStartXfer+0x16e4>
 8008730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008734:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800873e:	b29b      	uxth	r3, r3
 8008740:	461a      	mov	r2, r3
 8008742:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008746:	4413      	add	r3, r2
 8008748:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800874c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008750:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	011a      	lsls	r2, r3, #4
 800875a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800875e:	4413      	add	r3, r2
 8008760:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008764:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008768:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800876c:	b29a      	uxth	r2, r3
 800876e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008772:	801a      	strh	r2, [r3, #0]
 8008774:	e001      	b.n	800877a <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	e03a      	b.n	80087f0 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800877a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800877e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008788:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	4413      	add	r3, r2
 8008794:	881b      	ldrh	r3, [r3, #0]
 8008796:	b29b      	uxth	r3, r3
 8008798:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800879c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087a0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80087a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80087a8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80087ac:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80087b0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80087b4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80087b8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80087bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	441a      	add	r2, r3
 80087d6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80087da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}

080087fa <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80087fa:	b480      	push	{r7}
 80087fc:	b085      	sub	sp, #20
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
 8008802:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	785b      	ldrb	r3, [r3, #1]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d020      	beq.n	800884e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	4413      	add	r3, r2
 8008816:	881b      	ldrh	r3, [r3, #0]
 8008818:	b29b      	uxth	r3, r3
 800881a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800881e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008822:	81bb      	strh	r3, [r7, #12]
 8008824:	89bb      	ldrh	r3, [r7, #12]
 8008826:	f083 0310 	eor.w	r3, r3, #16
 800882a:	81bb      	strh	r3, [r7, #12]
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	441a      	add	r2, r3
 8008836:	89bb      	ldrh	r3, [r7, #12]
 8008838:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800883c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008840:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008844:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008848:	b29b      	uxth	r3, r3
 800884a:	8013      	strh	r3, [r2, #0]
 800884c:	e01f      	b.n	800888e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	4413      	add	r3, r2
 8008858:	881b      	ldrh	r3, [r3, #0]
 800885a:	b29b      	uxth	r3, r3
 800885c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008860:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008864:	81fb      	strh	r3, [r7, #14]
 8008866:	89fb      	ldrh	r3, [r7, #14]
 8008868:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800886c:	81fb      	strh	r3, [r7, #14]
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	441a      	add	r2, r3
 8008878:	89fb      	ldrh	r3, [r7, #14]
 800887a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800887e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008882:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008886:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800888a:	b29b      	uxth	r3, r3
 800888c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	3714      	adds	r7, #20
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr

0800889c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800889c:	b480      	push	{r7}
 800889e:	b087      	sub	sp, #28
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	7b1b      	ldrb	r3, [r3, #12]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	f040 809d 	bne.w	80089ea <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	785b      	ldrb	r3, [r3, #1]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d04c      	beq.n	8008952 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	4413      	add	r3, r2
 80088c2:	881b      	ldrh	r3, [r3, #0]
 80088c4:	823b      	strh	r3, [r7, #16]
 80088c6:	8a3b      	ldrh	r3, [r7, #16]
 80088c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d01b      	beq.n	8008908 <USB_EPClearStall+0x6c>
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	4413      	add	r3, r2
 80088da:	881b      	ldrh	r3, [r3, #0]
 80088dc:	b29b      	uxth	r3, r3
 80088de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088e6:	81fb      	strh	r3, [r7, #14]
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	441a      	add	r2, r3
 80088f2:	89fb      	ldrh	r3, [r7, #14]
 80088f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008900:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008904:	b29b      	uxth	r3, r3
 8008906:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	78db      	ldrb	r3, [r3, #3]
 800890c:	2b01      	cmp	r3, #1
 800890e:	d06c      	beq.n	80089ea <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	4413      	add	r3, r2
 800891a:	881b      	ldrh	r3, [r3, #0]
 800891c:	b29b      	uxth	r3, r3
 800891e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008922:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008926:	81bb      	strh	r3, [r7, #12]
 8008928:	89bb      	ldrh	r3, [r7, #12]
 800892a:	f083 0320 	eor.w	r3, r3, #32
 800892e:	81bb      	strh	r3, [r7, #12]
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	441a      	add	r2, r3
 800893a:	89bb      	ldrh	r3, [r7, #12]
 800893c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008940:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008944:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800894c:	b29b      	uxth	r3, r3
 800894e:	8013      	strh	r3, [r2, #0]
 8008950:	e04b      	b.n	80089ea <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	4413      	add	r3, r2
 800895c:	881b      	ldrh	r3, [r3, #0]
 800895e:	82fb      	strh	r3, [r7, #22]
 8008960:	8afb      	ldrh	r3, [r7, #22]
 8008962:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008966:	2b00      	cmp	r3, #0
 8008968:	d01b      	beq.n	80089a2 <USB_EPClearStall+0x106>
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	4413      	add	r3, r2
 8008974:	881b      	ldrh	r3, [r3, #0]
 8008976:	b29b      	uxth	r3, r3
 8008978:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800897c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008980:	82bb      	strh	r3, [r7, #20]
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	441a      	add	r2, r3
 800898c:	8abb      	ldrh	r3, [r7, #20]
 800898e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008992:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008996:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800899a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800899e:	b29b      	uxth	r3, r3
 80089a0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	4413      	add	r3, r2
 80089ac:	881b      	ldrh	r3, [r3, #0]
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80089b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089b8:	827b      	strh	r3, [r7, #18]
 80089ba:	8a7b      	ldrh	r3, [r7, #18]
 80089bc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80089c0:	827b      	strh	r3, [r7, #18]
 80089c2:	8a7b      	ldrh	r3, [r7, #18]
 80089c4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80089c8:	827b      	strh	r3, [r7, #18]
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	441a      	add	r2, r3
 80089d4:	8a7b      	ldrh	r3, [r7, #18]
 80089d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	371c      	adds	r7, #28
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	460b      	mov	r3, r1
 8008a02:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008a04:	78fb      	ldrb	r3, [r7, #3]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d103      	bne.n	8008a12 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2280      	movs	r2, #128	@ 0x80
 8008a0e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008a12:	2300      	movs	r3, #0
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	370c      	adds	r7, #12
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b083      	sub	sp, #12
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008a28:	2300      	movs	r3, #0
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	370c      	adds	r7, #12
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr

08008a36 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008a36:	b480      	push	{r7}
 8008a38:	b085      	sub	sp, #20
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008a48:	68fb      	ldr	r3, [r7, #12]
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3714      	adds	r7, #20
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr

08008a56 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008a56:	b480      	push	{r7}
 8008a58:	b08b      	sub	sp, #44	@ 0x2c
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	60f8      	str	r0, [r7, #12]
 8008a5e:	60b9      	str	r1, [r7, #8]
 8008a60:	4611      	mov	r1, r2
 8008a62:	461a      	mov	r2, r3
 8008a64:	460b      	mov	r3, r1
 8008a66:	80fb      	strh	r3, [r7, #6]
 8008a68:	4613      	mov	r3, r2
 8008a6a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008a6c:	88bb      	ldrh	r3, [r7, #4]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	085b      	lsrs	r3, r3, #1
 8008a72:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008a7c:	88fb      	ldrh	r3, [r7, #6]
 8008a7e:	005a      	lsls	r2, r3, #1
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	4413      	add	r3, r2
 8008a84:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008a88:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a8e:	e01e      	b.n	8008ace <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8008a90:	69fb      	ldr	r3, [r7, #28]
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008a96:	69fb      	ldr	r3, [r7, #28]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	021b      	lsls	r3, r3, #8
 8008a9e:	b21a      	sxth	r2, r3
 8008aa0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	b21b      	sxth	r3, r3
 8008aa8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008aaa:	6a3b      	ldr	r3, [r7, #32]
 8008aac:	8a7a      	ldrh	r2, [r7, #18]
 8008aae:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008ab0:	6a3b      	ldr	r3, [r7, #32]
 8008ab2:	3302      	adds	r3, #2
 8008ab4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008ab6:	6a3b      	ldr	r3, [r7, #32]
 8008ab8:	3302      	adds	r3, #2
 8008aba:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008abc:	69fb      	ldr	r3, [r7, #28]
 8008abe:	3301      	adds	r3, #1
 8008ac0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aca:	3b01      	subs	r3, #1
 8008acc:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d1dd      	bne.n	8008a90 <USB_WritePMA+0x3a>
  }
}
 8008ad4:	bf00      	nop
 8008ad6:	bf00      	nop
 8008ad8:	372c      	adds	r7, #44	@ 0x2c
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr

08008ae2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008ae2:	b480      	push	{r7}
 8008ae4:	b08b      	sub	sp, #44	@ 0x2c
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	60f8      	str	r0, [r7, #12]
 8008aea:	60b9      	str	r1, [r7, #8]
 8008aec:	4611      	mov	r1, r2
 8008aee:	461a      	mov	r2, r3
 8008af0:	460b      	mov	r3, r1
 8008af2:	80fb      	strh	r3, [r7, #6]
 8008af4:	4613      	mov	r3, r2
 8008af6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008af8:	88bb      	ldrh	r3, [r7, #4]
 8008afa:	085b      	lsrs	r3, r3, #1
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008b08:	88fb      	ldrh	r3, [r7, #6]
 8008b0a:	005a      	lsls	r2, r3, #1
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	4413      	add	r3, r2
 8008b10:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b14:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008b16:	69bb      	ldr	r3, [r7, #24]
 8008b18:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b1a:	e01b      	b.n	8008b54 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008b1c:	6a3b      	ldr	r3, [r7, #32]
 8008b1e:	881b      	ldrh	r3, [r3, #0]
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008b24:	6a3b      	ldr	r3, [r7, #32]
 8008b26:	3302      	adds	r3, #2
 8008b28:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	b2da      	uxtb	r2, r3
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	3301      	adds	r3, #1
 8008b36:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	0a1b      	lsrs	r3, r3, #8
 8008b3c:	b2da      	uxtb	r2, r3
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	3301      	adds	r3, #1
 8008b46:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008b48:	6a3b      	ldr	r3, [r7, #32]
 8008b4a:	3302      	adds	r3, #2
 8008b4c:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b50:	3b01      	subs	r3, #1
 8008b52:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d1e0      	bne.n	8008b1c <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008b5a:	88bb      	ldrh	r3, [r7, #4]
 8008b5c:	f003 0301 	and.w	r3, r3, #1
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d007      	beq.n	8008b76 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008b66:	6a3b      	ldr	r3, [r7, #32]
 8008b68:	881b      	ldrh	r3, [r3, #0]
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	b2da      	uxtb	r2, r3
 8008b72:	69fb      	ldr	r3, [r7, #28]
 8008b74:	701a      	strb	r2, [r3, #0]
  }
}
 8008b76:	bf00      	nop
 8008b78:	372c      	adds	r7, #44	@ 0x2c
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr

08008b82 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b084      	sub	sp, #16
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
 8008b8a:	460b      	mov	r3, r1
 8008b8c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	7c1b      	ldrb	r3, [r3, #16]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d115      	bne.n	8008bc6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008b9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008b9e:	2202      	movs	r2, #2
 8008ba0:	2181      	movs	r1, #129	@ 0x81
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f7f8 fccb 	bl	800153e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008bae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008bb2:	2202      	movs	r2, #2
 8008bb4:	2101      	movs	r1, #1
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f7f8 fcc1 	bl	800153e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8008bc4:	e012      	b.n	8008bec <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008bc6:	2340      	movs	r3, #64	@ 0x40
 8008bc8:	2202      	movs	r2, #2
 8008bca:	2181      	movs	r1, #129	@ 0x81
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f7f8 fcb6 	bl	800153e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008bd8:	2340      	movs	r3, #64	@ 0x40
 8008bda:	2202      	movs	r2, #2
 8008bdc:	2101      	movs	r1, #1
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f7f8 fcad 	bl	800153e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2201      	movs	r2, #1
 8008be8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008bec:	2308      	movs	r3, #8
 8008bee:	2203      	movs	r2, #3
 8008bf0:	2182      	movs	r1, #130	@ 0x82
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f7f8 fca3 	bl	800153e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008bfe:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008c02:	f7f8 fdc3 	bl	800178c <USBD_static_malloc>
 8008c06:	4602      	mov	r2, r0
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d102      	bne.n	8008c1e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	73fb      	strb	r3, [r7, #15]
 8008c1c:	e026      	b.n	8008c6c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c24:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	2200      	movs	r2, #0
 8008c34:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	7c1b      	ldrb	r3, [r3, #16]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d109      	bne.n	8008c5c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008c4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008c52:	2101      	movs	r1, #1
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f7f8 fd63 	bl	8001720 <USBD_LL_PrepareReceive>
 8008c5a:	e007      	b.n	8008c6c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008c62:	2340      	movs	r3, #64	@ 0x40
 8008c64:	2101      	movs	r1, #1
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f7f8 fd5a 	bl	8001720 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b084      	sub	sp, #16
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
 8008c7e:	460b      	mov	r3, r1
 8008c80:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008c82:	2300      	movs	r3, #0
 8008c84:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008c86:	2181      	movs	r1, #129	@ 0x81
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f7f8 fc7e 	bl	800158a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008c94:	2101      	movs	r1, #1
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f7f8 fc77 	bl	800158a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008ca4:	2182      	movs	r1, #130	@ 0x82
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f7f8 fc6f 	bl	800158a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d00e      	beq.n	8008cda <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7f8 fd6b 	bl	80017a8 <USBD_static_free>
    pdev->pClassData = NULL;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8008cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3710      	adds	r7, #16
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b086      	sub	sp, #24
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cf4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d039      	beq.n	8008d82 <USBD_CDC_Setup+0x9e>
 8008d0e:	2b20      	cmp	r3, #32
 8008d10:	d17f      	bne.n	8008e12 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	88db      	ldrh	r3, [r3, #6]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d029      	beq.n	8008d6e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	b25b      	sxtb	r3, r3
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	da11      	bge.n	8008d48 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	683a      	ldr	r2, [r7, #0]
 8008d2e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008d30:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d32:	683a      	ldr	r2, [r7, #0]
 8008d34:	88d2      	ldrh	r2, [r2, #6]
 8008d36:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008d38:	6939      	ldr	r1, [r7, #16]
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	88db      	ldrh	r3, [r3, #6]
 8008d3e:	461a      	mov	r2, r3
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f001 fa0f 	bl	800a164 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008d46:	e06b      	b.n	8008e20 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	785a      	ldrb	r2, [r3, #1]
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	88db      	ldrh	r3, [r3, #6]
 8008d56:	b2da      	uxtb	r2, r3
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008d5e:	6939      	ldr	r1, [r7, #16]
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	88db      	ldrh	r3, [r3, #6]
 8008d64:	461a      	mov	r2, r3
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f001 fa2a 	bl	800a1c0 <USBD_CtlPrepareRx>
      break;
 8008d6c:	e058      	b.n	8008e20 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	683a      	ldr	r2, [r7, #0]
 8008d78:	7850      	ldrb	r0, [r2, #1]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	6839      	ldr	r1, [r7, #0]
 8008d7e:	4798      	blx	r3
      break;
 8008d80:	e04e      	b.n	8008e20 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	785b      	ldrb	r3, [r3, #1]
 8008d86:	2b0b      	cmp	r3, #11
 8008d88:	d02e      	beq.n	8008de8 <USBD_CDC_Setup+0x104>
 8008d8a:	2b0b      	cmp	r3, #11
 8008d8c:	dc38      	bgt.n	8008e00 <USBD_CDC_Setup+0x11c>
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d002      	beq.n	8008d98 <USBD_CDC_Setup+0xb4>
 8008d92:	2b0a      	cmp	r3, #10
 8008d94:	d014      	beq.n	8008dc0 <USBD_CDC_Setup+0xdc>
 8008d96:	e033      	b.n	8008e00 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d9e:	2b03      	cmp	r3, #3
 8008da0:	d107      	bne.n	8008db2 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008da2:	f107 030c 	add.w	r3, r7, #12
 8008da6:	2202      	movs	r2, #2
 8008da8:	4619      	mov	r1, r3
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f001 f9da 	bl	800a164 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008db0:	e02e      	b.n	8008e10 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008db2:	6839      	ldr	r1, [r7, #0]
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f001 f96a 	bl	800a08e <USBD_CtlError>
            ret = USBD_FAIL;
 8008dba:	2302      	movs	r3, #2
 8008dbc:	75fb      	strb	r3, [r7, #23]
          break;
 8008dbe:	e027      	b.n	8008e10 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dc6:	2b03      	cmp	r3, #3
 8008dc8:	d107      	bne.n	8008dda <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008dca:	f107 030f 	add.w	r3, r7, #15
 8008dce:	2201      	movs	r2, #1
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f001 f9c6 	bl	800a164 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008dd8:	e01a      	b.n	8008e10 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008dda:	6839      	ldr	r1, [r7, #0]
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f001 f956 	bl	800a08e <USBD_CtlError>
            ret = USBD_FAIL;
 8008de2:	2302      	movs	r3, #2
 8008de4:	75fb      	strb	r3, [r7, #23]
          break;
 8008de6:	e013      	b.n	8008e10 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dee:	2b03      	cmp	r3, #3
 8008df0:	d00d      	beq.n	8008e0e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008df2:	6839      	ldr	r1, [r7, #0]
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f001 f94a 	bl	800a08e <USBD_CtlError>
            ret = USBD_FAIL;
 8008dfa:	2302      	movs	r3, #2
 8008dfc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008dfe:	e006      	b.n	8008e0e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008e00:	6839      	ldr	r1, [r7, #0]
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f001 f943 	bl	800a08e <USBD_CtlError>
          ret = USBD_FAIL;
 8008e08:	2302      	movs	r3, #2
 8008e0a:	75fb      	strb	r3, [r7, #23]
          break;
 8008e0c:	e000      	b.n	8008e10 <USBD_CDC_Setup+0x12c>
          break;
 8008e0e:	bf00      	nop
      }
      break;
 8008e10:	e006      	b.n	8008e20 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008e12:	6839      	ldr	r1, [r7, #0]
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f001 f93a 	bl	800a08e <USBD_CtlError>
      ret = USBD_FAIL;
 8008e1a:	2302      	movs	r3, #2
 8008e1c:	75fb      	strb	r3, [r7, #23]
      break;
 8008e1e:	bf00      	nop
  }

  return ret;
 8008e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3718      	adds	r7, #24
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}

08008e2a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b084      	sub	sp, #16
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
 8008e32:	460b      	mov	r3, r1
 8008e34:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e3c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008e44:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d03a      	beq.n	8008ec6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008e50:	78fa      	ldrb	r2, [r7, #3]
 8008e52:	6879      	ldr	r1, [r7, #4]
 8008e54:	4613      	mov	r3, r2
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	4413      	add	r3, r2
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	440b      	add	r3, r1
 8008e5e:	331c      	adds	r3, #28
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d029      	beq.n	8008eba <USBD_CDC_DataIn+0x90>
 8008e66:	78fa      	ldrb	r2, [r7, #3]
 8008e68:	6879      	ldr	r1, [r7, #4]
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	4413      	add	r3, r2
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	440b      	add	r3, r1
 8008e74:	331c      	adds	r3, #28
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	78f9      	ldrb	r1, [r7, #3]
 8008e7a:	68b8      	ldr	r0, [r7, #8]
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	440b      	add	r3, r1
 8008e82:	00db      	lsls	r3, r3, #3
 8008e84:	4403      	add	r3, r0
 8008e86:	3320      	adds	r3, #32
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	fbb2 f1f3 	udiv	r1, r2, r3
 8008e8e:	fb01 f303 	mul.w	r3, r1, r3
 8008e92:	1ad3      	subs	r3, r2, r3
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d110      	bne.n	8008eba <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008e98:	78fa      	ldrb	r2, [r7, #3]
 8008e9a:	6879      	ldr	r1, [r7, #4]
 8008e9c:	4613      	mov	r3, r2
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	4413      	add	r3, r2
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	440b      	add	r3, r1
 8008ea6:	331c      	adds	r3, #28
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008eac:	78f9      	ldrb	r1, [r7, #3]
 8008eae:	2300      	movs	r3, #0
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f7f8 fc11 	bl	80016da <USBD_LL_Transmit>
 8008eb8:	e003      	b.n	8008ec2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	e000      	b.n	8008ec8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008ec6:	2302      	movs	r3, #2
  }
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3710      	adds	r7, #16
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	460b      	mov	r3, r1
 8008eda:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ee2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008ee4:	78fb      	ldrb	r3, [r7, #3]
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f7f8 fc3c 	bl	8001766 <USBD_LL_GetRxDataSize>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d00d      	beq.n	8008f1c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	68fa      	ldr	r2, [r7, #12]
 8008f0a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008f14:	4611      	mov	r1, r2
 8008f16:	4798      	blx	r3

    return USBD_OK;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	e000      	b.n	8008f1e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008f1c:	2302      	movs	r3, #2
  }
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3710      	adds	r7, #16
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b084      	sub	sp, #16
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f34:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d014      	beq.n	8008f6a <USBD_CDC_EP0_RxReady+0x44>
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008f46:	2bff      	cmp	r3, #255	@ 0xff
 8008f48:	d00f      	beq.n	8008f6a <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008f58:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008f60:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	22ff      	movs	r2, #255	@ 0xff
 8008f66:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3710      	adds	r7, #16
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b083      	sub	sp, #12
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2243      	movs	r2, #67	@ 0x43
 8008f80:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008f82:	4b03      	ldr	r3, [pc, #12]	@ (8008f90 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	370c      	adds	r7, #12
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr
 8008f90:	200000f4 	.word	0x200000f4

08008f94 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2243      	movs	r2, #67	@ 0x43
 8008fa0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008fa2:	4b03      	ldr	r3, [pc, #12]	@ (8008fb0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr
 8008fb0:	200000b0 	.word	0x200000b0

08008fb4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2243      	movs	r2, #67	@ 0x43
 8008fc0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008fc2:	4b03      	ldr	r3, [pc, #12]	@ (8008fd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	370c      	adds	r7, #12
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr
 8008fd0:	20000138 	.word	0x20000138

08008fd4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b083      	sub	sp, #12
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	220a      	movs	r2, #10
 8008fe0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008fe2:	4b03      	ldr	r3, [pc, #12]	@ (8008ff0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	370c      	adds	r7, #12
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr
 8008ff0:	2000006c 	.word	0x2000006c

08008ff4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b085      	sub	sp, #20
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008ffe:	2302      	movs	r3, #2
 8009000:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d005      	beq.n	8009014 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	683a      	ldr	r2, [r7, #0]
 800900c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8009010:	2300      	movs	r3, #0
 8009012:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009014:	7bfb      	ldrb	r3, [r7, #15]
}
 8009016:	4618      	mov	r0, r3
 8009018:	3714      	adds	r7, #20
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr

08009022 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009022:	b480      	push	{r7}
 8009024:	b087      	sub	sp, #28
 8009026:	af00      	add	r7, sp, #0
 8009028:	60f8      	str	r0, [r7, #12]
 800902a:	60b9      	str	r1, [r7, #8]
 800902c:	4613      	mov	r3, r2
 800902e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009036:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	68ba      	ldr	r2, [r7, #8]
 800903c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009040:	88fa      	ldrh	r2, [r7, #6]
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8009048:	2300      	movs	r3, #0
}
 800904a:	4618      	mov	r0, r3
 800904c:	371c      	adds	r7, #28
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr

08009056 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009056:	b480      	push	{r7}
 8009058:	b085      	sub	sp, #20
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
 800905e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009066:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	683a      	ldr	r2, [r7, #0]
 800906c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8009070:	2300      	movs	r3, #0
}
 8009072:	4618      	mov	r0, r3
 8009074:	3714      	adds	r7, #20
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr

0800907e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b084      	sub	sp, #16
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800908c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009094:	2b00      	cmp	r3, #0
 8009096:	d01c      	beq.n	80090d2 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d115      	bne.n	80090ce <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2201      	movs	r2, #1
 80090a6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	2181      	movs	r1, #129	@ 0x81
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f7f8 fb08 	bl	80016da <USBD_LL_Transmit>

      return USBD_OK;
 80090ca:	2300      	movs	r3, #0
 80090cc:	e002      	b.n	80090d4 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80090ce:	2301      	movs	r3, #1
 80090d0:	e000      	b.n	80090d4 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80090d2:	2302      	movs	r3, #2
  }
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3710      	adds	r7, #16
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090ea:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d017      	beq.n	8009126 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	7c1b      	ldrb	r3, [r3, #16]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d109      	bne.n	8009112 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009104:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009108:	2101      	movs	r1, #1
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f7f8 fb08 	bl	8001720 <USBD_LL_PrepareReceive>
 8009110:	e007      	b.n	8009122 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009118:	2340      	movs	r3, #64	@ 0x40
 800911a:	2101      	movs	r1, #1
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f7f8 faff 	bl	8001720 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009122:	2300      	movs	r3, #0
 8009124:	e000      	b.n	8009128 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009126:	2302      	movs	r3, #2
  }
}
 8009128:	4618      	mov	r0, r3
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	4613      	mov	r3, r2
 800913c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d101      	bne.n	8009148 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009144:	2302      	movs	r3, #2
 8009146:	e01a      	b.n	800917e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800914e:	2b00      	cmp	r3, #0
 8009150:	d003      	beq.n	800915a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2200      	movs	r2, #0
 8009156:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d003      	beq.n	8009168 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	68ba      	ldr	r2, [r7, #8]
 8009164:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2201      	movs	r2, #1
 800916c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	79fa      	ldrb	r2, [r7, #7]
 8009174:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009176:	68f8      	ldr	r0, [r7, #12]
 8009178:	f7f8 f96c 	bl	8001454 <USBD_LL_Init>

  return USBD_OK;
 800917c:	2300      	movs	r3, #0
}
 800917e:	4618      	mov	r0, r3
 8009180:	3710      	adds	r7, #16
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009186:	b480      	push	{r7}
 8009188:	b085      	sub	sp, #20
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
 800918e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009190:	2300      	movs	r3, #0
 8009192:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d006      	beq.n	80091a8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	683a      	ldr	r2, [r7, #0]
 800919e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80091a2:	2300      	movs	r3, #0
 80091a4:	73fb      	strb	r3, [r7, #15]
 80091a6:	e001      	b.n	80091ac <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80091a8:	2302      	movs	r3, #2
 80091aa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80091ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3714      	adds	r7, #20
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr

080091ba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b082      	sub	sp, #8
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f7f8 f9a0 	bl	8001508 <USBD_LL_Start>

  return USBD_OK;
 80091c8:	2300      	movs	r3, #0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3708      	adds	r7, #8
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80091d2:	b480      	push	{r7}
 80091d4:	b083      	sub	sp, #12
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80091da:	2300      	movs	r3, #0
}
 80091dc:	4618      	mov	r0, r3
 80091de:	370c      	adds	r7, #12
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	460b      	mov	r3, r1
 80091f2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80091f4:	2302      	movs	r3, #2
 80091f6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d00c      	beq.n	800921c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	78fa      	ldrb	r2, [r7, #3]
 800920c:	4611      	mov	r1, r2
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	4798      	blx	r3
 8009212:	4603      	mov	r3, r0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d101      	bne.n	800921c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009218:	2300      	movs	r3, #0
 800921a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800921c:	7bfb      	ldrb	r3, [r7, #15]
}
 800921e:	4618      	mov	r0, r3
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}

08009226 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009226:	b580      	push	{r7, lr}
 8009228:	b082      	sub	sp, #8
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
 800922e:	460b      	mov	r3, r1
 8009230:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	78fa      	ldrb	r2, [r7, #3]
 800923c:	4611      	mov	r1, r2
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	4798      	blx	r3

  return USBD_OK;
 8009242:	2300      	movs	r3, #0
}
 8009244:	4618      	mov	r0, r3
 8009246:	3708      	adds	r7, #8
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800925c:	6839      	ldr	r1, [r7, #0]
 800925e:	4618      	mov	r0, r3
 8009260:	f000 fedb 	bl	800a01a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2201      	movs	r2, #1
 8009268:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009272:	461a      	mov	r2, r3
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009280:	f003 031f 	and.w	r3, r3, #31
 8009284:	2b02      	cmp	r3, #2
 8009286:	d016      	beq.n	80092b6 <USBD_LL_SetupStage+0x6a>
 8009288:	2b02      	cmp	r3, #2
 800928a:	d81c      	bhi.n	80092c6 <USBD_LL_SetupStage+0x7a>
 800928c:	2b00      	cmp	r3, #0
 800928e:	d002      	beq.n	8009296 <USBD_LL_SetupStage+0x4a>
 8009290:	2b01      	cmp	r3, #1
 8009292:	d008      	beq.n	80092a6 <USBD_LL_SetupStage+0x5a>
 8009294:	e017      	b.n	80092c6 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800929c:	4619      	mov	r1, r3
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 f9ce 	bl	8009640 <USBD_StdDevReq>
      break;
 80092a4:	e01a      	b.n	80092dc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80092ac:	4619      	mov	r1, r3
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 fa30 	bl	8009714 <USBD_StdItfReq>
      break;
 80092b4:	e012      	b.n	80092dc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80092bc:	4619      	mov	r1, r3
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 fa70 	bl	80097a4 <USBD_StdEPReq>
      break;
 80092c4:	e00a      	b.n	80092dc <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80092cc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	4619      	mov	r1, r3
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f7f8 f977 	bl	80015c8 <USBD_LL_StallEP>
      break;
 80092da:	bf00      	nop
  }

  return USBD_OK;
 80092dc:	2300      	movs	r3, #0
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3708      	adds	r7, #8
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}

080092e6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b086      	sub	sp, #24
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	60f8      	str	r0, [r7, #12]
 80092ee:	460b      	mov	r3, r1
 80092f0:	607a      	str	r2, [r7, #4]
 80092f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80092f4:	7afb      	ldrb	r3, [r7, #11]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d14b      	bne.n	8009392 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009300:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009308:	2b03      	cmp	r3, #3
 800930a:	d134      	bne.n	8009376 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	68da      	ldr	r2, [r3, #12]
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	691b      	ldr	r3, [r3, #16]
 8009314:	429a      	cmp	r2, r3
 8009316:	d919      	bls.n	800934c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	68da      	ldr	r2, [r3, #12]
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	1ad2      	subs	r2, r2, r3
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	68da      	ldr	r2, [r3, #12]
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800932e:	429a      	cmp	r2, r3
 8009330:	d203      	bcs.n	800933a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009336:	b29b      	uxth	r3, r3
 8009338:	e002      	b.n	8009340 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800933e:	b29b      	uxth	r3, r3
 8009340:	461a      	mov	r2, r3
 8009342:	6879      	ldr	r1, [r7, #4]
 8009344:	68f8      	ldr	r0, [r7, #12]
 8009346:	f000 ff59 	bl	800a1fc <USBD_CtlContinueRx>
 800934a:	e038      	b.n	80093be <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009352:	691b      	ldr	r3, [r3, #16]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d00a      	beq.n	800936e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800935e:	2b03      	cmp	r3, #3
 8009360:	d105      	bne.n	800936e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	68f8      	ldr	r0, [r7, #12]
 800936c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f000 ff56 	bl	800a220 <USBD_CtlSendStatus>
 8009374:	e023      	b.n	80093be <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800937c:	2b05      	cmp	r3, #5
 800937e:	d11e      	bne.n	80093be <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2200      	movs	r2, #0
 8009384:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009388:	2100      	movs	r1, #0
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	f7f8 f91c 	bl	80015c8 <USBD_LL_StallEP>
 8009390:	e015      	b.n	80093be <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009398:	699b      	ldr	r3, [r3, #24]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d00d      	beq.n	80093ba <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80093a4:	2b03      	cmp	r3, #3
 80093a6:	d108      	bne.n	80093ba <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093ae:	699b      	ldr	r3, [r3, #24]
 80093b0:	7afa      	ldrb	r2, [r7, #11]
 80093b2:	4611      	mov	r1, r2
 80093b4:	68f8      	ldr	r0, [r7, #12]
 80093b6:	4798      	blx	r3
 80093b8:	e001      	b.n	80093be <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80093ba:	2302      	movs	r3, #2
 80093bc:	e000      	b.n	80093c0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80093be:	2300      	movs	r3, #0
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3718      	adds	r7, #24
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b086      	sub	sp, #24
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	460b      	mov	r3, r1
 80093d2:	607a      	str	r2, [r7, #4]
 80093d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80093d6:	7afb      	ldrb	r3, [r7, #11]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d17f      	bne.n	80094dc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	3314      	adds	r3, #20
 80093e0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80093e8:	2b02      	cmp	r3, #2
 80093ea:	d15c      	bne.n	80094a6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	68da      	ldr	r2, [r3, #12]
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	691b      	ldr	r3, [r3, #16]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d915      	bls.n	8009424 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	68da      	ldr	r2, [r3, #12]
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	691b      	ldr	r3, [r3, #16]
 8009400:	1ad2      	subs	r2, r2, r3
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	68db      	ldr	r3, [r3, #12]
 800940a:	b29b      	uxth	r3, r3
 800940c:	461a      	mov	r2, r3
 800940e:	6879      	ldr	r1, [r7, #4]
 8009410:	68f8      	ldr	r0, [r7, #12]
 8009412:	f000 fec3 	bl	800a19c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009416:	2300      	movs	r3, #0
 8009418:	2200      	movs	r2, #0
 800941a:	2100      	movs	r1, #0
 800941c:	68f8      	ldr	r0, [r7, #12]
 800941e:	f7f8 f97f 	bl	8001720 <USBD_LL_PrepareReceive>
 8009422:	e04e      	b.n	80094c2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	697a      	ldr	r2, [r7, #20]
 800942a:	6912      	ldr	r2, [r2, #16]
 800942c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009430:	fb01 f202 	mul.w	r2, r1, r2
 8009434:	1a9b      	subs	r3, r3, r2
 8009436:	2b00      	cmp	r3, #0
 8009438:	d11c      	bne.n	8009474 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	689a      	ldr	r2, [r3, #8]
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009442:	429a      	cmp	r2, r3
 8009444:	d316      	bcc.n	8009474 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	689a      	ldr	r2, [r3, #8]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009450:	429a      	cmp	r2, r3
 8009452:	d20f      	bcs.n	8009474 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009454:	2200      	movs	r2, #0
 8009456:	2100      	movs	r1, #0
 8009458:	68f8      	ldr	r0, [r7, #12]
 800945a:	f000 fe9f 	bl	800a19c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2200      	movs	r2, #0
 8009462:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009466:	2300      	movs	r3, #0
 8009468:	2200      	movs	r2, #0
 800946a:	2100      	movs	r1, #0
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	f7f8 f957 	bl	8001720 <USBD_LL_PrepareReceive>
 8009472:	e026      	b.n	80094c2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800947a:	68db      	ldr	r3, [r3, #12]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d00a      	beq.n	8009496 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009486:	2b03      	cmp	r3, #3
 8009488:	d105      	bne.n	8009496 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	68f8      	ldr	r0, [r7, #12]
 8009494:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009496:	2180      	movs	r1, #128	@ 0x80
 8009498:	68f8      	ldr	r0, [r7, #12]
 800949a:	f7f8 f895 	bl	80015c8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800949e:	68f8      	ldr	r0, [r7, #12]
 80094a0:	f000 fed1 	bl	800a246 <USBD_CtlReceiveStatus>
 80094a4:	e00d      	b.n	80094c2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80094ac:	2b04      	cmp	r3, #4
 80094ae:	d004      	beq.n	80094ba <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d103      	bne.n	80094c2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80094ba:	2180      	movs	r1, #128	@ 0x80
 80094bc:	68f8      	ldr	r0, [r7, #12]
 80094be:	f7f8 f883 	bl	80015c8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d11d      	bne.n	8009508 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80094cc:	68f8      	ldr	r0, [r7, #12]
 80094ce:	f7ff fe80 	bl	80091d2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2200      	movs	r2, #0
 80094d6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80094da:	e015      	b.n	8009508 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094e2:	695b      	ldr	r3, [r3, #20]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d00d      	beq.n	8009504 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80094ee:	2b03      	cmp	r3, #3
 80094f0:	d108      	bne.n	8009504 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094f8:	695b      	ldr	r3, [r3, #20]
 80094fa:	7afa      	ldrb	r2, [r7, #11]
 80094fc:	4611      	mov	r1, r2
 80094fe:	68f8      	ldr	r0, [r7, #12]
 8009500:	4798      	blx	r3
 8009502:	e001      	b.n	8009508 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009504:	2302      	movs	r3, #2
 8009506:	e000      	b.n	800950a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009508:	2300      	movs	r3, #0
}
 800950a:	4618      	mov	r0, r3
 800950c:	3718      	adds	r7, #24
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009512:	b580      	push	{r7, lr}
 8009514:	b082      	sub	sp, #8
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800951a:	2340      	movs	r3, #64	@ 0x40
 800951c:	2200      	movs	r2, #0
 800951e:	2100      	movs	r1, #0
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f7f8 f80c 	bl	800153e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2201      	movs	r2, #1
 800952a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2240      	movs	r2, #64	@ 0x40
 8009532:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009536:	2340      	movs	r3, #64	@ 0x40
 8009538:	2200      	movs	r2, #0
 800953a:	2180      	movs	r1, #128	@ 0x80
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f7f7 fffe 	bl	800153e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2201      	movs	r2, #1
 8009546:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2240      	movs	r2, #64	@ 0x40
 800954c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2201      	movs	r2, #1
 8009552:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2200      	movs	r2, #0
 8009562:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009572:	2b00      	cmp	r3, #0
 8009574:	d009      	beq.n	800958a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	6852      	ldr	r2, [r2, #4]
 8009582:	b2d2      	uxtb	r2, r2
 8009584:	4611      	mov	r1, r2
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	4798      	blx	r3
  }

  return USBD_OK;
 800958a:	2300      	movs	r3, #0
}
 800958c:	4618      	mov	r0, r3
 800958e:	3708      	adds	r7, #8
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}

08009594 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	460b      	mov	r3, r1
 800959e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	78fa      	ldrb	r2, [r7, #3]
 80095a4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80095a6:	2300      	movs	r3, #0
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	370c      	adds	r7, #12
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2204      	movs	r2, #4
 80095cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80095d0:	2300      	movs	r3, #0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	370c      	adds	r7, #12
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr

080095de <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80095de:	b480      	push	{r7}
 80095e0:	b083      	sub	sp, #12
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095ec:	2b04      	cmp	r3, #4
 80095ee:	d105      	bne.n	80095fc <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	370c      	adds	r7, #12
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr

0800960a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800960a:	b580      	push	{r7, lr}
 800960c:	b082      	sub	sp, #8
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009618:	2b03      	cmp	r3, #3
 800961a:	d10b      	bne.n	8009634 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009622:	69db      	ldr	r3, [r3, #28]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d005      	beq.n	8009634 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800962e:	69db      	ldr	r3, [r3, #28]
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009634:	2300      	movs	r3, #0
}
 8009636:	4618      	mov	r0, r3
 8009638:	3708      	adds	r7, #8
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
	...

08009640 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800964a:	2300      	movs	r3, #0
 800964c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009656:	2b40      	cmp	r3, #64	@ 0x40
 8009658:	d005      	beq.n	8009666 <USBD_StdDevReq+0x26>
 800965a:	2b40      	cmp	r3, #64	@ 0x40
 800965c:	d84f      	bhi.n	80096fe <USBD_StdDevReq+0xbe>
 800965e:	2b00      	cmp	r3, #0
 8009660:	d009      	beq.n	8009676 <USBD_StdDevReq+0x36>
 8009662:	2b20      	cmp	r3, #32
 8009664:	d14b      	bne.n	80096fe <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800966c:	689b      	ldr	r3, [r3, #8]
 800966e:	6839      	ldr	r1, [r7, #0]
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	4798      	blx	r3
      break;
 8009674:	e048      	b.n	8009708 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	785b      	ldrb	r3, [r3, #1]
 800967a:	2b09      	cmp	r3, #9
 800967c:	d839      	bhi.n	80096f2 <USBD_StdDevReq+0xb2>
 800967e:	a201      	add	r2, pc, #4	@ (adr r2, 8009684 <USBD_StdDevReq+0x44>)
 8009680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009684:	080096d5 	.word	0x080096d5
 8009688:	080096e9 	.word	0x080096e9
 800968c:	080096f3 	.word	0x080096f3
 8009690:	080096df 	.word	0x080096df
 8009694:	080096f3 	.word	0x080096f3
 8009698:	080096b7 	.word	0x080096b7
 800969c:	080096ad 	.word	0x080096ad
 80096a0:	080096f3 	.word	0x080096f3
 80096a4:	080096cb 	.word	0x080096cb
 80096a8:	080096c1 	.word	0x080096c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80096ac:	6839      	ldr	r1, [r7, #0]
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 f9dc 	bl	8009a6c <USBD_GetDescriptor>
          break;
 80096b4:	e022      	b.n	80096fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80096b6:	6839      	ldr	r1, [r7, #0]
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 fb3f 	bl	8009d3c <USBD_SetAddress>
          break;
 80096be:	e01d      	b.n	80096fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80096c0:	6839      	ldr	r1, [r7, #0]
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 fb7e 	bl	8009dc4 <USBD_SetConfig>
          break;
 80096c8:	e018      	b.n	80096fc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80096ca:	6839      	ldr	r1, [r7, #0]
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 fc07 	bl	8009ee0 <USBD_GetConfig>
          break;
 80096d2:	e013      	b.n	80096fc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80096d4:	6839      	ldr	r1, [r7, #0]
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 fc37 	bl	8009f4a <USBD_GetStatus>
          break;
 80096dc:	e00e      	b.n	80096fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80096de:	6839      	ldr	r1, [r7, #0]
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 fc65 	bl	8009fb0 <USBD_SetFeature>
          break;
 80096e6:	e009      	b.n	80096fc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80096e8:	6839      	ldr	r1, [r7, #0]
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 fc74 	bl	8009fd8 <USBD_ClrFeature>
          break;
 80096f0:	e004      	b.n	80096fc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80096f2:	6839      	ldr	r1, [r7, #0]
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 fcca 	bl	800a08e <USBD_CtlError>
          break;
 80096fa:	bf00      	nop
      }
      break;
 80096fc:	e004      	b.n	8009708 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80096fe:	6839      	ldr	r1, [r7, #0]
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 fcc4 	bl	800a08e <USBD_CtlError>
      break;
 8009706:	bf00      	nop
  }

  return ret;
 8009708:	7bfb      	ldrb	r3, [r7, #15]
}
 800970a:	4618      	mov	r0, r3
 800970c:	3710      	adds	r7, #16
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop

08009714 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800971e:	2300      	movs	r3, #0
 8009720:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800972a:	2b40      	cmp	r3, #64	@ 0x40
 800972c:	d005      	beq.n	800973a <USBD_StdItfReq+0x26>
 800972e:	2b40      	cmp	r3, #64	@ 0x40
 8009730:	d82e      	bhi.n	8009790 <USBD_StdItfReq+0x7c>
 8009732:	2b00      	cmp	r3, #0
 8009734:	d001      	beq.n	800973a <USBD_StdItfReq+0x26>
 8009736:	2b20      	cmp	r3, #32
 8009738:	d12a      	bne.n	8009790 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009740:	3b01      	subs	r3, #1
 8009742:	2b02      	cmp	r3, #2
 8009744:	d81d      	bhi.n	8009782 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	889b      	ldrh	r3, [r3, #4]
 800974a:	b2db      	uxtb	r3, r3
 800974c:	2b01      	cmp	r3, #1
 800974e:	d813      	bhi.n	8009778 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	6839      	ldr	r1, [r7, #0]
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	4798      	blx	r3
 800975e:	4603      	mov	r3, r0
 8009760:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	88db      	ldrh	r3, [r3, #6]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d110      	bne.n	800978c <USBD_StdItfReq+0x78>
 800976a:	7bfb      	ldrb	r3, [r7, #15]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d10d      	bne.n	800978c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 fd55 	bl	800a220 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009776:	e009      	b.n	800978c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009778:	6839      	ldr	r1, [r7, #0]
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 fc87 	bl	800a08e <USBD_CtlError>
          break;
 8009780:	e004      	b.n	800978c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009782:	6839      	ldr	r1, [r7, #0]
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 fc82 	bl	800a08e <USBD_CtlError>
          break;
 800978a:	e000      	b.n	800978e <USBD_StdItfReq+0x7a>
          break;
 800978c:	bf00      	nop
      }
      break;
 800978e:	e004      	b.n	800979a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009790:	6839      	ldr	r1, [r7, #0]
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 fc7b 	bl	800a08e <USBD_CtlError>
      break;
 8009798:	bf00      	nop
  }

  return USBD_OK;
 800979a:	2300      	movs	r3, #0
}
 800979c:	4618      	mov	r0, r3
 800979e:	3710      	adds	r7, #16
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80097ae:	2300      	movs	r3, #0
 80097b0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	889b      	ldrh	r3, [r3, #4]
 80097b6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80097c0:	2b40      	cmp	r3, #64	@ 0x40
 80097c2:	d007      	beq.n	80097d4 <USBD_StdEPReq+0x30>
 80097c4:	2b40      	cmp	r3, #64	@ 0x40
 80097c6:	f200 8146 	bhi.w	8009a56 <USBD_StdEPReq+0x2b2>
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00a      	beq.n	80097e4 <USBD_StdEPReq+0x40>
 80097ce:	2b20      	cmp	r3, #32
 80097d0:	f040 8141 	bne.w	8009a56 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	6839      	ldr	r1, [r7, #0]
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	4798      	blx	r3
      break;
 80097e2:	e13d      	b.n	8009a60 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80097ec:	2b20      	cmp	r3, #32
 80097ee:	d10a      	bne.n	8009806 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	6839      	ldr	r1, [r7, #0]
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	4798      	blx	r3
 80097fe:	4603      	mov	r3, r0
 8009800:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009802:	7bfb      	ldrb	r3, [r7, #15]
 8009804:	e12d      	b.n	8009a62 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	785b      	ldrb	r3, [r3, #1]
 800980a:	2b03      	cmp	r3, #3
 800980c:	d007      	beq.n	800981e <USBD_StdEPReq+0x7a>
 800980e:	2b03      	cmp	r3, #3
 8009810:	f300 811b 	bgt.w	8009a4a <USBD_StdEPReq+0x2a6>
 8009814:	2b00      	cmp	r3, #0
 8009816:	d072      	beq.n	80098fe <USBD_StdEPReq+0x15a>
 8009818:	2b01      	cmp	r3, #1
 800981a:	d03a      	beq.n	8009892 <USBD_StdEPReq+0xee>
 800981c:	e115      	b.n	8009a4a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009824:	2b02      	cmp	r3, #2
 8009826:	d002      	beq.n	800982e <USBD_StdEPReq+0x8a>
 8009828:	2b03      	cmp	r3, #3
 800982a:	d015      	beq.n	8009858 <USBD_StdEPReq+0xb4>
 800982c:	e02b      	b.n	8009886 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800982e:	7bbb      	ldrb	r3, [r7, #14]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d00c      	beq.n	800984e <USBD_StdEPReq+0xaa>
 8009834:	7bbb      	ldrb	r3, [r7, #14]
 8009836:	2b80      	cmp	r3, #128	@ 0x80
 8009838:	d009      	beq.n	800984e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800983a:	7bbb      	ldrb	r3, [r7, #14]
 800983c:	4619      	mov	r1, r3
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f7f7 fec2 	bl	80015c8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009844:	2180      	movs	r1, #128	@ 0x80
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f7f7 febe 	bl	80015c8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800984c:	e020      	b.n	8009890 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800984e:	6839      	ldr	r1, [r7, #0]
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 fc1c 	bl	800a08e <USBD_CtlError>
              break;
 8009856:	e01b      	b.n	8009890 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	885b      	ldrh	r3, [r3, #2]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d10e      	bne.n	800987e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009860:	7bbb      	ldrb	r3, [r7, #14]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d00b      	beq.n	800987e <USBD_StdEPReq+0xda>
 8009866:	7bbb      	ldrb	r3, [r7, #14]
 8009868:	2b80      	cmp	r3, #128	@ 0x80
 800986a:	d008      	beq.n	800987e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	88db      	ldrh	r3, [r3, #6]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d104      	bne.n	800987e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009874:	7bbb      	ldrb	r3, [r7, #14]
 8009876:	4619      	mov	r1, r3
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f7f7 fea5 	bl	80015c8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 fcce 	bl	800a220 <USBD_CtlSendStatus>

              break;
 8009884:	e004      	b.n	8009890 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009886:	6839      	ldr	r1, [r7, #0]
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 fc00 	bl	800a08e <USBD_CtlError>
              break;
 800988e:	bf00      	nop
          }
          break;
 8009890:	e0e0      	b.n	8009a54 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009898:	2b02      	cmp	r3, #2
 800989a:	d002      	beq.n	80098a2 <USBD_StdEPReq+0xfe>
 800989c:	2b03      	cmp	r3, #3
 800989e:	d015      	beq.n	80098cc <USBD_StdEPReq+0x128>
 80098a0:	e026      	b.n	80098f0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80098a2:	7bbb      	ldrb	r3, [r7, #14]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d00c      	beq.n	80098c2 <USBD_StdEPReq+0x11e>
 80098a8:	7bbb      	ldrb	r3, [r7, #14]
 80098aa:	2b80      	cmp	r3, #128	@ 0x80
 80098ac:	d009      	beq.n	80098c2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80098ae:	7bbb      	ldrb	r3, [r7, #14]
 80098b0:	4619      	mov	r1, r3
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f7f7 fe88 	bl	80015c8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80098b8:	2180      	movs	r1, #128	@ 0x80
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f7f7 fe84 	bl	80015c8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80098c0:	e01c      	b.n	80098fc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80098c2:	6839      	ldr	r1, [r7, #0]
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f000 fbe2 	bl	800a08e <USBD_CtlError>
              break;
 80098ca:	e017      	b.n	80098fc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	885b      	ldrh	r3, [r3, #2]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d112      	bne.n	80098fa <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80098d4:	7bbb      	ldrb	r3, [r7, #14]
 80098d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d004      	beq.n	80098e8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80098de:	7bbb      	ldrb	r3, [r7, #14]
 80098e0:	4619      	mov	r1, r3
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f7f7 fe8f 	bl	8001606 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 fc99 	bl	800a220 <USBD_CtlSendStatus>
              }
              break;
 80098ee:	e004      	b.n	80098fa <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80098f0:	6839      	ldr	r1, [r7, #0]
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 fbcb 	bl	800a08e <USBD_CtlError>
              break;
 80098f8:	e000      	b.n	80098fc <USBD_StdEPReq+0x158>
              break;
 80098fa:	bf00      	nop
          }
          break;
 80098fc:	e0aa      	b.n	8009a54 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009904:	2b02      	cmp	r3, #2
 8009906:	d002      	beq.n	800990e <USBD_StdEPReq+0x16a>
 8009908:	2b03      	cmp	r3, #3
 800990a:	d032      	beq.n	8009972 <USBD_StdEPReq+0x1ce>
 800990c:	e097      	b.n	8009a3e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800990e:	7bbb      	ldrb	r3, [r7, #14]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d007      	beq.n	8009924 <USBD_StdEPReq+0x180>
 8009914:	7bbb      	ldrb	r3, [r7, #14]
 8009916:	2b80      	cmp	r3, #128	@ 0x80
 8009918:	d004      	beq.n	8009924 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800991a:	6839      	ldr	r1, [r7, #0]
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 fbb6 	bl	800a08e <USBD_CtlError>
                break;
 8009922:	e091      	b.n	8009a48 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009924:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009928:	2b00      	cmp	r3, #0
 800992a:	da0b      	bge.n	8009944 <USBD_StdEPReq+0x1a0>
 800992c:	7bbb      	ldrb	r3, [r7, #14]
 800992e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009932:	4613      	mov	r3, r2
 8009934:	009b      	lsls	r3, r3, #2
 8009936:	4413      	add	r3, r2
 8009938:	009b      	lsls	r3, r3, #2
 800993a:	3310      	adds	r3, #16
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	4413      	add	r3, r2
 8009940:	3304      	adds	r3, #4
 8009942:	e00b      	b.n	800995c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009944:	7bbb      	ldrb	r3, [r7, #14]
 8009946:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800994a:	4613      	mov	r3, r2
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	4413      	add	r3, r2
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009956:	687a      	ldr	r2, [r7, #4]
 8009958:	4413      	add	r3, r2
 800995a:	3304      	adds	r3, #4
 800995c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	2200      	movs	r2, #0
 8009962:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	2202      	movs	r2, #2
 8009968:	4619      	mov	r1, r3
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 fbfa 	bl	800a164 <USBD_CtlSendData>
              break;
 8009970:	e06a      	b.n	8009a48 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009972:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009976:	2b00      	cmp	r3, #0
 8009978:	da11      	bge.n	800999e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800997a:	7bbb      	ldrb	r3, [r7, #14]
 800997c:	f003 020f 	and.w	r2, r3, #15
 8009980:	6879      	ldr	r1, [r7, #4]
 8009982:	4613      	mov	r3, r2
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	4413      	add	r3, r2
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	440b      	add	r3, r1
 800998c:	3318      	adds	r3, #24
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d117      	bne.n	80099c4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009994:	6839      	ldr	r1, [r7, #0]
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 fb79 	bl	800a08e <USBD_CtlError>
                  break;
 800999c:	e054      	b.n	8009a48 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800999e:	7bbb      	ldrb	r3, [r7, #14]
 80099a0:	f003 020f 	and.w	r2, r3, #15
 80099a4:	6879      	ldr	r1, [r7, #4]
 80099a6:	4613      	mov	r3, r2
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	4413      	add	r3, r2
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	440b      	add	r3, r1
 80099b0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d104      	bne.n	80099c4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80099ba:	6839      	ldr	r1, [r7, #0]
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 fb66 	bl	800a08e <USBD_CtlError>
                  break;
 80099c2:	e041      	b.n	8009a48 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80099c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	da0b      	bge.n	80099e4 <USBD_StdEPReq+0x240>
 80099cc:	7bbb      	ldrb	r3, [r7, #14]
 80099ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80099d2:	4613      	mov	r3, r2
 80099d4:	009b      	lsls	r3, r3, #2
 80099d6:	4413      	add	r3, r2
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	3310      	adds	r3, #16
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	4413      	add	r3, r2
 80099e0:	3304      	adds	r3, #4
 80099e2:	e00b      	b.n	80099fc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80099e4:	7bbb      	ldrb	r3, [r7, #14]
 80099e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80099ea:	4613      	mov	r3, r2
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	4413      	add	r3, r2
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	4413      	add	r3, r2
 80099fa:	3304      	adds	r3, #4
 80099fc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80099fe:	7bbb      	ldrb	r3, [r7, #14]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d002      	beq.n	8009a0a <USBD_StdEPReq+0x266>
 8009a04:	7bbb      	ldrb	r3, [r7, #14]
 8009a06:	2b80      	cmp	r3, #128	@ 0x80
 8009a08:	d103      	bne.n	8009a12 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	601a      	str	r2, [r3, #0]
 8009a10:	e00e      	b.n	8009a30 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009a12:	7bbb      	ldrb	r3, [r7, #14]
 8009a14:	4619      	mov	r1, r3
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f7f7 fe14 	bl	8001644 <USBD_LL_IsStallEP>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d003      	beq.n	8009a2a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	2201      	movs	r2, #1
 8009a26:	601a      	str	r2, [r3, #0]
 8009a28:	e002      	b.n	8009a30 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	2202      	movs	r2, #2
 8009a34:	4619      	mov	r1, r3
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 fb94 	bl	800a164 <USBD_CtlSendData>
              break;
 8009a3c:	e004      	b.n	8009a48 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009a3e:	6839      	ldr	r1, [r7, #0]
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 fb24 	bl	800a08e <USBD_CtlError>
              break;
 8009a46:	bf00      	nop
          }
          break;
 8009a48:	e004      	b.n	8009a54 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009a4a:	6839      	ldr	r1, [r7, #0]
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f000 fb1e 	bl	800a08e <USBD_CtlError>
          break;
 8009a52:	bf00      	nop
      }
      break;
 8009a54:	e004      	b.n	8009a60 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009a56:	6839      	ldr	r1, [r7, #0]
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 fb18 	bl	800a08e <USBD_CtlError>
      break;
 8009a5e:	bf00      	nop
  }

  return ret;
 8009a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3710      	adds	r7, #16
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
	...

08009a6c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009a76:	2300      	movs	r3, #0
 8009a78:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	885b      	ldrh	r3, [r3, #2]
 8009a86:	0a1b      	lsrs	r3, r3, #8
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	3b01      	subs	r3, #1
 8009a8c:	2b06      	cmp	r3, #6
 8009a8e:	f200 8128 	bhi.w	8009ce2 <USBD_GetDescriptor+0x276>
 8009a92:	a201      	add	r2, pc, #4	@ (adr r2, 8009a98 <USBD_GetDescriptor+0x2c>)
 8009a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a98:	08009ab5 	.word	0x08009ab5
 8009a9c:	08009acd 	.word	0x08009acd
 8009aa0:	08009b0d 	.word	0x08009b0d
 8009aa4:	08009ce3 	.word	0x08009ce3
 8009aa8:	08009ce3 	.word	0x08009ce3
 8009aac:	08009c83 	.word	0x08009c83
 8009ab0:	08009caf 	.word	0x08009caf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	7c12      	ldrb	r2, [r2, #16]
 8009ac0:	f107 0108 	add.w	r1, r7, #8
 8009ac4:	4610      	mov	r0, r2
 8009ac6:	4798      	blx	r3
 8009ac8:	60f8      	str	r0, [r7, #12]
      break;
 8009aca:	e112      	b.n	8009cf2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	7c1b      	ldrb	r3, [r3, #16]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d10d      	bne.n	8009af0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009adc:	f107 0208 	add.w	r2, r7, #8
 8009ae0:	4610      	mov	r0, r2
 8009ae2:	4798      	blx	r3
 8009ae4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	3301      	adds	r3, #1
 8009aea:	2202      	movs	r2, #2
 8009aec:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009aee:	e100      	b.n	8009cf2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009af8:	f107 0208 	add.w	r2, r7, #8
 8009afc:	4610      	mov	r0, r2
 8009afe:	4798      	blx	r3
 8009b00:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	3301      	adds	r3, #1
 8009b06:	2202      	movs	r2, #2
 8009b08:	701a      	strb	r2, [r3, #0]
      break;
 8009b0a:	e0f2      	b.n	8009cf2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	885b      	ldrh	r3, [r3, #2]
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	2b05      	cmp	r3, #5
 8009b14:	f200 80ac 	bhi.w	8009c70 <USBD_GetDescriptor+0x204>
 8009b18:	a201      	add	r2, pc, #4	@ (adr r2, 8009b20 <USBD_GetDescriptor+0xb4>)
 8009b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b1e:	bf00      	nop
 8009b20:	08009b39 	.word	0x08009b39
 8009b24:	08009b6d 	.word	0x08009b6d
 8009b28:	08009ba1 	.word	0x08009ba1
 8009b2c:	08009bd5 	.word	0x08009bd5
 8009b30:	08009c09 	.word	0x08009c09
 8009b34:	08009c3d 	.word	0x08009c3d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d00b      	beq.n	8009b5c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	7c12      	ldrb	r2, [r2, #16]
 8009b50:	f107 0108 	add.w	r1, r7, #8
 8009b54:	4610      	mov	r0, r2
 8009b56:	4798      	blx	r3
 8009b58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b5a:	e091      	b.n	8009c80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b5c:	6839      	ldr	r1, [r7, #0]
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 fa95 	bl	800a08e <USBD_CtlError>
            err++;
 8009b64:	7afb      	ldrb	r3, [r7, #11]
 8009b66:	3301      	adds	r3, #1
 8009b68:	72fb      	strb	r3, [r7, #11]
          break;
 8009b6a:	e089      	b.n	8009c80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d00b      	beq.n	8009b90 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	7c12      	ldrb	r2, [r2, #16]
 8009b84:	f107 0108 	add.w	r1, r7, #8
 8009b88:	4610      	mov	r0, r2
 8009b8a:	4798      	blx	r3
 8009b8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b8e:	e077      	b.n	8009c80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b90:	6839      	ldr	r1, [r7, #0]
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 fa7b 	bl	800a08e <USBD_CtlError>
            err++;
 8009b98:	7afb      	ldrb	r3, [r7, #11]
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	72fb      	strb	r3, [r7, #11]
          break;
 8009b9e:	e06f      	b.n	8009c80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009ba6:	68db      	ldr	r3, [r3, #12]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d00b      	beq.n	8009bc4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	687a      	ldr	r2, [r7, #4]
 8009bb6:	7c12      	ldrb	r2, [r2, #16]
 8009bb8:	f107 0108 	add.w	r1, r7, #8
 8009bbc:	4610      	mov	r0, r2
 8009bbe:	4798      	blx	r3
 8009bc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bc2:	e05d      	b.n	8009c80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bc4:	6839      	ldr	r1, [r7, #0]
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 fa61 	bl	800a08e <USBD_CtlError>
            err++;
 8009bcc:	7afb      	ldrb	r3, [r7, #11]
 8009bce:	3301      	adds	r3, #1
 8009bd0:	72fb      	strb	r3, [r7, #11]
          break;
 8009bd2:	e055      	b.n	8009c80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009bda:	691b      	ldr	r3, [r3, #16]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d00b      	beq.n	8009bf8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009be6:	691b      	ldr	r3, [r3, #16]
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	7c12      	ldrb	r2, [r2, #16]
 8009bec:	f107 0108 	add.w	r1, r7, #8
 8009bf0:	4610      	mov	r0, r2
 8009bf2:	4798      	blx	r3
 8009bf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bf6:	e043      	b.n	8009c80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bf8:	6839      	ldr	r1, [r7, #0]
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 fa47 	bl	800a08e <USBD_CtlError>
            err++;
 8009c00:	7afb      	ldrb	r3, [r7, #11]
 8009c02:	3301      	adds	r3, #1
 8009c04:	72fb      	strb	r3, [r7, #11]
          break;
 8009c06:	e03b      	b.n	8009c80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c0e:	695b      	ldr	r3, [r3, #20]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d00b      	beq.n	8009c2c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c1a:	695b      	ldr	r3, [r3, #20]
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	7c12      	ldrb	r2, [r2, #16]
 8009c20:	f107 0108 	add.w	r1, r7, #8
 8009c24:	4610      	mov	r0, r2
 8009c26:	4798      	blx	r3
 8009c28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c2a:	e029      	b.n	8009c80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c2c:	6839      	ldr	r1, [r7, #0]
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 fa2d 	bl	800a08e <USBD_CtlError>
            err++;
 8009c34:	7afb      	ldrb	r3, [r7, #11]
 8009c36:	3301      	adds	r3, #1
 8009c38:	72fb      	strb	r3, [r7, #11]
          break;
 8009c3a:	e021      	b.n	8009c80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c42:	699b      	ldr	r3, [r3, #24]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d00b      	beq.n	8009c60 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c4e:	699b      	ldr	r3, [r3, #24]
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	7c12      	ldrb	r2, [r2, #16]
 8009c54:	f107 0108 	add.w	r1, r7, #8
 8009c58:	4610      	mov	r0, r2
 8009c5a:	4798      	blx	r3
 8009c5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c5e:	e00f      	b.n	8009c80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c60:	6839      	ldr	r1, [r7, #0]
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 fa13 	bl	800a08e <USBD_CtlError>
            err++;
 8009c68:	7afb      	ldrb	r3, [r7, #11]
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	72fb      	strb	r3, [r7, #11]
          break;
 8009c6e:	e007      	b.n	8009c80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009c70:	6839      	ldr	r1, [r7, #0]
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 fa0b 	bl	800a08e <USBD_CtlError>
          err++;
 8009c78:	7afb      	ldrb	r3, [r7, #11]
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009c7e:	e038      	b.n	8009cf2 <USBD_GetDescriptor+0x286>
 8009c80:	e037      	b.n	8009cf2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	7c1b      	ldrb	r3, [r3, #16]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d109      	bne.n	8009c9e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c92:	f107 0208 	add.w	r2, r7, #8
 8009c96:	4610      	mov	r0, r2
 8009c98:	4798      	blx	r3
 8009c9a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c9c:	e029      	b.n	8009cf2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009c9e:	6839      	ldr	r1, [r7, #0]
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f000 f9f4 	bl	800a08e <USBD_CtlError>
        err++;
 8009ca6:	7afb      	ldrb	r3, [r7, #11]
 8009ca8:	3301      	adds	r3, #1
 8009caa:	72fb      	strb	r3, [r7, #11]
      break;
 8009cac:	e021      	b.n	8009cf2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	7c1b      	ldrb	r3, [r3, #16]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d10d      	bne.n	8009cd2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cbe:	f107 0208 	add.w	r2, r7, #8
 8009cc2:	4610      	mov	r0, r2
 8009cc4:	4798      	blx	r3
 8009cc6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	3301      	adds	r3, #1
 8009ccc:	2207      	movs	r2, #7
 8009cce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009cd0:	e00f      	b.n	8009cf2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009cd2:	6839      	ldr	r1, [r7, #0]
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 f9da 	bl	800a08e <USBD_CtlError>
        err++;
 8009cda:	7afb      	ldrb	r3, [r7, #11]
 8009cdc:	3301      	adds	r3, #1
 8009cde:	72fb      	strb	r3, [r7, #11]
      break;
 8009ce0:	e007      	b.n	8009cf2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009ce2:	6839      	ldr	r1, [r7, #0]
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 f9d2 	bl	800a08e <USBD_CtlError>
      err++;
 8009cea:	7afb      	ldrb	r3, [r7, #11]
 8009cec:	3301      	adds	r3, #1
 8009cee:	72fb      	strb	r3, [r7, #11]
      break;
 8009cf0:	bf00      	nop
  }

  if (err != 0U)
 8009cf2:	7afb      	ldrb	r3, [r7, #11]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d11c      	bne.n	8009d32 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009cf8:	893b      	ldrh	r3, [r7, #8]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d011      	beq.n	8009d22 <USBD_GetDescriptor+0x2b6>
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	88db      	ldrh	r3, [r3, #6]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d00d      	beq.n	8009d22 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	88da      	ldrh	r2, [r3, #6]
 8009d0a:	893b      	ldrh	r3, [r7, #8]
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	bf28      	it	cs
 8009d10:	4613      	movcs	r3, r2
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009d16:	893b      	ldrh	r3, [r7, #8]
 8009d18:	461a      	mov	r2, r3
 8009d1a:	68f9      	ldr	r1, [r7, #12]
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 fa21 	bl	800a164 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	88db      	ldrh	r3, [r3, #6]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d104      	bne.n	8009d34 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f000 fa78 	bl	800a220 <USBD_CtlSendStatus>
 8009d30:	e000      	b.n	8009d34 <USBD_GetDescriptor+0x2c8>
    return;
 8009d32:	bf00      	nop
    }
  }
}
 8009d34:	3710      	adds	r7, #16
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop

08009d3c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	889b      	ldrh	r3, [r3, #4]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d130      	bne.n	8009db0 <USBD_SetAddress+0x74>
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	88db      	ldrh	r3, [r3, #6]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d12c      	bne.n	8009db0 <USBD_SetAddress+0x74>
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	885b      	ldrh	r3, [r3, #2]
 8009d5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8009d5c:	d828      	bhi.n	8009db0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	885b      	ldrh	r3, [r3, #2]
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d70:	2b03      	cmp	r3, #3
 8009d72:	d104      	bne.n	8009d7e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009d74:	6839      	ldr	r1, [r7, #0]
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 f989 	bl	800a08e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d7c:	e01d      	b.n	8009dba <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	7bfa      	ldrb	r2, [r7, #15]
 8009d82:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009d86:	7bfb      	ldrb	r3, [r7, #15]
 8009d88:	4619      	mov	r1, r3
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f7f7 fc86 	bl	800169c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 fa45 	bl	800a220 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009d96:	7bfb      	ldrb	r3, [r7, #15]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d004      	beq.n	8009da6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2202      	movs	r2, #2
 8009da0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009da4:	e009      	b.n	8009dba <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2201      	movs	r2, #1
 8009daa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dae:	e004      	b.n	8009dba <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009db0:	6839      	ldr	r1, [r7, #0]
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 f96b 	bl	800a08e <USBD_CtlError>
  }
}
 8009db8:	bf00      	nop
 8009dba:	bf00      	nop
 8009dbc:	3710      	adds	r7, #16
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
	...

08009dc4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	885b      	ldrh	r3, [r3, #2]
 8009dd2:	b2da      	uxtb	r2, r3
 8009dd4:	4b41      	ldr	r3, [pc, #260]	@ (8009edc <USBD_SetConfig+0x118>)
 8009dd6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009dd8:	4b40      	ldr	r3, [pc, #256]	@ (8009edc <USBD_SetConfig+0x118>)
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d904      	bls.n	8009dea <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009de0:	6839      	ldr	r1, [r7, #0]
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 f953 	bl	800a08e <USBD_CtlError>
 8009de8:	e075      	b.n	8009ed6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009df0:	2b02      	cmp	r3, #2
 8009df2:	d002      	beq.n	8009dfa <USBD_SetConfig+0x36>
 8009df4:	2b03      	cmp	r3, #3
 8009df6:	d023      	beq.n	8009e40 <USBD_SetConfig+0x7c>
 8009df8:	e062      	b.n	8009ec0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009dfa:	4b38      	ldr	r3, [pc, #224]	@ (8009edc <USBD_SetConfig+0x118>)
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d01a      	beq.n	8009e38 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009e02:	4b36      	ldr	r3, [pc, #216]	@ (8009edc <USBD_SetConfig+0x118>)
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	461a      	mov	r2, r3
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2203      	movs	r2, #3
 8009e10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009e14:	4b31      	ldr	r3, [pc, #196]	@ (8009edc <USBD_SetConfig+0x118>)
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	4619      	mov	r1, r3
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f7ff f9e4 	bl	80091e8 <USBD_SetClassConfig>
 8009e20:	4603      	mov	r3, r0
 8009e22:	2b02      	cmp	r3, #2
 8009e24:	d104      	bne.n	8009e30 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009e26:	6839      	ldr	r1, [r7, #0]
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 f930 	bl	800a08e <USBD_CtlError>
            return;
 8009e2e:	e052      	b.n	8009ed6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 f9f5 	bl	800a220 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009e36:	e04e      	b.n	8009ed6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 f9f1 	bl	800a220 <USBD_CtlSendStatus>
        break;
 8009e3e:	e04a      	b.n	8009ed6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009e40:	4b26      	ldr	r3, [pc, #152]	@ (8009edc <USBD_SetConfig+0x118>)
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d112      	bne.n	8009e6e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2202      	movs	r2, #2
 8009e4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009e50:	4b22      	ldr	r3, [pc, #136]	@ (8009edc <USBD_SetConfig+0x118>)
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	461a      	mov	r2, r3
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009e5a:	4b20      	ldr	r3, [pc, #128]	@ (8009edc <USBD_SetConfig+0x118>)
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	4619      	mov	r1, r3
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f7ff f9e0 	bl	8009226 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 f9da 	bl	800a220 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009e6c:	e033      	b.n	8009ed6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8009edc <USBD_SetConfig+0x118>)
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	461a      	mov	r2, r3
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d01d      	beq.n	8009eb8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	b2db      	uxtb	r3, r3
 8009e82:	4619      	mov	r1, r3
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f7ff f9ce 	bl	8009226 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009e8a:	4b14      	ldr	r3, [pc, #80]	@ (8009edc <USBD_SetConfig+0x118>)
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	461a      	mov	r2, r3
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009e94:	4b11      	ldr	r3, [pc, #68]	@ (8009edc <USBD_SetConfig+0x118>)
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	4619      	mov	r1, r3
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f7ff f9a4 	bl	80091e8 <USBD_SetClassConfig>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	2b02      	cmp	r3, #2
 8009ea4:	d104      	bne.n	8009eb0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009ea6:	6839      	ldr	r1, [r7, #0]
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 f8f0 	bl	800a08e <USBD_CtlError>
            return;
 8009eae:	e012      	b.n	8009ed6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f000 f9b5 	bl	800a220 <USBD_CtlSendStatus>
        break;
 8009eb6:	e00e      	b.n	8009ed6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 f9b1 	bl	800a220 <USBD_CtlSendStatus>
        break;
 8009ebe:	e00a      	b.n	8009ed6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009ec0:	6839      	ldr	r1, [r7, #0]
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 f8e3 	bl	800a08e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009ec8:	4b04      	ldr	r3, [pc, #16]	@ (8009edc <USBD_SetConfig+0x118>)
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	4619      	mov	r1, r3
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f7ff f9a9 	bl	8009226 <USBD_ClrClassConfig>
        break;
 8009ed4:	bf00      	nop
    }
  }
}
 8009ed6:	3708      	adds	r7, #8
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	200014d4 	.word	0x200014d4

08009ee0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	88db      	ldrh	r3, [r3, #6]
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d004      	beq.n	8009efc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009ef2:	6839      	ldr	r1, [r7, #0]
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 f8ca 	bl	800a08e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009efa:	e022      	b.n	8009f42 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f02:	2b02      	cmp	r3, #2
 8009f04:	dc02      	bgt.n	8009f0c <USBD_GetConfig+0x2c>
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	dc03      	bgt.n	8009f12 <USBD_GetConfig+0x32>
 8009f0a:	e015      	b.n	8009f38 <USBD_GetConfig+0x58>
 8009f0c:	2b03      	cmp	r3, #3
 8009f0e:	d00b      	beq.n	8009f28 <USBD_GetConfig+0x48>
 8009f10:	e012      	b.n	8009f38 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	3308      	adds	r3, #8
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	4619      	mov	r1, r3
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 f91f 	bl	800a164 <USBD_CtlSendData>
        break;
 8009f26:	e00c      	b.n	8009f42 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	3304      	adds	r3, #4
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	4619      	mov	r1, r3
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 f917 	bl	800a164 <USBD_CtlSendData>
        break;
 8009f36:	e004      	b.n	8009f42 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009f38:	6839      	ldr	r1, [r7, #0]
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 f8a7 	bl	800a08e <USBD_CtlError>
        break;
 8009f40:	bf00      	nop
}
 8009f42:	bf00      	nop
 8009f44:	3708      	adds	r7, #8
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}

08009f4a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f4a:	b580      	push	{r7, lr}
 8009f4c:	b082      	sub	sp, #8
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
 8009f52:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f5a:	3b01      	subs	r3, #1
 8009f5c:	2b02      	cmp	r3, #2
 8009f5e:	d81e      	bhi.n	8009f9e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	88db      	ldrh	r3, [r3, #6]
 8009f64:	2b02      	cmp	r3, #2
 8009f66:	d004      	beq.n	8009f72 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009f68:	6839      	ldr	r1, [r7, #0]
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 f88f 	bl	800a08e <USBD_CtlError>
        break;
 8009f70:	e01a      	b.n	8009fa8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2201      	movs	r2, #1
 8009f76:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d005      	beq.n	8009f8e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	68db      	ldr	r3, [r3, #12]
 8009f86:	f043 0202 	orr.w	r2, r3, #2
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	330c      	adds	r3, #12
 8009f92:	2202      	movs	r2, #2
 8009f94:	4619      	mov	r1, r3
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 f8e4 	bl	800a164 <USBD_CtlSendData>
      break;
 8009f9c:	e004      	b.n	8009fa8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009f9e:	6839      	ldr	r1, [r7, #0]
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f000 f874 	bl	800a08e <USBD_CtlError>
      break;
 8009fa6:	bf00      	nop
  }
}
 8009fa8:	bf00      	nop
 8009faa:	3708      	adds	r7, #8
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b082      	sub	sp, #8
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	885b      	ldrh	r3, [r3, #2]
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d106      	bne.n	8009fd0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 f928 	bl	800a220 <USBD_CtlSendStatus>
  }
}
 8009fd0:	bf00      	nop
 8009fd2:	3708      	adds	r7, #8
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fe8:	3b01      	subs	r3, #1
 8009fea:	2b02      	cmp	r3, #2
 8009fec:	d80b      	bhi.n	800a006 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	885b      	ldrh	r3, [r3, #2]
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d10c      	bne.n	800a010 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 f90e 	bl	800a220 <USBD_CtlSendStatus>
      }
      break;
 800a004:	e004      	b.n	800a010 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a006:	6839      	ldr	r1, [r7, #0]
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 f840 	bl	800a08e <USBD_CtlError>
      break;
 800a00e:	e000      	b.n	800a012 <USBD_ClrFeature+0x3a>
      break;
 800a010:	bf00      	nop
  }
}
 800a012:	bf00      	nop
 800a014:	3708      	adds	r7, #8
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}

0800a01a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a01a:	b480      	push	{r7}
 800a01c:	b083      	sub	sp, #12
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
 800a022:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	781a      	ldrb	r2, [r3, #0]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	785a      	ldrb	r2, [r3, #1]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	3302      	adds	r3, #2
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	461a      	mov	r2, r3
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	3303      	adds	r3, #3
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	021b      	lsls	r3, r3, #8
 800a044:	b29b      	uxth	r3, r3
 800a046:	4413      	add	r3, r2
 800a048:	b29a      	uxth	r2, r3
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	3304      	adds	r3, #4
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	461a      	mov	r2, r3
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	3305      	adds	r3, #5
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	021b      	lsls	r3, r3, #8
 800a05e:	b29b      	uxth	r3, r3
 800a060:	4413      	add	r3, r2
 800a062:	b29a      	uxth	r2, r3
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	3306      	adds	r3, #6
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	461a      	mov	r2, r3
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	3307      	adds	r3, #7
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	021b      	lsls	r3, r3, #8
 800a078:	b29b      	uxth	r3, r3
 800a07a:	4413      	add	r3, r2
 800a07c:	b29a      	uxth	r2, r3
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	80da      	strh	r2, [r3, #6]

}
 800a082:	bf00      	nop
 800a084:	370c      	adds	r7, #12
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr

0800a08e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	b082      	sub	sp, #8
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
 800a096:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a098:	2180      	movs	r1, #128	@ 0x80
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f7f7 fa94 	bl	80015c8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a0a0:	2100      	movs	r1, #0
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f7f7 fa90 	bl	80015c8 <USBD_LL_StallEP>
}
 800a0a8:	bf00      	nop
 800a0aa:	3708      	adds	r7, #8
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b086      	sub	sp, #24
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d032      	beq.n	800a12c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a0c6:	68f8      	ldr	r0, [r7, #12]
 800a0c8:	f000 f834 	bl	800a134 <USBD_GetLen>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	005b      	lsls	r3, r3, #1
 800a0d4:	b29a      	uxth	r2, r3
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a0da:	7dfb      	ldrb	r3, [r7, #23]
 800a0dc:	1c5a      	adds	r2, r3, #1
 800a0de:	75fa      	strb	r2, [r7, #23]
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	4413      	add	r3, r2
 800a0e6:	687a      	ldr	r2, [r7, #4]
 800a0e8:	7812      	ldrb	r2, [r2, #0]
 800a0ea:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a0ec:	7dfb      	ldrb	r3, [r7, #23]
 800a0ee:	1c5a      	adds	r2, r3, #1
 800a0f0:	75fa      	strb	r2, [r7, #23]
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	4413      	add	r3, r2
 800a0f8:	2203      	movs	r2, #3
 800a0fa:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a0fc:	e012      	b.n	800a124 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	1c5a      	adds	r2, r3, #1
 800a102:	60fa      	str	r2, [r7, #12]
 800a104:	7dfa      	ldrb	r2, [r7, #23]
 800a106:	1c51      	adds	r1, r2, #1
 800a108:	75f9      	strb	r1, [r7, #23]
 800a10a:	4611      	mov	r1, r2
 800a10c:	68ba      	ldr	r2, [r7, #8]
 800a10e:	440a      	add	r2, r1
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a114:	7dfb      	ldrb	r3, [r7, #23]
 800a116:	1c5a      	adds	r2, r3, #1
 800a118:	75fa      	strb	r2, [r7, #23]
 800a11a:	461a      	mov	r2, r3
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	4413      	add	r3, r2
 800a120:	2200      	movs	r2, #0
 800a122:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d1e8      	bne.n	800a0fe <USBD_GetString+0x4e>
    }
  }
}
 800a12c:	bf00      	nop
 800a12e:	3718      	adds	r7, #24
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a134:	b480      	push	{r7}
 800a136:	b085      	sub	sp, #20
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a13c:	2300      	movs	r3, #0
 800a13e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a140:	e005      	b.n	800a14e <USBD_GetLen+0x1a>
  {
    len++;
 800a142:	7bfb      	ldrb	r3, [r7, #15]
 800a144:	3301      	adds	r3, #1
 800a146:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	3301      	adds	r3, #1
 800a14c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d1f5      	bne.n	800a142 <USBD_GetLen+0xe>
  }

  return len;
 800a156:	7bfb      	ldrb	r3, [r7, #15]
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3714      	adds	r7, #20
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr

0800a164 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	60f8      	str	r0, [r7, #12]
 800a16c:	60b9      	str	r1, [r7, #8]
 800a16e:	4613      	mov	r3, r2
 800a170:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2202      	movs	r2, #2
 800a176:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a17a:	88fa      	ldrh	r2, [r7, #6]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a180:	88fa      	ldrh	r2, [r7, #6]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a186:	88fb      	ldrh	r3, [r7, #6]
 800a188:	68ba      	ldr	r2, [r7, #8]
 800a18a:	2100      	movs	r1, #0
 800a18c:	68f8      	ldr	r0, [r7, #12]
 800a18e:	f7f7 faa4 	bl	80016da <USBD_LL_Transmit>

  return USBD_OK;
 800a192:	2300      	movs	r3, #0
}
 800a194:	4618      	mov	r0, r3
 800a196:	3710      	adds	r7, #16
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	60b9      	str	r1, [r7, #8]
 800a1a6:	4613      	mov	r3, r2
 800a1a8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a1aa:	88fb      	ldrh	r3, [r7, #6]
 800a1ac:	68ba      	ldr	r2, [r7, #8]
 800a1ae:	2100      	movs	r1, #0
 800a1b0:	68f8      	ldr	r0, [r7, #12]
 800a1b2:	f7f7 fa92 	bl	80016da <USBD_LL_Transmit>

  return USBD_OK;
 800a1b6:	2300      	movs	r3, #0
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3710      	adds	r7, #16
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	60b9      	str	r1, [r7, #8]
 800a1ca:	4613      	mov	r3, r2
 800a1cc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2203      	movs	r2, #3
 800a1d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a1d6:	88fa      	ldrh	r2, [r7, #6]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a1de:	88fa      	ldrh	r2, [r7, #6]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a1e6:	88fb      	ldrh	r3, [r7, #6]
 800a1e8:	68ba      	ldr	r2, [r7, #8]
 800a1ea:	2100      	movs	r1, #0
 800a1ec:	68f8      	ldr	r0, [r7, #12]
 800a1ee:	f7f7 fa97 	bl	8001720 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1f2:	2300      	movs	r3, #0
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3710      	adds	r7, #16
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	60b9      	str	r1, [r7, #8]
 800a206:	4613      	mov	r3, r2
 800a208:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a20a:	88fb      	ldrh	r3, [r7, #6]
 800a20c:	68ba      	ldr	r2, [r7, #8]
 800a20e:	2100      	movs	r1, #0
 800a210:	68f8      	ldr	r0, [r7, #12]
 800a212:	f7f7 fa85 	bl	8001720 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a216:	2300      	movs	r3, #0
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3710      	adds	r7, #16
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2204      	movs	r2, #4
 800a22c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a230:	2300      	movs	r3, #0
 800a232:	2200      	movs	r2, #0
 800a234:	2100      	movs	r1, #0
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f7f7 fa4f 	bl	80016da <USBD_LL_Transmit>

  return USBD_OK;
 800a23c:	2300      	movs	r3, #0
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3708      	adds	r7, #8
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}

0800a246 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a246:	b580      	push	{r7, lr}
 800a248:	b082      	sub	sp, #8
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2205      	movs	r2, #5
 800a252:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a256:	2300      	movs	r3, #0
 800a258:	2200      	movs	r2, #0
 800a25a:	2100      	movs	r1, #0
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f7f7 fa5f 	bl	8001720 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a262:	2300      	movs	r3, #0
}
 800a264:	4618      	mov	r0, r3
 800a266:	3708      	adds	r7, #8
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <siprintf>:
 800a26c:	b40e      	push	{r1, r2, r3}
 800a26e:	b500      	push	{lr}
 800a270:	b09c      	sub	sp, #112	@ 0x70
 800a272:	ab1d      	add	r3, sp, #116	@ 0x74
 800a274:	9002      	str	r0, [sp, #8]
 800a276:	9006      	str	r0, [sp, #24]
 800a278:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a27c:	4809      	ldr	r0, [pc, #36]	@ (800a2a4 <siprintf+0x38>)
 800a27e:	9107      	str	r1, [sp, #28]
 800a280:	9104      	str	r1, [sp, #16]
 800a282:	4909      	ldr	r1, [pc, #36]	@ (800a2a8 <siprintf+0x3c>)
 800a284:	f853 2b04 	ldr.w	r2, [r3], #4
 800a288:	9105      	str	r1, [sp, #20]
 800a28a:	6800      	ldr	r0, [r0, #0]
 800a28c:	9301      	str	r3, [sp, #4]
 800a28e:	a902      	add	r1, sp, #8
 800a290:	f000 f994 	bl	800a5bc <_svfiprintf_r>
 800a294:	9b02      	ldr	r3, [sp, #8]
 800a296:	2200      	movs	r2, #0
 800a298:	701a      	strb	r2, [r3, #0]
 800a29a:	b01c      	add	sp, #112	@ 0x70
 800a29c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2a0:	b003      	add	sp, #12
 800a2a2:	4770      	bx	lr
 800a2a4:	2000017c 	.word	0x2000017c
 800a2a8:	ffff0208 	.word	0xffff0208

0800a2ac <memset>:
 800a2ac:	4402      	add	r2, r0
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d100      	bne.n	800a2b6 <memset+0xa>
 800a2b4:	4770      	bx	lr
 800a2b6:	f803 1b01 	strb.w	r1, [r3], #1
 800a2ba:	e7f9      	b.n	800a2b0 <memset+0x4>

0800a2bc <__errno>:
 800a2bc:	4b01      	ldr	r3, [pc, #4]	@ (800a2c4 <__errno+0x8>)
 800a2be:	6818      	ldr	r0, [r3, #0]
 800a2c0:	4770      	bx	lr
 800a2c2:	bf00      	nop
 800a2c4:	2000017c 	.word	0x2000017c

0800a2c8 <__libc_init_array>:
 800a2c8:	b570      	push	{r4, r5, r6, lr}
 800a2ca:	4d0d      	ldr	r5, [pc, #52]	@ (800a300 <__libc_init_array+0x38>)
 800a2cc:	4c0d      	ldr	r4, [pc, #52]	@ (800a304 <__libc_init_array+0x3c>)
 800a2ce:	1b64      	subs	r4, r4, r5
 800a2d0:	10a4      	asrs	r4, r4, #2
 800a2d2:	2600      	movs	r6, #0
 800a2d4:	42a6      	cmp	r6, r4
 800a2d6:	d109      	bne.n	800a2ec <__libc_init_array+0x24>
 800a2d8:	4d0b      	ldr	r5, [pc, #44]	@ (800a308 <__libc_init_array+0x40>)
 800a2da:	4c0c      	ldr	r4, [pc, #48]	@ (800a30c <__libc_init_array+0x44>)
 800a2dc:	f000 fc66 	bl	800abac <_init>
 800a2e0:	1b64      	subs	r4, r4, r5
 800a2e2:	10a4      	asrs	r4, r4, #2
 800a2e4:	2600      	movs	r6, #0
 800a2e6:	42a6      	cmp	r6, r4
 800a2e8:	d105      	bne.n	800a2f6 <__libc_init_array+0x2e>
 800a2ea:	bd70      	pop	{r4, r5, r6, pc}
 800a2ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2f0:	4798      	blx	r3
 800a2f2:	3601      	adds	r6, #1
 800a2f4:	e7ee      	b.n	800a2d4 <__libc_init_array+0xc>
 800a2f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2fa:	4798      	blx	r3
 800a2fc:	3601      	adds	r6, #1
 800a2fe:	e7f2      	b.n	800a2e6 <__libc_init_array+0x1e>
 800a300:	0800ac9c 	.word	0x0800ac9c
 800a304:	0800ac9c 	.word	0x0800ac9c
 800a308:	0800ac9c 	.word	0x0800ac9c
 800a30c:	0800aca0 	.word	0x0800aca0

0800a310 <__retarget_lock_acquire_recursive>:
 800a310:	4770      	bx	lr

0800a312 <__retarget_lock_release_recursive>:
 800a312:	4770      	bx	lr

0800a314 <_free_r>:
 800a314:	b538      	push	{r3, r4, r5, lr}
 800a316:	4605      	mov	r5, r0
 800a318:	2900      	cmp	r1, #0
 800a31a:	d041      	beq.n	800a3a0 <_free_r+0x8c>
 800a31c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a320:	1f0c      	subs	r4, r1, #4
 800a322:	2b00      	cmp	r3, #0
 800a324:	bfb8      	it	lt
 800a326:	18e4      	addlt	r4, r4, r3
 800a328:	f000 f8e0 	bl	800a4ec <__malloc_lock>
 800a32c:	4a1d      	ldr	r2, [pc, #116]	@ (800a3a4 <_free_r+0x90>)
 800a32e:	6813      	ldr	r3, [r2, #0]
 800a330:	b933      	cbnz	r3, 800a340 <_free_r+0x2c>
 800a332:	6063      	str	r3, [r4, #4]
 800a334:	6014      	str	r4, [r2, #0]
 800a336:	4628      	mov	r0, r5
 800a338:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a33c:	f000 b8dc 	b.w	800a4f8 <__malloc_unlock>
 800a340:	42a3      	cmp	r3, r4
 800a342:	d908      	bls.n	800a356 <_free_r+0x42>
 800a344:	6820      	ldr	r0, [r4, #0]
 800a346:	1821      	adds	r1, r4, r0
 800a348:	428b      	cmp	r3, r1
 800a34a:	bf01      	itttt	eq
 800a34c:	6819      	ldreq	r1, [r3, #0]
 800a34e:	685b      	ldreq	r3, [r3, #4]
 800a350:	1809      	addeq	r1, r1, r0
 800a352:	6021      	streq	r1, [r4, #0]
 800a354:	e7ed      	b.n	800a332 <_free_r+0x1e>
 800a356:	461a      	mov	r2, r3
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	b10b      	cbz	r3, 800a360 <_free_r+0x4c>
 800a35c:	42a3      	cmp	r3, r4
 800a35e:	d9fa      	bls.n	800a356 <_free_r+0x42>
 800a360:	6811      	ldr	r1, [r2, #0]
 800a362:	1850      	adds	r0, r2, r1
 800a364:	42a0      	cmp	r0, r4
 800a366:	d10b      	bne.n	800a380 <_free_r+0x6c>
 800a368:	6820      	ldr	r0, [r4, #0]
 800a36a:	4401      	add	r1, r0
 800a36c:	1850      	adds	r0, r2, r1
 800a36e:	4283      	cmp	r3, r0
 800a370:	6011      	str	r1, [r2, #0]
 800a372:	d1e0      	bne.n	800a336 <_free_r+0x22>
 800a374:	6818      	ldr	r0, [r3, #0]
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	6053      	str	r3, [r2, #4]
 800a37a:	4408      	add	r0, r1
 800a37c:	6010      	str	r0, [r2, #0]
 800a37e:	e7da      	b.n	800a336 <_free_r+0x22>
 800a380:	d902      	bls.n	800a388 <_free_r+0x74>
 800a382:	230c      	movs	r3, #12
 800a384:	602b      	str	r3, [r5, #0]
 800a386:	e7d6      	b.n	800a336 <_free_r+0x22>
 800a388:	6820      	ldr	r0, [r4, #0]
 800a38a:	1821      	adds	r1, r4, r0
 800a38c:	428b      	cmp	r3, r1
 800a38e:	bf04      	itt	eq
 800a390:	6819      	ldreq	r1, [r3, #0]
 800a392:	685b      	ldreq	r3, [r3, #4]
 800a394:	6063      	str	r3, [r4, #4]
 800a396:	bf04      	itt	eq
 800a398:	1809      	addeq	r1, r1, r0
 800a39a:	6021      	streq	r1, [r4, #0]
 800a39c:	6054      	str	r4, [r2, #4]
 800a39e:	e7ca      	b.n	800a336 <_free_r+0x22>
 800a3a0:	bd38      	pop	{r3, r4, r5, pc}
 800a3a2:	bf00      	nop
 800a3a4:	2000161c 	.word	0x2000161c

0800a3a8 <sbrk_aligned>:
 800a3a8:	b570      	push	{r4, r5, r6, lr}
 800a3aa:	4e0f      	ldr	r6, [pc, #60]	@ (800a3e8 <sbrk_aligned+0x40>)
 800a3ac:	460c      	mov	r4, r1
 800a3ae:	6831      	ldr	r1, [r6, #0]
 800a3b0:	4605      	mov	r5, r0
 800a3b2:	b911      	cbnz	r1, 800a3ba <sbrk_aligned+0x12>
 800a3b4:	f000 fba6 	bl	800ab04 <_sbrk_r>
 800a3b8:	6030      	str	r0, [r6, #0]
 800a3ba:	4621      	mov	r1, r4
 800a3bc:	4628      	mov	r0, r5
 800a3be:	f000 fba1 	bl	800ab04 <_sbrk_r>
 800a3c2:	1c43      	adds	r3, r0, #1
 800a3c4:	d103      	bne.n	800a3ce <sbrk_aligned+0x26>
 800a3c6:	f04f 34ff 	mov.w	r4, #4294967295
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	bd70      	pop	{r4, r5, r6, pc}
 800a3ce:	1cc4      	adds	r4, r0, #3
 800a3d0:	f024 0403 	bic.w	r4, r4, #3
 800a3d4:	42a0      	cmp	r0, r4
 800a3d6:	d0f8      	beq.n	800a3ca <sbrk_aligned+0x22>
 800a3d8:	1a21      	subs	r1, r4, r0
 800a3da:	4628      	mov	r0, r5
 800a3dc:	f000 fb92 	bl	800ab04 <_sbrk_r>
 800a3e0:	3001      	adds	r0, #1
 800a3e2:	d1f2      	bne.n	800a3ca <sbrk_aligned+0x22>
 800a3e4:	e7ef      	b.n	800a3c6 <sbrk_aligned+0x1e>
 800a3e6:	bf00      	nop
 800a3e8:	20001618 	.word	0x20001618

0800a3ec <_malloc_r>:
 800a3ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3f0:	1ccd      	adds	r5, r1, #3
 800a3f2:	f025 0503 	bic.w	r5, r5, #3
 800a3f6:	3508      	adds	r5, #8
 800a3f8:	2d0c      	cmp	r5, #12
 800a3fa:	bf38      	it	cc
 800a3fc:	250c      	movcc	r5, #12
 800a3fe:	2d00      	cmp	r5, #0
 800a400:	4606      	mov	r6, r0
 800a402:	db01      	blt.n	800a408 <_malloc_r+0x1c>
 800a404:	42a9      	cmp	r1, r5
 800a406:	d904      	bls.n	800a412 <_malloc_r+0x26>
 800a408:	230c      	movs	r3, #12
 800a40a:	6033      	str	r3, [r6, #0]
 800a40c:	2000      	movs	r0, #0
 800a40e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a412:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a4e8 <_malloc_r+0xfc>
 800a416:	f000 f869 	bl	800a4ec <__malloc_lock>
 800a41a:	f8d8 3000 	ldr.w	r3, [r8]
 800a41e:	461c      	mov	r4, r3
 800a420:	bb44      	cbnz	r4, 800a474 <_malloc_r+0x88>
 800a422:	4629      	mov	r1, r5
 800a424:	4630      	mov	r0, r6
 800a426:	f7ff ffbf 	bl	800a3a8 <sbrk_aligned>
 800a42a:	1c43      	adds	r3, r0, #1
 800a42c:	4604      	mov	r4, r0
 800a42e:	d158      	bne.n	800a4e2 <_malloc_r+0xf6>
 800a430:	f8d8 4000 	ldr.w	r4, [r8]
 800a434:	4627      	mov	r7, r4
 800a436:	2f00      	cmp	r7, #0
 800a438:	d143      	bne.n	800a4c2 <_malloc_r+0xd6>
 800a43a:	2c00      	cmp	r4, #0
 800a43c:	d04b      	beq.n	800a4d6 <_malloc_r+0xea>
 800a43e:	6823      	ldr	r3, [r4, #0]
 800a440:	4639      	mov	r1, r7
 800a442:	4630      	mov	r0, r6
 800a444:	eb04 0903 	add.w	r9, r4, r3
 800a448:	f000 fb5c 	bl	800ab04 <_sbrk_r>
 800a44c:	4581      	cmp	r9, r0
 800a44e:	d142      	bne.n	800a4d6 <_malloc_r+0xea>
 800a450:	6821      	ldr	r1, [r4, #0]
 800a452:	1a6d      	subs	r5, r5, r1
 800a454:	4629      	mov	r1, r5
 800a456:	4630      	mov	r0, r6
 800a458:	f7ff ffa6 	bl	800a3a8 <sbrk_aligned>
 800a45c:	3001      	adds	r0, #1
 800a45e:	d03a      	beq.n	800a4d6 <_malloc_r+0xea>
 800a460:	6823      	ldr	r3, [r4, #0]
 800a462:	442b      	add	r3, r5
 800a464:	6023      	str	r3, [r4, #0]
 800a466:	f8d8 3000 	ldr.w	r3, [r8]
 800a46a:	685a      	ldr	r2, [r3, #4]
 800a46c:	bb62      	cbnz	r2, 800a4c8 <_malloc_r+0xdc>
 800a46e:	f8c8 7000 	str.w	r7, [r8]
 800a472:	e00f      	b.n	800a494 <_malloc_r+0xa8>
 800a474:	6822      	ldr	r2, [r4, #0]
 800a476:	1b52      	subs	r2, r2, r5
 800a478:	d420      	bmi.n	800a4bc <_malloc_r+0xd0>
 800a47a:	2a0b      	cmp	r2, #11
 800a47c:	d917      	bls.n	800a4ae <_malloc_r+0xc2>
 800a47e:	1961      	adds	r1, r4, r5
 800a480:	42a3      	cmp	r3, r4
 800a482:	6025      	str	r5, [r4, #0]
 800a484:	bf18      	it	ne
 800a486:	6059      	strne	r1, [r3, #4]
 800a488:	6863      	ldr	r3, [r4, #4]
 800a48a:	bf08      	it	eq
 800a48c:	f8c8 1000 	streq.w	r1, [r8]
 800a490:	5162      	str	r2, [r4, r5]
 800a492:	604b      	str	r3, [r1, #4]
 800a494:	4630      	mov	r0, r6
 800a496:	f000 f82f 	bl	800a4f8 <__malloc_unlock>
 800a49a:	f104 000b 	add.w	r0, r4, #11
 800a49e:	1d23      	adds	r3, r4, #4
 800a4a0:	f020 0007 	bic.w	r0, r0, #7
 800a4a4:	1ac2      	subs	r2, r0, r3
 800a4a6:	bf1c      	itt	ne
 800a4a8:	1a1b      	subne	r3, r3, r0
 800a4aa:	50a3      	strne	r3, [r4, r2]
 800a4ac:	e7af      	b.n	800a40e <_malloc_r+0x22>
 800a4ae:	6862      	ldr	r2, [r4, #4]
 800a4b0:	42a3      	cmp	r3, r4
 800a4b2:	bf0c      	ite	eq
 800a4b4:	f8c8 2000 	streq.w	r2, [r8]
 800a4b8:	605a      	strne	r2, [r3, #4]
 800a4ba:	e7eb      	b.n	800a494 <_malloc_r+0xa8>
 800a4bc:	4623      	mov	r3, r4
 800a4be:	6864      	ldr	r4, [r4, #4]
 800a4c0:	e7ae      	b.n	800a420 <_malloc_r+0x34>
 800a4c2:	463c      	mov	r4, r7
 800a4c4:	687f      	ldr	r7, [r7, #4]
 800a4c6:	e7b6      	b.n	800a436 <_malloc_r+0x4a>
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	42a3      	cmp	r3, r4
 800a4ce:	d1fb      	bne.n	800a4c8 <_malloc_r+0xdc>
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	6053      	str	r3, [r2, #4]
 800a4d4:	e7de      	b.n	800a494 <_malloc_r+0xa8>
 800a4d6:	230c      	movs	r3, #12
 800a4d8:	6033      	str	r3, [r6, #0]
 800a4da:	4630      	mov	r0, r6
 800a4dc:	f000 f80c 	bl	800a4f8 <__malloc_unlock>
 800a4e0:	e794      	b.n	800a40c <_malloc_r+0x20>
 800a4e2:	6005      	str	r5, [r0, #0]
 800a4e4:	e7d6      	b.n	800a494 <_malloc_r+0xa8>
 800a4e6:	bf00      	nop
 800a4e8:	2000161c 	.word	0x2000161c

0800a4ec <__malloc_lock>:
 800a4ec:	4801      	ldr	r0, [pc, #4]	@ (800a4f4 <__malloc_lock+0x8>)
 800a4ee:	f7ff bf0f 	b.w	800a310 <__retarget_lock_acquire_recursive>
 800a4f2:	bf00      	nop
 800a4f4:	20001614 	.word	0x20001614

0800a4f8 <__malloc_unlock>:
 800a4f8:	4801      	ldr	r0, [pc, #4]	@ (800a500 <__malloc_unlock+0x8>)
 800a4fa:	f7ff bf0a 	b.w	800a312 <__retarget_lock_release_recursive>
 800a4fe:	bf00      	nop
 800a500:	20001614 	.word	0x20001614

0800a504 <__ssputs_r>:
 800a504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a508:	688e      	ldr	r6, [r1, #8]
 800a50a:	461f      	mov	r7, r3
 800a50c:	42be      	cmp	r6, r7
 800a50e:	680b      	ldr	r3, [r1, #0]
 800a510:	4682      	mov	sl, r0
 800a512:	460c      	mov	r4, r1
 800a514:	4690      	mov	r8, r2
 800a516:	d82d      	bhi.n	800a574 <__ssputs_r+0x70>
 800a518:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a51c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a520:	d026      	beq.n	800a570 <__ssputs_r+0x6c>
 800a522:	6965      	ldr	r5, [r4, #20]
 800a524:	6909      	ldr	r1, [r1, #16]
 800a526:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a52a:	eba3 0901 	sub.w	r9, r3, r1
 800a52e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a532:	1c7b      	adds	r3, r7, #1
 800a534:	444b      	add	r3, r9
 800a536:	106d      	asrs	r5, r5, #1
 800a538:	429d      	cmp	r5, r3
 800a53a:	bf38      	it	cc
 800a53c:	461d      	movcc	r5, r3
 800a53e:	0553      	lsls	r3, r2, #21
 800a540:	d527      	bpl.n	800a592 <__ssputs_r+0x8e>
 800a542:	4629      	mov	r1, r5
 800a544:	f7ff ff52 	bl	800a3ec <_malloc_r>
 800a548:	4606      	mov	r6, r0
 800a54a:	b360      	cbz	r0, 800a5a6 <__ssputs_r+0xa2>
 800a54c:	6921      	ldr	r1, [r4, #16]
 800a54e:	464a      	mov	r2, r9
 800a550:	f000 fae8 	bl	800ab24 <memcpy>
 800a554:	89a3      	ldrh	r3, [r4, #12]
 800a556:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a55a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a55e:	81a3      	strh	r3, [r4, #12]
 800a560:	6126      	str	r6, [r4, #16]
 800a562:	6165      	str	r5, [r4, #20]
 800a564:	444e      	add	r6, r9
 800a566:	eba5 0509 	sub.w	r5, r5, r9
 800a56a:	6026      	str	r6, [r4, #0]
 800a56c:	60a5      	str	r5, [r4, #8]
 800a56e:	463e      	mov	r6, r7
 800a570:	42be      	cmp	r6, r7
 800a572:	d900      	bls.n	800a576 <__ssputs_r+0x72>
 800a574:	463e      	mov	r6, r7
 800a576:	6820      	ldr	r0, [r4, #0]
 800a578:	4632      	mov	r2, r6
 800a57a:	4641      	mov	r1, r8
 800a57c:	f000 faa8 	bl	800aad0 <memmove>
 800a580:	68a3      	ldr	r3, [r4, #8]
 800a582:	1b9b      	subs	r3, r3, r6
 800a584:	60a3      	str	r3, [r4, #8]
 800a586:	6823      	ldr	r3, [r4, #0]
 800a588:	4433      	add	r3, r6
 800a58a:	6023      	str	r3, [r4, #0]
 800a58c:	2000      	movs	r0, #0
 800a58e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a592:	462a      	mov	r2, r5
 800a594:	f000 fad4 	bl	800ab40 <_realloc_r>
 800a598:	4606      	mov	r6, r0
 800a59a:	2800      	cmp	r0, #0
 800a59c:	d1e0      	bne.n	800a560 <__ssputs_r+0x5c>
 800a59e:	6921      	ldr	r1, [r4, #16]
 800a5a0:	4650      	mov	r0, sl
 800a5a2:	f7ff feb7 	bl	800a314 <_free_r>
 800a5a6:	230c      	movs	r3, #12
 800a5a8:	f8ca 3000 	str.w	r3, [sl]
 800a5ac:	89a3      	ldrh	r3, [r4, #12]
 800a5ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5b2:	81a3      	strh	r3, [r4, #12]
 800a5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b8:	e7e9      	b.n	800a58e <__ssputs_r+0x8a>
	...

0800a5bc <_svfiprintf_r>:
 800a5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c0:	4698      	mov	r8, r3
 800a5c2:	898b      	ldrh	r3, [r1, #12]
 800a5c4:	061b      	lsls	r3, r3, #24
 800a5c6:	b09d      	sub	sp, #116	@ 0x74
 800a5c8:	4607      	mov	r7, r0
 800a5ca:	460d      	mov	r5, r1
 800a5cc:	4614      	mov	r4, r2
 800a5ce:	d510      	bpl.n	800a5f2 <_svfiprintf_r+0x36>
 800a5d0:	690b      	ldr	r3, [r1, #16]
 800a5d2:	b973      	cbnz	r3, 800a5f2 <_svfiprintf_r+0x36>
 800a5d4:	2140      	movs	r1, #64	@ 0x40
 800a5d6:	f7ff ff09 	bl	800a3ec <_malloc_r>
 800a5da:	6028      	str	r0, [r5, #0]
 800a5dc:	6128      	str	r0, [r5, #16]
 800a5de:	b930      	cbnz	r0, 800a5ee <_svfiprintf_r+0x32>
 800a5e0:	230c      	movs	r3, #12
 800a5e2:	603b      	str	r3, [r7, #0]
 800a5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e8:	b01d      	add	sp, #116	@ 0x74
 800a5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ee:	2340      	movs	r3, #64	@ 0x40
 800a5f0:	616b      	str	r3, [r5, #20]
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5f6:	2320      	movs	r3, #32
 800a5f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a5fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a600:	2330      	movs	r3, #48	@ 0x30
 800a602:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a7a0 <_svfiprintf_r+0x1e4>
 800a606:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a60a:	f04f 0901 	mov.w	r9, #1
 800a60e:	4623      	mov	r3, r4
 800a610:	469a      	mov	sl, r3
 800a612:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a616:	b10a      	cbz	r2, 800a61c <_svfiprintf_r+0x60>
 800a618:	2a25      	cmp	r2, #37	@ 0x25
 800a61a:	d1f9      	bne.n	800a610 <_svfiprintf_r+0x54>
 800a61c:	ebba 0b04 	subs.w	fp, sl, r4
 800a620:	d00b      	beq.n	800a63a <_svfiprintf_r+0x7e>
 800a622:	465b      	mov	r3, fp
 800a624:	4622      	mov	r2, r4
 800a626:	4629      	mov	r1, r5
 800a628:	4638      	mov	r0, r7
 800a62a:	f7ff ff6b 	bl	800a504 <__ssputs_r>
 800a62e:	3001      	adds	r0, #1
 800a630:	f000 80a7 	beq.w	800a782 <_svfiprintf_r+0x1c6>
 800a634:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a636:	445a      	add	r2, fp
 800a638:	9209      	str	r2, [sp, #36]	@ 0x24
 800a63a:	f89a 3000 	ldrb.w	r3, [sl]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	f000 809f 	beq.w	800a782 <_svfiprintf_r+0x1c6>
 800a644:	2300      	movs	r3, #0
 800a646:	f04f 32ff 	mov.w	r2, #4294967295
 800a64a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a64e:	f10a 0a01 	add.w	sl, sl, #1
 800a652:	9304      	str	r3, [sp, #16]
 800a654:	9307      	str	r3, [sp, #28]
 800a656:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a65a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a65c:	4654      	mov	r4, sl
 800a65e:	2205      	movs	r2, #5
 800a660:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a664:	484e      	ldr	r0, [pc, #312]	@ (800a7a0 <_svfiprintf_r+0x1e4>)
 800a666:	f7f5 fdbb 	bl	80001e0 <memchr>
 800a66a:	9a04      	ldr	r2, [sp, #16]
 800a66c:	b9d8      	cbnz	r0, 800a6a6 <_svfiprintf_r+0xea>
 800a66e:	06d0      	lsls	r0, r2, #27
 800a670:	bf44      	itt	mi
 800a672:	2320      	movmi	r3, #32
 800a674:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a678:	0711      	lsls	r1, r2, #28
 800a67a:	bf44      	itt	mi
 800a67c:	232b      	movmi	r3, #43	@ 0x2b
 800a67e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a682:	f89a 3000 	ldrb.w	r3, [sl]
 800a686:	2b2a      	cmp	r3, #42	@ 0x2a
 800a688:	d015      	beq.n	800a6b6 <_svfiprintf_r+0xfa>
 800a68a:	9a07      	ldr	r2, [sp, #28]
 800a68c:	4654      	mov	r4, sl
 800a68e:	2000      	movs	r0, #0
 800a690:	f04f 0c0a 	mov.w	ip, #10
 800a694:	4621      	mov	r1, r4
 800a696:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a69a:	3b30      	subs	r3, #48	@ 0x30
 800a69c:	2b09      	cmp	r3, #9
 800a69e:	d94b      	bls.n	800a738 <_svfiprintf_r+0x17c>
 800a6a0:	b1b0      	cbz	r0, 800a6d0 <_svfiprintf_r+0x114>
 800a6a2:	9207      	str	r2, [sp, #28]
 800a6a4:	e014      	b.n	800a6d0 <_svfiprintf_r+0x114>
 800a6a6:	eba0 0308 	sub.w	r3, r0, r8
 800a6aa:	fa09 f303 	lsl.w	r3, r9, r3
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	9304      	str	r3, [sp, #16]
 800a6b2:	46a2      	mov	sl, r4
 800a6b4:	e7d2      	b.n	800a65c <_svfiprintf_r+0xa0>
 800a6b6:	9b03      	ldr	r3, [sp, #12]
 800a6b8:	1d19      	adds	r1, r3, #4
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	9103      	str	r1, [sp, #12]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	bfbb      	ittet	lt
 800a6c2:	425b      	neglt	r3, r3
 800a6c4:	f042 0202 	orrlt.w	r2, r2, #2
 800a6c8:	9307      	strge	r3, [sp, #28]
 800a6ca:	9307      	strlt	r3, [sp, #28]
 800a6cc:	bfb8      	it	lt
 800a6ce:	9204      	strlt	r2, [sp, #16]
 800a6d0:	7823      	ldrb	r3, [r4, #0]
 800a6d2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a6d4:	d10a      	bne.n	800a6ec <_svfiprintf_r+0x130>
 800a6d6:	7863      	ldrb	r3, [r4, #1]
 800a6d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6da:	d132      	bne.n	800a742 <_svfiprintf_r+0x186>
 800a6dc:	9b03      	ldr	r3, [sp, #12]
 800a6de:	1d1a      	adds	r2, r3, #4
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	9203      	str	r2, [sp, #12]
 800a6e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a6e8:	3402      	adds	r4, #2
 800a6ea:	9305      	str	r3, [sp, #20]
 800a6ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a7b0 <_svfiprintf_r+0x1f4>
 800a6f0:	7821      	ldrb	r1, [r4, #0]
 800a6f2:	2203      	movs	r2, #3
 800a6f4:	4650      	mov	r0, sl
 800a6f6:	f7f5 fd73 	bl	80001e0 <memchr>
 800a6fa:	b138      	cbz	r0, 800a70c <_svfiprintf_r+0x150>
 800a6fc:	9b04      	ldr	r3, [sp, #16]
 800a6fe:	eba0 000a 	sub.w	r0, r0, sl
 800a702:	2240      	movs	r2, #64	@ 0x40
 800a704:	4082      	lsls	r2, r0
 800a706:	4313      	orrs	r3, r2
 800a708:	3401      	adds	r4, #1
 800a70a:	9304      	str	r3, [sp, #16]
 800a70c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a710:	4824      	ldr	r0, [pc, #144]	@ (800a7a4 <_svfiprintf_r+0x1e8>)
 800a712:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a716:	2206      	movs	r2, #6
 800a718:	f7f5 fd62 	bl	80001e0 <memchr>
 800a71c:	2800      	cmp	r0, #0
 800a71e:	d036      	beq.n	800a78e <_svfiprintf_r+0x1d2>
 800a720:	4b21      	ldr	r3, [pc, #132]	@ (800a7a8 <_svfiprintf_r+0x1ec>)
 800a722:	bb1b      	cbnz	r3, 800a76c <_svfiprintf_r+0x1b0>
 800a724:	9b03      	ldr	r3, [sp, #12]
 800a726:	3307      	adds	r3, #7
 800a728:	f023 0307 	bic.w	r3, r3, #7
 800a72c:	3308      	adds	r3, #8
 800a72e:	9303      	str	r3, [sp, #12]
 800a730:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a732:	4433      	add	r3, r6
 800a734:	9309      	str	r3, [sp, #36]	@ 0x24
 800a736:	e76a      	b.n	800a60e <_svfiprintf_r+0x52>
 800a738:	fb0c 3202 	mla	r2, ip, r2, r3
 800a73c:	460c      	mov	r4, r1
 800a73e:	2001      	movs	r0, #1
 800a740:	e7a8      	b.n	800a694 <_svfiprintf_r+0xd8>
 800a742:	2300      	movs	r3, #0
 800a744:	3401      	adds	r4, #1
 800a746:	9305      	str	r3, [sp, #20]
 800a748:	4619      	mov	r1, r3
 800a74a:	f04f 0c0a 	mov.w	ip, #10
 800a74e:	4620      	mov	r0, r4
 800a750:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a754:	3a30      	subs	r2, #48	@ 0x30
 800a756:	2a09      	cmp	r2, #9
 800a758:	d903      	bls.n	800a762 <_svfiprintf_r+0x1a6>
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d0c6      	beq.n	800a6ec <_svfiprintf_r+0x130>
 800a75e:	9105      	str	r1, [sp, #20]
 800a760:	e7c4      	b.n	800a6ec <_svfiprintf_r+0x130>
 800a762:	fb0c 2101 	mla	r1, ip, r1, r2
 800a766:	4604      	mov	r4, r0
 800a768:	2301      	movs	r3, #1
 800a76a:	e7f0      	b.n	800a74e <_svfiprintf_r+0x192>
 800a76c:	ab03      	add	r3, sp, #12
 800a76e:	9300      	str	r3, [sp, #0]
 800a770:	462a      	mov	r2, r5
 800a772:	4b0e      	ldr	r3, [pc, #56]	@ (800a7ac <_svfiprintf_r+0x1f0>)
 800a774:	a904      	add	r1, sp, #16
 800a776:	4638      	mov	r0, r7
 800a778:	f3af 8000 	nop.w
 800a77c:	1c42      	adds	r2, r0, #1
 800a77e:	4606      	mov	r6, r0
 800a780:	d1d6      	bne.n	800a730 <_svfiprintf_r+0x174>
 800a782:	89ab      	ldrh	r3, [r5, #12]
 800a784:	065b      	lsls	r3, r3, #25
 800a786:	f53f af2d 	bmi.w	800a5e4 <_svfiprintf_r+0x28>
 800a78a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a78c:	e72c      	b.n	800a5e8 <_svfiprintf_r+0x2c>
 800a78e:	ab03      	add	r3, sp, #12
 800a790:	9300      	str	r3, [sp, #0]
 800a792:	462a      	mov	r2, r5
 800a794:	4b05      	ldr	r3, [pc, #20]	@ (800a7ac <_svfiprintf_r+0x1f0>)
 800a796:	a904      	add	r1, sp, #16
 800a798:	4638      	mov	r0, r7
 800a79a:	f000 f879 	bl	800a890 <_printf_i>
 800a79e:	e7ed      	b.n	800a77c <_svfiprintf_r+0x1c0>
 800a7a0:	0800ac60 	.word	0x0800ac60
 800a7a4:	0800ac6a 	.word	0x0800ac6a
 800a7a8:	00000000 	.word	0x00000000
 800a7ac:	0800a505 	.word	0x0800a505
 800a7b0:	0800ac66 	.word	0x0800ac66

0800a7b4 <_printf_common>:
 800a7b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7b8:	4616      	mov	r6, r2
 800a7ba:	4698      	mov	r8, r3
 800a7bc:	688a      	ldr	r2, [r1, #8]
 800a7be:	690b      	ldr	r3, [r1, #16]
 800a7c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	bfb8      	it	lt
 800a7c8:	4613      	movlt	r3, r2
 800a7ca:	6033      	str	r3, [r6, #0]
 800a7cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a7d0:	4607      	mov	r7, r0
 800a7d2:	460c      	mov	r4, r1
 800a7d4:	b10a      	cbz	r2, 800a7da <_printf_common+0x26>
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	6033      	str	r3, [r6, #0]
 800a7da:	6823      	ldr	r3, [r4, #0]
 800a7dc:	0699      	lsls	r1, r3, #26
 800a7de:	bf42      	ittt	mi
 800a7e0:	6833      	ldrmi	r3, [r6, #0]
 800a7e2:	3302      	addmi	r3, #2
 800a7e4:	6033      	strmi	r3, [r6, #0]
 800a7e6:	6825      	ldr	r5, [r4, #0]
 800a7e8:	f015 0506 	ands.w	r5, r5, #6
 800a7ec:	d106      	bne.n	800a7fc <_printf_common+0x48>
 800a7ee:	f104 0a19 	add.w	sl, r4, #25
 800a7f2:	68e3      	ldr	r3, [r4, #12]
 800a7f4:	6832      	ldr	r2, [r6, #0]
 800a7f6:	1a9b      	subs	r3, r3, r2
 800a7f8:	42ab      	cmp	r3, r5
 800a7fa:	dc26      	bgt.n	800a84a <_printf_common+0x96>
 800a7fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a800:	6822      	ldr	r2, [r4, #0]
 800a802:	3b00      	subs	r3, #0
 800a804:	bf18      	it	ne
 800a806:	2301      	movne	r3, #1
 800a808:	0692      	lsls	r2, r2, #26
 800a80a:	d42b      	bmi.n	800a864 <_printf_common+0xb0>
 800a80c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a810:	4641      	mov	r1, r8
 800a812:	4638      	mov	r0, r7
 800a814:	47c8      	blx	r9
 800a816:	3001      	adds	r0, #1
 800a818:	d01e      	beq.n	800a858 <_printf_common+0xa4>
 800a81a:	6823      	ldr	r3, [r4, #0]
 800a81c:	6922      	ldr	r2, [r4, #16]
 800a81e:	f003 0306 	and.w	r3, r3, #6
 800a822:	2b04      	cmp	r3, #4
 800a824:	bf02      	ittt	eq
 800a826:	68e5      	ldreq	r5, [r4, #12]
 800a828:	6833      	ldreq	r3, [r6, #0]
 800a82a:	1aed      	subeq	r5, r5, r3
 800a82c:	68a3      	ldr	r3, [r4, #8]
 800a82e:	bf0c      	ite	eq
 800a830:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a834:	2500      	movne	r5, #0
 800a836:	4293      	cmp	r3, r2
 800a838:	bfc4      	itt	gt
 800a83a:	1a9b      	subgt	r3, r3, r2
 800a83c:	18ed      	addgt	r5, r5, r3
 800a83e:	2600      	movs	r6, #0
 800a840:	341a      	adds	r4, #26
 800a842:	42b5      	cmp	r5, r6
 800a844:	d11a      	bne.n	800a87c <_printf_common+0xc8>
 800a846:	2000      	movs	r0, #0
 800a848:	e008      	b.n	800a85c <_printf_common+0xa8>
 800a84a:	2301      	movs	r3, #1
 800a84c:	4652      	mov	r2, sl
 800a84e:	4641      	mov	r1, r8
 800a850:	4638      	mov	r0, r7
 800a852:	47c8      	blx	r9
 800a854:	3001      	adds	r0, #1
 800a856:	d103      	bne.n	800a860 <_printf_common+0xac>
 800a858:	f04f 30ff 	mov.w	r0, #4294967295
 800a85c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a860:	3501      	adds	r5, #1
 800a862:	e7c6      	b.n	800a7f2 <_printf_common+0x3e>
 800a864:	18e1      	adds	r1, r4, r3
 800a866:	1c5a      	adds	r2, r3, #1
 800a868:	2030      	movs	r0, #48	@ 0x30
 800a86a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a86e:	4422      	add	r2, r4
 800a870:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a874:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a878:	3302      	adds	r3, #2
 800a87a:	e7c7      	b.n	800a80c <_printf_common+0x58>
 800a87c:	2301      	movs	r3, #1
 800a87e:	4622      	mov	r2, r4
 800a880:	4641      	mov	r1, r8
 800a882:	4638      	mov	r0, r7
 800a884:	47c8      	blx	r9
 800a886:	3001      	adds	r0, #1
 800a888:	d0e6      	beq.n	800a858 <_printf_common+0xa4>
 800a88a:	3601      	adds	r6, #1
 800a88c:	e7d9      	b.n	800a842 <_printf_common+0x8e>
	...

0800a890 <_printf_i>:
 800a890:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a894:	7e0f      	ldrb	r7, [r1, #24]
 800a896:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a898:	2f78      	cmp	r7, #120	@ 0x78
 800a89a:	4691      	mov	r9, r2
 800a89c:	4680      	mov	r8, r0
 800a89e:	460c      	mov	r4, r1
 800a8a0:	469a      	mov	sl, r3
 800a8a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a8a6:	d807      	bhi.n	800a8b8 <_printf_i+0x28>
 800a8a8:	2f62      	cmp	r7, #98	@ 0x62
 800a8aa:	d80a      	bhi.n	800a8c2 <_printf_i+0x32>
 800a8ac:	2f00      	cmp	r7, #0
 800a8ae:	f000 80d2 	beq.w	800aa56 <_printf_i+0x1c6>
 800a8b2:	2f58      	cmp	r7, #88	@ 0x58
 800a8b4:	f000 80b9 	beq.w	800aa2a <_printf_i+0x19a>
 800a8b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a8bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a8c0:	e03a      	b.n	800a938 <_printf_i+0xa8>
 800a8c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a8c6:	2b15      	cmp	r3, #21
 800a8c8:	d8f6      	bhi.n	800a8b8 <_printf_i+0x28>
 800a8ca:	a101      	add	r1, pc, #4	@ (adr r1, 800a8d0 <_printf_i+0x40>)
 800a8cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a8d0:	0800a929 	.word	0x0800a929
 800a8d4:	0800a93d 	.word	0x0800a93d
 800a8d8:	0800a8b9 	.word	0x0800a8b9
 800a8dc:	0800a8b9 	.word	0x0800a8b9
 800a8e0:	0800a8b9 	.word	0x0800a8b9
 800a8e4:	0800a8b9 	.word	0x0800a8b9
 800a8e8:	0800a93d 	.word	0x0800a93d
 800a8ec:	0800a8b9 	.word	0x0800a8b9
 800a8f0:	0800a8b9 	.word	0x0800a8b9
 800a8f4:	0800a8b9 	.word	0x0800a8b9
 800a8f8:	0800a8b9 	.word	0x0800a8b9
 800a8fc:	0800aa3d 	.word	0x0800aa3d
 800a900:	0800a967 	.word	0x0800a967
 800a904:	0800a9f7 	.word	0x0800a9f7
 800a908:	0800a8b9 	.word	0x0800a8b9
 800a90c:	0800a8b9 	.word	0x0800a8b9
 800a910:	0800aa5f 	.word	0x0800aa5f
 800a914:	0800a8b9 	.word	0x0800a8b9
 800a918:	0800a967 	.word	0x0800a967
 800a91c:	0800a8b9 	.word	0x0800a8b9
 800a920:	0800a8b9 	.word	0x0800a8b9
 800a924:	0800a9ff 	.word	0x0800a9ff
 800a928:	6833      	ldr	r3, [r6, #0]
 800a92a:	1d1a      	adds	r2, r3, #4
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	6032      	str	r2, [r6, #0]
 800a930:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a934:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a938:	2301      	movs	r3, #1
 800a93a:	e09d      	b.n	800aa78 <_printf_i+0x1e8>
 800a93c:	6833      	ldr	r3, [r6, #0]
 800a93e:	6820      	ldr	r0, [r4, #0]
 800a940:	1d19      	adds	r1, r3, #4
 800a942:	6031      	str	r1, [r6, #0]
 800a944:	0606      	lsls	r6, r0, #24
 800a946:	d501      	bpl.n	800a94c <_printf_i+0xbc>
 800a948:	681d      	ldr	r5, [r3, #0]
 800a94a:	e003      	b.n	800a954 <_printf_i+0xc4>
 800a94c:	0645      	lsls	r5, r0, #25
 800a94e:	d5fb      	bpl.n	800a948 <_printf_i+0xb8>
 800a950:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a954:	2d00      	cmp	r5, #0
 800a956:	da03      	bge.n	800a960 <_printf_i+0xd0>
 800a958:	232d      	movs	r3, #45	@ 0x2d
 800a95a:	426d      	negs	r5, r5
 800a95c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a960:	4859      	ldr	r0, [pc, #356]	@ (800aac8 <_printf_i+0x238>)
 800a962:	230a      	movs	r3, #10
 800a964:	e011      	b.n	800a98a <_printf_i+0xfa>
 800a966:	6821      	ldr	r1, [r4, #0]
 800a968:	6833      	ldr	r3, [r6, #0]
 800a96a:	0608      	lsls	r0, r1, #24
 800a96c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a970:	d402      	bmi.n	800a978 <_printf_i+0xe8>
 800a972:	0649      	lsls	r1, r1, #25
 800a974:	bf48      	it	mi
 800a976:	b2ad      	uxthmi	r5, r5
 800a978:	2f6f      	cmp	r7, #111	@ 0x6f
 800a97a:	4853      	ldr	r0, [pc, #332]	@ (800aac8 <_printf_i+0x238>)
 800a97c:	6033      	str	r3, [r6, #0]
 800a97e:	bf14      	ite	ne
 800a980:	230a      	movne	r3, #10
 800a982:	2308      	moveq	r3, #8
 800a984:	2100      	movs	r1, #0
 800a986:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a98a:	6866      	ldr	r6, [r4, #4]
 800a98c:	60a6      	str	r6, [r4, #8]
 800a98e:	2e00      	cmp	r6, #0
 800a990:	bfa2      	ittt	ge
 800a992:	6821      	ldrge	r1, [r4, #0]
 800a994:	f021 0104 	bicge.w	r1, r1, #4
 800a998:	6021      	strge	r1, [r4, #0]
 800a99a:	b90d      	cbnz	r5, 800a9a0 <_printf_i+0x110>
 800a99c:	2e00      	cmp	r6, #0
 800a99e:	d04b      	beq.n	800aa38 <_printf_i+0x1a8>
 800a9a0:	4616      	mov	r6, r2
 800a9a2:	fbb5 f1f3 	udiv	r1, r5, r3
 800a9a6:	fb03 5711 	mls	r7, r3, r1, r5
 800a9aa:	5dc7      	ldrb	r7, [r0, r7]
 800a9ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a9b0:	462f      	mov	r7, r5
 800a9b2:	42bb      	cmp	r3, r7
 800a9b4:	460d      	mov	r5, r1
 800a9b6:	d9f4      	bls.n	800a9a2 <_printf_i+0x112>
 800a9b8:	2b08      	cmp	r3, #8
 800a9ba:	d10b      	bne.n	800a9d4 <_printf_i+0x144>
 800a9bc:	6823      	ldr	r3, [r4, #0]
 800a9be:	07df      	lsls	r7, r3, #31
 800a9c0:	d508      	bpl.n	800a9d4 <_printf_i+0x144>
 800a9c2:	6923      	ldr	r3, [r4, #16]
 800a9c4:	6861      	ldr	r1, [r4, #4]
 800a9c6:	4299      	cmp	r1, r3
 800a9c8:	bfde      	ittt	le
 800a9ca:	2330      	movle	r3, #48	@ 0x30
 800a9cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a9d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a9d4:	1b92      	subs	r2, r2, r6
 800a9d6:	6122      	str	r2, [r4, #16]
 800a9d8:	f8cd a000 	str.w	sl, [sp]
 800a9dc:	464b      	mov	r3, r9
 800a9de:	aa03      	add	r2, sp, #12
 800a9e0:	4621      	mov	r1, r4
 800a9e2:	4640      	mov	r0, r8
 800a9e4:	f7ff fee6 	bl	800a7b4 <_printf_common>
 800a9e8:	3001      	adds	r0, #1
 800a9ea:	d14a      	bne.n	800aa82 <_printf_i+0x1f2>
 800a9ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a9f0:	b004      	add	sp, #16
 800a9f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9f6:	6823      	ldr	r3, [r4, #0]
 800a9f8:	f043 0320 	orr.w	r3, r3, #32
 800a9fc:	6023      	str	r3, [r4, #0]
 800a9fe:	4833      	ldr	r0, [pc, #204]	@ (800aacc <_printf_i+0x23c>)
 800aa00:	2778      	movs	r7, #120	@ 0x78
 800aa02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aa06:	6823      	ldr	r3, [r4, #0]
 800aa08:	6831      	ldr	r1, [r6, #0]
 800aa0a:	061f      	lsls	r7, r3, #24
 800aa0c:	f851 5b04 	ldr.w	r5, [r1], #4
 800aa10:	d402      	bmi.n	800aa18 <_printf_i+0x188>
 800aa12:	065f      	lsls	r7, r3, #25
 800aa14:	bf48      	it	mi
 800aa16:	b2ad      	uxthmi	r5, r5
 800aa18:	6031      	str	r1, [r6, #0]
 800aa1a:	07d9      	lsls	r1, r3, #31
 800aa1c:	bf44      	itt	mi
 800aa1e:	f043 0320 	orrmi.w	r3, r3, #32
 800aa22:	6023      	strmi	r3, [r4, #0]
 800aa24:	b11d      	cbz	r5, 800aa2e <_printf_i+0x19e>
 800aa26:	2310      	movs	r3, #16
 800aa28:	e7ac      	b.n	800a984 <_printf_i+0xf4>
 800aa2a:	4827      	ldr	r0, [pc, #156]	@ (800aac8 <_printf_i+0x238>)
 800aa2c:	e7e9      	b.n	800aa02 <_printf_i+0x172>
 800aa2e:	6823      	ldr	r3, [r4, #0]
 800aa30:	f023 0320 	bic.w	r3, r3, #32
 800aa34:	6023      	str	r3, [r4, #0]
 800aa36:	e7f6      	b.n	800aa26 <_printf_i+0x196>
 800aa38:	4616      	mov	r6, r2
 800aa3a:	e7bd      	b.n	800a9b8 <_printf_i+0x128>
 800aa3c:	6833      	ldr	r3, [r6, #0]
 800aa3e:	6825      	ldr	r5, [r4, #0]
 800aa40:	6961      	ldr	r1, [r4, #20]
 800aa42:	1d18      	adds	r0, r3, #4
 800aa44:	6030      	str	r0, [r6, #0]
 800aa46:	062e      	lsls	r6, r5, #24
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	d501      	bpl.n	800aa50 <_printf_i+0x1c0>
 800aa4c:	6019      	str	r1, [r3, #0]
 800aa4e:	e002      	b.n	800aa56 <_printf_i+0x1c6>
 800aa50:	0668      	lsls	r0, r5, #25
 800aa52:	d5fb      	bpl.n	800aa4c <_printf_i+0x1bc>
 800aa54:	8019      	strh	r1, [r3, #0]
 800aa56:	2300      	movs	r3, #0
 800aa58:	6123      	str	r3, [r4, #16]
 800aa5a:	4616      	mov	r6, r2
 800aa5c:	e7bc      	b.n	800a9d8 <_printf_i+0x148>
 800aa5e:	6833      	ldr	r3, [r6, #0]
 800aa60:	1d1a      	adds	r2, r3, #4
 800aa62:	6032      	str	r2, [r6, #0]
 800aa64:	681e      	ldr	r6, [r3, #0]
 800aa66:	6862      	ldr	r2, [r4, #4]
 800aa68:	2100      	movs	r1, #0
 800aa6a:	4630      	mov	r0, r6
 800aa6c:	f7f5 fbb8 	bl	80001e0 <memchr>
 800aa70:	b108      	cbz	r0, 800aa76 <_printf_i+0x1e6>
 800aa72:	1b80      	subs	r0, r0, r6
 800aa74:	6060      	str	r0, [r4, #4]
 800aa76:	6863      	ldr	r3, [r4, #4]
 800aa78:	6123      	str	r3, [r4, #16]
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa80:	e7aa      	b.n	800a9d8 <_printf_i+0x148>
 800aa82:	6923      	ldr	r3, [r4, #16]
 800aa84:	4632      	mov	r2, r6
 800aa86:	4649      	mov	r1, r9
 800aa88:	4640      	mov	r0, r8
 800aa8a:	47d0      	blx	sl
 800aa8c:	3001      	adds	r0, #1
 800aa8e:	d0ad      	beq.n	800a9ec <_printf_i+0x15c>
 800aa90:	6823      	ldr	r3, [r4, #0]
 800aa92:	079b      	lsls	r3, r3, #30
 800aa94:	d413      	bmi.n	800aabe <_printf_i+0x22e>
 800aa96:	68e0      	ldr	r0, [r4, #12]
 800aa98:	9b03      	ldr	r3, [sp, #12]
 800aa9a:	4298      	cmp	r0, r3
 800aa9c:	bfb8      	it	lt
 800aa9e:	4618      	movlt	r0, r3
 800aaa0:	e7a6      	b.n	800a9f0 <_printf_i+0x160>
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	4632      	mov	r2, r6
 800aaa6:	4649      	mov	r1, r9
 800aaa8:	4640      	mov	r0, r8
 800aaaa:	47d0      	blx	sl
 800aaac:	3001      	adds	r0, #1
 800aaae:	d09d      	beq.n	800a9ec <_printf_i+0x15c>
 800aab0:	3501      	adds	r5, #1
 800aab2:	68e3      	ldr	r3, [r4, #12]
 800aab4:	9903      	ldr	r1, [sp, #12]
 800aab6:	1a5b      	subs	r3, r3, r1
 800aab8:	42ab      	cmp	r3, r5
 800aaba:	dcf2      	bgt.n	800aaa2 <_printf_i+0x212>
 800aabc:	e7eb      	b.n	800aa96 <_printf_i+0x206>
 800aabe:	2500      	movs	r5, #0
 800aac0:	f104 0619 	add.w	r6, r4, #25
 800aac4:	e7f5      	b.n	800aab2 <_printf_i+0x222>
 800aac6:	bf00      	nop
 800aac8:	0800ac71 	.word	0x0800ac71
 800aacc:	0800ac82 	.word	0x0800ac82

0800aad0 <memmove>:
 800aad0:	4288      	cmp	r0, r1
 800aad2:	b510      	push	{r4, lr}
 800aad4:	eb01 0402 	add.w	r4, r1, r2
 800aad8:	d902      	bls.n	800aae0 <memmove+0x10>
 800aada:	4284      	cmp	r4, r0
 800aadc:	4623      	mov	r3, r4
 800aade:	d807      	bhi.n	800aaf0 <memmove+0x20>
 800aae0:	1e43      	subs	r3, r0, #1
 800aae2:	42a1      	cmp	r1, r4
 800aae4:	d008      	beq.n	800aaf8 <memmove+0x28>
 800aae6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aaea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aaee:	e7f8      	b.n	800aae2 <memmove+0x12>
 800aaf0:	4402      	add	r2, r0
 800aaf2:	4601      	mov	r1, r0
 800aaf4:	428a      	cmp	r2, r1
 800aaf6:	d100      	bne.n	800aafa <memmove+0x2a>
 800aaf8:	bd10      	pop	{r4, pc}
 800aafa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aafe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab02:	e7f7      	b.n	800aaf4 <memmove+0x24>

0800ab04 <_sbrk_r>:
 800ab04:	b538      	push	{r3, r4, r5, lr}
 800ab06:	4d06      	ldr	r5, [pc, #24]	@ (800ab20 <_sbrk_r+0x1c>)
 800ab08:	2300      	movs	r3, #0
 800ab0a:	4604      	mov	r4, r0
 800ab0c:	4608      	mov	r0, r1
 800ab0e:	602b      	str	r3, [r5, #0]
 800ab10:	f7f6 f964 	bl	8000ddc <_sbrk>
 800ab14:	1c43      	adds	r3, r0, #1
 800ab16:	d102      	bne.n	800ab1e <_sbrk_r+0x1a>
 800ab18:	682b      	ldr	r3, [r5, #0]
 800ab1a:	b103      	cbz	r3, 800ab1e <_sbrk_r+0x1a>
 800ab1c:	6023      	str	r3, [r4, #0]
 800ab1e:	bd38      	pop	{r3, r4, r5, pc}
 800ab20:	20001610 	.word	0x20001610

0800ab24 <memcpy>:
 800ab24:	440a      	add	r2, r1
 800ab26:	4291      	cmp	r1, r2
 800ab28:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab2c:	d100      	bne.n	800ab30 <memcpy+0xc>
 800ab2e:	4770      	bx	lr
 800ab30:	b510      	push	{r4, lr}
 800ab32:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab36:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab3a:	4291      	cmp	r1, r2
 800ab3c:	d1f9      	bne.n	800ab32 <memcpy+0xe>
 800ab3e:	bd10      	pop	{r4, pc}

0800ab40 <_realloc_r>:
 800ab40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab44:	4680      	mov	r8, r0
 800ab46:	4615      	mov	r5, r2
 800ab48:	460c      	mov	r4, r1
 800ab4a:	b921      	cbnz	r1, 800ab56 <_realloc_r+0x16>
 800ab4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab50:	4611      	mov	r1, r2
 800ab52:	f7ff bc4b 	b.w	800a3ec <_malloc_r>
 800ab56:	b92a      	cbnz	r2, 800ab64 <_realloc_r+0x24>
 800ab58:	f7ff fbdc 	bl	800a314 <_free_r>
 800ab5c:	2400      	movs	r4, #0
 800ab5e:	4620      	mov	r0, r4
 800ab60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab64:	f000 f81a 	bl	800ab9c <_malloc_usable_size_r>
 800ab68:	4285      	cmp	r5, r0
 800ab6a:	4606      	mov	r6, r0
 800ab6c:	d802      	bhi.n	800ab74 <_realloc_r+0x34>
 800ab6e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ab72:	d8f4      	bhi.n	800ab5e <_realloc_r+0x1e>
 800ab74:	4629      	mov	r1, r5
 800ab76:	4640      	mov	r0, r8
 800ab78:	f7ff fc38 	bl	800a3ec <_malloc_r>
 800ab7c:	4607      	mov	r7, r0
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	d0ec      	beq.n	800ab5c <_realloc_r+0x1c>
 800ab82:	42b5      	cmp	r5, r6
 800ab84:	462a      	mov	r2, r5
 800ab86:	4621      	mov	r1, r4
 800ab88:	bf28      	it	cs
 800ab8a:	4632      	movcs	r2, r6
 800ab8c:	f7ff ffca 	bl	800ab24 <memcpy>
 800ab90:	4621      	mov	r1, r4
 800ab92:	4640      	mov	r0, r8
 800ab94:	f7ff fbbe 	bl	800a314 <_free_r>
 800ab98:	463c      	mov	r4, r7
 800ab9a:	e7e0      	b.n	800ab5e <_realloc_r+0x1e>

0800ab9c <_malloc_usable_size_r>:
 800ab9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aba0:	1f18      	subs	r0, r3, #4
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	bfbc      	itt	lt
 800aba6:	580b      	ldrlt	r3, [r1, r0]
 800aba8:	18c0      	addlt	r0, r0, r3
 800abaa:	4770      	bx	lr

0800abac <_init>:
 800abac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abae:	bf00      	nop
 800abb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abb2:	bc08      	pop	{r3}
 800abb4:	469e      	mov	lr, r3
 800abb6:	4770      	bx	lr

0800abb8 <_fini>:
 800abb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abba:	bf00      	nop
 800abbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abbe:	bc08      	pop	{r3}
 800abc0:	469e      	mov	lr, r3
 800abc2:	4770      	bx	lr
