
PlsWork.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cee8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  0800d078  0800d078  0000e078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d390  0800d390  0000f1d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d390  0800d390  0000e390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d398  0800d398  0000f1d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d398  0800d398  0000e398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d39c  0800d39c  0000e39c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d0  20000000  0800d3a0  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f1d0  2**0
                  CONTENTS
 10 .bss          00000a84  200001d0  200001d0  0000f1d0  2**2
                  ALLOC
 11 ._user_heap_stack 00006004  20000c54  20000c54  0000f1d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f1d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001237a  00000000  00000000  0000f200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031d2  00000000  00000000  0002157a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb0  00000000  00000000  00024750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bd7  00000000  00000000  00025700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fb89  00000000  00000000  000262d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016103  00000000  00000000  00045e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b1176  00000000  00000000  0005bf63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010d0d9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a20  00000000  00000000  0010d11c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  00111b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d0 	.word	0x200001d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d060 	.word	0x0800d060

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	0800d060 	.word	0x0800d060

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <Error>:
#include <math.h>
extern SPI_HandleTypeDef hspi1;
extern I2C_HandleTypeDef hi2c1;

void Error(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_9,GPIO_PIN_SET);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c42:	4802      	ldr	r0, [pc, #8]	@ (8000c4c <Error+0x14>)
 8000c44:	f002 f8da 	bl	8002dfc <HAL_GPIO_WritePin>
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	48001000 	.word	0x48001000

08000c50 <Success>:

void Success(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c5a:	4802      	ldr	r0, [pc, #8]	@ (8000c64 <Success+0x14>)
 8000c5c:	f002 f8ce 	bl	8002dfc <HAL_GPIO_WritePin>
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	48001000 	.word	0x48001000

08000c68 <I2C_Read>:

static uint8_t I2C_Read(uint16_t Addr, uint8_t Reg)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af04      	add	r7, sp, #16
 8000c6e:	4603      	mov	r3, r0
 8000c70:	460a      	mov	r2, r1
 8000c72:	80fb      	strh	r3, [r7, #6]
 8000c74:	4613      	mov	r3, r2
 8000c76:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_OK;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	73fb      	strb	r3, [r7, #15]
	uint8_t value = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8000c80:	797b      	ldrb	r3, [r7, #5]
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	88f9      	ldrh	r1, [r7, #6]
 8000c86:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c8a:	9302      	str	r3, [sp, #8]
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	9301      	str	r3, [sp, #4]
 8000c90:	f107 030e 	add.w	r3, r7, #14
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	2301      	movs	r3, #1
 8000c98:	4808      	ldr	r0, [pc, #32]	@ (8000cbc <I2C_Read+0x54>)
 8000c9a:	f002 fa8f 	bl	80031bc <HAL_I2C_Mem_Read>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) Error();
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d002      	beq.n	8000cae <I2C_Read+0x46>
 8000ca8:	f7ff ffc6 	bl	8000c38 <Error>
 8000cac:	e001      	b.n	8000cb2 <I2C_Read+0x4a>
	else Success();
 8000cae:	f7ff ffcf 	bl	8000c50 <Success>
	return value;
 8000cb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	200001ec 	.word	0x200001ec

08000cc0 <I2C_Write>:

static void I2C_Write(uint16_t Addr, uint8_t Reg,  uint8_t Value)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b088      	sub	sp, #32
 8000cc4:	af04      	add	r7, sp, #16
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	80fb      	strh	r3, [r7, #6]
 8000cca:	460b      	mov	r3, r1
 8000ccc:	717b      	strb	r3, [r7, #5]
 8000cce:	4613      	mov	r3, r2
 8000cd0:	713b      	strb	r3, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Mem_Write(&hi2c1, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
 8000cd6:	797b      	ldrb	r3, [r7, #5]
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	88f9      	ldrh	r1, [r7, #6]
 8000cdc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ce0:	9302      	str	r3, [sp, #8]
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	9301      	str	r3, [sp, #4]
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	2301      	movs	r3, #1
 8000cec:	4808      	ldr	r0, [pc, #32]	@ (8000d10 <I2C_Write+0x50>)
 8000cee:	f002 f951 	bl	8002f94 <HAL_I2C_Mem_Write>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) Error();
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d002      	beq.n	8000d02 <I2C_Write+0x42>
 8000cfc:	f7ff ff9c 	bl	8000c38 <Error>
	else Success();
}
 8000d00:	e001      	b.n	8000d06 <I2C_Write+0x46>
	else Success();
 8000d02:	f7ff ffa5 	bl	8000c50 <Success>
}
 8000d06:	bf00      	nop
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200001ec 	.word	0x200001ec

08000d14 <I2C_ReadID>:

uint8_t I2C_ReadID(uint16_t Addr)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	80fb      	strh	r3, [r7, #6]
	uint8_t ctrl = 0x00;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	73fb      	strb	r3, [r7, #15]
	ctrl = I2C_Read(Addr, 0x0F);
 8000d22:	88fb      	ldrh	r3, [r7, #6]
 8000d24:	210f      	movs	r1, #15
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff ff9e 	bl	8000c68 <I2C_Read>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	73fb      	strb	r3, [r7, #15]
	return ctrl;
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <Accel_Ini>:

void Accel_Ini(void)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
	uint8_t ctrl;
	if (I2C_ReadID(0x33)==0x33)
 8000d40:	2033      	movs	r0, #51	@ 0x33
 8000d42:	f7ff ffe7 	bl	8000d14 <I2C_ReadID>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b33      	cmp	r3, #51	@ 0x33
 8000d4a:	d11f      	bne.n	8000d8c <Accel_Ini+0x52>
	{
		ctrl=0b10010111;
 8000d4c:	2397      	movs	r3, #151	@ 0x97
 8000d4e:	71fb      	strb	r3, [r7, #7]
		I2C_Write(0x32,0x20,ctrl);
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	461a      	mov	r2, r3
 8000d54:	2120      	movs	r1, #32
 8000d56:	2032      	movs	r0, #50	@ 0x32
 8000d58:	f7ff ffb2 	bl	8000cc0 <I2C_Write>
		ctrl=0b00010000;
 8000d5c:	2310      	movs	r3, #16
 8000d5e:	71fb      	strb	r3, [r7, #7]
		I2C_Write(0x32,0x22,ctrl);
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	461a      	mov	r2, r3
 8000d64:	2122      	movs	r1, #34	@ 0x22
 8000d66:	2032      	movs	r0, #50	@ 0x32
 8000d68:	f7ff ffaa 	bl	8000cc0 <I2C_Write>
		ctrl=0b00001000;
 8000d6c:	2308      	movs	r3, #8
 8000d6e:	71fb      	strb	r3, [r7, #7]
		I2C_Write(0x32,0x23,ctrl);
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	461a      	mov	r2, r3
 8000d74:	2123      	movs	r1, #35	@ 0x23
 8000d76:	2032      	movs	r0, #50	@ 0x32
 8000d78:	f7ff ffa2 	bl	8000cc0 <I2C_Write>
		ctrl=0b00000000;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	71fb      	strb	r3, [r7, #7]
		I2C_Write(0x32,0x25,ctrl);
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	461a      	mov	r2, r3
 8000d84:	2125      	movs	r1, #37	@ 0x25
 8000d86:	2032      	movs	r0, #50	@ 0x32
 8000d88:	f7ff ff9a 	bl	8000cc0 <I2C_Write>
	}
	HAL_Delay(500);
 8000d8c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d90:	f001 fd84 	bl	800289c <HAL_Delay>
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <Accel_GetXYZ>:

void Accel_GetXYZ(int16_t* pData)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	uint8_t buffer[6];
	uint8_t i=0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	73fb      	strb	r3, [r7, #15]

	buffer[0] = I2C_Read(0x32,0x28);
 8000da8:	2128      	movs	r1, #40	@ 0x28
 8000daa:	2032      	movs	r0, #50	@ 0x32
 8000dac:	f7ff ff5c 	bl	8000c68 <I2C_Read>
 8000db0:	4603      	mov	r3, r0
 8000db2:	723b      	strb	r3, [r7, #8]
	buffer[1] = I2C_Read(0x32,0x29);
 8000db4:	2129      	movs	r1, #41	@ 0x29
 8000db6:	2032      	movs	r0, #50	@ 0x32
 8000db8:	f7ff ff56 	bl	8000c68 <I2C_Read>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	727b      	strb	r3, [r7, #9]
	buffer[2] = I2C_Read(0x32,0x2A);
 8000dc0:	212a      	movs	r1, #42	@ 0x2a
 8000dc2:	2032      	movs	r0, #50	@ 0x32
 8000dc4:	f7ff ff50 	bl	8000c68 <I2C_Read>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	72bb      	strb	r3, [r7, #10]
	buffer[3] = I2C_Read(0x32,0x2B);
 8000dcc:	212b      	movs	r1, #43	@ 0x2b
 8000dce:	2032      	movs	r0, #50	@ 0x32
 8000dd0:	f7ff ff4a 	bl	8000c68 <I2C_Read>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	72fb      	strb	r3, [r7, #11]
	buffer[4] = I2C_Read(0x32,0x2C);
 8000dd8:	212c      	movs	r1, #44	@ 0x2c
 8000dda:	2032      	movs	r0, #50	@ 0x32
 8000ddc:	f7ff ff44 	bl	8000c68 <I2C_Read>
 8000de0:	4603      	mov	r3, r0
 8000de2:	733b      	strb	r3, [r7, #12]
	buffer[5] = I2C_Read(0x32,0x2D);
 8000de4:	212d      	movs	r1, #45	@ 0x2d
 8000de6:	2032      	movs	r0, #50	@ 0x32
 8000de8:	f7ff ff3e 	bl	8000c68 <I2C_Read>
 8000dec:	4603      	mov	r3, r0
 8000dee:	737b      	strb	r3, [r7, #13]

	for(i=0;i<3;i++)
 8000df0:	2300      	movs	r3, #0
 8000df2:	73fb      	strb	r3, [r7, #15]
 8000df4:	e019      	b.n	8000e2a <Accel_GetXYZ+0x8e>
	{
		pData[i]=((int16_t)((uint16_t)buffer[2*i+1]<<8)+buffer[2*i]);
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	3310      	adds	r3, #16
 8000dfe:	443b      	add	r3, r7
 8000e00:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000e04:	021b      	lsls	r3, r3, #8
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	7bfa      	ldrb	r2, [r7, #15]
 8000e0a:	0052      	lsls	r2, r2, #1
 8000e0c:	3210      	adds	r2, #16
 8000e0e:	443a      	add	r2, r7
 8000e10:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000e14:	4413      	add	r3, r2
 8000e16:	b299      	uxth	r1, r3
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	4413      	add	r3, r2
 8000e20:	b20a      	sxth	r2, r1
 8000e22:	801a      	strh	r2, [r3, #0]
	for(i=0;i<3;i++)
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	3301      	adds	r3, #1
 8000e28:	73fb      	strb	r3, [r7, #15]
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d9e2      	bls.n	8000df6 <Accel_GetXYZ+0x5a>
	}
}
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <SPIx_WriteRead>:

uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af02      	add	r7, sp, #8
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	73fb      	strb	r3, [r7, #15]
	if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 8000e4a:	f107 020f 	add.w	r2, r7, #15
 8000e4e:	1df9      	adds	r1, r7, #7
 8000e50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e54:	9300      	str	r3, [sp, #0]
 8000e56:	2301      	movs	r3, #1
 8000e58:	4807      	ldr	r0, [pc, #28]	@ (8000e78 <SPIx_WriteRead+0x3c>)
 8000e5a:	f005 ff3c 	bl	8006cd6 <HAL_SPI_TransmitReceive>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d002      	beq.n	8000e6a <SPIx_WriteRead+0x2e>
	{
		Error();
 8000e64:	f7ff fee8 	bl	8000c38 <Error>
 8000e68:	e001      	b.n	8000e6e <SPIx_WriteRead+0x32>
	}
	else
	{
		Success();
 8000e6a:	f7ff fef1 	bl	8000c50 <Success>
	}
}
 8000e6e:	bf00      	nop
 8000e70:	4618      	mov	r0, r3
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000240 	.word	0x20000240

08000e7c <Gyro_IO_Read>:

void Gyro_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	70fb      	strb	r3, [r7, #3]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	803b      	strh	r3, [r7, #0]
	if(NumByteToRead>0x01)
 8000e8c:	883b      	ldrh	r3, [r7, #0]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d904      	bls.n	8000e9c <Gyro_IO_Read+0x20>
	{
		ReadAddr |= (uint8_t) (READWRITE_CMD | MULTIPLEBYTE_CMD);
 8000e92:	78fb      	ldrb	r3, [r7, #3]
 8000e94:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8000e98:	70fb      	strb	r3, [r7, #3]
 8000e9a:	e003      	b.n	8000ea4 <Gyro_IO_Read+0x28>
	}
	else
	{
		ReadAddr |= (uint8_t)READWRITE_CMD;
 8000e9c:	78fb      	ldrb	r3, [r7, #3]
 8000e9e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ea2:	70fb      	strb	r3, [r7, #3]
	}
	CS_ON;
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2108      	movs	r1, #8
 8000ea8:	4810      	ldr	r0, [pc, #64]	@ (8000eec <Gyro_IO_Read+0x70>)
 8000eaa:	f001 ffa7 	bl	8002dfc <HAL_GPIO_WritePin>
	SPIx_WriteRead(ReadAddr);
 8000eae:	78fb      	ldrb	r3, [r7, #3]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ffc3 	bl	8000e3c <SPIx_WriteRead>
	while(NumByteToRead > 0x00)
 8000eb6:	e00c      	b.n	8000ed2 <Gyro_IO_Read+0x56>
	{
		*pBuffer=SPIx_WriteRead(DUMMY_BYTE);
 8000eb8:	2000      	movs	r0, #0
 8000eba:	f7ff ffbf 	bl	8000e3c <SPIx_WriteRead>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	701a      	strb	r2, [r3, #0]
		NumByteToRead--;
 8000ec6:	883b      	ldrh	r3, [r7, #0]
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	803b      	strh	r3, [r7, #0]
		pBuffer++;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	607b      	str	r3, [r7, #4]
	while(NumByteToRead > 0x00)
 8000ed2:	883b      	ldrh	r3, [r7, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d1ef      	bne.n	8000eb8 <Gyro_IO_Read+0x3c>
	}
	CS_OFF;
 8000ed8:	2201      	movs	r2, #1
 8000eda:	2108      	movs	r1, #8
 8000edc:	4803      	ldr	r0, [pc, #12]	@ (8000eec <Gyro_IO_Read+0x70>)
 8000ede:	f001 ff8d 	bl	8002dfc <HAL_GPIO_WritePin>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	48001000 	.word	0x48001000

08000ef0 <Gyro_IO_Write>:

void Gyro_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	70fb      	strb	r3, [r7, #3]
 8000efc:	4613      	mov	r3, r2
 8000efe:	803b      	strh	r3, [r7, #0]
	CS_OFF;
 8000f00:	2201      	movs	r2, #1
 8000f02:	2108      	movs	r1, #8
 8000f04:	4815      	ldr	r0, [pc, #84]	@ (8000f5c <Gyro_IO_Write+0x6c>)
 8000f06:	f001 ff79 	bl	8002dfc <HAL_GPIO_WritePin>
	if(NumByteToWrite>0x01)
 8000f0a:	883b      	ldrh	r3, [r7, #0]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d903      	bls.n	8000f18 <Gyro_IO_Write+0x28>
	{
		WriteAddr |= (uint8_t) MULTIPLEBYTE_CMD;
 8000f10:	78fb      	ldrb	r3, [r7, #3]
 8000f12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f16:	70fb      	strb	r3, [r7, #3]
	}
	CS_ON;
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2108      	movs	r1, #8
 8000f1c:	480f      	ldr	r0, [pc, #60]	@ (8000f5c <Gyro_IO_Write+0x6c>)
 8000f1e:	f001 ff6d 	bl	8002dfc <HAL_GPIO_WritePin>
	SPIx_WriteRead(WriteAddr);
 8000f22:	78fb      	ldrb	r3, [r7, #3]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff89 	bl	8000e3c <SPIx_WriteRead>
	while(NumByteToWrite > 0x00)
 8000f2a:	e00a      	b.n	8000f42 <Gyro_IO_Write+0x52>
	{
		SPIx_WriteRead(*pBuffer);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff ff83 	bl	8000e3c <SPIx_WriteRead>
		NumByteToWrite--;
 8000f36:	883b      	ldrh	r3, [r7, #0]
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	803b      	strh	r3, [r7, #0]
		pBuffer++;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	607b      	str	r3, [r7, #4]
	while(NumByteToWrite > 0x00)
 8000f42:	883b      	ldrh	r3, [r7, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d1f1      	bne.n	8000f2c <Gyro_IO_Write+0x3c>
	}
	CS_OFF;
 8000f48:	2201      	movs	r2, #1
 8000f4a:	2108      	movs	r1, #8
 8000f4c:	4803      	ldr	r0, [pc, #12]	@ (8000f5c <Gyro_IO_Write+0x6c>)
 8000f4e:	f001 ff55 	bl	8002dfc <HAL_GPIO_WritePin>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	48001000 	.word	0x48001000

08000f60 <Gyro_ReadID>:

uint8_t Gyro_ReadID(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
	uint8_t ctrl = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	71fb      	strb	r3, [r7, #7]
	Gyro_IO_Read(&ctrl,0x0F,1);
 8000f6a:	1dfb      	adds	r3, r7, #7
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	210f      	movs	r1, #15
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff ff83 	bl	8000e7c <Gyro_IO_Read>
	return ctrl;
 8000f76:	79fb      	ldrb	r3, [r7, #7]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <Gyro_Ini>:

void Gyro_Ini(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
	uint8_t ctrl = 0x00;
 8000f86:	2300      	movs	r3, #0
 8000f88:	71fb      	strb	r3, [r7, #7]

	if(Gyro_ReadID() == 0xD4)
 8000f8a:	f7ff ffe9 	bl	8000f60 <Gyro_ReadID>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2bd4      	cmp	r3, #212	@ 0xd4
 8000f92:	d128      	bne.n	8000fe6 <Gyro_Ini+0x66>
	{
		ctrl=0b01111111;
 8000f94:	237f      	movs	r3, #127	@ 0x7f
 8000f96:	71fb      	strb	r3, [r7, #7]
		Gyro_IO_Write(&ctrl, 0x20,1);
 8000f98:	1dfb      	adds	r3, r7, #7
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	2120      	movs	r1, #32
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff ffa6 	bl	8000ef0 <Gyro_IO_Write>
		ctrl=0b00000000;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	71fb      	strb	r3, [r7, #7]
		Gyro_IO_Write(&ctrl, 0x21,1);
 8000fa8:	1dfb      	adds	r3, r7, #7
 8000faa:	2201      	movs	r2, #1
 8000fac:	2121      	movs	r1, #33	@ 0x21
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ff9e 	bl	8000ef0 <Gyro_IO_Write>

		ctrl=0b00001000;
 8000fb4:	2308      	movs	r3, #8
 8000fb6:	71fb      	strb	r3, [r7, #7]
		Gyro_IO_Write(&ctrl, 0x22,1);
 8000fb8:	1dfb      	adds	r3, r7, #7
 8000fba:	2201      	movs	r2, #1
 8000fbc:	2122      	movs	r1, #34	@ 0x22
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff ff96 	bl	8000ef0 <Gyro_IO_Write>

		ctrl=0b00010000;
 8000fc4:	2310      	movs	r3, #16
 8000fc6:	71fb      	strb	r3, [r7, #7]
		Gyro_IO_Write(&ctrl, 0x23,1);
 8000fc8:	1dfb      	adds	r3, r7, #7
 8000fca:	2201      	movs	r2, #1
 8000fcc:	2123      	movs	r1, #35	@ 0x23
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff ff8e 	bl	8000ef0 <Gyro_IO_Write>
		ctrl=0b00010000;
 8000fd4:	2310      	movs	r3, #16
 8000fd6:	71fb      	strb	r3, [r7, #7]
		Gyro_IO_Write(&ctrl, 0x24,1);
 8000fd8:	1dfb      	adds	r3, r7, #7
 8000fda:	2201      	movs	r2, #1
 8000fdc:	2124      	movs	r1, #36	@ 0x24
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff ff86 	bl	8000ef0 <Gyro_IO_Write>
 8000fe4:	e001      	b.n	8000fea <Gyro_Ini+0x6a>
	}
	else Error();
 8000fe6:	f7ff fe27 	bl	8000c38 <Error>
	HAL_Delay(500);
 8000fea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fee:	f001 fc55 	bl	800289c <HAL_Delay>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <Gyro_GetXYZ>:

void Gyro_GetXYZ(int16_t* pData)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b086      	sub	sp, #24
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
	uint8_t buffer[6];
	float valueinfloat = 0;
 8001002:	f04f 0300 	mov.w	r3, #0
 8001006:	613b      	str	r3, [r7, #16]

	Gyro_IO_Read((uint8_t*)&buffer[0], 0x28,1);
 8001008:	f107 0308 	add.w	r3, r7, #8
 800100c:	2201      	movs	r2, #1
 800100e:	2128      	movs	r1, #40	@ 0x28
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff33 	bl	8000e7c <Gyro_IO_Read>
	Gyro_IO_Read((uint8_t*)&buffer[1], 0x29,1);
 8001016:	f107 0308 	add.w	r3, r7, #8
 800101a:	3301      	adds	r3, #1
 800101c:	2201      	movs	r2, #1
 800101e:	2129      	movs	r1, #41	@ 0x29
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff2b 	bl	8000e7c <Gyro_IO_Read>
	Gyro_IO_Read((uint8_t*)&buffer[2], 0x2A,1);
 8001026:	f107 0308 	add.w	r3, r7, #8
 800102a:	3302      	adds	r3, #2
 800102c:	2201      	movs	r2, #1
 800102e:	212a      	movs	r1, #42	@ 0x2a
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff23 	bl	8000e7c <Gyro_IO_Read>
	Gyro_IO_Read((uint8_t*)&buffer[3], 0x2B,1);
 8001036:	f107 0308 	add.w	r3, r7, #8
 800103a:	3303      	adds	r3, #3
 800103c:	2201      	movs	r2, #1
 800103e:	212b      	movs	r1, #43	@ 0x2b
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff1b 	bl	8000e7c <Gyro_IO_Read>
	Gyro_IO_Read((uint8_t*)&buffer[4], 0x2C,1);
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	3304      	adds	r3, #4
 800104c:	2201      	movs	r2, #1
 800104e:	212c      	movs	r1, #44	@ 0x2c
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff13 	bl	8000e7c <Gyro_IO_Read>
	Gyro_IO_Read((uint8_t*)&buffer[5], 0x2D,1);
 8001056:	f107 0308 	add.w	r3, r7, #8
 800105a:	3305      	adds	r3, #5
 800105c:	2201      	movs	r2, #1
 800105e:	212d      	movs	r1, #45	@ 0x2d
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff0b 	bl	8000e7c <Gyro_IO_Read>

	for(int i=0;i<3;i++)
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
 800106a:	e023      	b.n	80010b4 <Gyro_GetXYZ+0xba>
	{
		valueinfloat = ((buffer[2*i+1] << 8) + buffer[2*i]);
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	3301      	adds	r3, #1
 8001072:	3318      	adds	r3, #24
 8001074:	443b      	add	r3, r7
 8001076:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	0052      	lsls	r2, r2, #1
 8001080:	3218      	adds	r2, #24
 8001082:	443a      	add	r2, r7
 8001084:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8001088:	4413      	add	r3, r2
 800108a:	ee07 3a90 	vmov	s15, r3
 800108e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001092:	edc7 7a04 	vstr	s15, [r7, #16]
		pData[i]=(int16_t)valueinfloat;
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	edd7 7a04 	vldr	s15, [r7, #16]
 80010a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010a6:	ee17 2a90 	vmov	r2, s15
 80010aa:	b212      	sxth	r2, r2
 80010ac:	801a      	strh	r2, [r3, #0]
	for(int i=0;i<3;i++)
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	3301      	adds	r3, #1
 80010b2:	617b      	str	r3, [r7, #20]
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	ddd8      	ble.n	800106c <Gyro_GetXYZ+0x72>
	}
}
 80010ba:	bf00      	nop
 80010bc:	bf00      	nop
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	0000      	movs	r0, r0
	...

080010c8 <GetAngles>:

void GetAngles(float ax, float ay, float az, float gx, float gy, float gz,float* roll, float* pitch, float* yaw)
{
 80010c8:	b5b0      	push	{r4, r5, r7, lr}
 80010ca:	b08c      	sub	sp, #48	@ 0x30
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 80010d2:	edc7 0a08 	vstr	s1, [r7, #32]
 80010d6:	ed87 1a07 	vstr	s2, [r7, #28]
 80010da:	edc7 1a06 	vstr	s3, [r7, #24]
 80010de:	ed87 2a05 	vstr	s4, [r7, #20]
 80010e2:	edc7 2a04 	vstr	s5, [r7, #16]
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
    float acc_roll  = atan2(ay, az) * 180.0 / M_PI;
 80010ec:	6a38      	ldr	r0, [r7, #32]
 80010ee:	f7ff fa23 	bl	8000538 <__aeabi_f2d>
 80010f2:	4604      	mov	r4, r0
 80010f4:	460d      	mov	r5, r1
 80010f6:	69f8      	ldr	r0, [r7, #28]
 80010f8:	f7ff fa1e 	bl	8000538 <__aeabi_f2d>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	ec43 2b11 	vmov	d1, r2, r3
 8001104:	ec45 4b10 	vmov	d0, r4, r5
 8001108:	f00a fbbc 	bl	800b884 <atan2>
 800110c:	ec51 0b10 	vmov	r0, r1, d0
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	4b88      	ldr	r3, [pc, #544]	@ (8001338 <GetAngles+0x270>)
 8001116:	f7ff fa67 	bl	80005e8 <__aeabi_dmul>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	4610      	mov	r0, r2
 8001120:	4619      	mov	r1, r3
 8001122:	a37d      	add	r3, pc, #500	@ (adr r3, 8001318 <GetAngles+0x250>)
 8001124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001128:	f7ff fb88 	bl	800083c <__aeabi_ddiv>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	4610      	mov	r0, r2
 8001132:	4619      	mov	r1, r3
 8001134:	f7ff fd30 	bl	8000b98 <__aeabi_d2f>
 8001138:	4603      	mov	r3, r0
 800113a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float acc_pitch = atan2(-ax, sqrt(ay * ay + az * az)) * 180.0 / M_PI;
 800113c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001140:	eef1 7a67 	vneg.f32	s15, s15
 8001144:	ee17 3a90 	vmov	r3, s15
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff f9f5 	bl	8000538 <__aeabi_f2d>
 800114e:	4604      	mov	r4, r0
 8001150:	460d      	mov	r5, r1
 8001152:	edd7 7a08 	vldr	s15, [r7, #32]
 8001156:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800115a:	edd7 7a07 	vldr	s15, [r7, #28]
 800115e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001162:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001166:	ee17 0a90 	vmov	r0, s15
 800116a:	f7ff f9e5 	bl	8000538 <__aeabi_f2d>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	ec43 2b10 	vmov	d0, r2, r3
 8001176:	f00a fb87 	bl	800b888 <sqrt>
 800117a:	eeb0 7a40 	vmov.f32	s14, s0
 800117e:	eef0 7a60 	vmov.f32	s15, s1
 8001182:	eeb0 1a47 	vmov.f32	s2, s14
 8001186:	eef0 1a67 	vmov.f32	s3, s15
 800118a:	ec45 4b10 	vmov	d0, r4, r5
 800118e:	f00a fb79 	bl	800b884 <atan2>
 8001192:	ec51 0b10 	vmov	r0, r1, d0
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	4b67      	ldr	r3, [pc, #412]	@ (8001338 <GetAngles+0x270>)
 800119c:	f7ff fa24 	bl	80005e8 <__aeabi_dmul>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4610      	mov	r0, r2
 80011a6:	4619      	mov	r1, r3
 80011a8:	a35b      	add	r3, pc, #364	@ (adr r3, 8001318 <GetAngles+0x250>)
 80011aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ae:	f7ff fb45 	bl	800083c <__aeabi_ddiv>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	4610      	mov	r0, r2
 80011b8:	4619      	mov	r1, r3
 80011ba:	f7ff fced 	bl	8000b98 <__aeabi_d2f>
 80011be:	4603      	mov	r3, r0
 80011c0:	62bb      	str	r3, [r7, #40]	@ 0x28

    *roll  += gx * 0.01;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff f9b6 	bl	8000538 <__aeabi_f2d>
 80011cc:	4604      	mov	r4, r0
 80011ce:	460d      	mov	r5, r1
 80011d0:	69b8      	ldr	r0, [r7, #24]
 80011d2:	f7ff f9b1 	bl	8000538 <__aeabi_f2d>
 80011d6:	a352      	add	r3, pc, #328	@ (adr r3, 8001320 <GetAngles+0x258>)
 80011d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011dc:	f7ff fa04 	bl	80005e8 <__aeabi_dmul>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4620      	mov	r0, r4
 80011e6:	4629      	mov	r1, r5
 80011e8:	f7ff f848 	bl	800027c <__adddf3>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4610      	mov	r0, r2
 80011f2:	4619      	mov	r1, r3
 80011f4:	f7ff fcd0 	bl	8000b98 <__aeabi_d2f>
 80011f8:	4602      	mov	r2, r0
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	601a      	str	r2, [r3, #0]
    *pitch += gy * 0.01;
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff f998 	bl	8000538 <__aeabi_f2d>
 8001208:	4604      	mov	r4, r0
 800120a:	460d      	mov	r5, r1
 800120c:	6978      	ldr	r0, [r7, #20]
 800120e:	f7ff f993 	bl	8000538 <__aeabi_f2d>
 8001212:	a343      	add	r3, pc, #268	@ (adr r3, 8001320 <GetAngles+0x258>)
 8001214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001218:	f7ff f9e6 	bl	80005e8 <__aeabi_dmul>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4620      	mov	r0, r4
 8001222:	4629      	mov	r1, r5
 8001224:	f7ff f82a 	bl	800027c <__adddf3>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	4610      	mov	r0, r2
 800122e:	4619      	mov	r1, r3
 8001230:	f7ff fcb2 	bl	8000b98 <__aeabi_d2f>
 8001234:	4602      	mov	r2, r0
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	601a      	str	r2, [r3, #0]
    *yaw   += gz * 0.01;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff f97a 	bl	8000538 <__aeabi_f2d>
 8001244:	4604      	mov	r4, r0
 8001246:	460d      	mov	r5, r1
 8001248:	6938      	ldr	r0, [r7, #16]
 800124a:	f7ff f975 	bl	8000538 <__aeabi_f2d>
 800124e:	a334      	add	r3, pc, #208	@ (adr r3, 8001320 <GetAngles+0x258>)
 8001250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001254:	f7ff f9c8 	bl	80005e8 <__aeabi_dmul>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4620      	mov	r0, r4
 800125e:	4629      	mov	r1, r5
 8001260:	f7ff f80c 	bl	800027c <__adddf3>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4610      	mov	r0, r2
 800126a:	4619      	mov	r1, r3
 800126c:	f7ff fc94 	bl	8000b98 <__aeabi_d2f>
 8001270:	4602      	mov	r2, r0
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	601a      	str	r2, [r3, #0]

    *roll  = 0.98 * (*roll)  + (1 - 0.98) * acc_roll;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff f95c 	bl	8000538 <__aeabi_f2d>
 8001280:	a329      	add	r3, pc, #164	@ (adr r3, 8001328 <GetAngles+0x260>)
 8001282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001286:	f7ff f9af 	bl	80005e8 <__aeabi_dmul>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4614      	mov	r4, r2
 8001290:	461d      	mov	r5, r3
 8001292:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001294:	f7ff f950 	bl	8000538 <__aeabi_f2d>
 8001298:	a325      	add	r3, pc, #148	@ (adr r3, 8001330 <GetAngles+0x268>)
 800129a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129e:	f7ff f9a3 	bl	80005e8 <__aeabi_dmul>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4620      	mov	r0, r4
 80012a8:	4629      	mov	r1, r5
 80012aa:	f7fe ffe7 	bl	800027c <__adddf3>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	f7ff fc6f 	bl	8000b98 <__aeabi_d2f>
 80012ba:	4602      	mov	r2, r0
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	601a      	str	r2, [r3, #0]
    *pitch = 0.98 * (*pitch) + (1 - 0.98) * acc_pitch;
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff f937 	bl	8000538 <__aeabi_f2d>
 80012ca:	a317      	add	r3, pc, #92	@ (adr r3, 8001328 <GetAngles+0x260>)
 80012cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d0:	f7ff f98a 	bl	80005e8 <__aeabi_dmul>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4614      	mov	r4, r2
 80012da:	461d      	mov	r5, r3
 80012dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80012de:	f7ff f92b 	bl	8000538 <__aeabi_f2d>
 80012e2:	a313      	add	r3, pc, #76	@ (adr r3, 8001330 <GetAngles+0x268>)
 80012e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e8:	f7ff f97e 	bl	80005e8 <__aeabi_dmul>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4620      	mov	r0, r4
 80012f2:	4629      	mov	r1, r5
 80012f4:	f7fe ffc2 	bl	800027c <__adddf3>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f7ff fc4a 	bl	8000b98 <__aeabi_d2f>
 8001304:	4602      	mov	r2, r0
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	601a      	str	r2, [r3, #0]
}
 800130a:	bf00      	nop
 800130c:	3730      	adds	r7, #48	@ 0x30
 800130e:	46bd      	mov	sp, r7
 8001310:	bdb0      	pop	{r4, r5, r7, pc}
 8001312:	bf00      	nop
 8001314:	f3af 8000 	nop.w
 8001318:	54442d18 	.word	0x54442d18
 800131c:	400921fb 	.word	0x400921fb
 8001320:	47ae147b 	.word	0x47ae147b
 8001324:	3f847ae1 	.word	0x3f847ae1
 8001328:	f5c28f5c 	.word	0xf5c28f5c
 800132c:	3fef5c28 	.word	0x3fef5c28
 8001330:	47ae1480 	.word	0x47ae1480
 8001334:	3f947ae1 	.word	0x3f947ae1
 8001338:	40668000 	.word	0x40668000
 800133c:	00000000 	.word	0x00000000

08001340 <delete_gravity>:

void delete_gravity(float ax, float ay, float az, float roll, float pitch, float *ax_real, float *ay_real, float *az_real) {
 8001340:	b5b0      	push	{r4, r5, r7, lr}
 8001342:	b08c      	sub	sp, #48	@ 0x30
 8001344:	af00      	add	r7, sp, #0
 8001346:	ed87 0a07 	vstr	s0, [r7, #28]
 800134a:	edc7 0a06 	vstr	s1, [r7, #24]
 800134e:	ed87 1a05 	vstr	s2, [r7, #20]
 8001352:	edc7 1a04 	vstr	s3, [r7, #16]
 8001356:	ed87 2a03 	vstr	s4, [r7, #12]
 800135a:	60b8      	str	r0, [r7, #8]
 800135c:	6079      	str	r1, [r7, #4]
 800135e:	603a      	str	r2, [r7, #0]
    float g_x = 9.8 * sin(pitch * M_PI / 180.0);
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f7ff f8e9 	bl	8000538 <__aeabi_f2d>
 8001366:	a374      	add	r3, pc, #464	@ (adr r3, 8001538 <delete_gravity+0x1f8>)
 8001368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136c:	f7ff f93c 	bl	80005e8 <__aeabi_dmul>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4610      	mov	r0, r2
 8001376:	4619      	mov	r1, r3
 8001378:	f04f 0200 	mov.w	r2, #0
 800137c:	4b72      	ldr	r3, [pc, #456]	@ (8001548 <delete_gravity+0x208>)
 800137e:	f7ff fa5d 	bl	800083c <__aeabi_ddiv>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	ec43 2b17 	vmov	d7, r2, r3
 800138a:	eeb0 0a47 	vmov.f32	s0, s14
 800138e:	eef0 0a67 	vmov.f32	s1, s15
 8001392:	f00a faf9 	bl	800b988 <sin>
 8001396:	ec51 0b10 	vmov	r0, r1, d0
 800139a:	a365      	add	r3, pc, #404	@ (adr r3, 8001530 <delete_gravity+0x1f0>)
 800139c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a0:	f7ff f922 	bl	80005e8 <__aeabi_dmul>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4610      	mov	r0, r2
 80013aa:	4619      	mov	r1, r3
 80013ac:	f7ff fbf4 	bl	8000b98 <__aeabi_d2f>
 80013b0:	4603      	mov	r3, r0
 80013b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float g_y = -9.8 * sin(roll * M_PI / 180.0) * cos(pitch * M_PI / 180.0);
 80013b4:	6938      	ldr	r0, [r7, #16]
 80013b6:	f7ff f8bf 	bl	8000538 <__aeabi_f2d>
 80013ba:	a35f      	add	r3, pc, #380	@ (adr r3, 8001538 <delete_gravity+0x1f8>)
 80013bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c0:	f7ff f912 	bl	80005e8 <__aeabi_dmul>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	4610      	mov	r0, r2
 80013ca:	4619      	mov	r1, r3
 80013cc:	f04f 0200 	mov.w	r2, #0
 80013d0:	4b5d      	ldr	r3, [pc, #372]	@ (8001548 <delete_gravity+0x208>)
 80013d2:	f7ff fa33 	bl	800083c <__aeabi_ddiv>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	ec43 2b17 	vmov	d7, r2, r3
 80013de:	eeb0 0a47 	vmov.f32	s0, s14
 80013e2:	eef0 0a67 	vmov.f32	s1, s15
 80013e6:	f00a facf 	bl	800b988 <sin>
 80013ea:	ec51 0b10 	vmov	r0, r1, d0
 80013ee:	a354      	add	r3, pc, #336	@ (adr r3, 8001540 <delete_gravity+0x200>)
 80013f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f4:	f7ff f8f8 	bl	80005e8 <__aeabi_dmul>
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	4614      	mov	r4, r2
 80013fe:	461d      	mov	r5, r3
 8001400:	68f8      	ldr	r0, [r7, #12]
 8001402:	f7ff f899 	bl	8000538 <__aeabi_f2d>
 8001406:	a34c      	add	r3, pc, #304	@ (adr r3, 8001538 <delete_gravity+0x1f8>)
 8001408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140c:	f7ff f8ec 	bl	80005e8 <__aeabi_dmul>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4610      	mov	r0, r2
 8001416:	4619      	mov	r1, r3
 8001418:	f04f 0200 	mov.w	r2, #0
 800141c:	4b4a      	ldr	r3, [pc, #296]	@ (8001548 <delete_gravity+0x208>)
 800141e:	f7ff fa0d 	bl	800083c <__aeabi_ddiv>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	ec43 2b17 	vmov	d7, r2, r3
 800142a:	eeb0 0a47 	vmov.f32	s0, s14
 800142e:	eef0 0a67 	vmov.f32	s1, s15
 8001432:	f00a fa55 	bl	800b8e0 <cos>
 8001436:	ec53 2b10 	vmov	r2, r3, d0
 800143a:	4620      	mov	r0, r4
 800143c:	4629      	mov	r1, r5
 800143e:	f7ff f8d3 	bl	80005e8 <__aeabi_dmul>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4610      	mov	r0, r2
 8001448:	4619      	mov	r1, r3
 800144a:	f7ff fba5 	bl	8000b98 <__aeabi_d2f>
 800144e:	4603      	mov	r3, r0
 8001450:	62bb      	str	r3, [r7, #40]	@ 0x28
    float g_z = -9.8 * cos(roll * M_PI / 180.0) * cos(pitch * M_PI / 180.0);
 8001452:	6938      	ldr	r0, [r7, #16]
 8001454:	f7ff f870 	bl	8000538 <__aeabi_f2d>
 8001458:	a337      	add	r3, pc, #220	@ (adr r3, 8001538 <delete_gravity+0x1f8>)
 800145a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145e:	f7ff f8c3 	bl	80005e8 <__aeabi_dmul>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4610      	mov	r0, r2
 8001468:	4619      	mov	r1, r3
 800146a:	f04f 0200 	mov.w	r2, #0
 800146e:	4b36      	ldr	r3, [pc, #216]	@ (8001548 <delete_gravity+0x208>)
 8001470:	f7ff f9e4 	bl	800083c <__aeabi_ddiv>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	ec43 2b17 	vmov	d7, r2, r3
 800147c:	eeb0 0a47 	vmov.f32	s0, s14
 8001480:	eef0 0a67 	vmov.f32	s1, s15
 8001484:	f00a fa2c 	bl	800b8e0 <cos>
 8001488:	ec51 0b10 	vmov	r0, r1, d0
 800148c:	a32c      	add	r3, pc, #176	@ (adr r3, 8001540 <delete_gravity+0x200>)
 800148e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001492:	f7ff f8a9 	bl	80005e8 <__aeabi_dmul>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	4614      	mov	r4, r2
 800149c:	461d      	mov	r5, r3
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f7ff f84a 	bl	8000538 <__aeabi_f2d>
 80014a4:	a324      	add	r3, pc, #144	@ (adr r3, 8001538 <delete_gravity+0x1f8>)
 80014a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014aa:	f7ff f89d 	bl	80005e8 <__aeabi_dmul>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4610      	mov	r0, r2
 80014b4:	4619      	mov	r1, r3
 80014b6:	f04f 0200 	mov.w	r2, #0
 80014ba:	4b23      	ldr	r3, [pc, #140]	@ (8001548 <delete_gravity+0x208>)
 80014bc:	f7ff f9be 	bl	800083c <__aeabi_ddiv>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	ec43 2b17 	vmov	d7, r2, r3
 80014c8:	eeb0 0a47 	vmov.f32	s0, s14
 80014cc:	eef0 0a67 	vmov.f32	s1, s15
 80014d0:	f00a fa06 	bl	800b8e0 <cos>
 80014d4:	ec53 2b10 	vmov	r2, r3, d0
 80014d8:	4620      	mov	r0, r4
 80014da:	4629      	mov	r1, r5
 80014dc:	f7ff f884 	bl	80005e8 <__aeabi_dmul>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4610      	mov	r0, r2
 80014e6:	4619      	mov	r1, r3
 80014e8:	f7ff fb56 	bl	8000b98 <__aeabi_d2f>
 80014ec:	4603      	mov	r3, r0
 80014ee:	627b      	str	r3, [r7, #36]	@ 0x24
    *ax_real = ax - g_x;
 80014f0:	ed97 7a07 	vldr	s14, [r7, #28]
 80014f4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80014f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	edc3 7a00 	vstr	s15, [r3]
    *ay_real = ay - g_y;
 8001502:	ed97 7a06 	vldr	s14, [r7, #24]
 8001506:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800150a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	edc3 7a00 	vstr	s15, [r3]
    *az_real = az - g_z;
 8001514:	ed97 7a05 	vldr	s14, [r7, #20]
 8001518:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800151c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	edc3 7a00 	vstr	s15, [r3]
}
 8001526:	bf00      	nop
 8001528:	3730      	adds	r7, #48	@ 0x30
 800152a:	46bd      	mov	sp, r7
 800152c:	bdb0      	pop	{r4, r5, r7, pc}
 800152e:	bf00      	nop
 8001530:	9999999a 	.word	0x9999999a
 8001534:	40239999 	.word	0x40239999
 8001538:	54442d18 	.word	0x54442d18
 800153c:	400921fb 	.word	0x400921fb
 8001540:	9999999a 	.word	0x9999999a
 8001544:	c0239999 	.word	0xc0239999
 8001548:	40668000 	.word	0x40668000

0800154c <integrate_position>:

void integrate_position(float ax, float ay, float az, float *vx, float *vy, float *vz, float *x, float *y, float *z) {
 800154c:	b480      	push	{r7}
 800154e:	b08b      	sub	sp, #44	@ 0x2c
 8001550:	af00      	add	r7, sp, #0
 8001552:	ed87 0a07 	vstr	s0, [r7, #28]
 8001556:	edc7 0a06 	vstr	s1, [r7, #24]
 800155a:	ed87 1a05 	vstr	s2, [r7, #20]
 800155e:	6138      	str	r0, [r7, #16]
 8001560:	60f9      	str	r1, [r7, #12]
 8001562:	60ba      	str	r2, [r7, #8]
 8001564:	607b      	str	r3, [r7, #4]
	float dt = 0.01;
 8001566:	4b2f      	ldr	r3, [pc, #188]	@ (8001624 <integrate_position+0xd8>)
 8001568:	627b      	str	r3, [r7, #36]	@ 0x24
	*vx += ax * dt;
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	ed93 7a00 	vldr	s14, [r3]
 8001570:	edd7 6a07 	vldr	s13, [r7, #28]
 8001574:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001578:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800157c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	edc3 7a00 	vstr	s15, [r3]
    *vy += ay * dt;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	ed93 7a00 	vldr	s14, [r3]
 800158c:	edd7 6a06 	vldr	s13, [r7, #24]
 8001590:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001594:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001598:	ee77 7a27 	vadd.f32	s15, s14, s15
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	edc3 7a00 	vstr	s15, [r3]
    *vz += az * dt;
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	ed93 7a00 	vldr	s14, [r3]
 80015a8:	edd7 6a05 	vldr	s13, [r7, #20]
 80015ac:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80015b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	edc3 7a00 	vstr	s15, [r3]

    *x += *vx * dt;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	ed93 7a00 	vldr	s14, [r3]
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	edd3 6a00 	vldr	s13, [r3]
 80015ca:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80015ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	edc3 7a00 	vstr	s15, [r3]
    *y += *vy * dt;
 80015dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015de:	ed93 7a00 	vldr	s14, [r3]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	edd3 6a00 	vldr	s13, [r3]
 80015e8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80015ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015f6:	edc3 7a00 	vstr	s15, [r3]
    *z += *vz * dt;
 80015fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015fc:	ed93 7a00 	vldr	s14, [r3]
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	edd3 6a00 	vldr	s13, [r3]
 8001606:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800160a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800160e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001614:	edc3 7a00 	vstr	s15, [r3]
}
 8001618:	bf00      	nop
 800161a:	372c      	adds	r7, #44	@ 0x2c
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	3c23d70a 	.word	0x3c23d70a

08001628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001628:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800162c:	b086      	sub	sp, #24
 800162e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001630:	f001 f8ce 	bl	80027d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001634:	f000 f9f0 	bl	8001a18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001638:	f000 fad8 	bl	8001bec <MX_GPIO_Init>
  MX_I2C1_Init();
 800163c:	f000 fa58 	bl	8001af0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001640:	f000 fa96 	bl	8001b70 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8001644:	f000 fccc 	bl	8001fe0 <MX_USB_DEVICE_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001648:	f000 fa46 	bl	8001ad8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  Gyro_Ini();
 800164c:	f7ff fc98 	bl	8000f80 <Gyro_Ini>
  Accel_Ini();
 8001650:	f7ff fb73 	bl	8000d3a <Accel_Ini>
  Accel_GetXYZ(AccelData);
 8001654:	48b2      	ldr	r0, [pc, #712]	@ (8001920 <main+0x2f8>)
 8001656:	f7ff fba1 	bl	8000d9c <Accel_GetXYZ>
  Gyro_GetXYZ(GyroData);
 800165a:	48b2      	ldr	r0, [pc, #712]	@ (8001924 <main+0x2fc>)
 800165c:	f7ff fccd 	bl	8000ffa <Gyro_GetXYZ>
  for (int i=0; i<50; i++)
 8001660:	2300      	movs	r3, #0
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	e038      	b.n	80016d8 <main+0xb0>
	{
	    Accel_GetXYZ(AccelData);;
 8001666:	48ae      	ldr	r0, [pc, #696]	@ (8001920 <main+0x2f8>)
 8001668:	f7ff fb98 	bl	8000d9c <Accel_GetXYZ>
		min_xval = MIN(min_xval, AccelData[0]);
 800166c:	4bac      	ldr	r3, [pc, #688]	@ (8001920 <main+0x2f8>)
 800166e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001672:	4bad      	ldr	r3, [pc, #692]	@ (8001928 <main+0x300>)
 8001674:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001678:	4293      	cmp	r3, r2
 800167a:	bfa8      	it	ge
 800167c:	4613      	movge	r3, r2
 800167e:	b21a      	sxth	r2, r3
 8001680:	4ba9      	ldr	r3, [pc, #676]	@ (8001928 <main+0x300>)
 8001682:	801a      	strh	r2, [r3, #0]
		max_xval = MAX(max_xval, AccelData[0]);
 8001684:	4ba6      	ldr	r3, [pc, #664]	@ (8001920 <main+0x2f8>)
 8001686:	f9b3 2000 	ldrsh.w	r2, [r3]
 800168a:	4ba8      	ldr	r3, [pc, #672]	@ (800192c <main+0x304>)
 800168c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001690:	4293      	cmp	r3, r2
 8001692:	bfb8      	it	lt
 8001694:	4613      	movlt	r3, r2
 8001696:	b21a      	sxth	r2, r3
 8001698:	4ba4      	ldr	r3, [pc, #656]	@ (800192c <main+0x304>)
 800169a:	801a      	strh	r2, [r3, #0]
		min_yval = MIN(min_yval, AccelData[1]);
 800169c:	4ba0      	ldr	r3, [pc, #640]	@ (8001920 <main+0x2f8>)
 800169e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80016a2:	4ba3      	ldr	r3, [pc, #652]	@ (8001930 <main+0x308>)
 80016a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a8:	4293      	cmp	r3, r2
 80016aa:	bfa8      	it	ge
 80016ac:	4613      	movge	r3, r2
 80016ae:	b21a      	sxth	r2, r3
 80016b0:	4b9f      	ldr	r3, [pc, #636]	@ (8001930 <main+0x308>)
 80016b2:	801a      	strh	r2, [r3, #0]
		max_yval = MAX(max_yval, AccelData[1]);
 80016b4:	4b9a      	ldr	r3, [pc, #616]	@ (8001920 <main+0x2f8>)
 80016b6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80016ba:	4b9e      	ldr	r3, [pc, #632]	@ (8001934 <main+0x30c>)
 80016bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c0:	4293      	cmp	r3, r2
 80016c2:	bfb8      	it	lt
 80016c4:	4613      	movlt	r3, r2
 80016c6:	b21a      	sxth	r2, r3
 80016c8:	4b9a      	ldr	r3, [pc, #616]	@ (8001934 <main+0x30c>)
 80016ca:	801a      	strh	r2, [r3, #0]
		HAL_Delay (100);
 80016cc:	2064      	movs	r0, #100	@ 0x64
 80016ce:	f001 f8e5 	bl	800289c <HAL_Delay>
  for (int i=0; i<50; i++)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	3301      	adds	r3, #1
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b31      	cmp	r3, #49	@ 0x31
 80016dc:	ddc3      	ble.n	8001666 <main+0x3e>
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_14,GPIO_PIN_RESET);
	  sprintf(str1,"Hi");
	  CDC_Transmit_FS((uint8_t*)str1, strlen(str1));
	  HAL_Delay(500);
	  */
	  Accel_GetXYZ(AccelData);
 80016de:	4890      	ldr	r0, [pc, #576]	@ (8001920 <main+0x2f8>)
 80016e0:	f7ff fb5c 	bl	8000d9c <Accel_GetXYZ>
	  Gyro_GetXYZ(GyroData);
 80016e4:	488f      	ldr	r0, [pc, #572]	@ (8001924 <main+0x2fc>)
 80016e6:	f7ff fc88 	bl	8000ffa <Gyro_GetXYZ>
	  GetAngles(AccelData[0],AccelData[1],AccelData[2],GyroData[0], GyroData[1], GyroData[2], &roll, &pitch, &yaw);
 80016ea:	4b8d      	ldr	r3, [pc, #564]	@ (8001920 <main+0x2f8>)
 80016ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016f0:	ee07 3a90 	vmov	s15, r3
 80016f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016f8:	4b89      	ldr	r3, [pc, #548]	@ (8001920 <main+0x2f8>)
 80016fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016fe:	ee07 3a10 	vmov	s14, r3
 8001702:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001706:	4b86      	ldr	r3, [pc, #536]	@ (8001920 <main+0x2f8>)
 8001708:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800170c:	ee06 3a90 	vmov	s13, r3
 8001710:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001714:	4b83      	ldr	r3, [pc, #524]	@ (8001924 <main+0x2fc>)
 8001716:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171a:	ee06 3a10 	vmov	s12, r3
 800171e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001722:	4b80      	ldr	r3, [pc, #512]	@ (8001924 <main+0x2fc>)
 8001724:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001728:	ee05 3a90 	vmov	s11, r3
 800172c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8001730:	4b7c      	ldr	r3, [pc, #496]	@ (8001924 <main+0x2fc>)
 8001732:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001736:	ee05 3a10 	vmov	s10, r3
 800173a:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 800173e:	4a7e      	ldr	r2, [pc, #504]	@ (8001938 <main+0x310>)
 8001740:	497e      	ldr	r1, [pc, #504]	@ (800193c <main+0x314>)
 8001742:	487f      	ldr	r0, [pc, #508]	@ (8001940 <main+0x318>)
 8001744:	eef0 2a45 	vmov.f32	s5, s10
 8001748:	eeb0 2a65 	vmov.f32	s4, s11
 800174c:	eef0 1a46 	vmov.f32	s3, s12
 8001750:	eeb0 1a66 	vmov.f32	s2, s13
 8001754:	eef0 0a47 	vmov.f32	s1, s14
 8001758:	eeb0 0a67 	vmov.f32	s0, s15
 800175c:	f7ff fcb4 	bl	80010c8 <GetAngles>
	  delete_gravity(AccelData[0], AccelData[1], AccelData[2], roll, pitch,&ax_real,&ay_real,&az_real);
 8001760:	4b6f      	ldr	r3, [pc, #444]	@ (8001920 <main+0x2f8>)
 8001762:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001766:	ee07 3a90 	vmov	s15, r3
 800176a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800176e:	4b6c      	ldr	r3, [pc, #432]	@ (8001920 <main+0x2f8>)
 8001770:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001774:	ee07 3a10 	vmov	s14, r3
 8001778:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800177c:	4b68      	ldr	r3, [pc, #416]	@ (8001920 <main+0x2f8>)
 800177e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001782:	ee06 3a90 	vmov	s13, r3
 8001786:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800178a:	4b6d      	ldr	r3, [pc, #436]	@ (8001940 <main+0x318>)
 800178c:	ed93 6a00 	vldr	s12, [r3]
 8001790:	4b6a      	ldr	r3, [pc, #424]	@ (800193c <main+0x314>)
 8001792:	edd3 5a00 	vldr	s11, [r3]
 8001796:	4a6b      	ldr	r2, [pc, #428]	@ (8001944 <main+0x31c>)
 8001798:	496b      	ldr	r1, [pc, #428]	@ (8001948 <main+0x320>)
 800179a:	486c      	ldr	r0, [pc, #432]	@ (800194c <main+0x324>)
 800179c:	eeb0 2a65 	vmov.f32	s4, s11
 80017a0:	eef0 1a46 	vmov.f32	s3, s12
 80017a4:	eeb0 1a66 	vmov.f32	s2, s13
 80017a8:	eef0 0a47 	vmov.f32	s1, s14
 80017ac:	eeb0 0a67 	vmov.f32	s0, s15
 80017b0:	f7ff fdc6 	bl	8001340 <delete_gravity>
	  integrate_position(AccelData[0], AccelData[1], AccelData[2], &vx, &vy, &vz, &x, &y, &z);
 80017b4:	4b5a      	ldr	r3, [pc, #360]	@ (8001920 <main+0x2f8>)
 80017b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ba:	ee07 3a90 	vmov	s15, r3
 80017be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017c2:	4b57      	ldr	r3, [pc, #348]	@ (8001920 <main+0x2f8>)
 80017c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017c8:	ee07 3a10 	vmov	s14, r3
 80017cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80017d0:	4b53      	ldr	r3, [pc, #332]	@ (8001920 <main+0x2f8>)
 80017d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017d6:	ee06 3a90 	vmov	s13, r3
 80017da:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80017de:	4b5c      	ldr	r3, [pc, #368]	@ (8001950 <main+0x328>)
 80017e0:	9301      	str	r3, [sp, #4]
 80017e2:	4b5c      	ldr	r3, [pc, #368]	@ (8001954 <main+0x32c>)
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	4b5c      	ldr	r3, [pc, #368]	@ (8001958 <main+0x330>)
 80017e8:	4a5c      	ldr	r2, [pc, #368]	@ (800195c <main+0x334>)
 80017ea:	495d      	ldr	r1, [pc, #372]	@ (8001960 <main+0x338>)
 80017ec:	485d      	ldr	r0, [pc, #372]	@ (8001964 <main+0x33c>)
 80017ee:	eeb0 1a66 	vmov.f32	s2, s13
 80017f2:	eef0 0a47 	vmov.f32	s1, s14
 80017f6:	eeb0 0a67 	vmov.f32	s0, s15
 80017fa:	f7ff fea7 	bl	800154c <integrate_position>
	  sprintf(str1,"X: %06d; Y: %06d; Z: %06d; \n\r", x,y,z);
 80017fe:	4b56      	ldr	r3, [pc, #344]	@ (8001958 <main+0x330>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe fe98 	bl	8000538 <__aeabi_f2d>
 8001808:	4680      	mov	r8, r0
 800180a:	4689      	mov	r9, r1
 800180c:	4b51      	ldr	r3, [pc, #324]	@ (8001954 <main+0x32c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fe91 	bl	8000538 <__aeabi_f2d>
 8001816:	4604      	mov	r4, r0
 8001818:	460d      	mov	r5, r1
 800181a:	4b4d      	ldr	r3, [pc, #308]	@ (8001950 <main+0x328>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe fe8a 	bl	8000538 <__aeabi_f2d>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800182c:	e9cd 4500 	strd	r4, r5, [sp]
 8001830:	4642      	mov	r2, r8
 8001832:	464b      	mov	r3, r9
 8001834:	494c      	ldr	r1, [pc, #304]	@ (8001968 <main+0x340>)
 8001836:	484d      	ldr	r0, [pc, #308]	@ (800196c <main+0x344>)
 8001838:	f009 fb84 	bl	800af44 <siprintf>
	  HAL_Delay(50);
 800183c:	2032      	movs	r0, #50	@ 0x32
 800183e:	f001 f82d 	bl	800289c <HAL_Delay>
	  /*HAL_UART_Transmit(&huart1,(uint8_t*)str1, strlen(str1),0x1000);*/
	  /*CDC_Transmit_FS((uint8_t*)str1, strlen(str1));*/

	  if (AccelData[0] < min_xval)
 8001842:	4b37      	ldr	r3, [pc, #220]	@ (8001920 <main+0x2f8>)
 8001844:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001848:	4b37      	ldr	r3, [pc, #220]	@ (8001928 <main+0x300>)
 800184a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800184e:	429a      	cmp	r2, r3
 8001850:	da0d      	bge.n	800186e <main+0x246>
	   {
			 newxval = AccelData[0] - min_xval;
 8001852:	4b33      	ldr	r3, [pc, #204]	@ (8001920 <main+0x2f8>)
 8001854:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001858:	b29a      	uxth	r2, r3
 800185a:	4b33      	ldr	r3, [pc, #204]	@ (8001928 <main+0x300>)
 800185c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001860:	b29b      	uxth	r3, r3
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	b29b      	uxth	r3, r3
 8001866:	b21a      	sxth	r2, r3
 8001868:	4b41      	ldr	r3, [pc, #260]	@ (8001970 <main+0x348>)
 800186a:	801a      	strh	r2, [r3, #0]
 800186c:	e014      	b.n	8001898 <main+0x270>
	   }

	  else if (AccelData[0] > max_xval)
 800186e:	4b2c      	ldr	r3, [pc, #176]	@ (8001920 <main+0x2f8>)
 8001870:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001874:	4b2d      	ldr	r3, [pc, #180]	@ (800192c <main+0x304>)
 8001876:	f9b3 3000 	ldrsh.w	r3, [r3]
 800187a:	429a      	cmp	r2, r3
 800187c:	dd0c      	ble.n	8001898 <main+0x270>
	   {
			 newxval = AccelData[0] - max_xval;
 800187e:	4b28      	ldr	r3, [pc, #160]	@ (8001920 <main+0x2f8>)
 8001880:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001884:	b29a      	uxth	r2, r3
 8001886:	4b29      	ldr	r3, [pc, #164]	@ (800192c <main+0x304>)
 8001888:	f9b3 3000 	ldrsh.w	r3, [r3]
 800188c:	b29b      	uxth	r3, r3
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	b29b      	uxth	r3, r3
 8001892:	b21a      	sxth	r2, r3
 8001894:	4b36      	ldr	r3, [pc, #216]	@ (8001970 <main+0x348>)
 8001896:	801a      	strh	r2, [r3, #0]
	   }

	  if (AccelData[1] < min_yval)
 8001898:	4b21      	ldr	r3, [pc, #132]	@ (8001920 <main+0x2f8>)
 800189a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800189e:	4b24      	ldr	r3, [pc, #144]	@ (8001930 <main+0x308>)
 80018a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	da0d      	bge.n	80018c4 <main+0x29c>
	  {
			newyval = AccelData[1] - min_yval;
 80018a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001920 <main+0x2f8>)
 80018aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001930 <main+0x308>)
 80018b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	b21a      	sxth	r2, r3
 80018be:	4b2d      	ldr	r3, [pc, #180]	@ (8001974 <main+0x34c>)
 80018c0:	801a      	strh	r2, [r3, #0]
 80018c2:	e014      	b.n	80018ee <main+0x2c6>
	  }

	  else if (AccelData[1] > max_yval)
 80018c4:	4b16      	ldr	r3, [pc, #88]	@ (8001920 <main+0x2f8>)
 80018c6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80018ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001934 <main+0x30c>)
 80018cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	dd0c      	ble.n	80018ee <main+0x2c6>
	  {
		   newyval = AccelData[1] - max_yval;
 80018d4:	4b12      	ldr	r3, [pc, #72]	@ (8001920 <main+0x2f8>)
 80018d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018da:	b29a      	uxth	r2, r3
 80018dc:	4b15      	ldr	r3, [pc, #84]	@ (8001934 <main+0x30c>)
 80018de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	b21a      	sxth	r2, r3
 80018ea:	4b22      	ldr	r3, [pc, #136]	@ (8001974 <main+0x34c>)
 80018ec:	801a      	strh	r2, [r3, #0]
	  }

	  if ((newxval > 20) || (newxval <-20))
 80018ee:	4b20      	ldr	r3, [pc, #128]	@ (8001970 <main+0x348>)
 80018f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018f4:	2b14      	cmp	r3, #20
 80018f6:	dc05      	bgt.n	8001904 <main+0x2dc>
 80018f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001970 <main+0x348>)
 80018fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018fe:	f113 0f14 	cmn.w	r3, #20
 8001902:	da3d      	bge.n	8001980 <main+0x358>
	  {
		   mousehid.mouse_y = (newxval/3);
 8001904:	4b1a      	ldr	r3, [pc, #104]	@ (8001970 <main+0x348>)
 8001906:	f9b3 3000 	ldrsh.w	r3, [r3]
 800190a:	4a1b      	ldr	r2, [pc, #108]	@ (8001978 <main+0x350>)
 800190c:	fb82 1203 	smull	r1, r2, r2, r3
 8001910:	17db      	asrs	r3, r3, #31
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	b21b      	sxth	r3, r3
 8001916:	b25a      	sxtb	r2, r3
 8001918:	4b18      	ldr	r3, [pc, #96]	@ (800197c <main+0x354>)
 800191a:	709a      	strb	r2, [r3, #2]
 800191c:	e033      	b.n	8001986 <main+0x35e>
 800191e:	bf00      	nop
 8001920:	20000308 	.word	0x20000308
 8001924:	20000310 	.word	0x20000310
 8001928:	20000000 	.word	0x20000000
 800192c:	20000002 	.word	0x20000002
 8001930:	20000004 	.word	0x20000004
 8001934:	20000006 	.word	0x20000006
 8001938:	20000320 	.word	0x20000320
 800193c:	2000031c 	.word	0x2000031c
 8001940:	20000318 	.word	0x20000318
 8001944:	20000334 	.word	0x20000334
 8001948:	20000330 	.word	0x20000330
 800194c:	2000032c 	.word	0x2000032c
 8001950:	2000034c 	.word	0x2000034c
 8001954:	20000348 	.word	0x20000348
 8001958:	20000344 	.word	0x20000344
 800195c:	20000340 	.word	0x20000340
 8001960:	2000033c 	.word	0x2000033c
 8001964:	20000338 	.word	0x20000338
 8001968:	0800d078 	.word	0x0800d078
 800196c:	200002a4 	.word	0x200002a4
 8001970:	20000324 	.word	0x20000324
 8001974:	20000326 	.word	0x20000326
 8001978:	55555556 	.word	0x55555556
 800197c:	20000350 	.word	0x20000350
	  }

	  else mousehid.mouse_y = 0;
 8001980:	4b20      	ldr	r3, [pc, #128]	@ (8001a04 <main+0x3dc>)
 8001982:	2200      	movs	r2, #0
 8001984:	709a      	strb	r2, [r3, #2]
	  if ((newyval > 20) || (newyval <-20))
 8001986:	4b20      	ldr	r3, [pc, #128]	@ (8001a08 <main+0x3e0>)
 8001988:	f9b3 3000 	ldrsh.w	r3, [r3]
 800198c:	2b14      	cmp	r3, #20
 800198e:	dc05      	bgt.n	800199c <main+0x374>
 8001990:	4b1d      	ldr	r3, [pc, #116]	@ (8001a08 <main+0x3e0>)
 8001992:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001996:	f113 0f14 	cmn.w	r3, #20
 800199a:	da0c      	bge.n	80019b6 <main+0x38e>
	  {
		   mousehid.mouse_x= (newyval)/3;
 800199c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a08 <main+0x3e0>)
 800199e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019a2:	4a1a      	ldr	r2, [pc, #104]	@ (8001a0c <main+0x3e4>)
 80019a4:	fb82 1203 	smull	r1, r2, r2, r3
 80019a8:	17db      	asrs	r3, r3, #31
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	b21b      	sxth	r3, r3
 80019ae:	b25a      	sxtb	r2, r3
 80019b0:	4b14      	ldr	r3, [pc, #80]	@ (8001a04 <main+0x3dc>)
 80019b2:	705a      	strb	r2, [r3, #1]
 80019b4:	e002      	b.n	80019bc <main+0x394>
	  }

	  else mousehid.mouse_x = 0;
 80019b6:	4b13      	ldr	r3, [pc, #76]	@ (8001a04 <main+0x3dc>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	705a      	strb	r2, [r3, #1]
	  if (button_flag==1)
 80019bc:	4b14      	ldr	r3, [pc, #80]	@ (8001a10 <main+0x3e8>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d115      	bne.n	80019f0 <main+0x3c8>
	  {
		   mousehid.button = 1;
 80019c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a04 <main+0x3dc>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	701a      	strb	r2, [r3, #0]
		   USBD_HID_SendReport(&hUsbDeviceFS, &mousehid, sizeof(mousehid));
 80019ca:	2204      	movs	r2, #4
 80019cc:	490d      	ldr	r1, [pc, #52]	@ (8001a04 <main+0x3dc>)
 80019ce:	4811      	ldr	r0, [pc, #68]	@ (8001a14 <main+0x3ec>)
 80019d0:	f009 f9de 	bl	800ad90 <USBD_HID_SendReport>
		   HAL_Delay (50);
 80019d4:	2032      	movs	r0, #50	@ 0x32
 80019d6:	f000 ff61 	bl	800289c <HAL_Delay>
		   mousehid.button = 0;
 80019da:	4b0a      	ldr	r3, [pc, #40]	@ (8001a04 <main+0x3dc>)
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]

		   USBD_HID_SendReport(&hUsbDeviceFS,&mousehid, sizeof(mousehid));
 80019e0:	2204      	movs	r2, #4
 80019e2:	4908      	ldr	r1, [pc, #32]	@ (8001a04 <main+0x3dc>)
 80019e4:	480b      	ldr	r0, [pc, #44]	@ (8001a14 <main+0x3ec>)
 80019e6:	f009 f9d3 	bl	800ad90 <USBD_HID_SendReport>
		   button_flag =0;
 80019ea:	4b09      	ldr	r3, [pc, #36]	@ (8001a10 <main+0x3e8>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]
	  }

	  USBD_HID_SendReport(&hUsbDeviceFS,&mousehid, sizeof(mousehid));
 80019f0:	2204      	movs	r2, #4
 80019f2:	4904      	ldr	r1, [pc, #16]	@ (8001a04 <main+0x3dc>)
 80019f4:	4807      	ldr	r0, [pc, #28]	@ (8001a14 <main+0x3ec>)
 80019f6:	f009 f9cb 	bl	800ad90 <USBD_HID_SendReport>
	  HAL_Delay(10);
 80019fa:	200a      	movs	r0, #10
 80019fc:	f000 ff4e 	bl	800289c <HAL_Delay>
	  Accel_GetXYZ(AccelData);
 8001a00:	e66d      	b.n	80016de <main+0xb6>
 8001a02:	bf00      	nop
 8001a04:	20000350 	.word	0x20000350
 8001a08:	20000326 	.word	0x20000326
 8001a0c:	55555556 	.word	0x55555556
 8001a10:	20000328 	.word	0x20000328
 8001a14:	20000358 	.word	0x20000358

08001a18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b09e      	sub	sp, #120	@ 0x78
 8001a1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a1e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001a22:	2228      	movs	r2, #40	@ 0x28
 8001a24:	2100      	movs	r1, #0
 8001a26:	4618      	mov	r0, r3
 8001a28:	f009 faac 	bl	800af84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a2c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a3c:	463b      	mov	r3, r7
 8001a3e:	223c      	movs	r2, #60	@ 0x3c
 8001a40:	2100      	movs	r1, #0
 8001a42:	4618      	mov	r0, r3
 8001a44:	f009 fa9e 	bl	800af84 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a50:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a52:	2300      	movs	r3, #0
 8001a54:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a56:	2301      	movs	r3, #1
 8001a58:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a5a:	2310      	movs	r3, #16
 8001a5c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a62:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a66:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a68:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001a6c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a6e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001a72:	4618      	mov	r0, r3
 8001a74:	f003 fcc6 	bl	8005404 <HAL_RCC_OscConfig>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001a7e:	f000 f957 	bl	8001d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a82:	230f      	movs	r3, #15
 8001a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a86:	2302      	movs	r3, #2
 8001a88:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a92:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a94:	2300      	movs	r3, #0
 8001a96:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a98:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001a9c:	2102      	movs	r1, #2
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f004 fcee 	bl	8006480 <HAL_RCC_ClockConfig>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001aaa:	f000 f941 	bl	8001d30 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8001aae:	4b09      	ldr	r3, [pc, #36]	@ (8001ad4 <SystemClock_Config+0xbc>)
 8001ab0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aba:	463b      	mov	r3, r7
 8001abc:	4618      	mov	r0, r3
 8001abe:	f004 feaf 	bl	8006820 <HAL_RCCEx_PeriphCLKConfig>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001ac8:	f000 f932 	bl	8001d30 <Error_Handler>
  }
}
 8001acc:	bf00      	nop
 8001ace:	3778      	adds	r7, #120	@ 0x78
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	00020020 	.word	0x00020020

08001ad8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* EXTI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2100      	movs	r1, #0
 8001ae0:	2007      	movs	r0, #7
 8001ae2:	f000 ffda 	bl	8002a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001ae6:	2007      	movs	r0, #7
 8001ae8:	f000 fff3 	bl	8002ad2 <HAL_NVIC_EnableIRQ>
}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001af4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b64 <MX_I2C1_Init+0x74>)
 8001af6:	4a1c      	ldr	r2, [pc, #112]	@ (8001b68 <MX_I2C1_Init+0x78>)
 8001af8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010020A;
 8001afa:	4b1a      	ldr	r3, [pc, #104]	@ (8001b64 <MX_I2C1_Init+0x74>)
 8001afc:	4a1b      	ldr	r2, [pc, #108]	@ (8001b6c <MX_I2C1_Init+0x7c>)
 8001afe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b00:	4b18      	ldr	r3, [pc, #96]	@ (8001b64 <MX_I2C1_Init+0x74>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b06:	4b17      	ldr	r3, [pc, #92]	@ (8001b64 <MX_I2C1_Init+0x74>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b0c:	4b15      	ldr	r3, [pc, #84]	@ (8001b64 <MX_I2C1_Init+0x74>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b12:	4b14      	ldr	r3, [pc, #80]	@ (8001b64 <MX_I2C1_Init+0x74>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b18:	4b12      	ldr	r3, [pc, #72]	@ (8001b64 <MX_I2C1_Init+0x74>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b1e:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <MX_I2C1_Init+0x74>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b24:	4b0f      	ldr	r3, [pc, #60]	@ (8001b64 <MX_I2C1_Init+0x74>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b2a:	480e      	ldr	r0, [pc, #56]	@ (8001b64 <MX_I2C1_Init+0x74>)
 8001b2c:	f001 f996 	bl	8002e5c <HAL_I2C_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b36:	f000 f8fb 	bl	8001d30 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4809      	ldr	r0, [pc, #36]	@ (8001b64 <MX_I2C1_Init+0x74>)
 8001b3e:	f001 ff19 	bl	8003974 <HAL_I2CEx_ConfigAnalogFilter>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b48:	f000 f8f2 	bl	8001d30 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	4805      	ldr	r0, [pc, #20]	@ (8001b64 <MX_I2C1_Init+0x74>)
 8001b50:	f001 ff5b 	bl	8003a0a <HAL_I2CEx_ConfigDigitalFilter>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b5a:	f000 f8e9 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	200001ec 	.word	0x200001ec
 8001b68:	40005400 	.word	0x40005400
 8001b6c:	0010020a 	.word	0x0010020a

08001b70 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b74:	4b1b      	ldr	r3, [pc, #108]	@ (8001be4 <MX_SPI1_Init+0x74>)
 8001b76:	4a1c      	ldr	r2, [pc, #112]	@ (8001be8 <MX_SPI1_Init+0x78>)
 8001b78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001be4 <MX_SPI1_Init+0x74>)
 8001b7c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b82:	4b18      	ldr	r3, [pc, #96]	@ (8001be4 <MX_SPI1_Init+0x74>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b88:	4b16      	ldr	r3, [pc, #88]	@ (8001be4 <MX_SPI1_Init+0x74>)
 8001b8a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001b8e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b90:	4b14      	ldr	r3, [pc, #80]	@ (8001be4 <MX_SPI1_Init+0x74>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b96:	4b13      	ldr	r3, [pc, #76]	@ (8001be4 <MX_SPI1_Init+0x74>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b9c:	4b11      	ldr	r3, [pc, #68]	@ (8001be4 <MX_SPI1_Init+0x74>)
 8001b9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ba2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8001be4 <MX_SPI1_Init+0x74>)
 8001ba6:	2218      	movs	r2, #24
 8001ba8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001baa:	4b0e      	ldr	r3, [pc, #56]	@ (8001be4 <MX_SPI1_Init+0x74>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001be4 <MX_SPI1_Init+0x74>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001be4 <MX_SPI1_Init+0x74>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001bbc:	4b09      	ldr	r3, [pc, #36]	@ (8001be4 <MX_SPI1_Init+0x74>)
 8001bbe:	2207      	movs	r2, #7
 8001bc0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001bc2:	4b08      	ldr	r3, [pc, #32]	@ (8001be4 <MX_SPI1_Init+0x74>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <MX_SPI1_Init+0x74>)
 8001bca:	2208      	movs	r2, #8
 8001bcc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bce:	4805      	ldr	r0, [pc, #20]	@ (8001be4 <MX_SPI1_Init+0x74>)
 8001bd0:	f004 ffd6 	bl	8006b80 <HAL_SPI_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001bda:	f000 f8a9 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000240 	.word	0x20000240
 8001be8:	40013000 	.word	0x40013000

08001bec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08a      	sub	sp, #40	@ 0x28
 8001bf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf2:	f107 0314 	add.w	r3, r7, #20
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]
 8001c00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c02:	4b3c      	ldr	r3, [pc, #240]	@ (8001cf4 <MX_GPIO_Init+0x108>)
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	4a3b      	ldr	r2, [pc, #236]	@ (8001cf4 <MX_GPIO_Init+0x108>)
 8001c08:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c0c:	6153      	str	r3, [r2, #20]
 8001c0e:	4b39      	ldr	r3, [pc, #228]	@ (8001cf4 <MX_GPIO_Init+0x108>)
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c1a:	4b36      	ldr	r3, [pc, #216]	@ (8001cf4 <MX_GPIO_Init+0x108>)
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	4a35      	ldr	r2, [pc, #212]	@ (8001cf4 <MX_GPIO_Init+0x108>)
 8001c20:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c24:	6153      	str	r3, [r2, #20]
 8001c26:	4b33      	ldr	r3, [pc, #204]	@ (8001cf4 <MX_GPIO_Init+0x108>)
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c32:	4b30      	ldr	r3, [pc, #192]	@ (8001cf4 <MX_GPIO_Init+0x108>)
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	4a2f      	ldr	r2, [pc, #188]	@ (8001cf4 <MX_GPIO_Init+0x108>)
 8001c38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c3c:	6153      	str	r3, [r2, #20]
 8001c3e:	4b2d      	ldr	r3, [pc, #180]	@ (8001cf4 <MX_GPIO_Init+0x108>)
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4a:	4b2a      	ldr	r3, [pc, #168]	@ (8001cf4 <MX_GPIO_Init+0x108>)
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	4a29      	ldr	r2, [pc, #164]	@ (8001cf4 <MX_GPIO_Init+0x108>)
 8001c50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c54:	6153      	str	r3, [r2, #20]
 8001c56:	4b27      	ldr	r3, [pc, #156]	@ (8001cf4 <MX_GPIO_Init+0x108>)
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001c62:	2200      	movs	r2, #0
 8001c64:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8001c68:	4823      	ldr	r0, [pc, #140]	@ (8001cf8 <MX_GPIO_Init+0x10c>)
 8001c6a:	f001 f8c7 	bl	8002dfc <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8001c6e:	2314      	movs	r3, #20
 8001c70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c72:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	4619      	mov	r1, r3
 8001c82:	481d      	ldr	r0, [pc, #116]	@ (8001cf8 <MX_GPIO_Init+0x10c>)
 8001c84:	f000 ff40 	bl	8002b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c8c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001c90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c92:	2302      	movs	r3, #2
 8001c94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c96:	f107 0314 	add.w	r3, r7, #20
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ca0:	f000 ff32 	bl	8002b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE9 PE10 PE11
                           PE12 PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001ca4:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8001ca8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001caa:	2301      	movs	r3, #1
 8001cac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cb6:	f107 0314 	add.w	r3, r7, #20
 8001cba:	4619      	mov	r1, r3
 8001cbc:	480e      	ldr	r0, [pc, #56]	@ (8001cf8 <MX_GPIO_Init+0x10c>)
 8001cbe:	f000 ff23 	bl	8002b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cc6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4808      	ldr	r0, [pc, #32]	@ (8001cf8 <MX_GPIO_Init+0x10c>)
 8001cd8:	f000 ff16 	bl	8002b08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2100      	movs	r1, #0
 8001ce0:	2006      	movs	r0, #6
 8001ce2:	f000 feda 	bl	8002a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001ce6:	2006      	movs	r0, #6
 8001ce8:	f000 fef3 	bl	8002ad2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cec:	bf00      	nop
 8001cee:	3728      	adds	r7, #40	@ 0x28
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	48001000 	.word	0x48001000

08001cfc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_1)
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d102      	bne.n	8001d12 <HAL_GPIO_EXTI_Callback+0x16>
	{
		Gyro_GetXYZ(GyroData);
 8001d0c:	4806      	ldr	r0, [pc, #24]	@ (8001d28 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001d0e:	f7ff f974 	bl	8000ffa <Gyro_GetXYZ>
	}
	if (GPIO_Pin == GPIO_PIN_0)
 8001d12:	88fb      	ldrh	r3, [r7, #6]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d102      	bne.n	8001d1e <HAL_GPIO_EXTI_Callback+0x22>
	{
		button_flag = 1;
 8001d18:	4b04      	ldr	r3, [pc, #16]	@ (8001d2c <HAL_GPIO_EXTI_Callback+0x30>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	701a      	strb	r2, [r3, #0]
	}
}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000310 	.word	0x20000310
 8001d2c:	20000328 	.word	0x20000328

08001d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d34:	b672      	cpsid	i
}
 8001d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d38:	bf00      	nop
 8001d3a:	e7fd      	b.n	8001d38 <Error_Handler+0x8>

08001d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d42:	4b0f      	ldr	r3, [pc, #60]	@ (8001d80 <HAL_MspInit+0x44>)
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	4a0e      	ldr	r2, [pc, #56]	@ (8001d80 <HAL_MspInit+0x44>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	6193      	str	r3, [r2, #24]
 8001d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d80 <HAL_MspInit+0x44>)
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	607b      	str	r3, [r7, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d5a:	4b09      	ldr	r3, [pc, #36]	@ (8001d80 <HAL_MspInit+0x44>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	4a08      	ldr	r2, [pc, #32]	@ (8001d80 <HAL_MspInit+0x44>)
 8001d60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d64:	61d3      	str	r3, [r2, #28]
 8001d66:	4b06      	ldr	r3, [pc, #24]	@ (8001d80 <HAL_MspInit+0x44>)
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d6e:	603b      	str	r3, [r7, #0]
 8001d70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	40021000 	.word	0x40021000

08001d84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08a      	sub	sp, #40	@ 0x28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a17      	ldr	r2, [pc, #92]	@ (8001e00 <HAL_I2C_MspInit+0x7c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d127      	bne.n	8001df6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da6:	4b17      	ldr	r3, [pc, #92]	@ (8001e04 <HAL_I2C_MspInit+0x80>)
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	4a16      	ldr	r2, [pc, #88]	@ (8001e04 <HAL_I2C_MspInit+0x80>)
 8001dac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001db0:	6153      	str	r3, [r2, #20]
 8001db2:	4b14      	ldr	r3, [pc, #80]	@ (8001e04 <HAL_I2C_MspInit+0x80>)
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dbe:	23c0      	movs	r3, #192	@ 0xc0
 8001dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dc2:	2312      	movs	r3, #18
 8001dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dce:	2304      	movs	r3, #4
 8001dd0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd2:	f107 0314 	add.w	r3, r7, #20
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	480b      	ldr	r0, [pc, #44]	@ (8001e08 <HAL_I2C_MspInit+0x84>)
 8001dda:	f000 fe95 	bl	8002b08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dde:	4b09      	ldr	r3, [pc, #36]	@ (8001e04 <HAL_I2C_MspInit+0x80>)
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	4a08      	ldr	r2, [pc, #32]	@ (8001e04 <HAL_I2C_MspInit+0x80>)
 8001de4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001de8:	61d3      	str	r3, [r2, #28]
 8001dea:	4b06      	ldr	r3, [pc, #24]	@ (8001e04 <HAL_I2C_MspInit+0x80>)
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001df6:	bf00      	nop
 8001df8:	3728      	adds	r7, #40	@ 0x28
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40005400 	.word	0x40005400
 8001e04:	40021000 	.word	0x40021000
 8001e08:	48000400 	.word	0x48000400

08001e0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	@ 0x28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 0314 	add.w	r3, r7, #20
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a17      	ldr	r2, [pc, #92]	@ (8001e88 <HAL_SPI_MspInit+0x7c>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d128      	bne.n	8001e80 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e2e:	4b17      	ldr	r3, [pc, #92]	@ (8001e8c <HAL_SPI_MspInit+0x80>)
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	4a16      	ldr	r2, [pc, #88]	@ (8001e8c <HAL_SPI_MspInit+0x80>)
 8001e34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e38:	6193      	str	r3, [r2, #24]
 8001e3a:	4b14      	ldr	r3, [pc, #80]	@ (8001e8c <HAL_SPI_MspInit+0x80>)
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e46:	4b11      	ldr	r3, [pc, #68]	@ (8001e8c <HAL_SPI_MspInit+0x80>)
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	4a10      	ldr	r2, [pc, #64]	@ (8001e8c <HAL_SPI_MspInit+0x80>)
 8001e4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e50:	6153      	str	r3, [r2, #20]
 8001e52:	4b0e      	ldr	r3, [pc, #56]	@ (8001e8c <HAL_SPI_MspInit+0x80>)
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e5e:	23e0      	movs	r3, #224	@ 0xe0
 8001e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e62:	2302      	movs	r3, #2
 8001e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e6e:	2305      	movs	r3, #5
 8001e70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e72:	f107 0314 	add.w	r3, r7, #20
 8001e76:	4619      	mov	r1, r3
 8001e78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e7c:	f000 fe44 	bl	8002b08 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001e80:	bf00      	nop
 8001e82:	3728      	adds	r7, #40	@ 0x28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40013000 	.word	0x40013000
 8001e8c:	40021000 	.word	0x40021000

08001e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e94:	bf00      	nop
 8001e96:	e7fd      	b.n	8001e94 <NMI_Handler+0x4>

08001e98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e9c:	bf00      	nop
 8001e9e:	e7fd      	b.n	8001e9c <HardFault_Handler+0x4>

08001ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ea4:	bf00      	nop
 8001ea6:	e7fd      	b.n	8001ea4 <MemManage_Handler+0x4>

08001ea8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eac:	bf00      	nop
 8001eae:	e7fd      	b.n	8001eac <BusFault_Handler+0x4>

08001eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eb4:	bf00      	nop
 8001eb6:	e7fd      	b.n	8001eb4 <UsageFault_Handler+0x4>

08001eb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ee6:	f000 fcb9 	bl	800285c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}

08001eee <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	f000 ff9a 	bl	8002e2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001ef8:	bf00      	nop
 8001efa:	bd80      	pop	{r7, pc}

08001efc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001f00:	2002      	movs	r0, #2
 8001f02:	f000 ff93 	bl	8002e2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001f10:	4802      	ldr	r0, [pc, #8]	@ (8001f1c <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8001f12:	f001 feb3 	bl	8003c7c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	2000081c 	.word	0x2000081c

08001f20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f28:	4a14      	ldr	r2, [pc, #80]	@ (8001f7c <_sbrk+0x5c>)
 8001f2a:	4b15      	ldr	r3, [pc, #84]	@ (8001f80 <_sbrk+0x60>)
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f34:	4b13      	ldr	r3, [pc, #76]	@ (8001f84 <_sbrk+0x64>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d102      	bne.n	8001f42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f3c:	4b11      	ldr	r3, [pc, #68]	@ (8001f84 <_sbrk+0x64>)
 8001f3e:	4a12      	ldr	r2, [pc, #72]	@ (8001f88 <_sbrk+0x68>)
 8001f40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f42:	4b10      	ldr	r3, [pc, #64]	@ (8001f84 <_sbrk+0x64>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4413      	add	r3, r2
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d207      	bcs.n	8001f60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f50:	f009 f820 	bl	800af94 <__errno>
 8001f54:	4603      	mov	r3, r0
 8001f56:	220c      	movs	r2, #12
 8001f58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f5e:	e009      	b.n	8001f74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f60:	4b08      	ldr	r3, [pc, #32]	@ (8001f84 <_sbrk+0x64>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f66:	4b07      	ldr	r3, [pc, #28]	@ (8001f84 <_sbrk+0x64>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	4a05      	ldr	r2, [pc, #20]	@ (8001f84 <_sbrk+0x64>)
 8001f70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f72:	68fb      	ldr	r3, [r7, #12]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	2000a000 	.word	0x2000a000
 8001f80:	00004000 	.word	0x00004000
 8001f84:	20000354 	.word	0x20000354
 8001f88:	20000c58 	.word	0x20000c58

08001f8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fc4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f90:	f000 fc0c 	bl	80027ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f94:	480c      	ldr	r0, [pc, #48]	@ (8001fc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f96:	490d      	ldr	r1, [pc, #52]	@ (8001fcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f98:	4a0d      	ldr	r2, [pc, #52]	@ (8001fd0 <LoopForever+0xe>)
  movs r3, #0
 8001f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f9c:	e002      	b.n	8001fa4 <LoopCopyDataInit>

08001f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fa2:	3304      	adds	r3, #4

08001fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fa8:	d3f9      	bcc.n	8001f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001faa:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fac:	4c0a      	ldr	r4, [pc, #40]	@ (8001fd8 <LoopForever+0x16>)
  movs r3, #0
 8001fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb0:	e001      	b.n	8001fb6 <LoopFillZerobss>

08001fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fb4:	3204      	adds	r2, #4

08001fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fb8:	d3fb      	bcc.n	8001fb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fba:	f008 fff1 	bl	800afa0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fbe:	f7ff fb33 	bl	8001628 <main>

08001fc2 <LoopForever>:

LoopForever:
    b LoopForever
 8001fc2:	e7fe      	b.n	8001fc2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001fc4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fcc:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8001fd0:	0800d3a0 	.word	0x0800d3a0
  ldr r2, =_sbss
 8001fd4:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8001fd8:	20000c54 	.word	0x20000c54

08001fdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fdc:	e7fe      	b.n	8001fdc <ADC1_2_IRQHandler>
	...

08001fe0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	490e      	ldr	r1, [pc, #56]	@ (8002020 <MX_USB_DEVICE_Init+0x40>)
 8001fe8:	480e      	ldr	r0, [pc, #56]	@ (8002024 <MX_USB_DEVICE_Init+0x44>)
 8001fea:	f007 fd72 	bl	8009ad2 <USBD_Init>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8001ff4:	f7ff fe9c 	bl	8001d30 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8001ff8:	490b      	ldr	r1, [pc, #44]	@ (8002028 <MX_USB_DEVICE_Init+0x48>)
 8001ffa:	480a      	ldr	r0, [pc, #40]	@ (8002024 <MX_USB_DEVICE_Init+0x44>)
 8001ffc:	f007 fd94 	bl	8009b28 <USBD_RegisterClass>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8002006:	f7ff fe93 	bl	8001d30 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800200a:	4806      	ldr	r0, [pc, #24]	@ (8002024 <MX_USB_DEVICE_Init+0x44>)
 800200c:	f007 fda6 	bl	8009b5c <USBD_Start>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8002016:	f7ff fe8b 	bl	8001d30 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000008 	.word	0x20000008
 8002024:	20000358 	.word	0x20000358
 8002028:	20000064 	.word	0x20000064

0800202c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	6039      	str	r1, [r7, #0]
 8002036:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	2212      	movs	r2, #18
 800203c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800203e:	4b03      	ldr	r3, [pc, #12]	@ (800204c <USBD_FS_DeviceDescriptor+0x20>)
}
 8002040:	4618      	mov	r0, r3
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	20000024 	.word	0x20000024

08002050 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	6039      	str	r1, [r7, #0]
 800205a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	2204      	movs	r2, #4
 8002060:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8002062:	4b03      	ldr	r3, [pc, #12]	@ (8002070 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8002064:	4618      	mov	r0, r3
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	20000038 	.word	0x20000038

08002074 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	6039      	str	r1, [r7, #0]
 800207e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d105      	bne.n	8002092 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	4907      	ldr	r1, [pc, #28]	@ (80020a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800208a:	4808      	ldr	r0, [pc, #32]	@ (80020ac <USBD_FS_ProductStrDescriptor+0x38>)
 800208c:	f008 fce0 	bl	800aa50 <USBD_GetString>
 8002090:	e004      	b.n	800209c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	4904      	ldr	r1, [pc, #16]	@ (80020a8 <USBD_FS_ProductStrDescriptor+0x34>)
 8002096:	4805      	ldr	r0, [pc, #20]	@ (80020ac <USBD_FS_ProductStrDescriptor+0x38>)
 8002098:	f008 fcda 	bl	800aa50 <USBD_GetString>
  }
  return USBD_StrDesc;
 800209c:	4b02      	ldr	r3, [pc, #8]	@ (80020a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	2000061c 	.word	0x2000061c
 80020ac:	0800d098 	.word	0x0800d098

080020b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	6039      	str	r1, [r7, #0]
 80020ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	4904      	ldr	r1, [pc, #16]	@ (80020d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80020c0:	4804      	ldr	r0, [pc, #16]	@ (80020d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80020c2:	f008 fcc5 	bl	800aa50 <USBD_GetString>
  return USBD_StrDesc;
 80020c6:	4b02      	ldr	r3, [pc, #8]	@ (80020d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	2000061c 	.word	0x2000061c
 80020d4:	0800d0b0 	.word	0x0800d0b0

080020d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	6039      	str	r1, [r7, #0]
 80020e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	221a      	movs	r2, #26
 80020e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80020ea:	f000 f843 	bl	8002174 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80020ee:	4b02      	ldr	r3, [pc, #8]	@ (80020f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	2000003c 	.word	0x2000003c

080020fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	6039      	str	r1, [r7, #0]
 8002106:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d105      	bne.n	800211a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	4907      	ldr	r1, [pc, #28]	@ (8002130 <USBD_FS_ConfigStrDescriptor+0x34>)
 8002112:	4808      	ldr	r0, [pc, #32]	@ (8002134 <USBD_FS_ConfigStrDescriptor+0x38>)
 8002114:	f008 fc9c 	bl	800aa50 <USBD_GetString>
 8002118:	e004      	b.n	8002124 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	4904      	ldr	r1, [pc, #16]	@ (8002130 <USBD_FS_ConfigStrDescriptor+0x34>)
 800211e:	4805      	ldr	r0, [pc, #20]	@ (8002134 <USBD_FS_ConfigStrDescriptor+0x38>)
 8002120:	f008 fc96 	bl	800aa50 <USBD_GetString>
  }
  return USBD_StrDesc;
 8002124:	4b02      	ldr	r3, [pc, #8]	@ (8002130 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	2000061c 	.word	0x2000061c
 8002134:	0800d0c4 	.word	0x0800d0c4

08002138 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	6039      	str	r1, [r7, #0]
 8002142:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8002144:	79fb      	ldrb	r3, [r7, #7]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d105      	bne.n	8002156 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	4907      	ldr	r1, [pc, #28]	@ (800216c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800214e:	4808      	ldr	r0, [pc, #32]	@ (8002170 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8002150:	f008 fc7e 	bl	800aa50 <USBD_GetString>
 8002154:	e004      	b.n	8002160 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	4904      	ldr	r1, [pc, #16]	@ (800216c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800215a:	4805      	ldr	r0, [pc, #20]	@ (8002170 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800215c:	f008 fc78 	bl	800aa50 <USBD_GetString>
  }
  return USBD_StrDesc;
 8002160:	4b02      	ldr	r3, [pc, #8]	@ (800216c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	2000061c 	.word	0x2000061c
 8002170:	0800d0d0 	.word	0x0800d0d0

08002174 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800217a:	4b0f      	ldr	r3, [pc, #60]	@ (80021b8 <Get_SerialNum+0x44>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8002180:	4b0e      	ldr	r3, [pc, #56]	@ (80021bc <Get_SerialNum+0x48>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8002186:	4b0e      	ldr	r3, [pc, #56]	@ (80021c0 <Get_SerialNum+0x4c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4413      	add	r3, r2
 8002192:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d009      	beq.n	80021ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800219a:	2208      	movs	r2, #8
 800219c:	4909      	ldr	r1, [pc, #36]	@ (80021c4 <Get_SerialNum+0x50>)
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f000 f814 	bl	80021cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80021a4:	2204      	movs	r2, #4
 80021a6:	4908      	ldr	r1, [pc, #32]	@ (80021c8 <Get_SerialNum+0x54>)
 80021a8:	68b8      	ldr	r0, [r7, #8]
 80021aa:	f000 f80f 	bl	80021cc <IntToUnicode>
  }
}
 80021ae:	bf00      	nop
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	1ffff7ac 	.word	0x1ffff7ac
 80021bc:	1ffff7b0 	.word	0x1ffff7b0
 80021c0:	1ffff7b4 	.word	0x1ffff7b4
 80021c4:	2000003e 	.word	0x2000003e
 80021c8:	2000004e 	.word	0x2000004e

080021cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b087      	sub	sp, #28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	4613      	mov	r3, r2
 80021d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80021da:	2300      	movs	r3, #0
 80021dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80021de:	2300      	movs	r3, #0
 80021e0:	75fb      	strb	r3, [r7, #23]
 80021e2:	e027      	b.n	8002234 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	0f1b      	lsrs	r3, r3, #28
 80021e8:	2b09      	cmp	r3, #9
 80021ea:	d80b      	bhi.n	8002204 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	0f1b      	lsrs	r3, r3, #28
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	7dfb      	ldrb	r3, [r7, #23]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	4619      	mov	r1, r3
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	440b      	add	r3, r1
 80021fc:	3230      	adds	r2, #48	@ 0x30
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	701a      	strb	r2, [r3, #0]
 8002202:	e00a      	b.n	800221a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	0f1b      	lsrs	r3, r3, #28
 8002208:	b2da      	uxtb	r2, r3
 800220a:	7dfb      	ldrb	r3, [r7, #23]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	4619      	mov	r1, r3
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	440b      	add	r3, r1
 8002214:	3237      	adds	r2, #55	@ 0x37
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	011b      	lsls	r3, r3, #4
 800221e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8002220:	7dfb      	ldrb	r3, [r7, #23]
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	3301      	adds	r3, #1
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	4413      	add	r3, r2
 800222a:	2200      	movs	r2, #0
 800222c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800222e:	7dfb      	ldrb	r3, [r7, #23]
 8002230:	3301      	adds	r3, #1
 8002232:	75fb      	strb	r3, [r7, #23]
 8002234:	7dfa      	ldrb	r2, [r7, #23]
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	429a      	cmp	r2, r3
 800223a:	d3d3      	bcc.n	80021e4 <IntToUnicode+0x18>
  }
}
 800223c:	bf00      	nop
 800223e:	bf00      	nop
 8002240:	371c      	adds	r7, #28
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
	...

0800224c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08a      	sub	sp, #40	@ 0x28
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002254:	f107 0314 	add.w	r3, r7, #20
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a1c      	ldr	r2, [pc, #112]	@ (80022dc <HAL_PCD_MspInit+0x90>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d131      	bne.n	80022d2 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800226e:	4b1c      	ldr	r3, [pc, #112]	@ (80022e0 <HAL_PCD_MspInit+0x94>)
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	4a1b      	ldr	r2, [pc, #108]	@ (80022e0 <HAL_PCD_MspInit+0x94>)
 8002274:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002278:	6153      	str	r3, [r2, #20]
 800227a:	4b19      	ldr	r3, [pc, #100]	@ (80022e0 <HAL_PCD_MspInit+0x94>)
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002286:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800228a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228c:	2302      	movs	r3, #2
 800228e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002294:	2303      	movs	r3, #3
 8002296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8002298:	230e      	movs	r3, #14
 800229a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	4619      	mov	r1, r3
 80022a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022a6:	f000 fc2f 	bl	8002b08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80022aa:	4b0d      	ldr	r3, [pc, #52]	@ (80022e0 <HAL_PCD_MspInit+0x94>)
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	4a0c      	ldr	r2, [pc, #48]	@ (80022e0 <HAL_PCD_MspInit+0x94>)
 80022b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80022b4:	61d3      	str	r3, [r2, #28]
 80022b6:	4b0a      	ldr	r3, [pc, #40]	@ (80022e0 <HAL_PCD_MspInit+0x94>)
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80022c2:	2200      	movs	r2, #0
 80022c4:	2100      	movs	r1, #0
 80022c6:	2014      	movs	r0, #20
 80022c8:	f000 fbe7 	bl	8002a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80022cc:	2014      	movs	r0, #20
 80022ce:	f000 fc00 	bl	8002ad2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80022d2:	bf00      	nop
 80022d4:	3728      	adds	r7, #40	@ 0x28
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40005c00 	.word	0x40005c00
 80022e0:	40021000 	.word	0x40021000

080022e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80022f8:	4619      	mov	r1, r3
 80022fa:	4610      	mov	r0, r2
 80022fc:	f007 fc77 	bl	8009bee <USBD_LL_SetupStage>
}
 8002300:	bf00      	nop
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 800231a:	78fa      	ldrb	r2, [r7, #3]
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	440b      	add	r3, r1
 8002328:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	78fb      	ldrb	r3, [r7, #3]
 8002330:	4619      	mov	r1, r3
 8002332:	f007 fca9 	bl	8009c88 <USBD_LL_DataOutStage>
}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
 8002346:	460b      	mov	r3, r1
 8002348:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 8002350:	78fa      	ldrb	r2, [r7, #3]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4613      	mov	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	440b      	add	r3, r1
 800235e:	3324      	adds	r3, #36	@ 0x24
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	78fb      	ldrb	r3, [r7, #3]
 8002364:	4619      	mov	r1, r3
 8002366:	f007 fd00 	bl	8009d6a <USBD_LL_DataInStage>
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8002380:	4618      	mov	r0, r3
 8002382:	f007 fe13 	bl	8009fac <USBD_LL_SOF>
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b084      	sub	sp, #16
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8002396:	2301      	movs	r3, #1
 8002398:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	795b      	ldrb	r3, [r3, #5]
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d001      	beq.n	80023a6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80023a2:	f7ff fcc5 	bl	8001d30 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 80023ac:	7bfa      	ldrb	r2, [r7, #15]
 80023ae:	4611      	mov	r1, r2
 80023b0:	4618      	mov	r0, r3
 80023b2:	f007 fdc0 	bl	8009f36 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 80023bc:	4618      	mov	r0, r3
 80023be:	f007 fd79 	bl	8009eb4 <USBD_LL_Reset>
}
 80023c2:	bf00      	nop
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
	...

080023cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 80023da:	4618      	mov	r0, r3
 80023dc:	f007 fdbb 	bl	8009f56 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	7a5b      	ldrb	r3, [r3, #9]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80023e8:	4b04      	ldr	r3, [pc, #16]	@ (80023fc <HAL_PCD_SuspendCallback+0x30>)
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	4a03      	ldr	r2, [pc, #12]	@ (80023fc <HAL_PCD_SuspendCallback+0x30>)
 80023ee:	f043 0306 	orr.w	r3, r3, #6
 80023f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80023f4:	bf00      	nop
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800240e:	4618      	mov	r0, r3
 8002410:	f007 fdb6 	bl	8009f80 <USBD_LL_Resume>
}
 8002414:	bf00      	nop
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8002424:	4a1f      	ldr	r2, [pc, #124]	@ (80024a4 <USBD_LL_Init+0x88>)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f8c2 32d0 	str.w	r3, [r2, #720]	@ 0x2d0
  pdev->pData = &hpcd_USB_FS;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a1d      	ldr	r2, [pc, #116]	@ (80024a4 <USBD_LL_Init+0x88>)
 8002430:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8002434:	4b1b      	ldr	r3, [pc, #108]	@ (80024a4 <USBD_LL_Init+0x88>)
 8002436:	4a1c      	ldr	r2, [pc, #112]	@ (80024a8 <USBD_LL_Init+0x8c>)
 8002438:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800243a:	4b1a      	ldr	r3, [pc, #104]	@ (80024a4 <USBD_LL_Init+0x88>)
 800243c:	2208      	movs	r2, #8
 800243e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002440:	4b18      	ldr	r3, [pc, #96]	@ (80024a4 <USBD_LL_Init+0x88>)
 8002442:	2202      	movs	r2, #2
 8002444:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002446:	4b17      	ldr	r3, [pc, #92]	@ (80024a4 <USBD_LL_Init+0x88>)
 8002448:	2202      	movs	r2, #2
 800244a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800244c:	4b15      	ldr	r3, [pc, #84]	@ (80024a4 <USBD_LL_Init+0x88>)
 800244e:	2200      	movs	r2, #0
 8002450:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002452:	4b14      	ldr	r3, [pc, #80]	@ (80024a4 <USBD_LL_Init+0x88>)
 8002454:	2200      	movs	r2, #0
 8002456:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002458:	4812      	ldr	r0, [pc, #72]	@ (80024a4 <USBD_LL_Init+0x88>)
 800245a:	f001 fb22 	bl	8003aa2 <HAL_PCD_Init>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8002464:	f7ff fc64 	bl	8001d30 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800246e:	2318      	movs	r3, #24
 8002470:	2200      	movs	r2, #0
 8002472:	2100      	movs	r1, #0
 8002474:	f002 ff83 	bl	800537e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800247e:	2358      	movs	r3, #88	@ 0x58
 8002480:	2200      	movs	r2, #0
 8002482:	2180      	movs	r1, #128	@ 0x80
 8002484:	f002 ff7b 	bl	800537e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800248e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002492:	2200      	movs	r2, #0
 8002494:	2181      	movs	r1, #129	@ 0x81
 8002496:	f002 ff72 	bl	800537e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	2000081c 	.word	0x2000081c
 80024a8:	40005c00 	.word	0x40005c00

080024ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80024b8:	2300      	movs	r3, #0
 80024ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80024c2:	4618      	mov	r0, r3
 80024c4:	f001 fbb4 	bl	8003c30 <HAL_PCD_Start>
 80024c8:	4603      	mov	r3, r0
 80024ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 f940 	bl	8002754 <USBD_Get_USB_Status>
 80024d4:	4603      	mov	r3, r0
 80024d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80024d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b084      	sub	sp, #16
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
 80024ea:	4608      	mov	r0, r1
 80024ec:	4611      	mov	r1, r2
 80024ee:	461a      	mov	r2, r3
 80024f0:	4603      	mov	r3, r0
 80024f2:	70fb      	strb	r3, [r7, #3]
 80024f4:	460b      	mov	r3, r1
 80024f6:	70bb      	strb	r3, [r7, #2]
 80024f8:	4613      	mov	r3, r2
 80024fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80024fc:	2300      	movs	r3, #0
 80024fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002500:	2300      	movs	r3, #0
 8002502:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800250a:	78bb      	ldrb	r3, [r7, #2]
 800250c:	883a      	ldrh	r2, [r7, #0]
 800250e:	78f9      	ldrb	r1, [r7, #3]
 8002510:	f001 fcac 	bl	8003e6c <HAL_PCD_EP_Open>
 8002514:	4603      	mov	r3, r0
 8002516:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002518:	7bfb      	ldrb	r3, [r7, #15]
 800251a:	4618      	mov	r0, r3
 800251c:	f000 f91a 	bl	8002754 <USBD_Get_USB_Status>
 8002520:	4603      	mov	r3, r0
 8002522:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002524:	7bbb      	ldrb	r3, [r7, #14]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b084      	sub	sp, #16
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
 8002536:	460b      	mov	r3, r1
 8002538:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800253a:	2300      	movs	r3, #0
 800253c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8002548:	78fa      	ldrb	r2, [r7, #3]
 800254a:	4611      	mov	r1, r2
 800254c:	4618      	mov	r0, r3
 800254e:	f001 fcea 	bl	8003f26 <HAL_PCD_EP_Close>
 8002552:	4603      	mov	r3, r0
 8002554:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002556:	7bfb      	ldrb	r3, [r7, #15]
 8002558:	4618      	mov	r0, r3
 800255a:	f000 f8fb 	bl	8002754 <USBD_Get_USB_Status>
 800255e:	4603      	mov	r3, r0
 8002560:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002562:	7bbb      	ldrb	r3, [r7, #14]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002578:	2300      	movs	r3, #0
 800257a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800257c:	2300      	movs	r3, #0
 800257e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8002586:	78fa      	ldrb	r2, [r7, #3]
 8002588:	4611      	mov	r1, r2
 800258a:	4618      	mov	r0, r3
 800258c:	f001 fd7b 	bl	8004086 <HAL_PCD_EP_SetStall>
 8002590:	4603      	mov	r3, r0
 8002592:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	4618      	mov	r0, r3
 8002598:	f000 f8dc 	bl	8002754 <USBD_Get_USB_Status>
 800259c:	4603      	mov	r3, r0
 800259e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80025a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b084      	sub	sp, #16
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
 80025b2:	460b      	mov	r3, r1
 80025b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80025b6:	2300      	movs	r3, #0
 80025b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80025c4:	78fa      	ldrb	r2, [r7, #3]
 80025c6:	4611      	mov	r1, r2
 80025c8:	4618      	mov	r0, r3
 80025ca:	f001 fdae 	bl	800412a <HAL_PCD_EP_ClrStall>
 80025ce:	4603      	mov	r3, r0
 80025d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f000 f8bd 	bl	8002754 <USBD_Get_USB_Status>
 80025da:	4603      	mov	r3, r0
 80025dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80025de:	7bbb      	ldrb	r3, [r7, #14]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80025fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80025fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002600:	2b00      	cmp	r3, #0
 8002602:	da0b      	bge.n	800261c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8002604:	78fb      	ldrb	r3, [r7, #3]
 8002606:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800260a:	68f9      	ldr	r1, [r7, #12]
 800260c:	4613      	mov	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	440b      	add	r3, r1
 8002616:	3312      	adds	r3, #18
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	e00b      	b.n	8002634 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800261c:	78fb      	ldrb	r3, [r7, #3]
 800261e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002622:	68f9      	ldr	r1, [r7, #12]
 8002624:	4613      	mov	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	440b      	add	r3, r1
 800262e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8002632:	781b      	ldrb	r3, [r3, #0]
  }
}
 8002634:	4618      	mov	r0, r3
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800264c:	2300      	movs	r3, #0
 800264e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002650:	2300      	movs	r3, #0
 8002652:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800265a:	78fa      	ldrb	r2, [r7, #3]
 800265c:	4611      	mov	r1, r2
 800265e:	4618      	mov	r0, r3
 8002660:	f001 fbe0 	bl	8003e24 <HAL_PCD_SetAddress>
 8002664:	4603      	mov	r3, r0
 8002666:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002668:	7bfb      	ldrb	r3, [r7, #15]
 800266a:	4618      	mov	r0, r3
 800266c:	f000 f872 	bl	8002754 <USBD_Get_USB_Status>
 8002670:	4603      	mov	r3, r0
 8002672:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002674:	7bbb      	ldrb	r3, [r7, #14]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b086      	sub	sp, #24
 8002682:	af00      	add	r7, sp, #0
 8002684:	60f8      	str	r0, [r7, #12]
 8002686:	607a      	str	r2, [r7, #4]
 8002688:	461a      	mov	r2, r3
 800268a:	460b      	mov	r3, r1
 800268c:	72fb      	strb	r3, [r7, #11]
 800268e:	4613      	mov	r3, r2
 8002690:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002696:	2300      	movs	r3, #0
 8002698:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80026a0:	893b      	ldrh	r3, [r7, #8]
 80026a2:	7af9      	ldrb	r1, [r7, #11]
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	f001 fcb7 	bl	8004018 <HAL_PCD_EP_Transmit>
 80026aa:	4603      	mov	r3, r0
 80026ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80026ae:	7dfb      	ldrb	r3, [r7, #23]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f000 f84f 	bl	8002754 <USBD_Get_USB_Status>
 80026b6:	4603      	mov	r3, r0
 80026b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80026ba:	7dbb      	ldrb	r3, [r7, #22]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	607a      	str	r2, [r7, #4]
 80026ce:	461a      	mov	r2, r3
 80026d0:	460b      	mov	r3, r1
 80026d2:	72fb      	strb	r3, [r7, #11]
 80026d4:	4613      	mov	r3, r2
 80026d6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80026d8:	2300      	movs	r3, #0
 80026da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80026dc:	2300      	movs	r3, #0
 80026de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80026e6:	893b      	ldrh	r3, [r7, #8]
 80026e8:	7af9      	ldrb	r1, [r7, #11]
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	f001 fc63 	bl	8003fb6 <HAL_PCD_EP_Receive>
 80026f0:	4603      	mov	r3, r0
 80026f2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80026f4:	7dfb      	ldrb	r3, [r7, #23]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 f82c 	bl	8002754 <USBD_Get_USB_Status>
 80026fc:	4603      	mov	r3, r0
 80026fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8002700:	7dbb      	ldrb	r3, [r7, #22]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
	...

0800270c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8002714:	4b03      	ldr	r3, [pc, #12]	@ (8002724 <USBD_static_malloc+0x18>)
}
 8002716:	4618      	mov	r0, r3
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	20000af0 	.word	0x20000af0

08002728 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]

}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800275e:	2300      	movs	r3, #0
 8002760:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	2b03      	cmp	r3, #3
 8002766:	d817      	bhi.n	8002798 <USBD_Get_USB_Status+0x44>
 8002768:	a201      	add	r2, pc, #4	@ (adr r2, 8002770 <USBD_Get_USB_Status+0x1c>)
 800276a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800276e:	bf00      	nop
 8002770:	08002781 	.word	0x08002781
 8002774:	08002787 	.word	0x08002787
 8002778:	0800278d 	.word	0x0800278d
 800277c:	08002793 	.word	0x08002793
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8002780:	2300      	movs	r3, #0
 8002782:	73fb      	strb	r3, [r7, #15]
    break;
 8002784:	e00b      	b.n	800279e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8002786:	2302      	movs	r3, #2
 8002788:	73fb      	strb	r3, [r7, #15]
    break;
 800278a:	e008      	b.n	800279e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800278c:	2301      	movs	r3, #1
 800278e:	73fb      	strb	r3, [r7, #15]
    break;
 8002790:	e005      	b.n	800279e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8002792:	2302      	movs	r3, #2
 8002794:	73fb      	strb	r3, [r7, #15]
    break;
 8002796:	e002      	b.n	800279e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8002798:	2302      	movs	r3, #2
 800279a:	73fb      	strb	r3, [r7, #15]
    break;
 800279c:	bf00      	nop
  }
  return usb_status;
 800279e:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027b0:	4b06      	ldr	r3, [pc, #24]	@ (80027cc <SystemInit+0x20>)
 80027b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b6:	4a05      	ldr	r2, [pc, #20]	@ (80027cc <SystemInit+0x20>)
 80027b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	e000ed00 	.word	0xe000ed00

080027d0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027d4:	4b08      	ldr	r3, [pc, #32]	@ (80027f8 <HAL_Init+0x28>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a07      	ldr	r2, [pc, #28]	@ (80027f8 <HAL_Init+0x28>)
 80027da:	f043 0310 	orr.w	r3, r3, #16
 80027de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027e0:	2003      	movs	r0, #3
 80027e2:	f000 f94f 	bl	8002a84 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027e6:	200f      	movs	r0, #15
 80027e8:	f000 f808 	bl	80027fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027ec:	f7ff faa6 	bl	8001d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40022000 	.word	0x40022000

080027fc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002804:	4b12      	ldr	r3, [pc, #72]	@ (8002850 <HAL_InitTick+0x54>)
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	4b12      	ldr	r3, [pc, #72]	@ (8002854 <HAL_InitTick+0x58>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	4619      	mov	r1, r3
 800280e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002812:	fbb3 f3f1 	udiv	r3, r3, r1
 8002816:	fbb2 f3f3 	udiv	r3, r2, r3
 800281a:	4618      	mov	r0, r3
 800281c:	f000 f967 	bl	8002aee <HAL_SYSTICK_Config>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e00e      	b.n	8002848 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b0f      	cmp	r3, #15
 800282e:	d80a      	bhi.n	8002846 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002830:	2200      	movs	r2, #0
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	f04f 30ff 	mov.w	r0, #4294967295
 8002838:	f000 f92f 	bl	8002a9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800283c:	4a06      	ldr	r2, [pc, #24]	@ (8002858 <HAL_InitTick+0x5c>)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002842:	2300      	movs	r3, #0
 8002844:	e000      	b.n	8002848 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
}
 8002848:	4618      	mov	r0, r3
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	20000058 	.word	0x20000058
 8002854:	20000060 	.word	0x20000060
 8002858:	2000005c 	.word	0x2000005c

0800285c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002860:	4b06      	ldr	r3, [pc, #24]	@ (800287c <HAL_IncTick+0x20>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	461a      	mov	r2, r3
 8002866:	4b06      	ldr	r3, [pc, #24]	@ (8002880 <HAL_IncTick+0x24>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4413      	add	r3, r2
 800286c:	4a04      	ldr	r2, [pc, #16]	@ (8002880 <HAL_IncTick+0x24>)
 800286e:	6013      	str	r3, [r2, #0]
}
 8002870:	bf00      	nop
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	20000060 	.word	0x20000060
 8002880:	20000b04 	.word	0x20000b04

08002884 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return uwTick;  
 8002888:	4b03      	ldr	r3, [pc, #12]	@ (8002898 <HAL_GetTick+0x14>)
 800288a:	681b      	ldr	r3, [r3, #0]
}
 800288c:	4618      	mov	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	20000b04 	.word	0x20000b04

0800289c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028a4:	f7ff ffee 	bl	8002884 <HAL_GetTick>
 80028a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b4:	d005      	beq.n	80028c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028b6:	4b0a      	ldr	r3, [pc, #40]	@ (80028e0 <HAL_Delay+0x44>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	461a      	mov	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4413      	add	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80028c2:	bf00      	nop
 80028c4:	f7ff ffde 	bl	8002884 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d8f7      	bhi.n	80028c4 <HAL_Delay+0x28>
  {
  }
}
 80028d4:	bf00      	nop
 80028d6:	bf00      	nop
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000060 	.word	0x20000060

080028e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002928 <__NVIC_SetPriorityGrouping+0x44>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002900:	4013      	ands	r3, r2
 8002902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800290c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002910:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002916:	4a04      	ldr	r2, [pc, #16]	@ (8002928 <__NVIC_SetPriorityGrouping+0x44>)
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	60d3      	str	r3, [r2, #12]
}
 800291c:	bf00      	nop
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002930:	4b04      	ldr	r3, [pc, #16]	@ (8002944 <__NVIC_GetPriorityGrouping+0x18>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	0a1b      	lsrs	r3, r3, #8
 8002936:	f003 0307 	and.w	r3, r3, #7
}
 800293a:	4618      	mov	r0, r3
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	2b00      	cmp	r3, #0
 8002958:	db0b      	blt.n	8002972 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800295a:	79fb      	ldrb	r3, [r7, #7]
 800295c:	f003 021f 	and.w	r2, r3, #31
 8002960:	4907      	ldr	r1, [pc, #28]	@ (8002980 <__NVIC_EnableIRQ+0x38>)
 8002962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002966:	095b      	lsrs	r3, r3, #5
 8002968:	2001      	movs	r0, #1
 800296a:	fa00 f202 	lsl.w	r2, r0, r2
 800296e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	e000e100 	.word	0xe000e100

08002984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	6039      	str	r1, [r7, #0]
 800298e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002994:	2b00      	cmp	r3, #0
 8002996:	db0a      	blt.n	80029ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	b2da      	uxtb	r2, r3
 800299c:	490c      	ldr	r1, [pc, #48]	@ (80029d0 <__NVIC_SetPriority+0x4c>)
 800299e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a2:	0112      	lsls	r2, r2, #4
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	440b      	add	r3, r1
 80029a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029ac:	e00a      	b.n	80029c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	4908      	ldr	r1, [pc, #32]	@ (80029d4 <__NVIC_SetPriority+0x50>)
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	3b04      	subs	r3, #4
 80029bc:	0112      	lsls	r2, r2, #4
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	440b      	add	r3, r1
 80029c2:	761a      	strb	r2, [r3, #24]
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	e000e100 	.word	0xe000e100
 80029d4:	e000ed00 	.word	0xe000ed00

080029d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029d8:	b480      	push	{r7}
 80029da:	b089      	sub	sp, #36	@ 0x24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f1c3 0307 	rsb	r3, r3, #7
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	bf28      	it	cs
 80029f6:	2304      	movcs	r3, #4
 80029f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	3304      	adds	r3, #4
 80029fe:	2b06      	cmp	r3, #6
 8002a00:	d902      	bls.n	8002a08 <NVIC_EncodePriority+0x30>
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	3b03      	subs	r3, #3
 8002a06:	e000      	b.n	8002a0a <NVIC_EncodePriority+0x32>
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43da      	mvns	r2, r3
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	401a      	ands	r2, r3
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a20:	f04f 31ff 	mov.w	r1, #4294967295
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2a:	43d9      	mvns	r1, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a30:	4313      	orrs	r3, r2
         );
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3724      	adds	r7, #36	@ 0x24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
	...

08002a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a50:	d301      	bcc.n	8002a56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a52:	2301      	movs	r3, #1
 8002a54:	e00f      	b.n	8002a76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a56:	4a0a      	ldr	r2, [pc, #40]	@ (8002a80 <SysTick_Config+0x40>)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a5e:	210f      	movs	r1, #15
 8002a60:	f04f 30ff 	mov.w	r0, #4294967295
 8002a64:	f7ff ff8e 	bl	8002984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a68:	4b05      	ldr	r3, [pc, #20]	@ (8002a80 <SysTick_Config+0x40>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a6e:	4b04      	ldr	r3, [pc, #16]	@ (8002a80 <SysTick_Config+0x40>)
 8002a70:	2207      	movs	r2, #7
 8002a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	e000e010 	.word	0xe000e010

08002a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7ff ff29 	bl	80028e4 <__NVIC_SetPriorityGrouping>
}
 8002a92:	bf00      	nop
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b086      	sub	sp, #24
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	60b9      	str	r1, [r7, #8]
 8002aa4:	607a      	str	r2, [r7, #4]
 8002aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aac:	f7ff ff3e 	bl	800292c <__NVIC_GetPriorityGrouping>
 8002ab0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	68b9      	ldr	r1, [r7, #8]
 8002ab6:	6978      	ldr	r0, [r7, #20]
 8002ab8:	f7ff ff8e 	bl	80029d8 <NVIC_EncodePriority>
 8002abc:	4602      	mov	r2, r0
 8002abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff ff5d 	bl	8002984 <__NVIC_SetPriority>
}
 8002aca:	bf00      	nop
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	4603      	mov	r3, r0
 8002ada:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff ff31 	bl	8002948 <__NVIC_EnableIRQ>
}
 8002ae6:	bf00      	nop
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b082      	sub	sp, #8
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7ff ffa2 	bl	8002a40 <SysTick_Config>
 8002afc:	4603      	mov	r3, r0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b16:	e154      	b.n	8002dc2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	fa01 f303 	lsl.w	r3, r1, r3
 8002b24:	4013      	ands	r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 8146 	beq.w	8002dbc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f003 0303 	and.w	r3, r3, #3
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d005      	beq.n	8002b48 <HAL_GPIO_Init+0x40>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 0303 	and.w	r3, r3, #3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d130      	bne.n	8002baa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	2203      	movs	r2, #3
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	68da      	ldr	r2, [r3, #12]
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b7e:	2201      	movs	r2, #1
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43db      	mvns	r3, r3
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	091b      	lsrs	r3, r3, #4
 8002b94:	f003 0201 	and.w	r2, r3, #1
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	2b03      	cmp	r3, #3
 8002bb4:	d017      	beq.n	8002be6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	2203      	movs	r2, #3
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d123      	bne.n	8002c3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	08da      	lsrs	r2, r3, #3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	3208      	adds	r2, #8
 8002bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	220f      	movs	r2, #15
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	4013      	ands	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	691a      	ldr	r2, [r3, #16]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	08da      	lsrs	r2, r3, #3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3208      	adds	r2, #8
 8002c34:	6939      	ldr	r1, [r7, #16]
 8002c36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	2203      	movs	r2, #3
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f003 0203 	and.w	r2, r3, #3
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 80a0 	beq.w	8002dbc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c7c:	4b58      	ldr	r3, [pc, #352]	@ (8002de0 <HAL_GPIO_Init+0x2d8>)
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	4a57      	ldr	r2, [pc, #348]	@ (8002de0 <HAL_GPIO_Init+0x2d8>)
 8002c82:	f043 0301 	orr.w	r3, r3, #1
 8002c86:	6193      	str	r3, [r2, #24]
 8002c88:	4b55      	ldr	r3, [pc, #340]	@ (8002de0 <HAL_GPIO_Init+0x2d8>)
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	60bb      	str	r3, [r7, #8]
 8002c92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c94:	4a53      	ldr	r2, [pc, #332]	@ (8002de4 <HAL_GPIO_Init+0x2dc>)
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	089b      	lsrs	r3, r3, #2
 8002c9a:	3302      	adds	r3, #2
 8002c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	f003 0303 	and.w	r3, r3, #3
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	220f      	movs	r2, #15
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002cbe:	d019      	beq.n	8002cf4 <HAL_GPIO_Init+0x1ec>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a49      	ldr	r2, [pc, #292]	@ (8002de8 <HAL_GPIO_Init+0x2e0>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d013      	beq.n	8002cf0 <HAL_GPIO_Init+0x1e8>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a48      	ldr	r2, [pc, #288]	@ (8002dec <HAL_GPIO_Init+0x2e4>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d00d      	beq.n	8002cec <HAL_GPIO_Init+0x1e4>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a47      	ldr	r2, [pc, #284]	@ (8002df0 <HAL_GPIO_Init+0x2e8>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d007      	beq.n	8002ce8 <HAL_GPIO_Init+0x1e0>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a46      	ldr	r2, [pc, #280]	@ (8002df4 <HAL_GPIO_Init+0x2ec>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d101      	bne.n	8002ce4 <HAL_GPIO_Init+0x1dc>
 8002ce0:	2304      	movs	r3, #4
 8002ce2:	e008      	b.n	8002cf6 <HAL_GPIO_Init+0x1ee>
 8002ce4:	2305      	movs	r3, #5
 8002ce6:	e006      	b.n	8002cf6 <HAL_GPIO_Init+0x1ee>
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e004      	b.n	8002cf6 <HAL_GPIO_Init+0x1ee>
 8002cec:	2302      	movs	r3, #2
 8002cee:	e002      	b.n	8002cf6 <HAL_GPIO_Init+0x1ee>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <HAL_GPIO_Init+0x1ee>
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	f002 0203 	and.w	r2, r2, #3
 8002cfc:	0092      	lsls	r2, r2, #2
 8002cfe:	4093      	lsls	r3, r2
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d06:	4937      	ldr	r1, [pc, #220]	@ (8002de4 <HAL_GPIO_Init+0x2dc>)
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	089b      	lsrs	r3, r3, #2
 8002d0c:	3302      	adds	r3, #2
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d14:	4b38      	ldr	r3, [pc, #224]	@ (8002df8 <HAL_GPIO_Init+0x2f0>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	4013      	ands	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d38:	4a2f      	ldr	r2, [pc, #188]	@ (8002df8 <HAL_GPIO_Init+0x2f0>)
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d3e:	4b2e      	ldr	r3, [pc, #184]	@ (8002df8 <HAL_GPIO_Init+0x2f0>)
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	43db      	mvns	r3, r3
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d62:	4a25      	ldr	r2, [pc, #148]	@ (8002df8 <HAL_GPIO_Init+0x2f0>)
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d68:	4b23      	ldr	r3, [pc, #140]	@ (8002df8 <HAL_GPIO_Init+0x2f0>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	43db      	mvns	r3, r3
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4013      	ands	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d8c:	4a1a      	ldr	r2, [pc, #104]	@ (8002df8 <HAL_GPIO_Init+0x2f0>)
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d92:	4b19      	ldr	r3, [pc, #100]	@ (8002df8 <HAL_GPIO_Init+0x2f0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002db6:	4a10      	ldr	r2, [pc, #64]	@ (8002df8 <HAL_GPIO_Init+0x2f0>)
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f47f aea3 	bne.w	8002b18 <HAL_GPIO_Init+0x10>
  }
}
 8002dd2:	bf00      	nop
 8002dd4:	bf00      	nop
 8002dd6:	371c      	adds	r7, #28
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	40021000 	.word	0x40021000
 8002de4:	40010000 	.word	0x40010000
 8002de8:	48000400 	.word	0x48000400
 8002dec:	48000800 	.word	0x48000800
 8002df0:	48000c00 	.word	0x48000c00
 8002df4:	48001000 	.word	0x48001000
 8002df8:	40010400 	.word	0x40010400

08002dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	807b      	strh	r3, [r7, #2]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e0c:	787b      	ldrb	r3, [r7, #1]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e12:	887a      	ldrh	r2, [r7, #2]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e18:	e002      	b.n	8002e20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e1a:	887a      	ldrh	r2, [r7, #2]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e36:	4b08      	ldr	r3, [pc, #32]	@ (8002e58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e38:	695a      	ldr	r2, [r3, #20]
 8002e3a:	88fb      	ldrh	r3, [r7, #6]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d006      	beq.n	8002e50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e42:	4a05      	ldr	r2, [pc, #20]	@ (8002e58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e44:	88fb      	ldrh	r3, [r7, #6]
 8002e46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e48:	88fb      	ldrh	r3, [r7, #6]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fe ff56 	bl	8001cfc <HAL_GPIO_EXTI_Callback>
  }
}
 8002e50:	bf00      	nop
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40010400 	.word	0x40010400

08002e5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e08d      	b.n	8002f8a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d106      	bne.n	8002e88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7fe ff7e 	bl	8001d84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2224      	movs	r2, #36	@ 0x24
 8002e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0201 	bic.w	r2, r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002eac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ebc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d107      	bne.n	8002ed6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ed2:	609a      	str	r2, [r3, #8]
 8002ed4:	e006      	b.n	8002ee4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002ee2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d108      	bne.n	8002efe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002efa:	605a      	str	r2, [r3, #4]
 8002efc:	e007      	b.n	8002f0e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6812      	ldr	r2, [r2, #0]
 8002f18:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f20:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68da      	ldr	r2, [r3, #12]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691a      	ldr	r2, [r3, #16]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	69d9      	ldr	r1, [r3, #28]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a1a      	ldr	r2, [r3, #32]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0201 	orr.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2220      	movs	r2, #32
 8002f76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
	...

08002f94 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b088      	sub	sp, #32
 8002f98:	af02      	add	r7, sp, #8
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	4608      	mov	r0, r1
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	817b      	strh	r3, [r7, #10]
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	813b      	strh	r3, [r7, #8]
 8002faa:	4613      	mov	r3, r2
 8002fac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b20      	cmp	r3, #32
 8002fb8:	f040 80f9 	bne.w	80031ae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d002      	beq.n	8002fc8 <HAL_I2C_Mem_Write+0x34>
 8002fc2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d105      	bne.n	8002fd4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fce:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e0ed      	b.n	80031b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <HAL_I2C_Mem_Write+0x4e>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e0e6      	b.n	80031b0 <HAL_I2C_Mem_Write+0x21c>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fea:	f7ff fc4b 	bl	8002884 <HAL_GetTick>
 8002fee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	2319      	movs	r3, #25
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 fac3 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e0d1      	b.n	80031b0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2221      	movs	r2, #33	@ 0x21
 8003010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2240      	movs	r2, #64	@ 0x40
 8003018:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6a3a      	ldr	r2, [r7, #32]
 8003026:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800302c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003034:	88f8      	ldrh	r0, [r7, #6]
 8003036:	893a      	ldrh	r2, [r7, #8]
 8003038:	8979      	ldrh	r1, [r7, #10]
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	9301      	str	r3, [sp, #4]
 800303e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	4603      	mov	r3, r0
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f000 f9d3 	bl	80033f0 <I2C_RequestMemoryWrite>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d005      	beq.n	800305c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e0a9      	b.n	80031b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003060:	b29b      	uxth	r3, r3
 8003062:	2bff      	cmp	r3, #255	@ 0xff
 8003064:	d90e      	bls.n	8003084 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	22ff      	movs	r2, #255	@ 0xff
 800306a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003070:	b2da      	uxtb	r2, r3
 8003072:	8979      	ldrh	r1, [r7, #10]
 8003074:	2300      	movs	r3, #0
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 fc47 	bl	8003910 <I2C_TransferConfig>
 8003082:	e00f      	b.n	80030a4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003088:	b29a      	uxth	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003092:	b2da      	uxtb	r2, r3
 8003094:	8979      	ldrh	r1, [r7, #10]
 8003096:	2300      	movs	r3, #0
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 fc36 	bl	8003910 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f000 fac6 	bl	800363a <I2C_WaitOnTXISFlagUntilTimeout>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e07b      	b.n	80031b0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030bc:	781a      	ldrb	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e0:	3b01      	subs	r3, #1
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d034      	beq.n	800315c <HAL_I2C_Mem_Write+0x1c8>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d130      	bne.n	800315c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003100:	2200      	movs	r2, #0
 8003102:	2180      	movs	r1, #128	@ 0x80
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 fa3f 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e04d      	b.n	80031b0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003118:	b29b      	uxth	r3, r3
 800311a:	2bff      	cmp	r3, #255	@ 0xff
 800311c:	d90e      	bls.n	800313c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	22ff      	movs	r2, #255	@ 0xff
 8003122:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003128:	b2da      	uxtb	r2, r3
 800312a:	8979      	ldrh	r1, [r7, #10]
 800312c:	2300      	movs	r3, #0
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 fbeb 	bl	8003910 <I2C_TransferConfig>
 800313a:	e00f      	b.n	800315c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003140:	b29a      	uxth	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800314a:	b2da      	uxtb	r2, r3
 800314c:	8979      	ldrh	r1, [r7, #10]
 800314e:	2300      	movs	r3, #0
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 fbda 	bl	8003910 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003160:	b29b      	uxth	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d19e      	bne.n	80030a4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 faac 	bl	80036c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e01a      	b.n	80031b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2220      	movs	r2, #32
 8003180:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6859      	ldr	r1, [r3, #4]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	4b0a      	ldr	r3, [pc, #40]	@ (80031b8 <HAL_I2C_Mem_Write+0x224>)
 800318e:	400b      	ands	r3, r1
 8003190:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2220      	movs	r2, #32
 8003196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80031aa:	2300      	movs	r3, #0
 80031ac:	e000      	b.n	80031b0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80031ae:	2302      	movs	r3, #2
  }
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	fe00e800 	.word	0xfe00e800

080031bc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b088      	sub	sp, #32
 80031c0:	af02      	add	r7, sp, #8
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	4608      	mov	r0, r1
 80031c6:	4611      	mov	r1, r2
 80031c8:	461a      	mov	r2, r3
 80031ca:	4603      	mov	r3, r0
 80031cc:	817b      	strh	r3, [r7, #10]
 80031ce:	460b      	mov	r3, r1
 80031d0:	813b      	strh	r3, [r7, #8]
 80031d2:	4613      	mov	r3, r2
 80031d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b20      	cmp	r3, #32
 80031e0:	f040 80fd 	bne.w	80033de <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d002      	beq.n	80031f0 <HAL_I2C_Mem_Read+0x34>
 80031ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d105      	bne.n	80031fc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031f6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e0f1      	b.n	80033e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003202:	2b01      	cmp	r3, #1
 8003204:	d101      	bne.n	800320a <HAL_I2C_Mem_Read+0x4e>
 8003206:	2302      	movs	r3, #2
 8003208:	e0ea      	b.n	80033e0 <HAL_I2C_Mem_Read+0x224>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003212:	f7ff fb37 	bl	8002884 <HAL_GetTick>
 8003216:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	2319      	movs	r3, #25
 800321e:	2201      	movs	r2, #1
 8003220:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 f9af 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e0d5      	b.n	80033e0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2222      	movs	r2, #34	@ 0x22
 8003238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2240      	movs	r2, #64	@ 0x40
 8003240:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6a3a      	ldr	r2, [r7, #32]
 800324e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003254:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800325c:	88f8      	ldrh	r0, [r7, #6]
 800325e:	893a      	ldrh	r2, [r7, #8]
 8003260:	8979      	ldrh	r1, [r7, #10]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	9301      	str	r3, [sp, #4]
 8003266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	4603      	mov	r3, r0
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 f913 	bl	8003498 <I2C_RequestMemoryRead>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d005      	beq.n	8003284 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e0ad      	b.n	80033e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003288:	b29b      	uxth	r3, r3
 800328a:	2bff      	cmp	r3, #255	@ 0xff
 800328c:	d90e      	bls.n	80032ac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2201      	movs	r2, #1
 8003292:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003298:	b2da      	uxtb	r2, r3
 800329a:	8979      	ldrh	r1, [r7, #10]
 800329c:	4b52      	ldr	r3, [pc, #328]	@ (80033e8 <HAL_I2C_Mem_Read+0x22c>)
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 fb33 	bl	8003910 <I2C_TransferConfig>
 80032aa:	e00f      	b.n	80032cc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	8979      	ldrh	r1, [r7, #10]
 80032be:	4b4a      	ldr	r3, [pc, #296]	@ (80033e8 <HAL_I2C_Mem_Read+0x22c>)
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 fb22 	bl	8003910 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032d2:	2200      	movs	r2, #0
 80032d4:	2104      	movs	r1, #4
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 f956 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e07c      	b.n	80033e0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f0:	b2d2      	uxtb	r2, r2
 80032f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003302:	3b01      	subs	r3, #1
 8003304:	b29a      	uxth	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800330e:	b29b      	uxth	r3, r3
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800331c:	b29b      	uxth	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d034      	beq.n	800338c <HAL_I2C_Mem_Read+0x1d0>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003326:	2b00      	cmp	r3, #0
 8003328:	d130      	bne.n	800338c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003330:	2200      	movs	r2, #0
 8003332:	2180      	movs	r1, #128	@ 0x80
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f000 f927 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e04d      	b.n	80033e0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003348:	b29b      	uxth	r3, r3
 800334a:	2bff      	cmp	r3, #255	@ 0xff
 800334c:	d90e      	bls.n	800336c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2201      	movs	r2, #1
 8003352:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003358:	b2da      	uxtb	r2, r3
 800335a:	8979      	ldrh	r1, [r7, #10]
 800335c:	2300      	movs	r3, #0
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f000 fad3 	bl	8003910 <I2C_TransferConfig>
 800336a:	e00f      	b.n	800338c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003370:	b29a      	uxth	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800337a:	b2da      	uxtb	r2, r3
 800337c:	8979      	ldrh	r1, [r7, #10]
 800337e:	2300      	movs	r3, #0
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 fac2 	bl	8003910 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003390:	b29b      	uxth	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d19a      	bne.n	80032cc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f000 f994 	bl	80036c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e01a      	b.n	80033e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2220      	movs	r2, #32
 80033b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6859      	ldr	r1, [r3, #4]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	4b0b      	ldr	r3, [pc, #44]	@ (80033ec <HAL_I2C_Mem_Read+0x230>)
 80033be:	400b      	ands	r3, r1
 80033c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2220      	movs	r2, #32
 80033c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	e000      	b.n	80033e0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80033de:	2302      	movs	r3, #2
  }
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3718      	adds	r7, #24
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	80002400 	.word	0x80002400
 80033ec:	fe00e800 	.word	0xfe00e800

080033f0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af02      	add	r7, sp, #8
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	4608      	mov	r0, r1
 80033fa:	4611      	mov	r1, r2
 80033fc:	461a      	mov	r2, r3
 80033fe:	4603      	mov	r3, r0
 8003400:	817b      	strh	r3, [r7, #10]
 8003402:	460b      	mov	r3, r1
 8003404:	813b      	strh	r3, [r7, #8]
 8003406:	4613      	mov	r3, r2
 8003408:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800340a:	88fb      	ldrh	r3, [r7, #6]
 800340c:	b2da      	uxtb	r2, r3
 800340e:	8979      	ldrh	r1, [r7, #10]
 8003410:	4b20      	ldr	r3, [pc, #128]	@ (8003494 <I2C_RequestMemoryWrite+0xa4>)
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 fa79 	bl	8003910 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800341e:	69fa      	ldr	r2, [r7, #28]
 8003420:	69b9      	ldr	r1, [r7, #24]
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 f909 	bl	800363a <I2C_WaitOnTXISFlagUntilTimeout>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e02c      	b.n	800348c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003432:	88fb      	ldrh	r3, [r7, #6]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d105      	bne.n	8003444 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003438:	893b      	ldrh	r3, [r7, #8]
 800343a:	b2da      	uxtb	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	629a      	str	r2, [r3, #40]	@ 0x28
 8003442:	e015      	b.n	8003470 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003444:	893b      	ldrh	r3, [r7, #8]
 8003446:	0a1b      	lsrs	r3, r3, #8
 8003448:	b29b      	uxth	r3, r3
 800344a:	b2da      	uxtb	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003452:	69fa      	ldr	r2, [r7, #28]
 8003454:	69b9      	ldr	r1, [r7, #24]
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 f8ef 	bl	800363a <I2C_WaitOnTXISFlagUntilTimeout>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e012      	b.n	800348c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003466:	893b      	ldrh	r3, [r7, #8]
 8003468:	b2da      	uxtb	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	2200      	movs	r2, #0
 8003478:	2180      	movs	r1, #128	@ 0x80
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 f884 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	80002000 	.word	0x80002000

08003498 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af02      	add	r7, sp, #8
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	4608      	mov	r0, r1
 80034a2:	4611      	mov	r1, r2
 80034a4:	461a      	mov	r2, r3
 80034a6:	4603      	mov	r3, r0
 80034a8:	817b      	strh	r3, [r7, #10]
 80034aa:	460b      	mov	r3, r1
 80034ac:	813b      	strh	r3, [r7, #8]
 80034ae:	4613      	mov	r3, r2
 80034b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80034b2:	88fb      	ldrh	r3, [r7, #6]
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	8979      	ldrh	r1, [r7, #10]
 80034b8:	4b20      	ldr	r3, [pc, #128]	@ (800353c <I2C_RequestMemoryRead+0xa4>)
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	2300      	movs	r3, #0
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 fa26 	bl	8003910 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034c4:	69fa      	ldr	r2, [r7, #28]
 80034c6:	69b9      	ldr	r1, [r7, #24]
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 f8b6 	bl	800363a <I2C_WaitOnTXISFlagUntilTimeout>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e02c      	b.n	8003532 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034d8:	88fb      	ldrh	r3, [r7, #6]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d105      	bne.n	80034ea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034de:	893b      	ldrh	r3, [r7, #8]
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80034e8:	e015      	b.n	8003516 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80034ea:	893b      	ldrh	r3, [r7, #8]
 80034ec:	0a1b      	lsrs	r3, r3, #8
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034f8:	69fa      	ldr	r2, [r7, #28]
 80034fa:	69b9      	ldr	r1, [r7, #24]
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 f89c 	bl	800363a <I2C_WaitOnTXISFlagUntilTimeout>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e012      	b.n	8003532 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800350c:	893b      	ldrh	r3, [r7, #8]
 800350e:	b2da      	uxtb	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	2200      	movs	r2, #0
 800351e:	2140      	movs	r1, #64	@ 0x40
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 f831 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e000      	b.n	8003532 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	80002000 	.word	0x80002000

08003540 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b02      	cmp	r3, #2
 8003554:	d103      	bne.n	800355e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2200      	movs	r2, #0
 800355c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b01      	cmp	r3, #1
 800356a:	d007      	beq.n	800357c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699a      	ldr	r2, [r3, #24]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0201 	orr.w	r2, r2, #1
 800357a:	619a      	str	r2, [r3, #24]
  }
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	603b      	str	r3, [r7, #0]
 8003594:	4613      	mov	r3, r2
 8003596:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003598:	e03b      	b.n	8003612 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	6839      	ldr	r1, [r7, #0]
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 f8d6 	bl	8003750 <I2C_IsErrorOccurred>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e041      	b.n	8003632 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b4:	d02d      	beq.n	8003612 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b6:	f7ff f965 	bl	8002884 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d302      	bcc.n	80035cc <I2C_WaitOnFlagUntilTimeout+0x44>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d122      	bne.n	8003612 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	699a      	ldr	r2, [r3, #24]
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	4013      	ands	r3, r2
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	429a      	cmp	r2, r3
 80035da:	bf0c      	ite	eq
 80035dc:	2301      	moveq	r3, #1
 80035de:	2300      	movne	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	461a      	mov	r2, r3
 80035e4:	79fb      	ldrb	r3, [r7, #7]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d113      	bne.n	8003612 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ee:	f043 0220 	orr.w	r2, r3, #32
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2220      	movs	r2, #32
 80035fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e00f      	b.n	8003632 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	699a      	ldr	r2, [r3, #24]
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	4013      	ands	r3, r2
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	429a      	cmp	r2, r3
 8003620:	bf0c      	ite	eq
 8003622:	2301      	moveq	r3, #1
 8003624:	2300      	movne	r3, #0
 8003626:	b2db      	uxtb	r3, r3
 8003628:	461a      	mov	r2, r3
 800362a:	79fb      	ldrb	r3, [r7, #7]
 800362c:	429a      	cmp	r2, r3
 800362e:	d0b4      	beq.n	800359a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b084      	sub	sp, #16
 800363e:	af00      	add	r7, sp, #0
 8003640:	60f8      	str	r0, [r7, #12]
 8003642:	60b9      	str	r1, [r7, #8]
 8003644:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003646:	e033      	b.n	80036b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	68b9      	ldr	r1, [r7, #8]
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 f87f 	bl	8003750 <I2C_IsErrorOccurred>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e031      	b.n	80036c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003662:	d025      	beq.n	80036b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003664:	f7ff f90e 	bl	8002884 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	429a      	cmp	r2, r3
 8003672:	d302      	bcc.n	800367a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d11a      	bne.n	80036b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b02      	cmp	r3, #2
 8003686:	d013      	beq.n	80036b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368c:	f043 0220 	orr.w	r2, r3, #32
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2220      	movs	r2, #32
 8003698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e007      	b.n	80036c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d1c4      	bne.n	8003648 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036d4:	e02f      	b.n	8003736 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	68b9      	ldr	r1, [r7, #8]
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 f838 	bl	8003750 <I2C_IsErrorOccurred>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e02d      	b.n	8003746 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ea:	f7ff f8cb 	bl	8002884 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d302      	bcc.n	8003700 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d11a      	bne.n	8003736 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	f003 0320 	and.w	r3, r3, #32
 800370a:	2b20      	cmp	r3, #32
 800370c:	d013      	beq.n	8003736 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003712:	f043 0220 	orr.w	r2, r3, #32
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2220      	movs	r2, #32
 800371e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e007      	b.n	8003746 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	f003 0320 	and.w	r3, r3, #32
 8003740:	2b20      	cmp	r3, #32
 8003742:	d1c8      	bne.n	80036d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
	...

08003750 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b08a      	sub	sp, #40	@ 0x28
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800375c:	2300      	movs	r3, #0
 800375e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800376a:	2300      	movs	r3, #0
 800376c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	f003 0310 	and.w	r3, r3, #16
 8003778:	2b00      	cmp	r3, #0
 800377a:	d068      	beq.n	800384e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2210      	movs	r2, #16
 8003782:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003784:	e049      	b.n	800381a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378c:	d045      	beq.n	800381a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800378e:	f7ff f879 	bl	8002884 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	429a      	cmp	r2, r3
 800379c:	d302      	bcc.n	80037a4 <I2C_IsErrorOccurred+0x54>
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d13a      	bne.n	800381a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037b6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037c6:	d121      	bne.n	800380c <I2C_IsErrorOccurred+0xbc>
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037ce:	d01d      	beq.n	800380c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80037d0:	7cfb      	ldrb	r3, [r7, #19]
 80037d2:	2b20      	cmp	r3, #32
 80037d4:	d01a      	beq.n	800380c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037e4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80037e6:	f7ff f84d 	bl	8002884 <HAL_GetTick>
 80037ea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037ec:	e00e      	b.n	800380c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80037ee:	f7ff f849 	bl	8002884 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b19      	cmp	r3, #25
 80037fa:	d907      	bls.n	800380c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	f043 0320 	orr.w	r3, r3, #32
 8003802:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800380a:	e006      	b.n	800381a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	f003 0320 	and.w	r3, r3, #32
 8003816:	2b20      	cmp	r3, #32
 8003818:	d1e9      	bne.n	80037ee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	f003 0320 	and.w	r3, r3, #32
 8003824:	2b20      	cmp	r3, #32
 8003826:	d003      	beq.n	8003830 <I2C_IsErrorOccurred+0xe0>
 8003828:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0aa      	beq.n	8003786 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003830:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003834:	2b00      	cmp	r3, #0
 8003836:	d103      	bne.n	8003840 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2220      	movs	r2, #32
 800383e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	f043 0304 	orr.w	r3, r3, #4
 8003846:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00b      	beq.n	8003878 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	f043 0301 	orr.w	r3, r3, #1
 8003866:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003870:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00b      	beq.n	800389a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003882:	6a3b      	ldr	r3, [r7, #32]
 8003884:	f043 0308 	orr.w	r3, r3, #8
 8003888:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003892:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00b      	beq.n	80038bc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	f043 0302 	orr.w	r3, r3, #2
 80038aa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80038bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d01c      	beq.n	80038fe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f7ff fe3b 	bl	8003540 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	6859      	ldr	r1, [r3, #4]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	4b0d      	ldr	r3, [pc, #52]	@ (800390c <I2C_IsErrorOccurred+0x1bc>)
 80038d6:	400b      	ands	r3, r1
 80038d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038de:	6a3b      	ldr	r3, [r7, #32]
 80038e0:	431a      	orrs	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2220      	movs	r2, #32
 80038ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80038fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003902:	4618      	mov	r0, r3
 8003904:	3728      	adds	r7, #40	@ 0x28
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	fe00e800 	.word	0xfe00e800

08003910 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003910:	b480      	push	{r7}
 8003912:	b087      	sub	sp, #28
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	607b      	str	r3, [r7, #4]
 800391a:	460b      	mov	r3, r1
 800391c:	817b      	strh	r3, [r7, #10]
 800391e:	4613      	mov	r3, r2
 8003920:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003922:	897b      	ldrh	r3, [r7, #10]
 8003924:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003928:	7a7b      	ldrb	r3, [r7, #9]
 800392a:	041b      	lsls	r3, r3, #16
 800392c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003930:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	4313      	orrs	r3, r2
 800393a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800393e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	0d5b      	lsrs	r3, r3, #21
 800394a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800394e:	4b08      	ldr	r3, [pc, #32]	@ (8003970 <I2C_TransferConfig+0x60>)
 8003950:	430b      	orrs	r3, r1
 8003952:	43db      	mvns	r3, r3
 8003954:	ea02 0103 	and.w	r1, r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	430a      	orrs	r2, r1
 8003960:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003962:	bf00      	nop
 8003964:	371c      	adds	r7, #28
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	03ff63ff 	.word	0x03ff63ff

08003974 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b20      	cmp	r3, #32
 8003988:	d138      	bne.n	80039fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003990:	2b01      	cmp	r3, #1
 8003992:	d101      	bne.n	8003998 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003994:	2302      	movs	r3, #2
 8003996:	e032      	b.n	80039fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2224      	movs	r2, #36	@ 0x24
 80039a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 0201 	bic.w	r2, r2, #1
 80039b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80039c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6819      	ldr	r1, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f042 0201 	orr.w	r2, r2, #1
 80039e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80039f8:	2300      	movs	r3, #0
 80039fa:	e000      	b.n	80039fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80039fc:	2302      	movs	r3, #2
  }
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b085      	sub	sp, #20
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
 8003a12:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b20      	cmp	r3, #32
 8003a1e:	d139      	bne.n	8003a94 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d101      	bne.n	8003a2e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e033      	b.n	8003a96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2224      	movs	r2, #36	@ 0x24
 8003a3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0201 	bic.w	r2, r2, #1
 8003a4c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003a5c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	021b      	lsls	r3, r3, #8
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0201 	orr.w	r2, r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2220      	movs	r2, #32
 8003a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a90:	2300      	movs	r3, #0
 8003a92:	e000      	b.n	8003a96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a94:	2302      	movs	r3, #2
  }
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3714      	adds	r7, #20
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b084      	sub	sp, #16
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e0b9      	b.n	8003c28 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d106      	bne.n	8003ace <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f7fe fbbf 	bl	800224c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2203      	movs	r2, #3
 8003ad2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f003 fc99 	bl	8007412 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	73fb      	strb	r3, [r7, #15]
 8003ae4:	e03e      	b.n	8003b64 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ae6:	7bfa      	ldrb	r2, [r7, #15]
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	4613      	mov	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4413      	add	r3, r2
 8003af0:	00db      	lsls	r3, r3, #3
 8003af2:	440b      	add	r3, r1
 8003af4:	3311      	adds	r3, #17
 8003af6:	2201      	movs	r2, #1
 8003af8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003afa:	7bfa      	ldrb	r2, [r7, #15]
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	4613      	mov	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4413      	add	r3, r2
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	440b      	add	r3, r1
 8003b08:	3310      	adds	r3, #16
 8003b0a:	7bfa      	ldrb	r2, [r7, #15]
 8003b0c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b0e:	7bfa      	ldrb	r2, [r7, #15]
 8003b10:	6879      	ldr	r1, [r7, #4]
 8003b12:	4613      	mov	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	440b      	add	r3, r1
 8003b1c:	3313      	adds	r3, #19
 8003b1e:	2200      	movs	r2, #0
 8003b20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b22:	7bfa      	ldrb	r2, [r7, #15]
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	4613      	mov	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	440b      	add	r3, r1
 8003b30:	3320      	adds	r3, #32
 8003b32:	2200      	movs	r2, #0
 8003b34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b36:	7bfa      	ldrb	r2, [r7, #15]
 8003b38:	6879      	ldr	r1, [r7, #4]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	4413      	add	r3, r2
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	440b      	add	r3, r1
 8003b44:	3324      	adds	r3, #36	@ 0x24
 8003b46:	2200      	movs	r2, #0
 8003b48:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b4a:	7bfb      	ldrb	r3, [r7, #15]
 8003b4c:	6879      	ldr	r1, [r7, #4]
 8003b4e:	1c5a      	adds	r2, r3, #1
 8003b50:	4613      	mov	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4413      	add	r3, r2
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	440b      	add	r3, r1
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b5e:	7bfb      	ldrb	r3, [r7, #15]
 8003b60:	3301      	adds	r3, #1
 8003b62:	73fb      	strb	r3, [r7, #15]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	791b      	ldrb	r3, [r3, #4]
 8003b68:	7bfa      	ldrb	r2, [r7, #15]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d3bb      	bcc.n	8003ae6 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b6e:	2300      	movs	r3, #0
 8003b70:	73fb      	strb	r3, [r7, #15]
 8003b72:	e044      	b.n	8003bfe <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b74:	7bfa      	ldrb	r2, [r7, #15]
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4413      	add	r3, r2
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	440b      	add	r3, r1
 8003b82:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003b86:	2200      	movs	r2, #0
 8003b88:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b8a:	7bfa      	ldrb	r2, [r7, #15]
 8003b8c:	6879      	ldr	r1, [r7, #4]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	440b      	add	r3, r1
 8003b98:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003b9c:	7bfa      	ldrb	r2, [r7, #15]
 8003b9e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ba0:	7bfa      	ldrb	r2, [r7, #15]
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	440b      	add	r3, r1
 8003bae:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003bb6:	7bfa      	ldrb	r2, [r7, #15]
 8003bb8:	6879      	ldr	r1, [r7, #4]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4413      	add	r3, r2
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	440b      	add	r3, r1
 8003bc4:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003bcc:	7bfa      	ldrb	r2, [r7, #15]
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4413      	add	r3, r2
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	440b      	add	r3, r1
 8003bda:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003bde:	2200      	movs	r2, #0
 8003be0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003be2:	7bfa      	ldrb	r2, [r7, #15]
 8003be4:	6879      	ldr	r1, [r7, #4]
 8003be6:	4613      	mov	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	440b      	add	r3, r1
 8003bf0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bf8:	7bfb      	ldrb	r3, [r7, #15]
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	73fb      	strb	r3, [r7, #15]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	791b      	ldrb	r3, [r3, #4]
 8003c02:	7bfa      	ldrb	r2, [r7, #15]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d3b5      	bcc.n	8003b74 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6818      	ldr	r0, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3304      	adds	r3, #4
 8003c10:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003c14:	f003 fc18 	bl	8007448 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d101      	bne.n	8003c46 <HAL_PCD_Start+0x16>
 8003c42:	2302      	movs	r3, #2
 8003c44:	e016      	b.n	8003c74 <HAL_PCD_Start+0x44>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f003 fbc6 	bl	80073e4 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003c58:	2101      	movs	r1, #1
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7fe fd6e 	bl	800273c <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f005 fe83 	bl	8009970 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f005 fe7c 	bl	8009986 <USB_ReadInterrupts>
 8003c8e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 fa99 	bl	80041d2 <PCD_EP_ISR_Handler>

    return;
 8003ca0:	e0bd      	b.n	8003e1e <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d013      	beq.n	8003cd4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cbe:	b292      	uxth	r2, r2
 8003cc0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f7fe fb62 	bl	800238e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003cca:	2100      	movs	r1, #0
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 f8a9 	bl	8003e24 <HAL_PCD_SetAddress>

    return;
 8003cd2:	e0a4      	b.n	8003e1e <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00c      	beq.n	8003cf8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003cf0:	b292      	uxth	r2, r2
 8003cf2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003cf6:	e092      	b.n	8003e1e <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00c      	beq.n	8003d1c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d14:	b292      	uxth	r2, r2
 8003d16:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003d1a:	e080      	b.n	8003e1e <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d027      	beq.n	8003d76 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0204 	bic.w	r2, r2, #4
 8003d38:	b292      	uxth	r2, r2
 8003d3a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0208 	bic.w	r2, r2, #8
 8003d50:	b292      	uxth	r2, r2
 8003d52:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7fe fb52 	bl	8002400 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003d6e:	b292      	uxth	r2, r2
 8003d70:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003d74:	e053      	b.n	8003e1e <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d027      	beq.n	8003dd0 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0208 	orr.w	r2, r2, #8
 8003d92:	b292      	uxth	r2, r2
 8003d94:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003daa:	b292      	uxth	r2, r2
 8003dac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0204 	orr.w	r2, r2, #4
 8003dc2:	b292      	uxth	r2, r2
 8003dc4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f7fe faff 	bl	80023cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003dce:	e026      	b.n	8003e1e <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00f      	beq.n	8003dfa <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003dec:	b292      	uxth	r2, r2
 8003dee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7fe fabd 	bl	8002372 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003df8:	e011      	b.n	8003e1e <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00c      	beq.n	8003e1e <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e16:	b292      	uxth	r2, r2
 8003e18:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003e1c:	bf00      	nop
  }
}
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d101      	bne.n	8003e3e <HAL_PCD_SetAddress+0x1a>
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	e012      	b.n	8003e64 <HAL_PCD_SetAddress+0x40>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	78fa      	ldrb	r2, [r7, #3]
 8003e4a:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	78fa      	ldrb	r2, [r7, #3]
 8003e52:	4611      	mov	r1, r2
 8003e54:	4618      	mov	r0, r3
 8003e56:	f005 fd77 	bl	8009948 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3708      	adds	r7, #8
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	4608      	mov	r0, r1
 8003e76:	4611      	mov	r1, r2
 8003e78:	461a      	mov	r2, r3
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	70fb      	strb	r3, [r7, #3]
 8003e7e:	460b      	mov	r3, r1
 8003e80:	803b      	strh	r3, [r7, #0]
 8003e82:	4613      	mov	r3, r2
 8003e84:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003e86:	2300      	movs	r3, #0
 8003e88:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	da0e      	bge.n	8003eb0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e92:	78fb      	ldrb	r3, [r7, #3]
 8003e94:	f003 0207 	and.w	r2, r3, #7
 8003e98:	4613      	mov	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	3310      	adds	r3, #16
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	705a      	strb	r2, [r3, #1]
 8003eae:	e00e      	b.n	8003ece <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003eb0:	78fb      	ldrb	r3, [r7, #3]
 8003eb2:	f003 0207 	and.w	r2, r3, #7
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4413      	add	r3, r2
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003ece:	78fb      	ldrb	r3, [r7, #3]
 8003ed0:	f003 0307 	and.w	r3, r3, #7
 8003ed4:	b2da      	uxtb	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003eda:	883a      	ldrh	r2, [r7, #0]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	78ba      	ldrb	r2, [r7, #2]
 8003ee4:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ee6:	78bb      	ldrb	r3, [r7, #2]
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d102      	bne.n	8003ef2 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d101      	bne.n	8003f00 <HAL_PCD_EP_Open+0x94>
 8003efc:	2302      	movs	r3, #2
 8003efe:	e00e      	b.n	8003f1e <HAL_PCD_EP_Open+0xb2>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68f9      	ldr	r1, [r7, #12]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f003 fab8 	bl	8007484 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003f1c:	7afb      	ldrb	r3, [r7, #11]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b084      	sub	sp, #16
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
 8003f2e:	460b      	mov	r3, r1
 8003f30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	da0e      	bge.n	8003f58 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f3a:	78fb      	ldrb	r3, [r7, #3]
 8003f3c:	f003 0207 	and.w	r2, r3, #7
 8003f40:	4613      	mov	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	3310      	adds	r3, #16
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2201      	movs	r2, #1
 8003f54:	705a      	strb	r2, [r3, #1]
 8003f56:	e00e      	b.n	8003f76 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f58:	78fb      	ldrb	r3, [r7, #3]
 8003f5a:	f003 0207 	and.w	r2, r3, #7
 8003f5e:	4613      	mov	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4413      	add	r3, r2
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f76:	78fb      	ldrb	r3, [r7, #3]
 8003f78:	f003 0307 	and.w	r3, r3, #7
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d101      	bne.n	8003f90 <HAL_PCD_EP_Close+0x6a>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	e00e      	b.n	8003fae <HAL_PCD_EP_Close+0x88>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68f9      	ldr	r1, [r7, #12]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f003 fe34 	bl	8007c0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b086      	sub	sp, #24
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	60f8      	str	r0, [r7, #12]
 8003fbe:	607a      	str	r2, [r7, #4]
 8003fc0:	603b      	str	r3, [r7, #0]
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fc6:	7afb      	ldrb	r3, [r7, #11]
 8003fc8:	f003 0207 	and.w	r2, r3, #7
 8003fcc:	4613      	mov	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	4413      	add	r3, r2
 8003fdc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	2200      	movs	r2, #0
 8003fee:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ff6:	7afb      	ldrb	r3, [r7, #11]
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	6979      	ldr	r1, [r7, #20]
 8004008:	4618      	mov	r0, r3
 800400a:	f003 ffec 	bl	8007fe6 <USB_EPStartXfer>

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3718      	adds	r7, #24
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	607a      	str	r2, [r7, #4]
 8004022:	603b      	str	r3, [r7, #0]
 8004024:	460b      	mov	r3, r1
 8004026:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004028:	7afb      	ldrb	r3, [r7, #11]
 800402a:	f003 0207 	and.w	r2, r3, #7
 800402e:	4613      	mov	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4413      	add	r3, r2
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	3310      	adds	r3, #16
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	4413      	add	r3, r2
 800403c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	2200      	movs	r2, #0
 800405c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2201      	movs	r2, #1
 8004062:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004064:	7afb      	ldrb	r3, [r7, #11]
 8004066:	f003 0307 	and.w	r3, r3, #7
 800406a:	b2da      	uxtb	r2, r3
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6979      	ldr	r1, [r7, #20]
 8004076:	4618      	mov	r0, r3
 8004078:	f003 ffb5 	bl	8007fe6 <USB_EPStartXfer>

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3718      	adds	r7, #24
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b084      	sub	sp, #16
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
 800408e:	460b      	mov	r3, r1
 8004090:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004092:	78fb      	ldrb	r3, [r7, #3]
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	7912      	ldrb	r2, [r2, #4]
 800409c:	4293      	cmp	r3, r2
 800409e:	d901      	bls.n	80040a4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e03e      	b.n	8004122 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	da0e      	bge.n	80040ca <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040ac:	78fb      	ldrb	r3, [r7, #3]
 80040ae:	f003 0207 	and.w	r2, r3, #7
 80040b2:	4613      	mov	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	00db      	lsls	r3, r3, #3
 80040ba:	3310      	adds	r3, #16
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	4413      	add	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2201      	movs	r2, #1
 80040c6:	705a      	strb	r2, [r3, #1]
 80040c8:	e00c      	b.n	80040e4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80040ca:	78fa      	ldrb	r2, [r7, #3]
 80040cc:	4613      	mov	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	4413      	add	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2201      	movs	r2, #1
 80040e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040ea:	78fb      	ldrb	r3, [r7, #3]
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d101      	bne.n	8004104 <HAL_PCD_EP_SetStall+0x7e>
 8004100:	2302      	movs	r3, #2
 8004102:	e00e      	b.n	8004122 <HAL_PCD_EP_SetStall+0x9c>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68f9      	ldr	r1, [r7, #12]
 8004112:	4618      	mov	r0, r3
 8004114:	f005 fb19 	bl	800974a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b084      	sub	sp, #16
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
 8004132:	460b      	mov	r3, r1
 8004134:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004136:	78fb      	ldrb	r3, [r7, #3]
 8004138:	f003 030f 	and.w	r3, r3, #15
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	7912      	ldrb	r2, [r2, #4]
 8004140:	4293      	cmp	r3, r2
 8004142:	d901      	bls.n	8004148 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e040      	b.n	80041ca <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004148:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800414c:	2b00      	cmp	r3, #0
 800414e:	da0e      	bge.n	800416e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004150:	78fb      	ldrb	r3, [r7, #3]
 8004152:	f003 0207 	and.w	r2, r3, #7
 8004156:	4613      	mov	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	3310      	adds	r3, #16
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	4413      	add	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2201      	movs	r2, #1
 800416a:	705a      	strb	r2, [r3, #1]
 800416c:	e00e      	b.n	800418c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800416e:	78fb      	ldrb	r3, [r7, #3]
 8004170:	f003 0207 	and.w	r2, r3, #7
 8004174:	4613      	mov	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	4413      	add	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004192:	78fb      	ldrb	r3, [r7, #3]
 8004194:	f003 0307 	and.w	r3, r3, #7
 8004198:	b2da      	uxtb	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d101      	bne.n	80041ac <HAL_PCD_EP_ClrStall+0x82>
 80041a8:	2302      	movs	r3, #2
 80041aa:	e00e      	b.n	80041ca <HAL_PCD_EP_ClrStall+0xa0>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68f9      	ldr	r1, [r7, #12]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f005 fb16 	bl	80097ec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b096      	sub	sp, #88	@ 0x58
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80041da:	e3bb      	b.n	8004954 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80041e4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80041e8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 80041f6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f040 8175 	bne.w	80044ea <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004200:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004204:	f003 0310 	and.w	r3, r3, #16
 8004208:	2b00      	cmp	r3, #0
 800420a:	d14e      	bne.n	80042aa <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	b29b      	uxth	r3, r3
 8004214:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004218:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800421c:	81fb      	strh	r3, [r7, #14]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	89fb      	ldrh	r3, [r7, #14]
 8004224:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004228:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800422c:	b29b      	uxth	r3, r3
 800422e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	3310      	adds	r3, #16
 8004234:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800423e:	b29b      	uxth	r3, r3
 8004240:	461a      	mov	r2, r3
 8004242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	4413      	add	r3, r2
 800424a:	3302      	adds	r3, #2
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	6812      	ldr	r2, [r2, #0]
 8004252:	4413      	add	r3, r2
 8004254:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800425e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004260:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004262:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004264:	695a      	ldr	r2, [r3, #20]
 8004266:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	441a      	add	r2, r3
 800426c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800426e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004270:	2100      	movs	r1, #0
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7fe f863 	bl	800233e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	7b1b      	ldrb	r3, [r3, #12]
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	f000 8368 	beq.w	8004954 <PCD_EP_ISR_Handler+0x782>
 8004284:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	2b00      	cmp	r3, #0
 800428a:	f040 8363 	bne.w	8004954 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	7b1b      	ldrb	r3, [r3, #12]
 8004292:	b2db      	uxtb	r3, r3
 8004294:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004298:	b2da      	uxtb	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	731a      	strb	r2, [r3, #12]
 80042a8:	e354      	b.n	8004954 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80042b0:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	881b      	ldrh	r3, [r3, #0]
 80042b8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80042bc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80042c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d034      	beq.n	8004332 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	461a      	mov	r2, r3
 80042d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	00db      	lsls	r3, r3, #3
 80042da:	4413      	add	r3, r2
 80042dc:	3306      	adds	r3, #6
 80042de:	005b      	lsls	r3, r3, #1
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6812      	ldr	r2, [r2, #0]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80042f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042f2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6818      	ldr	r0, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80042fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004300:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004302:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004304:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004306:	b29b      	uxth	r3, r3
 8004308:	f005 fb93 	bl	8009a32 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	b29a      	uxth	r2, r3
 8004314:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004318:	4013      	ands	r3, r2
 800431a:	823b      	strh	r3, [r7, #16]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	8a3a      	ldrh	r2, [r7, #16]
 8004322:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004326:	b292      	uxth	r2, r2
 8004328:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7fd ffda 	bl	80022e4 <HAL_PCD_SetupStageCallback>
 8004330:	e310      	b.n	8004954 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004332:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8004336:	2b00      	cmp	r3, #0
 8004338:	f280 830c 	bge.w	8004954 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	b29a      	uxth	r2, r3
 8004344:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004348:	4013      	ands	r3, r2
 800434a:	83fb      	strh	r3, [r7, #30]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	8bfa      	ldrh	r2, [r7, #30]
 8004352:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004356:	b292      	uxth	r2, r2
 8004358:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004362:	b29b      	uxth	r3, r3
 8004364:	461a      	mov	r2, r3
 8004366:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	4413      	add	r3, r2
 800436e:	3306      	adds	r3, #6
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	6812      	ldr	r2, [r2, #0]
 8004376:	4413      	add	r3, r2
 8004378:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800437c:	881b      	ldrh	r3, [r3, #0]
 800437e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004382:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004384:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004386:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d019      	beq.n	80043c2 <PCD_EP_ISR_Handler+0x1f0>
 800438e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d015      	beq.n	80043c2 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6818      	ldr	r0, [r3, #0]
 800439a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800439c:	6959      	ldr	r1, [r3, #20]
 800439e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043a0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80043a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043a4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	f005 fb43 	bl	8009a32 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80043ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043ae:	695a      	ldr	r2, [r3, #20]
 80043b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043b2:	69db      	ldr	r3, [r3, #28]
 80043b4:	441a      	add	r2, r3
 80043b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043b8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80043ba:	2100      	movs	r1, #0
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7fd ffa3 	bl	8002308 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	881b      	ldrh	r3, [r3, #0]
 80043c8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80043cc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80043d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f040 82bd 	bne.w	8004954 <PCD_EP_ISR_Handler+0x782>
 80043da:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80043de:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80043e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80043e6:	f000 82b5 	beq.w	8004954 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	61bb      	str	r3, [r7, #24]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	461a      	mov	r2, r3
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	4413      	add	r3, r2
 8004400:	61bb      	str	r3, [r7, #24]
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004408:	617b      	str	r3, [r7, #20]
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	b29b      	uxth	r3, r3
 8004410:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004414:	b29a      	uxth	r2, r3
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	801a      	strh	r2, [r3, #0]
 800441a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10a      	bne.n	8004438 <PCD_EP_ISR_Handler+0x266>
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	b29b      	uxth	r3, r3
 8004428:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800442c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004430:	b29a      	uxth	r2, r3
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	801a      	strh	r2, [r3, #0]
 8004436:	e039      	b.n	80044ac <PCD_EP_ISR_Handler+0x2da>
 8004438:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	2b3e      	cmp	r3, #62	@ 0x3e
 800443e:	d818      	bhi.n	8004472 <PCD_EP_ISR_Handler+0x2a0>
 8004440:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	085b      	lsrs	r3, r3, #1
 8004446:	647b      	str	r3, [r7, #68]	@ 0x44
 8004448:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	2b00      	cmp	r3, #0
 8004452:	d002      	beq.n	800445a <PCD_EP_ISR_Handler+0x288>
 8004454:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004456:	3301      	adds	r3, #1
 8004458:	647b      	str	r3, [r7, #68]	@ 0x44
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	881b      	ldrh	r3, [r3, #0]
 800445e:	b29a      	uxth	r2, r3
 8004460:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004462:	b29b      	uxth	r3, r3
 8004464:	029b      	lsls	r3, r3, #10
 8004466:	b29b      	uxth	r3, r3
 8004468:	4313      	orrs	r3, r2
 800446a:	b29a      	uxth	r2, r3
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	801a      	strh	r2, [r3, #0]
 8004470:	e01c      	b.n	80044ac <PCD_EP_ISR_Handler+0x2da>
 8004472:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	095b      	lsrs	r3, r3, #5
 8004478:	647b      	str	r3, [r7, #68]	@ 0x44
 800447a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	f003 031f 	and.w	r3, r3, #31
 8004482:	2b00      	cmp	r3, #0
 8004484:	d102      	bne.n	800448c <PCD_EP_ISR_Handler+0x2ba>
 8004486:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004488:	3b01      	subs	r3, #1
 800448a:	647b      	str	r3, [r7, #68]	@ 0x44
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	881b      	ldrh	r3, [r3, #0]
 8004490:	b29a      	uxth	r2, r3
 8004492:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004494:	b29b      	uxth	r3, r3
 8004496:	029b      	lsls	r3, r3, #10
 8004498:	b29b      	uxth	r3, r3
 800449a:	4313      	orrs	r3, r2
 800449c:	b29b      	uxth	r3, r3
 800449e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044bc:	827b      	strh	r3, [r7, #18]
 80044be:	8a7b      	ldrh	r3, [r7, #18]
 80044c0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80044c4:	827b      	strh	r3, [r7, #18]
 80044c6:	8a7b      	ldrh	r3, [r7, #18]
 80044c8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80044cc:	827b      	strh	r3, [r7, #18]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	8a7b      	ldrh	r3, [r7, #18]
 80044d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	8013      	strh	r3, [r2, #0]
 80044e8:	e234      	b.n	8004954 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	461a      	mov	r2, r3
 80044f0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80044fe:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8004502:	2b00      	cmp	r3, #0
 8004504:	f280 80fc 	bge.w	8004700 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	461a      	mov	r2, r3
 800450e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	881b      	ldrh	r3, [r3, #0]
 8004518:	b29a      	uxth	r2, r3
 800451a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800451e:	4013      	ands	r3, r2
 8004520:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	461a      	mov	r2, r3
 800452a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8004536:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800453a:	b292      	uxth	r2, r2
 800453c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800453e:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8004542:	4613      	mov	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4413      	add	r3, r2
 8004548:	00db      	lsls	r3, r3, #3
 800454a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	4413      	add	r3, r2
 8004552:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004554:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004556:	7b1b      	ldrb	r3, [r3, #12]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d125      	bne.n	80045a8 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004564:	b29b      	uxth	r3, r3
 8004566:	461a      	mov	r2, r3
 8004568:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	4413      	add	r3, r2
 8004570:	3306      	adds	r3, #6
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6812      	ldr	r2, [r2, #0]
 8004578:	4413      	add	r3, r2
 800457a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800457e:	881b      	ldrh	r3, [r3, #0]
 8004580:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004584:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8004588:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 8092 	beq.w	80046b6 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6818      	ldr	r0, [r3, #0]
 8004596:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004598:	6959      	ldr	r1, [r3, #20]
 800459a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800459c:	88da      	ldrh	r2, [r3, #6]
 800459e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80045a2:	f005 fa46 	bl	8009a32 <USB_ReadPMA>
 80045a6:	e086      	b.n	80046b6 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80045a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045aa:	78db      	ldrb	r3, [r3, #3]
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d10a      	bne.n	80045c6 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80045b0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80045b4:	461a      	mov	r2, r3
 80045b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 f9d9 	bl	8004970 <HAL_PCD_EP_DB_Receive>
 80045be:	4603      	mov	r3, r0
 80045c0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80045c4:	e077      	b.n	80046b6 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	461a      	mov	r2, r3
 80045cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4413      	add	r3, r2
 80045d4:	881b      	ldrh	r3, [r3, #0]
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045e0:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	461a      	mov	r2, r3
 80045ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	441a      	add	r2, r3
 80045f2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80045f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004602:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004606:	b29b      	uxth	r3, r3
 8004608:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	461a      	mov	r2, r3
 8004610:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	881b      	ldrh	r3, [r3, #0]
 800461a:	b29b      	uxth	r3, r3
 800461c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d024      	beq.n	800466e <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800462c:	b29b      	uxth	r3, r3
 800462e:	461a      	mov	r2, r3
 8004630:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	00db      	lsls	r3, r3, #3
 8004636:	4413      	add	r3, r2
 8004638:	3302      	adds	r3, #2
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6812      	ldr	r2, [r2, #0]
 8004640:	4413      	add	r3, r2
 8004642:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004646:	881b      	ldrh	r3, [r3, #0]
 8004648:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800464c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004650:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004654:	2b00      	cmp	r3, #0
 8004656:	d02e      	beq.n	80046b6 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6818      	ldr	r0, [r3, #0]
 800465c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800465e:	6959      	ldr	r1, [r3, #20]
 8004660:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004662:	891a      	ldrh	r2, [r3, #8]
 8004664:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004668:	f005 f9e3 	bl	8009a32 <USB_ReadPMA>
 800466c:	e023      	b.n	80046b6 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004676:	b29b      	uxth	r3, r3
 8004678:	461a      	mov	r2, r3
 800467a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	4413      	add	r3, r2
 8004682:	3306      	adds	r3, #6
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	6812      	ldr	r2, [r2, #0]
 800468a:	4413      	add	r3, r2
 800468c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004690:	881b      	ldrh	r3, [r3, #0]
 8004692:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004696:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800469a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d009      	beq.n	80046b6 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6818      	ldr	r0, [r3, #0]
 80046a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046a8:	6959      	ldr	r1, [r3, #20]
 80046aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046ac:	895a      	ldrh	r2, [r3, #10]
 80046ae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80046b2:	f005 f9be 	bl	8009a32 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80046b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046b8:	69da      	ldr	r2, [r3, #28]
 80046ba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80046be:	441a      	add	r2, r3
 80046c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046c2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80046c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046c6:	695a      	ldr	r2, [r3, #20]
 80046c8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80046cc:	441a      	add	r2, r3
 80046ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046d0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80046d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d005      	beq.n	80046e6 <PCD_EP_ISR_Handler+0x514>
 80046da:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80046de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d206      	bcs.n	80046f4 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80046e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	4619      	mov	r1, r3
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f7fd fe0b 	bl	8002308 <HAL_PCD_DataOutStageCallback>
 80046f2:	e005      	b.n	8004700 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80046fa:	4618      	mov	r0, r3
 80046fc:	f003 fc73 	bl	8007fe6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004700:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 8123 	beq.w	8004954 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 800470e:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8004712:	4613      	mov	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4413      	add	r3, r2
 8004718:	00db      	lsls	r3, r3, #3
 800471a:	3310      	adds	r3, #16
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	4413      	add	r3, r2
 8004720:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	461a      	mov	r2, r3
 8004728:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	4413      	add	r3, r2
 8004730:	881b      	ldrh	r3, [r3, #0]
 8004732:	b29b      	uxth	r3, r3
 8004734:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004738:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800473c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	461a      	mov	r2, r3
 8004746:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	441a      	add	r2, r3
 800474e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004752:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004756:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800475a:	b29b      	uxth	r3, r3
 800475c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800475e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004760:	78db      	ldrb	r3, [r3, #3]
 8004762:	2b01      	cmp	r3, #1
 8004764:	f040 80a2 	bne.w	80048ac <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8004768:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800476a:	2200      	movs	r2, #0
 800476c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800476e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004770:	7b1b      	ldrb	r3, [r3, #12]
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 8093 	beq.w	800489e <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004778:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800477c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004780:	2b00      	cmp	r3, #0
 8004782:	d046      	beq.n	8004812 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004784:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004786:	785b      	ldrb	r3, [r3, #1]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d126      	bne.n	80047da <PCD_EP_ISR_Handler+0x608>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	627b      	str	r3, [r7, #36]	@ 0x24
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800479a:	b29b      	uxth	r3, r3
 800479c:	461a      	mov	r2, r3
 800479e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a0:	4413      	add	r3, r2
 80047a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80047a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	011a      	lsls	r2, r3, #4
 80047aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ac:	4413      	add	r3, r2
 80047ae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80047b2:	623b      	str	r3, [r7, #32]
 80047b4:	6a3b      	ldr	r3, [r7, #32]
 80047b6:	881b      	ldrh	r3, [r3, #0]
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047be:	b29a      	uxth	r2, r3
 80047c0:	6a3b      	ldr	r3, [r7, #32]
 80047c2:	801a      	strh	r2, [r3, #0]
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	881b      	ldrh	r3, [r3, #0]
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	6a3b      	ldr	r3, [r7, #32]
 80047d6:	801a      	strh	r2, [r3, #0]
 80047d8:	e061      	b.n	800489e <PCD_EP_ISR_Handler+0x6cc>
 80047da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047dc:	785b      	ldrb	r3, [r3, #1]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d15d      	bne.n	800489e <PCD_EP_ISR_Handler+0x6cc>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	461a      	mov	r2, r3
 80047f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047f6:	4413      	add	r3, r2
 80047f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	011a      	lsls	r2, r3, #4
 8004800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004802:	4413      	add	r3, r2
 8004804:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004808:	62bb      	str	r3, [r7, #40]	@ 0x28
 800480a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800480c:	2200      	movs	r2, #0
 800480e:	801a      	strh	r2, [r3, #0]
 8004810:	e045      	b.n	800489e <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004818:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800481a:	785b      	ldrb	r3, [r3, #1]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d126      	bne.n	800486e <PCD_EP_ISR_Handler+0x69c>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	637b      	str	r3, [r7, #52]	@ 0x34
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800482e:	b29b      	uxth	r3, r3
 8004830:	461a      	mov	r2, r3
 8004832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004834:	4413      	add	r3, r2
 8004836:	637b      	str	r3, [r7, #52]	@ 0x34
 8004838:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	011a      	lsls	r2, r3, #4
 800483e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004840:	4413      	add	r3, r2
 8004842:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004846:	633b      	str	r3, [r7, #48]	@ 0x30
 8004848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800484a:	881b      	ldrh	r3, [r3, #0]
 800484c:	b29b      	uxth	r3, r3
 800484e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004852:	b29a      	uxth	r2, r3
 8004854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004856:	801a      	strh	r2, [r3, #0]
 8004858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485a:	881b      	ldrh	r3, [r3, #0]
 800485c:	b29b      	uxth	r3, r3
 800485e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004862:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004866:	b29a      	uxth	r2, r3
 8004868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800486a:	801a      	strh	r2, [r3, #0]
 800486c:	e017      	b.n	800489e <PCD_EP_ISR_Handler+0x6cc>
 800486e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004870:	785b      	ldrb	r3, [r3, #1]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d113      	bne.n	800489e <PCD_EP_ISR_Handler+0x6cc>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800487e:	b29b      	uxth	r3, r3
 8004880:	461a      	mov	r2, r3
 8004882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004884:	4413      	add	r3, r2
 8004886:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004888:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	011a      	lsls	r2, r3, #4
 800488e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004890:	4413      	add	r3, r2
 8004892:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004896:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800489a:	2200      	movs	r2, #0
 800489c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800489e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	4619      	mov	r1, r3
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7fd fd4a 	bl	800233e <HAL_PCD_DataInStageCallback>
 80048aa:	e053      	b.n	8004954 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80048ac:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80048b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d146      	bne.n	8004946 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	461a      	mov	r2, r3
 80048c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	00db      	lsls	r3, r3, #3
 80048ca:	4413      	add	r3, r2
 80048cc:	3302      	adds	r3, #2
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6812      	ldr	r2, [r2, #0]
 80048d4:	4413      	add	r3, r2
 80048d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048e0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80048e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048e6:	699a      	ldr	r2, [r3, #24]
 80048e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d907      	bls.n	8004900 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80048f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048f2:	699a      	ldr	r2, [r3, #24]
 80048f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80048f8:	1ad2      	subs	r2, r2, r3
 80048fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048fc:	619a      	str	r2, [r3, #24]
 80048fe:	e002      	b.n	8004906 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8004900:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004902:	2200      	movs	r2, #0
 8004904:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d106      	bne.n	800491c <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800490e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	4619      	mov	r1, r3
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f7fd fd12 	bl	800233e <HAL_PCD_DataInStageCallback>
 800491a:	e01b      	b.n	8004954 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800491c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800491e:	695a      	ldr	r2, [r3, #20]
 8004920:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004924:	441a      	add	r2, r3
 8004926:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004928:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800492a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800492c:	69da      	ldr	r2, [r3, #28]
 800492e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004932:	441a      	add	r2, r3
 8004934:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004936:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800493e:	4618      	mov	r0, r3
 8004940:	f003 fb51 	bl	8007fe6 <USB_EPStartXfer>
 8004944:	e006      	b.n	8004954 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004946:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800494a:	461a      	mov	r2, r3
 800494c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f91b 	bl	8004b8a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800495c:	b29b      	uxth	r3, r3
 800495e:	b21b      	sxth	r3, r3
 8004960:	2b00      	cmp	r3, #0
 8004962:	f6ff ac3b 	blt.w	80041dc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3758      	adds	r7, #88	@ 0x58
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b088      	sub	sp, #32
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	4613      	mov	r3, r2
 800497c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800497e:	88fb      	ldrh	r3, [r7, #6]
 8004980:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d07e      	beq.n	8004a86 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004990:	b29b      	uxth	r3, r3
 8004992:	461a      	mov	r2, r3
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	00db      	lsls	r3, r3, #3
 800499a:	4413      	add	r3, r2
 800499c:	3302      	adds	r3, #2
 800499e:	005b      	lsls	r3, r3, #1
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	6812      	ldr	r2, [r2, #0]
 80049a4:	4413      	add	r3, r2
 80049a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80049aa:	881b      	ldrh	r3, [r3, #0]
 80049ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049b0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	699a      	ldr	r2, [r3, #24]
 80049b6:	8b7b      	ldrh	r3, [r7, #26]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d306      	bcc.n	80049ca <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	699a      	ldr	r2, [r3, #24]
 80049c0:	8b7b      	ldrh	r3, [r7, #26]
 80049c2:	1ad2      	subs	r2, r2, r3
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	619a      	str	r2, [r3, #24]
 80049c8:	e002      	b.n	80049d0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	2200      	movs	r2, #0
 80049ce:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d123      	bne.n	8004a20 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	461a      	mov	r2, r3
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	4413      	add	r3, r2
 80049e6:	881b      	ldrh	r3, [r3, #0]
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049f2:	833b      	strh	r3, [r7, #24]
 80049f4:	8b3b      	ldrh	r3, [r7, #24]
 80049f6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80049fa:	833b      	strh	r3, [r7, #24]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	461a      	mov	r2, r3
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	441a      	add	r2, r3
 8004a0a:	8b3b      	ldrh	r3, [r7, #24]
 8004a0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004a20:	88fb      	ldrh	r3, [r7, #6]
 8004a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d01f      	beq.n	8004a6a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	881b      	ldrh	r3, [r3, #0]
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a44:	82fb      	strh	r3, [r7, #22]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	441a      	add	r2, r3
 8004a54:	8afb      	ldrh	r3, [r7, #22]
 8004a56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a62:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004a6a:	8b7b      	ldrh	r3, [r7, #26]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 8087 	beq.w	8004b80 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6818      	ldr	r0, [r3, #0]
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	6959      	ldr	r1, [r3, #20]
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	891a      	ldrh	r2, [r3, #8]
 8004a7e:	8b7b      	ldrh	r3, [r7, #26]
 8004a80:	f004 ffd7 	bl	8009a32 <USB_ReadPMA>
 8004a84:	e07c      	b.n	8004b80 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	461a      	mov	r2, r3
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	00db      	lsls	r3, r3, #3
 8004a98:	4413      	add	r3, r2
 8004a9a:	3306      	adds	r3, #6
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	6812      	ldr	r2, [r2, #0]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004aa8:	881b      	ldrh	r3, [r3, #0]
 8004aaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004aae:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	699a      	ldr	r2, [r3, #24]
 8004ab4:	8b7b      	ldrh	r3, [r7, #26]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d306      	bcc.n	8004ac8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	699a      	ldr	r2, [r3, #24]
 8004abe:	8b7b      	ldrh	r3, [r7, #26]
 8004ac0:	1ad2      	subs	r2, r2, r3
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	619a      	str	r2, [r3, #24]
 8004ac6:	e002      	b.n	8004ace <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	2200      	movs	r2, #0
 8004acc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d123      	bne.n	8004b1e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	461a      	mov	r2, r3
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	881b      	ldrh	r3, [r3, #0]
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004aec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004af0:	83fb      	strh	r3, [r7, #30]
 8004af2:	8bfb      	ldrh	r3, [r7, #30]
 8004af4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004af8:	83fb      	strh	r3, [r7, #30]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	461a      	mov	r2, r3
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	441a      	add	r2, r3
 8004b08:	8bfb      	ldrh	r3, [r7, #30]
 8004b0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004b1e:	88fb      	ldrh	r3, [r7, #6]
 8004b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d11f      	bne.n	8004b68 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	881b      	ldrh	r3, [r3, #0]
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b42:	83bb      	strh	r3, [r7, #28]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	461a      	mov	r2, r3
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	441a      	add	r2, r3
 8004b52:	8bbb      	ldrh	r3, [r7, #28]
 8004b54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b60:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004b68:	8b7b      	ldrh	r3, [r7, #26]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d008      	beq.n	8004b80 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6818      	ldr	r0, [r3, #0]
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	6959      	ldr	r1, [r3, #20]
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	895a      	ldrh	r2, [r3, #10]
 8004b7a:	8b7b      	ldrh	r3, [r7, #26]
 8004b7c:	f004 ff59 	bl	8009a32 <USB_ReadPMA>
    }
  }

  return count;
 8004b80:	8b7b      	ldrh	r3, [r7, #26]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3720      	adds	r7, #32
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b0a4      	sub	sp, #144	@ 0x90
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	60f8      	str	r0, [r7, #12]
 8004b92:	60b9      	str	r1, [r7, #8]
 8004b94:	4613      	mov	r3, r2
 8004b96:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004b98:	88fb      	ldrh	r3, [r7, #6]
 8004b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f000 81dd 	beq.w	8004f5e <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	461a      	mov	r2, r3
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	00db      	lsls	r3, r3, #3
 8004bb6:	4413      	add	r3, r2
 8004bb8:	3302      	adds	r3, #2
 8004bba:	005b      	lsls	r3, r3, #1
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	6812      	ldr	r2, [r2, #0]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004bc6:	881b      	ldrh	r3, [r3, #0]
 8004bc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bcc:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	699a      	ldr	r2, [r3, #24]
 8004bd4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d907      	bls.n	8004bec <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	699a      	ldr	r2, [r3, #24]
 8004be0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004be4:	1ad2      	subs	r2, r2, r3
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	619a      	str	r2, [r3, #24]
 8004bea:	e002      	b.n	8004bf2 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f040 80b9 	bne.w	8004d6e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	785b      	ldrb	r3, [r3, #1]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d126      	bne.n	8004c52 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	461a      	mov	r2, r3
 8004c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c18:	4413      	add	r3, r2
 8004c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	011a      	lsls	r2, r3, #4
 8004c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c24:	4413      	add	r3, r2
 8004c26:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c2e:	881b      	ldrh	r3, [r3, #0]
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c3a:	801a      	strh	r2, [r3, #0]
 8004c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c3e:	881b      	ldrh	r3, [r3, #0]
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c4a:	b29a      	uxth	r2, r3
 8004c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c4e:	801a      	strh	r2, [r3, #0]
 8004c50:	e01a      	b.n	8004c88 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	785b      	ldrb	r3, [r3, #1]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d116      	bne.n	8004c88 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c6e:	4413      	add	r3, r2
 8004c70:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	011a      	lsls	r2, r3, #4
 8004c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004c80:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c84:	2200      	movs	r2, #0
 8004c86:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	785b      	ldrb	r3, [r3, #1]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d126      	bne.n	8004ce4 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	61fb      	str	r3, [r7, #28]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	4413      	add	r3, r2
 8004cac:	61fb      	str	r3, [r7, #28]
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	011a      	lsls	r2, r3, #4
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004cbc:	61bb      	str	r3, [r7, #24]
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	801a      	strh	r2, [r3, #0]
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	881b      	ldrh	r3, [r3, #0]
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	801a      	strh	r2, [r3, #0]
 8004ce2:	e017      	b.n	8004d14 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	785b      	ldrb	r3, [r3, #1]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d113      	bne.n	8004d14 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfa:	4413      	add	r3, r2
 8004cfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	011a      	lsls	r2, r3, #4
 8004d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d06:	4413      	add	r3, r2
 8004d08:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004d0c:	623b      	str	r3, [r7, #32]
 8004d0e:	6a3b      	ldr	r3, [r7, #32]
 8004d10:	2200      	movs	r2, #0
 8004d12:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	4619      	mov	r1, r3
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f7fd fb0f 	bl	800233e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004d20:	88fb      	ldrh	r3, [r7, #6]
 8004d22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f000 82fc 	beq.w	8005324 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	461a      	mov	r2, r3
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4413      	add	r3, r2
 8004d3a:	881b      	ldrh	r3, [r3, #0]
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d46:	82fb      	strh	r3, [r7, #22]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	441a      	add	r2, r3
 8004d56:	8afb      	ldrh	r3, [r7, #22]
 8004d58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d60:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	8013      	strh	r3, [r2, #0]
 8004d6c:	e2da      	b.n	8005324 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004d6e:	88fb      	ldrh	r3, [r7, #6]
 8004d70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d021      	beq.n	8004dbc <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	881b      	ldrh	r3, [r3, #0]
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d92:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	441a      	add	r2, r3
 8004da4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004da8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004db0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004db4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	f040 82ae 	bne.w	8005324 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	695a      	ldr	r2, [r3, #20]
 8004dcc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004dd0:	441a      	add	r2, r3
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	69da      	ldr	r2, [r3, #28]
 8004dda:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004dde:	441a      	add	r2, r3
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	6a1a      	ldr	r2, [r3, #32]
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d30b      	bcc.n	8004e08 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	6a1a      	ldr	r2, [r3, #32]
 8004dfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e00:	1ad2      	subs	r2, r2, r3
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	621a      	str	r2, [r3, #32]
 8004e06:	e017      	b.n	8004e38 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d108      	bne.n	8004e22 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8004e10:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004e14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004e20:	e00a      	b.n	8004e38 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	2200      	movs	r2, #0
 8004e36:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	785b      	ldrb	r3, [r3, #1]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d165      	bne.n	8004f0c <HAL_PCD_EP_DB_Transmit+0x382>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	461a      	mov	r2, r3
 8004e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e54:	4413      	add	r3, r2
 8004e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	011a      	lsls	r2, r3, #4
 8004e5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e60:	4413      	add	r3, r2
 8004e62:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004e66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e76:	801a      	strh	r2, [r3, #0]
 8004e78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10a      	bne.n	8004e96 <HAL_PCD_EP_DB_Transmit+0x30c>
 8004e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e82:	881b      	ldrh	r3, [r3, #0]
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e92:	801a      	strh	r2, [r3, #0]
 8004e94:	e057      	b.n	8004f46 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004e96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e9a:	2b3e      	cmp	r3, #62	@ 0x3e
 8004e9c:	d818      	bhi.n	8004ed0 <HAL_PCD_EP_DB_Transmit+0x346>
 8004e9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ea2:	085b      	lsrs	r3, r3, #1
 8004ea4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ea6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d002      	beq.n	8004eb8 <HAL_PCD_EP_DB_Transmit+0x32e>
 8004eb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eba:	881b      	ldrh	r3, [r3, #0]
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	029b      	lsls	r3, r3, #10
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ecc:	801a      	strh	r2, [r3, #0]
 8004ece:	e03a      	b.n	8004f46 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004ed0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ed4:	095b      	lsrs	r3, r3, #5
 8004ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ed8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004edc:	f003 031f 	and.w	r3, r3, #31
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d102      	bne.n	8004eea <HAL_PCD_EP_DB_Transmit+0x360>
 8004ee4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eec:	881b      	ldrh	r3, [r3, #0]
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	029b      	lsls	r3, r3, #10
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f08:	801a      	strh	r2, [r3, #0]
 8004f0a:	e01c      	b.n	8004f46 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	785b      	ldrb	r3, [r3, #1]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d118      	bne.n	8004f46 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	461a      	mov	r2, r3
 8004f26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f28:	4413      	add	r3, r2
 8004f2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	011a      	lsls	r2, r3, #4
 8004f32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f34:	4413      	add	r3, r2
 8004f36:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004f3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f44:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6818      	ldr	r0, [r3, #0]
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	6959      	ldr	r1, [r3, #20]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	891a      	ldrh	r2, [r3, #8]
 8004f52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	f004 fd25 	bl	80099a6 <USB_WritePMA>
 8004f5c:	e1e2      	b.n	8005324 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	461a      	mov	r2, r3
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	4413      	add	r3, r2
 8004f72:	3306      	adds	r3, #6
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	6812      	ldr	r2, [r2, #0]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004f80:	881b      	ldrh	r3, [r3, #0]
 8004f82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f86:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	699a      	ldr	r2, [r3, #24]
 8004f8e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d307      	bcc.n	8004fa6 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	699a      	ldr	r2, [r3, #24]
 8004f9a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004f9e:	1ad2      	subs	r2, r2, r3
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	619a      	str	r2, [r3, #24]
 8004fa4:	e002      	b.n	8004fac <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f040 80c0 	bne.w	8005136 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	785b      	ldrb	r3, [r3, #1]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d126      	bne.n	800500c <HAL_PCD_EP_DB_Transmit+0x482>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	461a      	mov	r2, r3
 8004fd0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004fd2:	4413      	add	r3, r2
 8004fd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	011a      	lsls	r2, r3, #4
 8004fdc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004fde:	4413      	add	r3, r2
 8004fe0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004fe4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004fe6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ff4:	801a      	strh	r2, [r3, #0]
 8004ff6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ff8:	881b      	ldrh	r3, [r3, #0]
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005000:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005004:	b29a      	uxth	r2, r3
 8005006:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005008:	801a      	strh	r2, [r3, #0]
 800500a:	e01a      	b.n	8005042 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	785b      	ldrb	r3, [r3, #1]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d116      	bne.n	8005042 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	667b      	str	r3, [r7, #100]	@ 0x64
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005022:	b29b      	uxth	r3, r3
 8005024:	461a      	mov	r2, r3
 8005026:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005028:	4413      	add	r3, r2
 800502a:	667b      	str	r3, [r7, #100]	@ 0x64
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	011a      	lsls	r2, r3, #4
 8005032:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005034:	4413      	add	r3, r2
 8005036:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800503a:	663b      	str	r3, [r7, #96]	@ 0x60
 800503c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800503e:	2200      	movs	r2, #0
 8005040:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	677b      	str	r3, [r7, #116]	@ 0x74
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	785b      	ldrb	r3, [r3, #1]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d12b      	bne.n	80050a8 <HAL_PCD_EP_DB_Transmit+0x51e>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800505e:	b29b      	uxth	r3, r3
 8005060:	461a      	mov	r2, r3
 8005062:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005064:	4413      	add	r3, r2
 8005066:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	011a      	lsls	r2, r3, #4
 800506e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005070:	4413      	add	r3, r2
 8005072:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005076:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800507a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800507e:	881b      	ldrh	r3, [r3, #0]
 8005080:	b29b      	uxth	r3, r3
 8005082:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005086:	b29a      	uxth	r2, r3
 8005088:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800508c:	801a      	strh	r2, [r3, #0]
 800508e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005092:	881b      	ldrh	r3, [r3, #0]
 8005094:	b29b      	uxth	r3, r3
 8005096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800509a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800509e:	b29a      	uxth	r2, r3
 80050a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80050a4:	801a      	strh	r2, [r3, #0]
 80050a6:	e017      	b.n	80050d8 <HAL_PCD_EP_DB_Transmit+0x54e>
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	785b      	ldrb	r3, [r3, #1]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d113      	bne.n	80050d8 <HAL_PCD_EP_DB_Transmit+0x54e>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	461a      	mov	r2, r3
 80050bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050be:	4413      	add	r3, r2
 80050c0:	677b      	str	r3, [r7, #116]	@ 0x74
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	011a      	lsls	r2, r3, #4
 80050c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050ca:	4413      	add	r3, r2
 80050cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80050d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80050d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050d4:	2200      	movs	r2, #0
 80050d6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	4619      	mov	r1, r3
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f7fd f92d 	bl	800233e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80050e4:	88fb      	ldrh	r3, [r7, #6]
 80050e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f040 811a 	bne.w	8005324 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	461a      	mov	r2, r3
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	881b      	ldrh	r3, [r3, #0]
 8005100:	b29b      	uxth	r3, r3
 8005102:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005106:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800510a:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	461a      	mov	r2, r3
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	441a      	add	r2, r3
 800511c:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8005120:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005124:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005128:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800512c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005130:	b29b      	uxth	r3, r3
 8005132:	8013      	strh	r3, [r2, #0]
 8005134:	e0f6      	b.n	8005324 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005136:	88fb      	ldrh	r3, [r7, #6]
 8005138:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d121      	bne.n	8005184 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	461a      	mov	r2, r3
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4413      	add	r3, r2
 800514e:	881b      	ldrh	r3, [r3, #0]
 8005150:	b29b      	uxth	r3, r3
 8005152:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005156:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800515a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	461a      	mov	r2, r3
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	441a      	add	r2, r3
 800516c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005170:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005174:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005178:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800517c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005180:	b29b      	uxth	r3, r3
 8005182:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800518a:	2b01      	cmp	r3, #1
 800518c:	f040 80ca 	bne.w	8005324 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	695a      	ldr	r2, [r3, #20]
 8005194:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005198:	441a      	add	r2, r3
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	69da      	ldr	r2, [r3, #28]
 80051a2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80051a6:	441a      	add	r2, r3
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	6a1a      	ldr	r2, [r3, #32]
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d30b      	bcc.n	80051d0 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	6a1a      	ldr	r2, [r3, #32]
 80051c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051c8:	1ad2      	subs	r2, r2, r3
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	621a      	str	r2, [r3, #32]
 80051ce:	e017      	b.n	8005200 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	6a1b      	ldr	r3, [r3, #32]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d108      	bne.n	80051ea <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80051d8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80051dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80051e8:	e00a      	b.n	8005200 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	2200      	movs	r2, #0
 80051f6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	657b      	str	r3, [r7, #84]	@ 0x54
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	785b      	ldrb	r3, [r3, #1]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d165      	bne.n	80052da <HAL_PCD_EP_DB_Transmit+0x750>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800521c:	b29b      	uxth	r3, r3
 800521e:	461a      	mov	r2, r3
 8005220:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005222:	4413      	add	r3, r2
 8005224:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	011a      	lsls	r2, r3, #4
 800522c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800522e:	4413      	add	r3, r2
 8005230:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005234:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005236:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005238:	881b      	ldrh	r3, [r3, #0]
 800523a:	b29b      	uxth	r3, r3
 800523c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005240:	b29a      	uxth	r2, r3
 8005242:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005244:	801a      	strh	r2, [r3, #0]
 8005246:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10a      	bne.n	8005264 <HAL_PCD_EP_DB_Transmit+0x6da>
 800524e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005250:	881b      	ldrh	r3, [r3, #0]
 8005252:	b29b      	uxth	r3, r3
 8005254:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005258:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800525c:	b29a      	uxth	r2, r3
 800525e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005260:	801a      	strh	r2, [r3, #0]
 8005262:	e054      	b.n	800530e <HAL_PCD_EP_DB_Transmit+0x784>
 8005264:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005268:	2b3e      	cmp	r3, #62	@ 0x3e
 800526a:	d818      	bhi.n	800529e <HAL_PCD_EP_DB_Transmit+0x714>
 800526c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005270:	085b      	lsrs	r3, r3, #1
 8005272:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005274:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b00      	cmp	r3, #0
 800527e:	d002      	beq.n	8005286 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8005280:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005282:	3301      	adds	r3, #1
 8005284:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005286:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005288:	881b      	ldrh	r3, [r3, #0]
 800528a:	b29a      	uxth	r2, r3
 800528c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800528e:	b29b      	uxth	r3, r3
 8005290:	029b      	lsls	r3, r3, #10
 8005292:	b29b      	uxth	r3, r3
 8005294:	4313      	orrs	r3, r2
 8005296:	b29a      	uxth	r2, r3
 8005298:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800529a:	801a      	strh	r2, [r3, #0]
 800529c:	e037      	b.n	800530e <HAL_PCD_EP_DB_Transmit+0x784>
 800529e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052a2:	095b      	lsrs	r3, r3, #5
 80052a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052aa:	f003 031f 	and.w	r3, r3, #31
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d102      	bne.n	80052b8 <HAL_PCD_EP_DB_Transmit+0x72e>
 80052b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052b4:	3b01      	subs	r3, #1
 80052b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052ba:	881b      	ldrh	r3, [r3, #0]
 80052bc:	b29a      	uxth	r2, r3
 80052be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	029b      	lsls	r3, r3, #10
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	4313      	orrs	r3, r2
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052d6:	801a      	strh	r2, [r3, #0]
 80052d8:	e019      	b.n	800530e <HAL_PCD_EP_DB_Transmit+0x784>
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	785b      	ldrb	r3, [r3, #1]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d115      	bne.n	800530e <HAL_PCD_EP_DB_Transmit+0x784>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	461a      	mov	r2, r3
 80052ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052f0:	4413      	add	r3, r2
 80052f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	011a      	lsls	r2, r3, #4
 80052fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052fc:	4413      	add	r3, r2
 80052fe:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005302:	653b      	str	r3, [r7, #80]	@ 0x50
 8005304:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005308:	b29a      	uxth	r2, r3
 800530a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800530c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6818      	ldr	r0, [r3, #0]
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	6959      	ldr	r1, [r3, #20]
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	895a      	ldrh	r2, [r3, #10]
 800531a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800531e:	b29b      	uxth	r3, r3
 8005320:	f004 fb41 	bl	80099a6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	461a      	mov	r2, r3
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4413      	add	r3, r2
 8005332:	881b      	ldrh	r3, [r3, #0]
 8005334:	b29b      	uxth	r3, r3
 8005336:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800533a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800533e:	82bb      	strh	r3, [r7, #20]
 8005340:	8abb      	ldrh	r3, [r7, #20]
 8005342:	f083 0310 	eor.w	r3, r3, #16
 8005346:	82bb      	strh	r3, [r7, #20]
 8005348:	8abb      	ldrh	r3, [r7, #20]
 800534a:	f083 0320 	eor.w	r3, r3, #32
 800534e:	82bb      	strh	r3, [r7, #20]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	461a      	mov	r2, r3
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	441a      	add	r2, r3
 800535e:	8abb      	ldrh	r3, [r7, #20]
 8005360:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005364:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005368:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800536c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005370:	b29b      	uxth	r3, r3
 8005372:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3790      	adds	r7, #144	@ 0x90
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800537e:	b480      	push	{r7}
 8005380:	b087      	sub	sp, #28
 8005382:	af00      	add	r7, sp, #0
 8005384:	60f8      	str	r0, [r7, #12]
 8005386:	607b      	str	r3, [r7, #4]
 8005388:	460b      	mov	r3, r1
 800538a:	817b      	strh	r3, [r7, #10]
 800538c:	4613      	mov	r3, r2
 800538e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005390:	897b      	ldrh	r3, [r7, #10]
 8005392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005396:	b29b      	uxth	r3, r3
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00b      	beq.n	80053b4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800539c:	897b      	ldrh	r3, [r7, #10]
 800539e:	f003 0207 	and.w	r2, r3, #7
 80053a2:	4613      	mov	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4413      	add	r3, r2
 80053a8:	00db      	lsls	r3, r3, #3
 80053aa:	3310      	adds	r3, #16
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	4413      	add	r3, r2
 80053b0:	617b      	str	r3, [r7, #20]
 80053b2:	e009      	b.n	80053c8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80053b4:	897a      	ldrh	r2, [r7, #10]
 80053b6:	4613      	mov	r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	4413      	add	r3, r2
 80053bc:	00db      	lsls	r3, r3, #3
 80053be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	4413      	add	r3, r2
 80053c6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80053c8:	893b      	ldrh	r3, [r7, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d107      	bne.n	80053de <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	2200      	movs	r2, #0
 80053d2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	80da      	strh	r2, [r3, #6]
 80053dc:	e00b      	b.n	80053f6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	2201      	movs	r2, #1
 80053e2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	0c1b      	lsrs	r3, r3, #16
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	371c      	adds	r7, #28
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800540a:	af00      	add	r7, sp, #0
 800540c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005410:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005414:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005416:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800541a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d102      	bne.n	800542a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	f001 b823 	b.w	8006470 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800542a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800542e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	f000 817d 	beq.w	800573a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005440:	4bbc      	ldr	r3, [pc, #752]	@ (8005734 <HAL_RCC_OscConfig+0x330>)
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f003 030c 	and.w	r3, r3, #12
 8005448:	2b04      	cmp	r3, #4
 800544a:	d00c      	beq.n	8005466 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800544c:	4bb9      	ldr	r3, [pc, #740]	@ (8005734 <HAL_RCC_OscConfig+0x330>)
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f003 030c 	and.w	r3, r3, #12
 8005454:	2b08      	cmp	r3, #8
 8005456:	d15c      	bne.n	8005512 <HAL_RCC_OscConfig+0x10e>
 8005458:	4bb6      	ldr	r3, [pc, #728]	@ (8005734 <HAL_RCC_OscConfig+0x330>)
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005460:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005464:	d155      	bne.n	8005512 <HAL_RCC_OscConfig+0x10e>
 8005466:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800546a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800546e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8005472:	fa93 f3a3 	rbit	r3, r3
 8005476:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800547a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800547e:	fab3 f383 	clz	r3, r3
 8005482:	b2db      	uxtb	r3, r3
 8005484:	095b      	lsrs	r3, r3, #5
 8005486:	b2db      	uxtb	r3, r3
 8005488:	f043 0301 	orr.w	r3, r3, #1
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b01      	cmp	r3, #1
 8005490:	d102      	bne.n	8005498 <HAL_RCC_OscConfig+0x94>
 8005492:	4ba8      	ldr	r3, [pc, #672]	@ (8005734 <HAL_RCC_OscConfig+0x330>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	e015      	b.n	80054c4 <HAL_RCC_OscConfig+0xc0>
 8005498:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800549c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80054a4:	fa93 f3a3 	rbit	r3, r3
 80054a8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80054ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80054b0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80054b4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80054b8:	fa93 f3a3 	rbit	r3, r3
 80054bc:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80054c0:	4b9c      	ldr	r3, [pc, #624]	@ (8005734 <HAL_RCC_OscConfig+0x330>)
 80054c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80054c8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80054cc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80054d0:	fa92 f2a2 	rbit	r2, r2
 80054d4:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80054d8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80054dc:	fab2 f282 	clz	r2, r2
 80054e0:	b2d2      	uxtb	r2, r2
 80054e2:	f042 0220 	orr.w	r2, r2, #32
 80054e6:	b2d2      	uxtb	r2, r2
 80054e8:	f002 021f 	and.w	r2, r2, #31
 80054ec:	2101      	movs	r1, #1
 80054ee:	fa01 f202 	lsl.w	r2, r1, r2
 80054f2:	4013      	ands	r3, r2
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f000 811f 	beq.w	8005738 <HAL_RCC_OscConfig+0x334>
 80054fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80054fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	f040 8116 	bne.w	8005738 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	f000 bfaf 	b.w	8006470 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005512:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005516:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005522:	d106      	bne.n	8005532 <HAL_RCC_OscConfig+0x12e>
 8005524:	4b83      	ldr	r3, [pc, #524]	@ (8005734 <HAL_RCC_OscConfig+0x330>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a82      	ldr	r2, [pc, #520]	@ (8005734 <HAL_RCC_OscConfig+0x330>)
 800552a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800552e:	6013      	str	r3, [r2, #0]
 8005530:	e036      	b.n	80055a0 <HAL_RCC_OscConfig+0x19c>
 8005532:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005536:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10c      	bne.n	800555c <HAL_RCC_OscConfig+0x158>
 8005542:	4b7c      	ldr	r3, [pc, #496]	@ (8005734 <HAL_RCC_OscConfig+0x330>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a7b      	ldr	r2, [pc, #492]	@ (8005734 <HAL_RCC_OscConfig+0x330>)
 8005548:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800554c:	6013      	str	r3, [r2, #0]
 800554e:	4b79      	ldr	r3, [pc, #484]	@ (8005734 <HAL_RCC_OscConfig+0x330>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a78      	ldr	r2, [pc, #480]	@ (8005734 <HAL_RCC_OscConfig+0x330>)
 8005554:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005558:	6013      	str	r3, [r2, #0]
 800555a:	e021      	b.n	80055a0 <HAL_RCC_OscConfig+0x19c>
 800555c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005560:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800556c:	d10c      	bne.n	8005588 <HAL_RCC_OscConfig+0x184>
 800556e:	4b71      	ldr	r3, [pc, #452]	@ (8005734 <HAL_RCC_OscConfig+0x330>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a70      	ldr	r2, [pc, #448]	@ (8005734 <HAL_RCC_OscConfig+0x330>)
 8005574:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005578:	6013      	str	r3, [r2, #0]
 800557a:	4b6e      	ldr	r3, [pc, #440]	@ (8005734 <HAL_RCC_OscConfig+0x330>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a6d      	ldr	r2, [pc, #436]	@ (8005734 <HAL_RCC_OscConfig+0x330>)
 8005580:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005584:	6013      	str	r3, [r2, #0]
 8005586:	e00b      	b.n	80055a0 <HAL_RCC_OscConfig+0x19c>
 8005588:	4b6a      	ldr	r3, [pc, #424]	@ (8005734 <HAL_RCC_OscConfig+0x330>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a69      	ldr	r2, [pc, #420]	@ (8005734 <HAL_RCC_OscConfig+0x330>)
 800558e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005592:	6013      	str	r3, [r2, #0]
 8005594:	4b67      	ldr	r3, [pc, #412]	@ (8005734 <HAL_RCC_OscConfig+0x330>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a66      	ldr	r2, [pc, #408]	@ (8005734 <HAL_RCC_OscConfig+0x330>)
 800559a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800559e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80055a0:	4b64      	ldr	r3, [pc, #400]	@ (8005734 <HAL_RCC_OscConfig+0x330>)
 80055a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a4:	f023 020f 	bic.w	r2, r3, #15
 80055a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	495f      	ldr	r1, [pc, #380]	@ (8005734 <HAL_RCC_OscConfig+0x330>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d059      	beq.n	800567e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ca:	f7fd f95b 	bl	8002884 <HAL_GetTick>
 80055ce:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055d2:	e00a      	b.n	80055ea <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055d4:	f7fd f956 	bl	8002884 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	2b64      	cmp	r3, #100	@ 0x64
 80055e2:	d902      	bls.n	80055ea <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	f000 bf43 	b.w	8006470 <HAL_RCC_OscConfig+0x106c>
 80055ea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80055ee:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80055f6:	fa93 f3a3 	rbit	r3, r3
 80055fa:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80055fe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005602:	fab3 f383 	clz	r3, r3
 8005606:	b2db      	uxtb	r3, r3
 8005608:	095b      	lsrs	r3, r3, #5
 800560a:	b2db      	uxtb	r3, r3
 800560c:	f043 0301 	orr.w	r3, r3, #1
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b01      	cmp	r3, #1
 8005614:	d102      	bne.n	800561c <HAL_RCC_OscConfig+0x218>
 8005616:	4b47      	ldr	r3, [pc, #284]	@ (8005734 <HAL_RCC_OscConfig+0x330>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	e015      	b.n	8005648 <HAL_RCC_OscConfig+0x244>
 800561c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005620:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005624:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8005628:	fa93 f3a3 	rbit	r3, r3
 800562c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8005630:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005634:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8005638:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800563c:	fa93 f3a3 	rbit	r3, r3
 8005640:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8005644:	4b3b      	ldr	r3, [pc, #236]	@ (8005734 <HAL_RCC_OscConfig+0x330>)
 8005646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005648:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800564c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8005650:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8005654:	fa92 f2a2 	rbit	r2, r2
 8005658:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 800565c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8005660:	fab2 f282 	clz	r2, r2
 8005664:	b2d2      	uxtb	r2, r2
 8005666:	f042 0220 	orr.w	r2, r2, #32
 800566a:	b2d2      	uxtb	r2, r2
 800566c:	f002 021f 	and.w	r2, r2, #31
 8005670:	2101      	movs	r1, #1
 8005672:	fa01 f202 	lsl.w	r2, r1, r2
 8005676:	4013      	ands	r3, r2
 8005678:	2b00      	cmp	r3, #0
 800567a:	d0ab      	beq.n	80055d4 <HAL_RCC_OscConfig+0x1d0>
 800567c:	e05d      	b.n	800573a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800567e:	f7fd f901 	bl	8002884 <HAL_GetTick>
 8005682:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005686:	e00a      	b.n	800569e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005688:	f7fd f8fc 	bl	8002884 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	2b64      	cmp	r3, #100	@ 0x64
 8005696:	d902      	bls.n	800569e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	f000 bee9 	b.w	8006470 <HAL_RCC_OscConfig+0x106c>
 800569e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80056a2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056a6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80056aa:	fa93 f3a3 	rbit	r3, r3
 80056ae:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80056b2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056b6:	fab3 f383 	clz	r3, r3
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	095b      	lsrs	r3, r3, #5
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	f043 0301 	orr.w	r3, r3, #1
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d102      	bne.n	80056d0 <HAL_RCC_OscConfig+0x2cc>
 80056ca:	4b1a      	ldr	r3, [pc, #104]	@ (8005734 <HAL_RCC_OscConfig+0x330>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	e015      	b.n	80056fc <HAL_RCC_OscConfig+0x2f8>
 80056d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80056d4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056d8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80056dc:	fa93 f3a3 	rbit	r3, r3
 80056e0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80056e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80056e8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80056ec:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80056f0:	fa93 f3a3 	rbit	r3, r3
 80056f4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80056f8:	4b0e      	ldr	r3, [pc, #56]	@ (8005734 <HAL_RCC_OscConfig+0x330>)
 80056fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056fc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005700:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8005704:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8005708:	fa92 f2a2 	rbit	r2, r2
 800570c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8005710:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8005714:	fab2 f282 	clz	r2, r2
 8005718:	b2d2      	uxtb	r2, r2
 800571a:	f042 0220 	orr.w	r2, r2, #32
 800571e:	b2d2      	uxtb	r2, r2
 8005720:	f002 021f 	and.w	r2, r2, #31
 8005724:	2101      	movs	r1, #1
 8005726:	fa01 f202 	lsl.w	r2, r1, r2
 800572a:	4013      	ands	r3, r2
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1ab      	bne.n	8005688 <HAL_RCC_OscConfig+0x284>
 8005730:	e003      	b.n	800573a <HAL_RCC_OscConfig+0x336>
 8005732:	bf00      	nop
 8005734:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800573a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800573e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	f000 817d 	beq.w	8005a4a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005750:	4ba6      	ldr	r3, [pc, #664]	@ (80059ec <HAL_RCC_OscConfig+0x5e8>)
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f003 030c 	and.w	r3, r3, #12
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00b      	beq.n	8005774 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800575c:	4ba3      	ldr	r3, [pc, #652]	@ (80059ec <HAL_RCC_OscConfig+0x5e8>)
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f003 030c 	and.w	r3, r3, #12
 8005764:	2b08      	cmp	r3, #8
 8005766:	d172      	bne.n	800584e <HAL_RCC_OscConfig+0x44a>
 8005768:	4ba0      	ldr	r3, [pc, #640]	@ (80059ec <HAL_RCC_OscConfig+0x5e8>)
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d16c      	bne.n	800584e <HAL_RCC_OscConfig+0x44a>
 8005774:	2302      	movs	r3, #2
 8005776:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800577a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800577e:	fa93 f3a3 	rbit	r3, r3
 8005782:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8005786:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800578a:	fab3 f383 	clz	r3, r3
 800578e:	b2db      	uxtb	r3, r3
 8005790:	095b      	lsrs	r3, r3, #5
 8005792:	b2db      	uxtb	r3, r3
 8005794:	f043 0301 	orr.w	r3, r3, #1
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b01      	cmp	r3, #1
 800579c:	d102      	bne.n	80057a4 <HAL_RCC_OscConfig+0x3a0>
 800579e:	4b93      	ldr	r3, [pc, #588]	@ (80059ec <HAL_RCC_OscConfig+0x5e8>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	e013      	b.n	80057cc <HAL_RCC_OscConfig+0x3c8>
 80057a4:	2302      	movs	r3, #2
 80057a6:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057aa:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80057ae:	fa93 f3a3 	rbit	r3, r3
 80057b2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80057b6:	2302      	movs	r3, #2
 80057b8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80057bc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80057c0:	fa93 f3a3 	rbit	r3, r3
 80057c4:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80057c8:	4b88      	ldr	r3, [pc, #544]	@ (80059ec <HAL_RCC_OscConfig+0x5e8>)
 80057ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057cc:	2202      	movs	r2, #2
 80057ce:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80057d2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80057d6:	fa92 f2a2 	rbit	r2, r2
 80057da:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80057de:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80057e2:	fab2 f282 	clz	r2, r2
 80057e6:	b2d2      	uxtb	r2, r2
 80057e8:	f042 0220 	orr.w	r2, r2, #32
 80057ec:	b2d2      	uxtb	r2, r2
 80057ee:	f002 021f 	and.w	r2, r2, #31
 80057f2:	2101      	movs	r1, #1
 80057f4:	fa01 f202 	lsl.w	r2, r1, r2
 80057f8:	4013      	ands	r3, r2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00a      	beq.n	8005814 <HAL_RCC_OscConfig+0x410>
 80057fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005802:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d002      	beq.n	8005814 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	f000 be2e 	b.w	8006470 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005814:	4b75      	ldr	r3, [pc, #468]	@ (80059ec <HAL_RCC_OscConfig+0x5e8>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800581c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005820:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	21f8      	movs	r1, #248	@ 0xf8
 800582a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800582e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8005832:	fa91 f1a1 	rbit	r1, r1
 8005836:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800583a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800583e:	fab1 f181 	clz	r1, r1
 8005842:	b2c9      	uxtb	r1, r1
 8005844:	408b      	lsls	r3, r1
 8005846:	4969      	ldr	r1, [pc, #420]	@ (80059ec <HAL_RCC_OscConfig+0x5e8>)
 8005848:	4313      	orrs	r3, r2
 800584a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800584c:	e0fd      	b.n	8005a4a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800584e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005852:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	2b00      	cmp	r3, #0
 800585c:	f000 8088 	beq.w	8005970 <HAL_RCC_OscConfig+0x56c>
 8005860:	2301      	movs	r3, #1
 8005862:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005866:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800586a:	fa93 f3a3 	rbit	r3, r3
 800586e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8005872:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005876:	fab3 f383 	clz	r3, r3
 800587a:	b2db      	uxtb	r3, r3
 800587c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005880:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	461a      	mov	r2, r3
 8005888:	2301      	movs	r3, #1
 800588a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800588c:	f7fc fffa 	bl	8002884 <HAL_GetTick>
 8005890:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005894:	e00a      	b.n	80058ac <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005896:	f7fc fff5 	bl	8002884 <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d902      	bls.n	80058ac <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	f000 bde2 	b.w	8006470 <HAL_RCC_OscConfig+0x106c>
 80058ac:	2302      	movs	r3, #2
 80058ae:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058b2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80058b6:	fa93 f3a3 	rbit	r3, r3
 80058ba:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80058be:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058c2:	fab3 f383 	clz	r3, r3
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	095b      	lsrs	r3, r3, #5
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	f043 0301 	orr.w	r3, r3, #1
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d102      	bne.n	80058dc <HAL_RCC_OscConfig+0x4d8>
 80058d6:	4b45      	ldr	r3, [pc, #276]	@ (80059ec <HAL_RCC_OscConfig+0x5e8>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	e013      	b.n	8005904 <HAL_RCC_OscConfig+0x500>
 80058dc:	2302      	movs	r3, #2
 80058de:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058e2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80058e6:	fa93 f3a3 	rbit	r3, r3
 80058ea:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80058ee:	2302      	movs	r3, #2
 80058f0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80058f4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80058f8:	fa93 f3a3 	rbit	r3, r3
 80058fc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8005900:	4b3a      	ldr	r3, [pc, #232]	@ (80059ec <HAL_RCC_OscConfig+0x5e8>)
 8005902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005904:	2202      	movs	r2, #2
 8005906:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800590a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800590e:	fa92 f2a2 	rbit	r2, r2
 8005912:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8005916:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800591a:	fab2 f282 	clz	r2, r2
 800591e:	b2d2      	uxtb	r2, r2
 8005920:	f042 0220 	orr.w	r2, r2, #32
 8005924:	b2d2      	uxtb	r2, r2
 8005926:	f002 021f 	and.w	r2, r2, #31
 800592a:	2101      	movs	r1, #1
 800592c:	fa01 f202 	lsl.w	r2, r1, r2
 8005930:	4013      	ands	r3, r2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d0af      	beq.n	8005896 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005936:	4b2d      	ldr	r3, [pc, #180]	@ (80059ec <HAL_RCC_OscConfig+0x5e8>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800593e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005942:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	21f8      	movs	r1, #248	@ 0xf8
 800594c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005950:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8005954:	fa91 f1a1 	rbit	r1, r1
 8005958:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800595c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8005960:	fab1 f181 	clz	r1, r1
 8005964:	b2c9      	uxtb	r1, r1
 8005966:	408b      	lsls	r3, r1
 8005968:	4920      	ldr	r1, [pc, #128]	@ (80059ec <HAL_RCC_OscConfig+0x5e8>)
 800596a:	4313      	orrs	r3, r2
 800596c:	600b      	str	r3, [r1, #0]
 800596e:	e06c      	b.n	8005a4a <HAL_RCC_OscConfig+0x646>
 8005970:	2301      	movs	r3, #1
 8005972:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005976:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800597a:	fa93 f3a3 	rbit	r3, r3
 800597e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8005982:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005986:	fab3 f383 	clz	r3, r3
 800598a:	b2db      	uxtb	r3, r3
 800598c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005990:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	461a      	mov	r2, r3
 8005998:	2300      	movs	r3, #0
 800599a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800599c:	f7fc ff72 	bl	8002884 <HAL_GetTick>
 80059a0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059a4:	e00a      	b.n	80059bc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059a6:	f7fc ff6d 	bl	8002884 <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d902      	bls.n	80059bc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	f000 bd5a 	b.w	8006470 <HAL_RCC_OscConfig+0x106c>
 80059bc:	2302      	movs	r3, #2
 80059be:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80059c6:	fa93 f3a3 	rbit	r3, r3
 80059ca:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80059ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059d2:	fab3 f383 	clz	r3, r3
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	095b      	lsrs	r3, r3, #5
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	f043 0301 	orr.w	r3, r3, #1
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d104      	bne.n	80059f0 <HAL_RCC_OscConfig+0x5ec>
 80059e6:	4b01      	ldr	r3, [pc, #4]	@ (80059ec <HAL_RCC_OscConfig+0x5e8>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	e015      	b.n	8005a18 <HAL_RCC_OscConfig+0x614>
 80059ec:	40021000 	.word	0x40021000
 80059f0:	2302      	movs	r3, #2
 80059f2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80059fa:	fa93 f3a3 	rbit	r3, r3
 80059fe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8005a02:	2302      	movs	r3, #2
 8005a04:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8005a08:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005a0c:	fa93 f3a3 	rbit	r3, r3
 8005a10:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8005a14:	4bc8      	ldr	r3, [pc, #800]	@ (8005d38 <HAL_RCC_OscConfig+0x934>)
 8005a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a18:	2202      	movs	r2, #2
 8005a1a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8005a1e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005a22:	fa92 f2a2 	rbit	r2, r2
 8005a26:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8005a2a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8005a2e:	fab2 f282 	clz	r2, r2
 8005a32:	b2d2      	uxtb	r2, r2
 8005a34:	f042 0220 	orr.w	r2, r2, #32
 8005a38:	b2d2      	uxtb	r2, r2
 8005a3a:	f002 021f 	and.w	r2, r2, #31
 8005a3e:	2101      	movs	r1, #1
 8005a40:	fa01 f202 	lsl.w	r2, r1, r2
 8005a44:	4013      	ands	r3, r2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1ad      	bne.n	80059a6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0308 	and.w	r3, r3, #8
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f000 8110 	beq.w	8005c80 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a64:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d079      	beq.n	8005b64 <HAL_RCC_OscConfig+0x760>
 8005a70:	2301      	movs	r3, #1
 8005a72:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a76:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005a7a:	fa93 f3a3 	rbit	r3, r3
 8005a7e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8005a82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a86:	fab3 f383 	clz	r3, r3
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	4bab      	ldr	r3, [pc, #684]	@ (8005d3c <HAL_RCC_OscConfig+0x938>)
 8005a90:	4413      	add	r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	461a      	mov	r2, r3
 8005a96:	2301      	movs	r3, #1
 8005a98:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a9a:	f7fc fef3 	bl	8002884 <HAL_GetTick>
 8005a9e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005aa2:	e00a      	b.n	8005aba <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005aa4:	f7fc feee 	bl	8002884 <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d902      	bls.n	8005aba <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	f000 bcdb 	b.w	8006470 <HAL_RCC_OscConfig+0x106c>
 8005aba:	2302      	movs	r3, #2
 8005abc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ac0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8005ac4:	fa93 f3a3 	rbit	r3, r3
 8005ac8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005acc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ad0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8005ad4:	2202      	movs	r2, #2
 8005ad6:	601a      	str	r2, [r3, #0]
 8005ad8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005adc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	fa93 f2a3 	rbit	r2, r3
 8005ae6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005aea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005af4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005af8:	2202      	movs	r2, #2
 8005afa:	601a      	str	r2, [r3, #0]
 8005afc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	fa93 f2a3 	rbit	r2, r3
 8005b0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b0e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005b12:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b14:	4b88      	ldr	r3, [pc, #544]	@ (8005d38 <HAL_RCC_OscConfig+0x934>)
 8005b16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b1c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8005b20:	2102      	movs	r1, #2
 8005b22:	6019      	str	r1, [r3, #0]
 8005b24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b28:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	fa93 f1a3 	rbit	r1, r3
 8005b32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b36:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005b3a:	6019      	str	r1, [r3, #0]
  return result;
 8005b3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b40:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	fab3 f383 	clz	r3, r3
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	f003 031f 	and.w	r3, r3, #31
 8005b56:	2101      	movs	r1, #1
 8005b58:	fa01 f303 	lsl.w	r3, r1, r3
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d0a0      	beq.n	8005aa4 <HAL_RCC_OscConfig+0x6a0>
 8005b62:	e08d      	b.n	8005c80 <HAL_RCC_OscConfig+0x87c>
 8005b64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b68:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b74:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	fa93 f2a3 	rbit	r2, r3
 8005b7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b82:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005b86:	601a      	str	r2, [r3, #0]
  return result;
 8005b88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b8c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005b90:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b92:	fab3 f383 	clz	r3, r3
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	461a      	mov	r2, r3
 8005b9a:	4b68      	ldr	r3, [pc, #416]	@ (8005d3c <HAL_RCC_OscConfig+0x938>)
 8005b9c:	4413      	add	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ba6:	f7fc fe6d 	bl	8002884 <HAL_GetTick>
 8005baa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bae:	e00a      	b.n	8005bc6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bb0:	f7fc fe68 	bl	8002884 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d902      	bls.n	8005bc6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	f000 bc55 	b.w	8006470 <HAL_RCC_OscConfig+0x106c>
 8005bc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005bca:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8005bce:	2202      	movs	r2, #2
 8005bd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005bd6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	fa93 f2a3 	rbit	r2, r3
 8005be0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005be4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005be8:	601a      	str	r2, [r3, #0]
 8005bea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005bee:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	601a      	str	r2, [r3, #0]
 8005bf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005bfa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	fa93 f2a3 	rbit	r2, r3
 8005c04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c08:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c12:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005c16:	2202      	movs	r2, #2
 8005c18:	601a      	str	r2, [r3, #0]
 8005c1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c1e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	fa93 f2a3 	rbit	r2, r3
 8005c28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c2c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8005c30:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c32:	4b41      	ldr	r3, [pc, #260]	@ (8005d38 <HAL_RCC_OscConfig+0x934>)
 8005c34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c3a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005c3e:	2102      	movs	r1, #2
 8005c40:	6019      	str	r1, [r3, #0]
 8005c42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c46:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	fa93 f1a3 	rbit	r1, r3
 8005c50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c54:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005c58:	6019      	str	r1, [r3, #0]
  return result;
 8005c5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c5e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	fab3 f383 	clz	r3, r3
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	f003 031f 	and.w	r3, r3, #31
 8005c74:	2101      	movs	r1, #1
 8005c76:	fa01 f303 	lsl.w	r3, r1, r3
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d197      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c84:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0304 	and.w	r3, r3, #4
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f000 81a1 	beq.w	8005fd8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c96:	2300      	movs	r3, #0
 8005c98:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c9c:	4b26      	ldr	r3, [pc, #152]	@ (8005d38 <HAL_RCC_OscConfig+0x934>)
 8005c9e:	69db      	ldr	r3, [r3, #28]
 8005ca0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d116      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ca8:	4b23      	ldr	r3, [pc, #140]	@ (8005d38 <HAL_RCC_OscConfig+0x934>)
 8005caa:	69db      	ldr	r3, [r3, #28]
 8005cac:	4a22      	ldr	r2, [pc, #136]	@ (8005d38 <HAL_RCC_OscConfig+0x934>)
 8005cae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cb2:	61d3      	str	r3, [r2, #28]
 8005cb4:	4b20      	ldr	r3, [pc, #128]	@ (8005d38 <HAL_RCC_OscConfig+0x934>)
 8005cb6:	69db      	ldr	r3, [r3, #28]
 8005cb8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8005cbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005cc0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8005cc4:	601a      	str	r2, [r3, #0]
 8005cc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005cca:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8005cce:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8005d40 <HAL_RCC_OscConfig+0x93c>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d11a      	bne.n	8005d18 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ce2:	4b17      	ldr	r3, [pc, #92]	@ (8005d40 <HAL_RCC_OscConfig+0x93c>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a16      	ldr	r2, [pc, #88]	@ (8005d40 <HAL_RCC_OscConfig+0x93c>)
 8005ce8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cee:	f7fc fdc9 	bl	8002884 <HAL_GetTick>
 8005cf2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cf6:	e009      	b.n	8005d0c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cf8:	f7fc fdc4 	bl	8002884 <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	2b64      	cmp	r3, #100	@ 0x64
 8005d06:	d901      	bls.n	8005d0c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e3b1      	b.n	8006470 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8005d40 <HAL_RCC_OscConfig+0x93c>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d0ef      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d1c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d10d      	bne.n	8005d44 <HAL_RCC_OscConfig+0x940>
 8005d28:	4b03      	ldr	r3, [pc, #12]	@ (8005d38 <HAL_RCC_OscConfig+0x934>)
 8005d2a:	6a1b      	ldr	r3, [r3, #32]
 8005d2c:	4a02      	ldr	r2, [pc, #8]	@ (8005d38 <HAL_RCC_OscConfig+0x934>)
 8005d2e:	f043 0301 	orr.w	r3, r3, #1
 8005d32:	6213      	str	r3, [r2, #32]
 8005d34:	e03c      	b.n	8005db0 <HAL_RCC_OscConfig+0x9ac>
 8005d36:	bf00      	nop
 8005d38:	40021000 	.word	0x40021000
 8005d3c:	10908120 	.word	0x10908120
 8005d40:	40007000 	.word	0x40007000
 8005d44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d48:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10c      	bne.n	8005d6e <HAL_RCC_OscConfig+0x96a>
 8005d54:	4bc1      	ldr	r3, [pc, #772]	@ (800605c <HAL_RCC_OscConfig+0xc58>)
 8005d56:	6a1b      	ldr	r3, [r3, #32]
 8005d58:	4ac0      	ldr	r2, [pc, #768]	@ (800605c <HAL_RCC_OscConfig+0xc58>)
 8005d5a:	f023 0301 	bic.w	r3, r3, #1
 8005d5e:	6213      	str	r3, [r2, #32]
 8005d60:	4bbe      	ldr	r3, [pc, #760]	@ (800605c <HAL_RCC_OscConfig+0xc58>)
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	4abd      	ldr	r2, [pc, #756]	@ (800605c <HAL_RCC_OscConfig+0xc58>)
 8005d66:	f023 0304 	bic.w	r3, r3, #4
 8005d6a:	6213      	str	r3, [r2, #32]
 8005d6c:	e020      	b.n	8005db0 <HAL_RCC_OscConfig+0x9ac>
 8005d6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	2b05      	cmp	r3, #5
 8005d7c:	d10c      	bne.n	8005d98 <HAL_RCC_OscConfig+0x994>
 8005d7e:	4bb7      	ldr	r3, [pc, #732]	@ (800605c <HAL_RCC_OscConfig+0xc58>)
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	4ab6      	ldr	r2, [pc, #728]	@ (800605c <HAL_RCC_OscConfig+0xc58>)
 8005d84:	f043 0304 	orr.w	r3, r3, #4
 8005d88:	6213      	str	r3, [r2, #32]
 8005d8a:	4bb4      	ldr	r3, [pc, #720]	@ (800605c <HAL_RCC_OscConfig+0xc58>)
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	4ab3      	ldr	r2, [pc, #716]	@ (800605c <HAL_RCC_OscConfig+0xc58>)
 8005d90:	f043 0301 	orr.w	r3, r3, #1
 8005d94:	6213      	str	r3, [r2, #32]
 8005d96:	e00b      	b.n	8005db0 <HAL_RCC_OscConfig+0x9ac>
 8005d98:	4bb0      	ldr	r3, [pc, #704]	@ (800605c <HAL_RCC_OscConfig+0xc58>)
 8005d9a:	6a1b      	ldr	r3, [r3, #32]
 8005d9c:	4aaf      	ldr	r2, [pc, #700]	@ (800605c <HAL_RCC_OscConfig+0xc58>)
 8005d9e:	f023 0301 	bic.w	r3, r3, #1
 8005da2:	6213      	str	r3, [r2, #32]
 8005da4:	4bad      	ldr	r3, [pc, #692]	@ (800605c <HAL_RCC_OscConfig+0xc58>)
 8005da6:	6a1b      	ldr	r3, [r3, #32]
 8005da8:	4aac      	ldr	r2, [pc, #688]	@ (800605c <HAL_RCC_OscConfig+0xc58>)
 8005daa:	f023 0304 	bic.w	r3, r3, #4
 8005dae:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005db0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005db4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f000 8081 	beq.w	8005ec4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dc2:	f7fc fd5f 	bl	8002884 <HAL_GetTick>
 8005dc6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dca:	e00b      	b.n	8005de4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005dcc:	f7fc fd5a 	bl	8002884 <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d901      	bls.n	8005de4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e345      	b.n	8006470 <HAL_RCC_OscConfig+0x106c>
 8005de4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005de8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005dec:	2202      	movs	r2, #2
 8005dee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005df0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005df4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	fa93 f2a3 	rbit	r2, r3
 8005dfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e02:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8005e06:	601a      	str	r2, [r3, #0]
 8005e08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e0c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005e10:	2202      	movs	r2, #2
 8005e12:	601a      	str	r2, [r3, #0]
 8005e14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e18:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	fa93 f2a3 	rbit	r2, r3
 8005e22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e26:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005e2a:	601a      	str	r2, [r3, #0]
  return result;
 8005e2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e30:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005e34:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e36:	fab3 f383 	clz	r3, r3
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	095b      	lsrs	r3, r3, #5
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	f043 0302 	orr.w	r3, r3, #2
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d102      	bne.n	8005e50 <HAL_RCC_OscConfig+0xa4c>
 8005e4a:	4b84      	ldr	r3, [pc, #528]	@ (800605c <HAL_RCC_OscConfig+0xc58>)
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	e013      	b.n	8005e78 <HAL_RCC_OscConfig+0xa74>
 8005e50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e54:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005e58:	2202      	movs	r2, #2
 8005e5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e60:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	fa93 f2a3 	rbit	r2, r3
 8005e6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e6e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8005e72:	601a      	str	r2, [r3, #0]
 8005e74:	4b79      	ldr	r3, [pc, #484]	@ (800605c <HAL_RCC_OscConfig+0xc58>)
 8005e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e78:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005e7c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8005e80:	2102      	movs	r1, #2
 8005e82:	6011      	str	r1, [r2, #0]
 8005e84:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005e88:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8005e8c:	6812      	ldr	r2, [r2, #0]
 8005e8e:	fa92 f1a2 	rbit	r1, r2
 8005e92:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005e96:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8005e9a:	6011      	str	r1, [r2, #0]
  return result;
 8005e9c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005ea0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8005ea4:	6812      	ldr	r2, [r2, #0]
 8005ea6:	fab2 f282 	clz	r2, r2
 8005eaa:	b2d2      	uxtb	r2, r2
 8005eac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005eb0:	b2d2      	uxtb	r2, r2
 8005eb2:	f002 021f 	and.w	r2, r2, #31
 8005eb6:	2101      	movs	r1, #1
 8005eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d084      	beq.n	8005dcc <HAL_RCC_OscConfig+0x9c8>
 8005ec2:	e07f      	b.n	8005fc4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ec4:	f7fc fcde 	bl	8002884 <HAL_GetTick>
 8005ec8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ecc:	e00b      	b.n	8005ee6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ece:	f7fc fcd9 	bl	8002884 <HAL_GetTick>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d901      	bls.n	8005ee6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e2c4      	b.n	8006470 <HAL_RCC_OscConfig+0x106c>
 8005ee6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005eea:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005eee:	2202      	movs	r2, #2
 8005ef0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ef2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ef6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	fa93 f2a3 	rbit	r2, r3
 8005f00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f04:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8005f08:	601a      	str	r2, [r3, #0]
 8005f0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f0e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8005f12:	2202      	movs	r2, #2
 8005f14:	601a      	str	r2, [r3, #0]
 8005f16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f1a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	fa93 f2a3 	rbit	r2, r3
 8005f24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f28:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8005f2c:	601a      	str	r2, [r3, #0]
  return result;
 8005f2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f32:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8005f36:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f38:	fab3 f383 	clz	r3, r3
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	095b      	lsrs	r3, r3, #5
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	f043 0302 	orr.w	r3, r3, #2
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d102      	bne.n	8005f52 <HAL_RCC_OscConfig+0xb4e>
 8005f4c:	4b43      	ldr	r3, [pc, #268]	@ (800605c <HAL_RCC_OscConfig+0xc58>)
 8005f4e:	6a1b      	ldr	r3, [r3, #32]
 8005f50:	e013      	b.n	8005f7a <HAL_RCC_OscConfig+0xb76>
 8005f52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f56:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f62:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	fa93 f2a3 	rbit	r2, r3
 8005f6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f70:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8005f74:	601a      	str	r2, [r3, #0]
 8005f76:	4b39      	ldr	r3, [pc, #228]	@ (800605c <HAL_RCC_OscConfig+0xc58>)
 8005f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005f7e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8005f82:	2102      	movs	r1, #2
 8005f84:	6011      	str	r1, [r2, #0]
 8005f86:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005f8a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8005f8e:	6812      	ldr	r2, [r2, #0]
 8005f90:	fa92 f1a2 	rbit	r1, r2
 8005f94:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005f98:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8005f9c:	6011      	str	r1, [r2, #0]
  return result;
 8005f9e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005fa2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8005fa6:	6812      	ldr	r2, [r2, #0]
 8005fa8:	fab2 f282 	clz	r2, r2
 8005fac:	b2d2      	uxtb	r2, r2
 8005fae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fb2:	b2d2      	uxtb	r2, r2
 8005fb4:	f002 021f 	and.w	r2, r2, #31
 8005fb8:	2101      	movs	r1, #1
 8005fba:	fa01 f202 	lsl.w	r2, r1, r2
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d184      	bne.n	8005ece <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005fc4:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d105      	bne.n	8005fd8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fcc:	4b23      	ldr	r3, [pc, #140]	@ (800605c <HAL_RCC_OscConfig+0xc58>)
 8005fce:	69db      	ldr	r3, [r3, #28]
 8005fd0:	4a22      	ldr	r2, [pc, #136]	@ (800605c <HAL_RCC_OscConfig+0xc58>)
 8005fd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fd6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005fdc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	69db      	ldr	r3, [r3, #28]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 8242 	beq.w	800646e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fea:	4b1c      	ldr	r3, [pc, #112]	@ (800605c <HAL_RCC_OscConfig+0xc58>)
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f003 030c 	and.w	r3, r3, #12
 8005ff2:	2b08      	cmp	r3, #8
 8005ff4:	f000 8213 	beq.w	800641e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ff8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ffc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	69db      	ldr	r3, [r3, #28]
 8006004:	2b02      	cmp	r3, #2
 8006006:	f040 8162 	bne.w	80062ce <HAL_RCC_OscConfig+0xeca>
 800600a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800600e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8006012:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006016:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006018:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800601c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	fa93 f2a3 	rbit	r2, r3
 8006026:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800602a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800602e:	601a      	str	r2, [r3, #0]
  return result;
 8006030:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006034:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8006038:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800603a:	fab3 f383 	clz	r3, r3
 800603e:	b2db      	uxtb	r3, r3
 8006040:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006044:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	461a      	mov	r2, r3
 800604c:	2300      	movs	r3, #0
 800604e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006050:	f7fc fc18 	bl	8002884 <HAL_GetTick>
 8006054:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006058:	e00c      	b.n	8006074 <HAL_RCC_OscConfig+0xc70>
 800605a:	bf00      	nop
 800605c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006060:	f7fc fc10 	bl	8002884 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	2b02      	cmp	r3, #2
 800606e:	d901      	bls.n	8006074 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e1fd      	b.n	8006470 <HAL_RCC_OscConfig+0x106c>
 8006074:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006078:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800607c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006080:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006082:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006086:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	fa93 f2a3 	rbit	r2, r3
 8006090:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006094:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8006098:	601a      	str	r2, [r3, #0]
  return result;
 800609a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800609e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80060a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060a4:	fab3 f383 	clz	r3, r3
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	095b      	lsrs	r3, r3, #5
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	f043 0301 	orr.w	r3, r3, #1
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d102      	bne.n	80060be <HAL_RCC_OscConfig+0xcba>
 80060b8:	4bb0      	ldr	r3, [pc, #704]	@ (800637c <HAL_RCC_OscConfig+0xf78>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	e027      	b.n	800610e <HAL_RCC_OscConfig+0xd0a>
 80060be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060c2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80060c6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80060ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060d0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	fa93 f2a3 	rbit	r2, r3
 80060da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060de:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060e8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80060ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80060f0:	601a      	str	r2, [r3, #0]
 80060f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060f6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	fa93 f2a3 	rbit	r2, r3
 8006100:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006104:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006108:	601a      	str	r2, [r3, #0]
 800610a:	4b9c      	ldr	r3, [pc, #624]	@ (800637c <HAL_RCC_OscConfig+0xf78>)
 800610c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800610e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006112:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8006116:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800611a:	6011      	str	r1, [r2, #0]
 800611c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006120:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8006124:	6812      	ldr	r2, [r2, #0]
 8006126:	fa92 f1a2 	rbit	r1, r2
 800612a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800612e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8006132:	6011      	str	r1, [r2, #0]
  return result;
 8006134:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006138:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800613c:	6812      	ldr	r2, [r2, #0]
 800613e:	fab2 f282 	clz	r2, r2
 8006142:	b2d2      	uxtb	r2, r2
 8006144:	f042 0220 	orr.w	r2, r2, #32
 8006148:	b2d2      	uxtb	r2, r2
 800614a:	f002 021f 	and.w	r2, r2, #31
 800614e:	2101      	movs	r1, #1
 8006150:	fa01 f202 	lsl.w	r2, r1, r2
 8006154:	4013      	ands	r3, r2
 8006156:	2b00      	cmp	r3, #0
 8006158:	d182      	bne.n	8006060 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800615a:	4b88      	ldr	r3, [pc, #544]	@ (800637c <HAL_RCC_OscConfig+0xf78>)
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006162:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006166:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800616e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006172:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	430b      	orrs	r3, r1
 800617c:	497f      	ldr	r1, [pc, #508]	@ (800637c <HAL_RCC_OscConfig+0xf78>)
 800617e:	4313      	orrs	r3, r2
 8006180:	604b      	str	r3, [r1, #4]
 8006182:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006186:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800618a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800618e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006190:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006194:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	fa93 f2a3 	rbit	r2, r3
 800619e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80061a2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80061a6:	601a      	str	r2, [r3, #0]
  return result;
 80061a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80061ac:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80061b0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061b2:	fab3 f383 	clz	r3, r3
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80061bc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	461a      	mov	r2, r3
 80061c4:	2301      	movs	r3, #1
 80061c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061c8:	f7fc fb5c 	bl	8002884 <HAL_GetTick>
 80061cc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80061d0:	e009      	b.n	80061e6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061d2:	f7fc fb57 	bl	8002884 <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d901      	bls.n	80061e6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e144      	b.n	8006470 <HAL_RCC_OscConfig+0x106c>
 80061e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80061ea:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80061ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80061f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80061f8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	fa93 f2a3 	rbit	r2, r3
 8006202:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006206:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800620a:	601a      	str	r2, [r3, #0]
  return result;
 800620c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006210:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8006214:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006216:	fab3 f383 	clz	r3, r3
 800621a:	b2db      	uxtb	r3, r3
 800621c:	095b      	lsrs	r3, r3, #5
 800621e:	b2db      	uxtb	r3, r3
 8006220:	f043 0301 	orr.w	r3, r3, #1
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b01      	cmp	r3, #1
 8006228:	d102      	bne.n	8006230 <HAL_RCC_OscConfig+0xe2c>
 800622a:	4b54      	ldr	r3, [pc, #336]	@ (800637c <HAL_RCC_OscConfig+0xf78>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	e027      	b.n	8006280 <HAL_RCC_OscConfig+0xe7c>
 8006230:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006234:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8006238:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800623c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800623e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006242:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	fa93 f2a3 	rbit	r2, r3
 800624c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006250:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8006254:	601a      	str	r2, [r3, #0]
 8006256:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800625a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800625e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006262:	601a      	str	r2, [r3, #0]
 8006264:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006268:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	fa93 f2a3 	rbit	r2, r3
 8006272:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006276:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800627a:	601a      	str	r2, [r3, #0]
 800627c:	4b3f      	ldr	r3, [pc, #252]	@ (800637c <HAL_RCC_OscConfig+0xf78>)
 800627e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006280:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006284:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8006288:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800628c:	6011      	str	r1, [r2, #0]
 800628e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006292:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8006296:	6812      	ldr	r2, [r2, #0]
 8006298:	fa92 f1a2 	rbit	r1, r2
 800629c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80062a0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80062a4:	6011      	str	r1, [r2, #0]
  return result;
 80062a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80062aa:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80062ae:	6812      	ldr	r2, [r2, #0]
 80062b0:	fab2 f282 	clz	r2, r2
 80062b4:	b2d2      	uxtb	r2, r2
 80062b6:	f042 0220 	orr.w	r2, r2, #32
 80062ba:	b2d2      	uxtb	r2, r2
 80062bc:	f002 021f 	and.w	r2, r2, #31
 80062c0:	2101      	movs	r1, #1
 80062c2:	fa01 f202 	lsl.w	r2, r1, r2
 80062c6:	4013      	ands	r3, r2
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d082      	beq.n	80061d2 <HAL_RCC_OscConfig+0xdce>
 80062cc:	e0cf      	b.n	800646e <HAL_RCC_OscConfig+0x106a>
 80062ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062d2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80062d6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80062da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062e0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	fa93 f2a3 	rbit	r2, r3
 80062ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062ee:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80062f2:	601a      	str	r2, [r3, #0]
  return result;
 80062f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062f8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80062fc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062fe:	fab3 f383 	clz	r3, r3
 8006302:	b2db      	uxtb	r3, r3
 8006304:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006308:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	461a      	mov	r2, r3
 8006310:	2300      	movs	r3, #0
 8006312:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006314:	f7fc fab6 	bl	8002884 <HAL_GetTick>
 8006318:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800631c:	e009      	b.n	8006332 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800631e:	f7fc fab1 	bl	8002884 <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	2b02      	cmp	r3, #2
 800632c:	d901      	bls.n	8006332 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e09e      	b.n	8006470 <HAL_RCC_OscConfig+0x106c>
 8006332:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006336:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800633a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800633e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006340:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006344:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	fa93 f2a3 	rbit	r2, r3
 800634e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006352:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8006356:	601a      	str	r2, [r3, #0]
  return result;
 8006358:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800635c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8006360:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006362:	fab3 f383 	clz	r3, r3
 8006366:	b2db      	uxtb	r3, r3
 8006368:	095b      	lsrs	r3, r3, #5
 800636a:	b2db      	uxtb	r3, r3
 800636c:	f043 0301 	orr.w	r3, r3, #1
 8006370:	b2db      	uxtb	r3, r3
 8006372:	2b01      	cmp	r3, #1
 8006374:	d104      	bne.n	8006380 <HAL_RCC_OscConfig+0xf7c>
 8006376:	4b01      	ldr	r3, [pc, #4]	@ (800637c <HAL_RCC_OscConfig+0xf78>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	e029      	b.n	80063d0 <HAL_RCC_OscConfig+0xfcc>
 800637c:	40021000 	.word	0x40021000
 8006380:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006384:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8006388:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800638c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800638e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006392:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	fa93 f2a3 	rbit	r2, r3
 800639c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063a0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80063a4:	601a      	str	r2, [r3, #0]
 80063a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063aa:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80063ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80063b2:	601a      	str	r2, [r3, #0]
 80063b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063b8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	fa93 f2a3 	rbit	r2, r3
 80063c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063c6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80063ca:	601a      	str	r2, [r3, #0]
 80063cc:	4b2b      	ldr	r3, [pc, #172]	@ (800647c <HAL_RCC_OscConfig+0x1078>)
 80063ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80063d4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80063d8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80063dc:	6011      	str	r1, [r2, #0]
 80063de:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80063e2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80063e6:	6812      	ldr	r2, [r2, #0]
 80063e8:	fa92 f1a2 	rbit	r1, r2
 80063ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80063f0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80063f4:	6011      	str	r1, [r2, #0]
  return result;
 80063f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80063fa:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80063fe:	6812      	ldr	r2, [r2, #0]
 8006400:	fab2 f282 	clz	r2, r2
 8006404:	b2d2      	uxtb	r2, r2
 8006406:	f042 0220 	orr.w	r2, r2, #32
 800640a:	b2d2      	uxtb	r2, r2
 800640c:	f002 021f 	and.w	r2, r2, #31
 8006410:	2101      	movs	r1, #1
 8006412:	fa01 f202 	lsl.w	r2, r1, r2
 8006416:	4013      	ands	r3, r2
 8006418:	2b00      	cmp	r3, #0
 800641a:	d180      	bne.n	800631e <HAL_RCC_OscConfig+0xf1a>
 800641c:	e027      	b.n	800646e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800641e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006422:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	69db      	ldr	r3, [r3, #28]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d101      	bne.n	8006432 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e01e      	b.n	8006470 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006432:	4b12      	ldr	r3, [pc, #72]	@ (800647c <HAL_RCC_OscConfig+0x1078>)
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800643a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800643e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006442:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006446:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	429a      	cmp	r2, r3
 8006450:	d10b      	bne.n	800646a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006452:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8006456:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800645a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800645e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006466:	429a      	cmp	r2, r3
 8006468:	d001      	beq.n	800646e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e000      	b.n	8006470 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	40021000 	.word	0x40021000

08006480 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b09e      	sub	sp, #120	@ 0x78
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800648a:	2300      	movs	r3, #0
 800648c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d101      	bne.n	8006498 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e162      	b.n	800675e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006498:	4b90      	ldr	r3, [pc, #576]	@ (80066dc <HAL_RCC_ClockConfig+0x25c>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0307 	and.w	r3, r3, #7
 80064a0:	683a      	ldr	r2, [r7, #0]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d910      	bls.n	80064c8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064a6:	4b8d      	ldr	r3, [pc, #564]	@ (80066dc <HAL_RCC_ClockConfig+0x25c>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f023 0207 	bic.w	r2, r3, #7
 80064ae:	498b      	ldr	r1, [pc, #556]	@ (80066dc <HAL_RCC_ClockConfig+0x25c>)
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064b6:	4b89      	ldr	r3, [pc, #548]	@ (80066dc <HAL_RCC_ClockConfig+0x25c>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0307 	and.w	r3, r3, #7
 80064be:	683a      	ldr	r2, [r7, #0]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d001      	beq.n	80064c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e14a      	b.n	800675e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 0302 	and.w	r3, r3, #2
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d008      	beq.n	80064e6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064d4:	4b82      	ldr	r3, [pc, #520]	@ (80066e0 <HAL_RCC_ClockConfig+0x260>)
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	497f      	ldr	r1, [pc, #508]	@ (80066e0 <HAL_RCC_ClockConfig+0x260>)
 80064e2:	4313      	orrs	r3, r2
 80064e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f000 80dc 	beq.w	80066ac <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d13c      	bne.n	8006576 <HAL_RCC_ClockConfig+0xf6>
 80064fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006500:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006502:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006504:	fa93 f3a3 	rbit	r3, r3
 8006508:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800650a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800650c:	fab3 f383 	clz	r3, r3
 8006510:	b2db      	uxtb	r3, r3
 8006512:	095b      	lsrs	r3, r3, #5
 8006514:	b2db      	uxtb	r3, r3
 8006516:	f043 0301 	orr.w	r3, r3, #1
 800651a:	b2db      	uxtb	r3, r3
 800651c:	2b01      	cmp	r3, #1
 800651e:	d102      	bne.n	8006526 <HAL_RCC_ClockConfig+0xa6>
 8006520:	4b6f      	ldr	r3, [pc, #444]	@ (80066e0 <HAL_RCC_ClockConfig+0x260>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	e00f      	b.n	8006546 <HAL_RCC_ClockConfig+0xc6>
 8006526:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800652a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800652c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800652e:	fa93 f3a3 	rbit	r3, r3
 8006532:	667b      	str	r3, [r7, #100]	@ 0x64
 8006534:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006538:	663b      	str	r3, [r7, #96]	@ 0x60
 800653a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800653c:	fa93 f3a3 	rbit	r3, r3
 8006540:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006542:	4b67      	ldr	r3, [pc, #412]	@ (80066e0 <HAL_RCC_ClockConfig+0x260>)
 8006544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006546:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800654a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800654c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800654e:	fa92 f2a2 	rbit	r2, r2
 8006552:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8006554:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006556:	fab2 f282 	clz	r2, r2
 800655a:	b2d2      	uxtb	r2, r2
 800655c:	f042 0220 	orr.w	r2, r2, #32
 8006560:	b2d2      	uxtb	r2, r2
 8006562:	f002 021f 	and.w	r2, r2, #31
 8006566:	2101      	movs	r1, #1
 8006568:	fa01 f202 	lsl.w	r2, r1, r2
 800656c:	4013      	ands	r3, r2
 800656e:	2b00      	cmp	r3, #0
 8006570:	d17b      	bne.n	800666a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e0f3      	b.n	800675e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	2b02      	cmp	r3, #2
 800657c:	d13c      	bne.n	80065f8 <HAL_RCC_ClockConfig+0x178>
 800657e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006582:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006584:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006586:	fa93 f3a3 	rbit	r3, r3
 800658a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800658c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800658e:	fab3 f383 	clz	r3, r3
 8006592:	b2db      	uxtb	r3, r3
 8006594:	095b      	lsrs	r3, r3, #5
 8006596:	b2db      	uxtb	r3, r3
 8006598:	f043 0301 	orr.w	r3, r3, #1
 800659c:	b2db      	uxtb	r3, r3
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d102      	bne.n	80065a8 <HAL_RCC_ClockConfig+0x128>
 80065a2:	4b4f      	ldr	r3, [pc, #316]	@ (80066e0 <HAL_RCC_ClockConfig+0x260>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	e00f      	b.n	80065c8 <HAL_RCC_ClockConfig+0x148>
 80065a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80065ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065b0:	fa93 f3a3 	rbit	r3, r3
 80065b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80065b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80065ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80065bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065be:	fa93 f3a3 	rbit	r3, r3
 80065c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065c4:	4b46      	ldr	r3, [pc, #280]	@ (80066e0 <HAL_RCC_ClockConfig+0x260>)
 80065c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80065cc:	63ba      	str	r2, [r7, #56]	@ 0x38
 80065ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80065d0:	fa92 f2a2 	rbit	r2, r2
 80065d4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80065d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80065d8:	fab2 f282 	clz	r2, r2
 80065dc:	b2d2      	uxtb	r2, r2
 80065de:	f042 0220 	orr.w	r2, r2, #32
 80065e2:	b2d2      	uxtb	r2, r2
 80065e4:	f002 021f 	and.w	r2, r2, #31
 80065e8:	2101      	movs	r1, #1
 80065ea:	fa01 f202 	lsl.w	r2, r1, r2
 80065ee:	4013      	ands	r3, r2
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d13a      	bne.n	800666a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e0b2      	b.n	800675e <HAL_RCC_ClockConfig+0x2de>
 80065f8:	2302      	movs	r3, #2
 80065fa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065fe:	fa93 f3a3 	rbit	r3, r3
 8006602:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8006604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006606:	fab3 f383 	clz	r3, r3
 800660a:	b2db      	uxtb	r3, r3
 800660c:	095b      	lsrs	r3, r3, #5
 800660e:	b2db      	uxtb	r3, r3
 8006610:	f043 0301 	orr.w	r3, r3, #1
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b01      	cmp	r3, #1
 8006618:	d102      	bne.n	8006620 <HAL_RCC_ClockConfig+0x1a0>
 800661a:	4b31      	ldr	r3, [pc, #196]	@ (80066e0 <HAL_RCC_ClockConfig+0x260>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	e00d      	b.n	800663c <HAL_RCC_ClockConfig+0x1bc>
 8006620:	2302      	movs	r3, #2
 8006622:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006626:	fa93 f3a3 	rbit	r3, r3
 800662a:	627b      	str	r3, [r7, #36]	@ 0x24
 800662c:	2302      	movs	r3, #2
 800662e:	623b      	str	r3, [r7, #32]
 8006630:	6a3b      	ldr	r3, [r7, #32]
 8006632:	fa93 f3a3 	rbit	r3, r3
 8006636:	61fb      	str	r3, [r7, #28]
 8006638:	4b29      	ldr	r3, [pc, #164]	@ (80066e0 <HAL_RCC_ClockConfig+0x260>)
 800663a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800663c:	2202      	movs	r2, #2
 800663e:	61ba      	str	r2, [r7, #24]
 8006640:	69ba      	ldr	r2, [r7, #24]
 8006642:	fa92 f2a2 	rbit	r2, r2
 8006646:	617a      	str	r2, [r7, #20]
  return result;
 8006648:	697a      	ldr	r2, [r7, #20]
 800664a:	fab2 f282 	clz	r2, r2
 800664e:	b2d2      	uxtb	r2, r2
 8006650:	f042 0220 	orr.w	r2, r2, #32
 8006654:	b2d2      	uxtb	r2, r2
 8006656:	f002 021f 	and.w	r2, r2, #31
 800665a:	2101      	movs	r1, #1
 800665c:	fa01 f202 	lsl.w	r2, r1, r2
 8006660:	4013      	ands	r3, r2
 8006662:	2b00      	cmp	r3, #0
 8006664:	d101      	bne.n	800666a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e079      	b.n	800675e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800666a:	4b1d      	ldr	r3, [pc, #116]	@ (80066e0 <HAL_RCC_ClockConfig+0x260>)
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f023 0203 	bic.w	r2, r3, #3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	491a      	ldr	r1, [pc, #104]	@ (80066e0 <HAL_RCC_ClockConfig+0x260>)
 8006678:	4313      	orrs	r3, r2
 800667a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800667c:	f7fc f902 	bl	8002884 <HAL_GetTick>
 8006680:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006682:	e00a      	b.n	800669a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006684:	f7fc f8fe 	bl	8002884 <HAL_GetTick>
 8006688:	4602      	mov	r2, r0
 800668a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006692:	4293      	cmp	r3, r2
 8006694:	d901      	bls.n	800669a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e061      	b.n	800675e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800669a:	4b11      	ldr	r3, [pc, #68]	@ (80066e0 <HAL_RCC_ClockConfig+0x260>)
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f003 020c 	and.w	r2, r3, #12
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d1eb      	bne.n	8006684 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80066ac:	4b0b      	ldr	r3, [pc, #44]	@ (80066dc <HAL_RCC_ClockConfig+0x25c>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0307 	and.w	r3, r3, #7
 80066b4:	683a      	ldr	r2, [r7, #0]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d214      	bcs.n	80066e4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066ba:	4b08      	ldr	r3, [pc, #32]	@ (80066dc <HAL_RCC_ClockConfig+0x25c>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f023 0207 	bic.w	r2, r3, #7
 80066c2:	4906      	ldr	r1, [pc, #24]	@ (80066dc <HAL_RCC_ClockConfig+0x25c>)
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066ca:	4b04      	ldr	r3, [pc, #16]	@ (80066dc <HAL_RCC_ClockConfig+0x25c>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 0307 	and.w	r3, r3, #7
 80066d2:	683a      	ldr	r2, [r7, #0]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d005      	beq.n	80066e4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e040      	b.n	800675e <HAL_RCC_ClockConfig+0x2de>
 80066dc:	40022000 	.word	0x40022000
 80066e0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0304 	and.w	r3, r3, #4
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d008      	beq.n	8006702 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066f0:	4b1d      	ldr	r3, [pc, #116]	@ (8006768 <HAL_RCC_ClockConfig+0x2e8>)
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	491a      	ldr	r1, [pc, #104]	@ (8006768 <HAL_RCC_ClockConfig+0x2e8>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0308 	and.w	r3, r3, #8
 800670a:	2b00      	cmp	r3, #0
 800670c:	d009      	beq.n	8006722 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800670e:	4b16      	ldr	r3, [pc, #88]	@ (8006768 <HAL_RCC_ClockConfig+0x2e8>)
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	00db      	lsls	r3, r3, #3
 800671c:	4912      	ldr	r1, [pc, #72]	@ (8006768 <HAL_RCC_ClockConfig+0x2e8>)
 800671e:	4313      	orrs	r3, r2
 8006720:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006722:	f000 f829 	bl	8006778 <HAL_RCC_GetSysClockFreq>
 8006726:	4601      	mov	r1, r0
 8006728:	4b0f      	ldr	r3, [pc, #60]	@ (8006768 <HAL_RCC_ClockConfig+0x2e8>)
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006730:	22f0      	movs	r2, #240	@ 0xf0
 8006732:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	fa92 f2a2 	rbit	r2, r2
 800673a:	60fa      	str	r2, [r7, #12]
  return result;
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	fab2 f282 	clz	r2, r2
 8006742:	b2d2      	uxtb	r2, r2
 8006744:	40d3      	lsrs	r3, r2
 8006746:	4a09      	ldr	r2, [pc, #36]	@ (800676c <HAL_RCC_ClockConfig+0x2ec>)
 8006748:	5cd3      	ldrb	r3, [r2, r3]
 800674a:	fa21 f303 	lsr.w	r3, r1, r3
 800674e:	4a08      	ldr	r2, [pc, #32]	@ (8006770 <HAL_RCC_ClockConfig+0x2f0>)
 8006750:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006752:	4b08      	ldr	r3, [pc, #32]	@ (8006774 <HAL_RCC_ClockConfig+0x2f4>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4618      	mov	r0, r3
 8006758:	f7fc f850 	bl	80027fc <HAL_InitTick>
  
  return HAL_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3778      	adds	r7, #120	@ 0x78
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	40021000 	.word	0x40021000
 800676c:	0800d0e0 	.word	0x0800d0e0
 8006770:	20000058 	.word	0x20000058
 8006774:	2000005c 	.word	0x2000005c

08006778 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006778:	b480      	push	{r7}
 800677a:	b087      	sub	sp, #28
 800677c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800677e:	2300      	movs	r3, #0
 8006780:	60fb      	str	r3, [r7, #12]
 8006782:	2300      	movs	r3, #0
 8006784:	60bb      	str	r3, [r7, #8]
 8006786:	2300      	movs	r3, #0
 8006788:	617b      	str	r3, [r7, #20]
 800678a:	2300      	movs	r3, #0
 800678c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800678e:	2300      	movs	r3, #0
 8006790:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8006792:	4b1e      	ldr	r3, [pc, #120]	@ (800680c <HAL_RCC_GetSysClockFreq+0x94>)
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f003 030c 	and.w	r3, r3, #12
 800679e:	2b04      	cmp	r3, #4
 80067a0:	d002      	beq.n	80067a8 <HAL_RCC_GetSysClockFreq+0x30>
 80067a2:	2b08      	cmp	r3, #8
 80067a4:	d003      	beq.n	80067ae <HAL_RCC_GetSysClockFreq+0x36>
 80067a6:	e026      	b.n	80067f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80067a8:	4b19      	ldr	r3, [pc, #100]	@ (8006810 <HAL_RCC_GetSysClockFreq+0x98>)
 80067aa:	613b      	str	r3, [r7, #16]
      break;
 80067ac:	e026      	b.n	80067fc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	0c9b      	lsrs	r3, r3, #18
 80067b2:	f003 030f 	and.w	r3, r3, #15
 80067b6:	4a17      	ldr	r2, [pc, #92]	@ (8006814 <HAL_RCC_GetSysClockFreq+0x9c>)
 80067b8:	5cd3      	ldrb	r3, [r2, r3]
 80067ba:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80067bc:	4b13      	ldr	r3, [pc, #76]	@ (800680c <HAL_RCC_GetSysClockFreq+0x94>)
 80067be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067c0:	f003 030f 	and.w	r3, r3, #15
 80067c4:	4a14      	ldr	r2, [pc, #80]	@ (8006818 <HAL_RCC_GetSysClockFreq+0xa0>)
 80067c6:	5cd3      	ldrb	r3, [r2, r3]
 80067c8:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d008      	beq.n	80067e6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80067d4:	4a0e      	ldr	r2, [pc, #56]	@ (8006810 <HAL_RCC_GetSysClockFreq+0x98>)
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	fb02 f303 	mul.w	r3, r2, r3
 80067e2:	617b      	str	r3, [r7, #20]
 80067e4:	e004      	b.n	80067f0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a0c      	ldr	r2, [pc, #48]	@ (800681c <HAL_RCC_GetSysClockFreq+0xa4>)
 80067ea:	fb02 f303 	mul.w	r3, r2, r3
 80067ee:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	613b      	str	r3, [r7, #16]
      break;
 80067f4:	e002      	b.n	80067fc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80067f6:	4b06      	ldr	r3, [pc, #24]	@ (8006810 <HAL_RCC_GetSysClockFreq+0x98>)
 80067f8:	613b      	str	r3, [r7, #16]
      break;
 80067fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067fc:	693b      	ldr	r3, [r7, #16]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	371c      	adds	r7, #28
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	40021000 	.word	0x40021000
 8006810:	007a1200 	.word	0x007a1200
 8006814:	0800d0f0 	.word	0x0800d0f0
 8006818:	0800d100 	.word	0x0800d100
 800681c:	003d0900 	.word	0x003d0900

08006820 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b092      	sub	sp, #72	@ 0x48
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006828:	2300      	movs	r3, #0
 800682a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800682c:	2300      	movs	r3, #0
 800682e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006830:	2300      	movs	r3, #0
 8006832:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800683e:	2b00      	cmp	r3, #0
 8006840:	f000 80d4 	beq.w	80069ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006844:	4b4e      	ldr	r3, [pc, #312]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006846:	69db      	ldr	r3, [r3, #28]
 8006848:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d10e      	bne.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006850:	4b4b      	ldr	r3, [pc, #300]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006852:	69db      	ldr	r3, [r3, #28]
 8006854:	4a4a      	ldr	r2, [pc, #296]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006856:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800685a:	61d3      	str	r3, [r2, #28]
 800685c:	4b48      	ldr	r3, [pc, #288]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800685e:	69db      	ldr	r3, [r3, #28]
 8006860:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006864:	60bb      	str	r3, [r7, #8]
 8006866:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006868:	2301      	movs	r3, #1
 800686a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800686e:	4b45      	ldr	r3, [pc, #276]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006876:	2b00      	cmp	r3, #0
 8006878:	d118      	bne.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800687a:	4b42      	ldr	r3, [pc, #264]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a41      	ldr	r2, [pc, #260]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006880:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006884:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006886:	f7fb fffd 	bl	8002884 <HAL_GetTick>
 800688a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800688c:	e008      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800688e:	f7fb fff9 	bl	8002884 <HAL_GetTick>
 8006892:	4602      	mov	r2, r0
 8006894:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	2b64      	cmp	r3, #100	@ 0x64
 800689a:	d901      	bls.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e169      	b.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068a0:	4b38      	ldr	r3, [pc, #224]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d0f0      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80068ac:	4b34      	ldr	r3, [pc, #208]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068ae:	6a1b      	ldr	r3, [r3, #32]
 80068b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80068b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f000 8084 	beq.w	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068c6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d07c      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068cc:	4b2c      	ldr	r3, [pc, #176]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068ce:	6a1b      	ldr	r3, [r3, #32]
 80068d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80068da:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068de:	fa93 f3a3 	rbit	r3, r3
 80068e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80068e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80068e6:	fab3 f383 	clz	r3, r3
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	461a      	mov	r2, r3
 80068ee:	4b26      	ldr	r3, [pc, #152]	@ (8006988 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80068f0:	4413      	add	r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	461a      	mov	r2, r3
 80068f6:	2301      	movs	r3, #1
 80068f8:	6013      	str	r3, [r2, #0]
 80068fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80068fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006902:	fa93 f3a3 	rbit	r3, r3
 8006906:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8006908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800690a:	fab3 f383 	clz	r3, r3
 800690e:	b2db      	uxtb	r3, r3
 8006910:	461a      	mov	r2, r3
 8006912:	4b1d      	ldr	r3, [pc, #116]	@ (8006988 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006914:	4413      	add	r3, r2
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	461a      	mov	r2, r3
 800691a:	2300      	movs	r3, #0
 800691c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800691e:	4a18      	ldr	r2, [pc, #96]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006922:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006924:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006926:	f003 0301 	and.w	r3, r3, #1
 800692a:	2b00      	cmp	r3, #0
 800692c:	d04b      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800692e:	f7fb ffa9 	bl	8002884 <HAL_GetTick>
 8006932:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006934:	e00a      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006936:	f7fb ffa5 	bl	8002884 <HAL_GetTick>
 800693a:	4602      	mov	r2, r0
 800693c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006944:	4293      	cmp	r3, r2
 8006946:	d901      	bls.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e113      	b.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800694c:	2302      	movs	r3, #2
 800694e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006952:	fa93 f3a3 	rbit	r3, r3
 8006956:	627b      	str	r3, [r7, #36]	@ 0x24
 8006958:	2302      	movs	r3, #2
 800695a:	623b      	str	r3, [r7, #32]
 800695c:	6a3b      	ldr	r3, [r7, #32]
 800695e:	fa93 f3a3 	rbit	r3, r3
 8006962:	61fb      	str	r3, [r7, #28]
  return result;
 8006964:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006966:	fab3 f383 	clz	r3, r3
 800696a:	b2db      	uxtb	r3, r3
 800696c:	095b      	lsrs	r3, r3, #5
 800696e:	b2db      	uxtb	r3, r3
 8006970:	f043 0302 	orr.w	r3, r3, #2
 8006974:	b2db      	uxtb	r3, r3
 8006976:	2b02      	cmp	r3, #2
 8006978:	d108      	bne.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800697a:	4b01      	ldr	r3, [pc, #4]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	e00d      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006980:	40021000 	.word	0x40021000
 8006984:	40007000 	.word	0x40007000
 8006988:	10908100 	.word	0x10908100
 800698c:	2302      	movs	r3, #2
 800698e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	fa93 f3a3 	rbit	r3, r3
 8006996:	617b      	str	r3, [r7, #20]
 8006998:	4b78      	ldr	r3, [pc, #480]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800699a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800699c:	2202      	movs	r2, #2
 800699e:	613a      	str	r2, [r7, #16]
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	fa92 f2a2 	rbit	r2, r2
 80069a6:	60fa      	str	r2, [r7, #12]
  return result;
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	fab2 f282 	clz	r2, r2
 80069ae:	b2d2      	uxtb	r2, r2
 80069b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069b4:	b2d2      	uxtb	r2, r2
 80069b6:	f002 021f 	and.w	r2, r2, #31
 80069ba:	2101      	movs	r1, #1
 80069bc:	fa01 f202 	lsl.w	r2, r1, r2
 80069c0:	4013      	ands	r3, r2
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d0b7      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80069c6:	4b6d      	ldr	r3, [pc, #436]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	496a      	ldr	r1, [pc, #424]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80069d8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d105      	bne.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069e0:	4b66      	ldr	r3, [pc, #408]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069e2:	69db      	ldr	r3, [r3, #28]
 80069e4:	4a65      	ldr	r2, [pc, #404]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0301 	and.w	r3, r3, #1
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d008      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80069f8:	4b60      	ldr	r3, [pc, #384]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069fc:	f023 0203 	bic.w	r2, r3, #3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	495d      	ldr	r1, [pc, #372]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a06:	4313      	orrs	r3, r2
 8006a08:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0302 	and.w	r3, r3, #2
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d008      	beq.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a16:	4b59      	ldr	r3, [pc, #356]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a1a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	4956      	ldr	r1, [pc, #344]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a24:	4313      	orrs	r3, r2
 8006a26:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0304 	and.w	r3, r3, #4
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d008      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006a34:	4b51      	ldr	r3, [pc, #324]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a38:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	494e      	ldr	r1, [pc, #312]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a42:	4313      	orrs	r3, r2
 8006a44:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 0320 	and.w	r3, r3, #32
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d008      	beq.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a52:	4b4a      	ldr	r3, [pc, #296]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a56:	f023 0210 	bic.w	r2, r3, #16
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	69db      	ldr	r3, [r3, #28]
 8006a5e:	4947      	ldr	r1, [pc, #284]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d008      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006a70:	4b42      	ldr	r3, [pc, #264]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a7c:	493f      	ldr	r1, [pc, #252]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d008      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006a8e:	4b3b      	ldr	r3, [pc, #236]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a92:	f023 0220 	bic.w	r2, r3, #32
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	4938      	ldr	r1, [pc, #224]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0308 	and.w	r3, r3, #8
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d008      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006aac:	4b33      	ldr	r3, [pc, #204]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	695b      	ldr	r3, [r3, #20]
 8006ab8:	4930      	ldr	r1, [pc, #192]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006aba:	4313      	orrs	r3, r2
 8006abc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0310 	and.w	r3, r3, #16
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d008      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006aca:	4b2c      	ldr	r3, [pc, #176]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ace:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	4929      	ldr	r1, [pc, #164]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d008      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006ae8:	4b24      	ldr	r3, [pc, #144]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af4:	4921      	ldr	r1, [pc, #132]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d008      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006b06:	4b1d      	ldr	r3, [pc, #116]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b0a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b12:	491a      	ldr	r1, [pc, #104]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d008      	beq.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006b24:	4b15      	ldr	r3, [pc, #84]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b28:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b30:	4912      	ldr	r1, [pc, #72]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b32:	4313      	orrs	r3, r2
 8006b34:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d008      	beq.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006b42:	4b0e      	ldr	r3, [pc, #56]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b46:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b4e:	490b      	ldr	r1, [pc, #44]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b50:	4313      	orrs	r3, r2
 8006b52:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d008      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006b60:	4b06      	ldr	r3, [pc, #24]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b64:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b6c:	4903      	ldr	r1, [pc, #12]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3748      	adds	r7, #72	@ 0x48
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	40021000 	.word	0x40021000

08006b80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e09d      	b.n	8006cce <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d108      	bne.n	8006bac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ba2:	d009      	beq.n	8006bb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	61da      	str	r2, [r3, #28]
 8006baa:	e005      	b.n	8006bb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d106      	bne.n	8006bd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7fb f91a 	bl	8001e0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2202      	movs	r2, #2
 8006bdc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006bf8:	d902      	bls.n	8006c00 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	60fb      	str	r3, [r7, #12]
 8006bfe:	e002      	b.n	8006c06 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006c00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006c04:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006c0e:	d007      	beq.n	8006c20 <HAL_SPI_Init+0xa0>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006c18:	d002      	beq.n	8006c20 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006c30:	431a      	orrs	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	f003 0302 	and.w	r3, r3, #2
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	695b      	ldr	r3, [r3, #20]
 8006c40:	f003 0301 	and.w	r3, r3, #1
 8006c44:	431a      	orrs	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	699b      	ldr	r3, [r3, #24]
 8006c4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c4e:	431a      	orrs	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	69db      	ldr	r3, [r3, #28]
 8006c54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c58:	431a      	orrs	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c62:	ea42 0103 	orr.w	r1, r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c6a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	0c1b      	lsrs	r3, r3, #16
 8006c7c:	f003 0204 	and.w	r2, r3, #4
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c84:	f003 0310 	and.w	r3, r3, #16
 8006c88:	431a      	orrs	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c8e:	f003 0308 	and.w	r3, r3, #8
 8006c92:	431a      	orrs	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006c9c:	ea42 0103 	orr.w	r1, r2, r3
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	430a      	orrs	r2, r1
 8006cac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	69da      	ldr	r2, [r3, #28]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006cbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b08a      	sub	sp, #40	@ 0x28
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	60f8      	str	r0, [r7, #12]
 8006cde:	60b9      	str	r1, [r7, #8]
 8006ce0:	607a      	str	r2, [r7, #4]
 8006ce2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d101      	bne.n	8006cfc <HAL_SPI_TransmitReceive+0x26>
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	e20a      	b.n	8007112 <HAL_SPI_TransmitReceive+0x43c>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d04:	f7fb fdbe 	bl	8002884 <HAL_GetTick>
 8006d08:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006d10:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006d18:	887b      	ldrh	r3, [r7, #2]
 8006d1a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006d1c:	887b      	ldrh	r3, [r7, #2]
 8006d1e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d20:	7efb      	ldrb	r3, [r7, #27]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d00e      	beq.n	8006d44 <HAL_SPI_TransmitReceive+0x6e>
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d2c:	d106      	bne.n	8006d3c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d102      	bne.n	8006d3c <HAL_SPI_TransmitReceive+0x66>
 8006d36:	7efb      	ldrb	r3, [r7, #27]
 8006d38:	2b04      	cmp	r3, #4
 8006d3a:	d003      	beq.n	8006d44 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006d3c:	2302      	movs	r3, #2
 8006d3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006d42:	e1e0      	b.n	8007106 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d005      	beq.n	8006d56 <HAL_SPI_TransmitReceive+0x80>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d002      	beq.n	8006d56 <HAL_SPI_TransmitReceive+0x80>
 8006d50:	887b      	ldrh	r3, [r7, #2]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d103      	bne.n	8006d5e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006d5c:	e1d3      	b.n	8007106 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b04      	cmp	r3, #4
 8006d68:	d003      	beq.n	8006d72 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2205      	movs	r2, #5
 8006d6e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	887a      	ldrh	r2, [r7, #2]
 8006d82:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	887a      	ldrh	r2, [r7, #2]
 8006d8a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	887a      	ldrh	r2, [r7, #2]
 8006d98:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	887a      	ldrh	r2, [r7, #2]
 8006d9e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2200      	movs	r2, #0
 8006da4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006db4:	d802      	bhi.n	8006dbc <HAL_SPI_TransmitReceive+0xe6>
 8006db6:	8a3b      	ldrh	r3, [r7, #16]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d908      	bls.n	8006dce <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	685a      	ldr	r2, [r3, #4]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006dca:	605a      	str	r2, [r3, #4]
 8006dcc:	e007      	b.n	8006dde <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	685a      	ldr	r2, [r3, #4]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006ddc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006de8:	2b40      	cmp	r3, #64	@ 0x40
 8006dea:	d007      	beq.n	8006dfc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006dfa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e04:	f240 8081 	bls.w	8006f0a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d002      	beq.n	8006e16 <HAL_SPI_TransmitReceive+0x140>
 8006e10:	8a7b      	ldrh	r3, [r7, #18]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d16d      	bne.n	8006ef2 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e1a:	881a      	ldrh	r2, [r3, #0]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e26:	1c9a      	adds	r2, r3, #2
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	3b01      	subs	r3, #1
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e3a:	e05a      	b.n	8006ef2 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f003 0302 	and.w	r3, r3, #2
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d11b      	bne.n	8006e82 <HAL_SPI_TransmitReceive+0x1ac>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d016      	beq.n	8006e82 <HAL_SPI_TransmitReceive+0x1ac>
 8006e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d113      	bne.n	8006e82 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e5e:	881a      	ldrh	r2, [r3, #0]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e6a:	1c9a      	adds	r2, r3, #2
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	3b01      	subs	r3, #1
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	f003 0301 	and.w	r3, r3, #1
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d11c      	bne.n	8006eca <HAL_SPI_TransmitReceive+0x1f4>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d016      	beq.n	8006eca <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	68da      	ldr	r2, [r3, #12]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ea6:	b292      	uxth	r2, r2
 8006ea8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eae:	1c9a      	adds	r2, r3, #2
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006eca:	f7fb fcdb 	bl	8002884 <HAL_GetTick>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d80b      	bhi.n	8006ef2 <HAL_SPI_TransmitReceive+0x21c>
 8006eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee0:	d007      	beq.n	8006ef2 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8006ef0:	e109      	b.n	8007106 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d19f      	bne.n	8006e3c <HAL_SPI_TransmitReceive+0x166>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d199      	bne.n	8006e3c <HAL_SPI_TransmitReceive+0x166>
 8006f08:	e0e3      	b.n	80070d2 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d003      	beq.n	8006f1a <HAL_SPI_TransmitReceive+0x244>
 8006f12:	8a7b      	ldrh	r3, [r7, #18]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	f040 80cf 	bne.w	80070b8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d912      	bls.n	8006f4a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f28:	881a      	ldrh	r2, [r3, #0]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f34:	1c9a      	adds	r2, r3, #2
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	3b02      	subs	r3, #2
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006f48:	e0b6      	b.n	80070b8 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	330c      	adds	r3, #12
 8006f54:	7812      	ldrb	r2, [r2, #0]
 8006f56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f5c:	1c5a      	adds	r2, r3, #1
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f70:	e0a2      	b.n	80070b8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	f003 0302 	and.w	r3, r3, #2
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d134      	bne.n	8006fea <HAL_SPI_TransmitReceive+0x314>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d02f      	beq.n	8006fea <HAL_SPI_TransmitReceive+0x314>
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d12c      	bne.n	8006fea <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d912      	bls.n	8006fc0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f9e:	881a      	ldrh	r2, [r3, #0]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006faa:	1c9a      	adds	r2, r3, #2
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	3b02      	subs	r3, #2
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006fbe:	e012      	b.n	8006fe6 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	330c      	adds	r3, #12
 8006fca:	7812      	ldrb	r2, [r2, #0]
 8006fcc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fd2:	1c5a      	adds	r2, r3, #1
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	f003 0301 	and.w	r3, r3, #1
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d148      	bne.n	800708a <HAL_SPI_TransmitReceive+0x3b4>
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	2b00      	cmp	r3, #0
 8007002:	d042      	beq.n	800708a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800700a:	b29b      	uxth	r3, r3
 800700c:	2b01      	cmp	r3, #1
 800700e:	d923      	bls.n	8007058 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68da      	ldr	r2, [r3, #12]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800701a:	b292      	uxth	r2, r2
 800701c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007022:	1c9a      	adds	r2, r3, #2
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800702e:	b29b      	uxth	r3, r3
 8007030:	3b02      	subs	r3, #2
 8007032:	b29a      	uxth	r2, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007040:	b29b      	uxth	r3, r3
 8007042:	2b01      	cmp	r3, #1
 8007044:	d81f      	bhi.n	8007086 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007054:	605a      	str	r2, [r3, #4]
 8007056:	e016      	b.n	8007086 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f103 020c 	add.w	r2, r3, #12
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007064:	7812      	ldrb	r2, [r2, #0]
 8007066:	b2d2      	uxtb	r2, r2
 8007068:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800706e:	1c5a      	adds	r2, r3, #1
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800707a:	b29b      	uxth	r3, r3
 800707c:	3b01      	subs	r3, #1
 800707e:	b29a      	uxth	r2, r3
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007086:	2301      	movs	r3, #1
 8007088:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800708a:	f7fb fbfb 	bl	8002884 <HAL_GetTick>
 800708e:	4602      	mov	r2, r0
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007096:	429a      	cmp	r2, r3
 8007098:	d803      	bhi.n	80070a2 <HAL_SPI_TransmitReceive+0x3cc>
 800709a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a0:	d102      	bne.n	80070a8 <HAL_SPI_TransmitReceive+0x3d2>
 80070a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d107      	bne.n	80070b8 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80070b6:	e026      	b.n	8007106 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070bc:	b29b      	uxth	r3, r3
 80070be:	2b00      	cmp	r3, #0
 80070c0:	f47f af57 	bne.w	8006f72 <HAL_SPI_TransmitReceive+0x29c>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f47f af50 	bne.w	8006f72 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070d2:	69fa      	ldr	r2, [r7, #28]
 80070d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f000 f93e 	bl	8007358 <SPI_EndRxTxTransaction>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d005      	beq.n	80070ee <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2220      	movs	r2, #32
 80070ec:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d003      	beq.n	80070fe <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070fc:	e003      	b.n	8007106 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2201      	movs	r2, #1
 8007102:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800710e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8007112:	4618      	mov	r0, r3
 8007114:	3728      	adds	r7, #40	@ 0x28
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
	...

0800711c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b088      	sub	sp, #32
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	603b      	str	r3, [r7, #0]
 8007128:	4613      	mov	r3, r2
 800712a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800712c:	f7fb fbaa 	bl	8002884 <HAL_GetTick>
 8007130:	4602      	mov	r2, r0
 8007132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007134:	1a9b      	subs	r3, r3, r2
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	4413      	add	r3, r2
 800713a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800713c:	f7fb fba2 	bl	8002884 <HAL_GetTick>
 8007140:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007142:	4b39      	ldr	r3, [pc, #228]	@ (8007228 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	015b      	lsls	r3, r3, #5
 8007148:	0d1b      	lsrs	r3, r3, #20
 800714a:	69fa      	ldr	r2, [r7, #28]
 800714c:	fb02 f303 	mul.w	r3, r2, r3
 8007150:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007152:	e054      	b.n	80071fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800715a:	d050      	beq.n	80071fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800715c:	f7fb fb92 	bl	8002884 <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	69fa      	ldr	r2, [r7, #28]
 8007168:	429a      	cmp	r2, r3
 800716a:	d902      	bls.n	8007172 <SPI_WaitFlagStateUntilTimeout+0x56>
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d13d      	bne.n	80071ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	685a      	ldr	r2, [r3, #4]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007180:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800718a:	d111      	bne.n	80071b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007194:	d004      	beq.n	80071a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800719e:	d107      	bne.n	80071b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80071ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071b8:	d10f      	bne.n	80071da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80071c8:	601a      	str	r2, [r3, #0]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80071d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e017      	b.n	800721e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d101      	bne.n	80071f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80071f4:	2300      	movs	r3, #0
 80071f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	3b01      	subs	r3, #1
 80071fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	689a      	ldr	r2, [r3, #8]
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	4013      	ands	r3, r2
 8007208:	68ba      	ldr	r2, [r7, #8]
 800720a:	429a      	cmp	r2, r3
 800720c:	bf0c      	ite	eq
 800720e:	2301      	moveq	r3, #1
 8007210:	2300      	movne	r3, #0
 8007212:	b2db      	uxtb	r3, r3
 8007214:	461a      	mov	r2, r3
 8007216:	79fb      	ldrb	r3, [r7, #7]
 8007218:	429a      	cmp	r2, r3
 800721a:	d19b      	bne.n	8007154 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3720      	adds	r7, #32
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	20000058 	.word	0x20000058

0800722c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b08a      	sub	sp, #40	@ 0x28
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	607a      	str	r2, [r7, #4]
 8007238:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800723a:	2300      	movs	r3, #0
 800723c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800723e:	f7fb fb21 	bl	8002884 <HAL_GetTick>
 8007242:	4602      	mov	r2, r0
 8007244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007246:	1a9b      	subs	r3, r3, r2
 8007248:	683a      	ldr	r2, [r7, #0]
 800724a:	4413      	add	r3, r2
 800724c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800724e:	f7fb fb19 	bl	8002884 <HAL_GetTick>
 8007252:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	330c      	adds	r3, #12
 800725a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800725c:	4b3d      	ldr	r3, [pc, #244]	@ (8007354 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	4613      	mov	r3, r2
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	4413      	add	r3, r2
 8007266:	00da      	lsls	r2, r3, #3
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	0d1b      	lsrs	r3, r3, #20
 800726c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800726e:	fb02 f303 	mul.w	r3, r2, r3
 8007272:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007274:	e060      	b.n	8007338 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800727c:	d107      	bne.n	800728e <SPI_WaitFifoStateUntilTimeout+0x62>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d104      	bne.n	800728e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	b2db      	uxtb	r3, r3
 800728a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800728c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007294:	d050      	beq.n	8007338 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007296:	f7fb faf5 	bl	8002884 <HAL_GetTick>
 800729a:	4602      	mov	r2, r0
 800729c:	6a3b      	ldr	r3, [r7, #32]
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d902      	bls.n	80072ac <SPI_WaitFifoStateUntilTimeout+0x80>
 80072a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d13d      	bne.n	8007328 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	685a      	ldr	r2, [r3, #4]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80072ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80072c4:	d111      	bne.n	80072ea <SPI_WaitFifoStateUntilTimeout+0xbe>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072ce:	d004      	beq.n	80072da <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072d8:	d107      	bne.n	80072ea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072e8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072f2:	d10f      	bne.n	8007314 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007302:	601a      	str	r2, [r3, #0]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007312:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2200      	movs	r2, #0
 8007320:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007324:	2303      	movs	r3, #3
 8007326:	e010      	b.n	800734a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d101      	bne.n	8007332 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800732e:	2300      	movs	r3, #0
 8007330:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	3b01      	subs	r3, #1
 8007336:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	689a      	ldr	r2, [r3, #8]
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	4013      	ands	r3, r2
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	429a      	cmp	r2, r3
 8007346:	d196      	bne.n	8007276 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3728      	adds	r7, #40	@ 0x28
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	20000058 	.word	0x20000058

08007358 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b086      	sub	sp, #24
 800735c:	af02      	add	r7, sp, #8
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	9300      	str	r3, [sp, #0]
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	2200      	movs	r2, #0
 800736c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f7ff ff5b 	bl	800722c <SPI_WaitFifoStateUntilTimeout>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d007      	beq.n	800738c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007380:	f043 0220 	orr.w	r2, r3, #32
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	e027      	b.n	80073dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	9300      	str	r3, [sp, #0]
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	2200      	movs	r2, #0
 8007394:	2180      	movs	r1, #128	@ 0x80
 8007396:	68f8      	ldr	r0, [r7, #12]
 8007398:	f7ff fec0 	bl	800711c <SPI_WaitFlagStateUntilTimeout>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d007      	beq.n	80073b2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073a6:	f043 0220 	orr.w	r2, r3, #32
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e014      	b.n	80073dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	9300      	str	r3, [sp, #0]
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	f7ff ff34 	bl	800722c <SPI_WaitFifoStateUntilTimeout>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d007      	beq.n	80073da <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073ce:	f043 0220 	orr.w	r2, r3, #32
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80073d6:	2303      	movs	r3, #3
 80073d8:	e000      	b.n	80073dc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3710      	adds	r7, #16
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b085      	sub	sp, #20
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80073f4:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80073f8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3714      	adds	r7, #20
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr

08007412 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007412:	b480      	push	{r7}
 8007414:	b085      	sub	sp, #20
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800741a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800741e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007426:	b29a      	uxth	r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	b29b      	uxth	r3, r3
 800742c:	43db      	mvns	r3, r3
 800742e:	b29b      	uxth	r3, r3
 8007430:	4013      	ands	r3, r2
 8007432:	b29a      	uxth	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3714      	adds	r7, #20
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	1d3b      	adds	r3, r7, #4
 8007452:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2201      	movs	r2, #1
 800745a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3714      	adds	r7, #20
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007484:	b480      	push	{r7}
 8007486:	b09d      	sub	sp, #116	@ 0x74
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800748e:	2300      	movs	r3, #0
 8007490:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	4413      	add	r3, r2
 800749e:	881b      	ldrh	r3, [r3, #0]
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80074a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074aa:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	78db      	ldrb	r3, [r3, #3]
 80074b2:	2b03      	cmp	r3, #3
 80074b4:	d81f      	bhi.n	80074f6 <USB_ActivateEndpoint+0x72>
 80074b6:	a201      	add	r2, pc, #4	@ (adr r2, 80074bc <USB_ActivateEndpoint+0x38>)
 80074b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074bc:	080074cd 	.word	0x080074cd
 80074c0:	080074e9 	.word	0x080074e9
 80074c4:	080074ff 	.word	0x080074ff
 80074c8:	080074db 	.word	0x080074db
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80074cc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80074d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80074d4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80074d8:	e012      	b.n	8007500 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80074da:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80074de:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80074e2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80074e6:	e00b      	b.n	8007500 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80074e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80074ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80074f0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80074f4:	e004      	b.n	8007500 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80074fc:	e000      	b.n	8007500 <USB_ActivateEndpoint+0x7c>
      break;
 80074fe:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	441a      	add	r2, r3
 800750a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800750e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007512:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007516:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800751a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800751e:	b29b      	uxth	r3, r3
 8007520:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	4413      	add	r3, r2
 800752c:	881b      	ldrh	r3, [r3, #0]
 800752e:	b29b      	uxth	r3, r3
 8007530:	b21b      	sxth	r3, r3
 8007532:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800753a:	b21a      	sxth	r2, r3
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	b21b      	sxth	r3, r3
 8007542:	4313      	orrs	r3, r2
 8007544:	b21b      	sxth	r3, r3
 8007546:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	441a      	add	r2, r3
 8007554:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007558:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800755c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007560:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007564:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007568:	b29b      	uxth	r3, r3
 800756a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	7b1b      	ldrb	r3, [r3, #12]
 8007570:	2b00      	cmp	r3, #0
 8007572:	f040 8178 	bne.w	8007866 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	785b      	ldrb	r3, [r3, #1]
 800757a:	2b00      	cmp	r3, #0
 800757c:	f000 8084 	beq.w	8007688 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	61bb      	str	r3, [r7, #24]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800758a:	b29b      	uxth	r3, r3
 800758c:	461a      	mov	r2, r3
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	4413      	add	r3, r2
 8007592:	61bb      	str	r3, [r7, #24]
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	011a      	lsls	r2, r3, #4
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	4413      	add	r3, r2
 800759e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80075a2:	617b      	str	r3, [r7, #20]
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	88db      	ldrh	r3, [r3, #6]
 80075a8:	085b      	lsrs	r3, r3, #1
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	005b      	lsls	r3, r3, #1
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	4413      	add	r3, r2
 80075be:	881b      	ldrh	r3, [r3, #0]
 80075c0:	827b      	strh	r3, [r7, #18]
 80075c2:	8a7b      	ldrh	r3, [r7, #18]
 80075c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d01b      	beq.n	8007604 <USB_ActivateEndpoint+0x180>
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	4413      	add	r3, r2
 80075d6:	881b      	ldrh	r3, [r3, #0]
 80075d8:	b29b      	uxth	r3, r3
 80075da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075e2:	823b      	strh	r3, [r7, #16]
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	441a      	add	r2, r3
 80075ee:	8a3b      	ldrh	r3, [r7, #16]
 80075f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075fc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007600:	b29b      	uxth	r3, r3
 8007602:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	78db      	ldrb	r3, [r3, #3]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d020      	beq.n	800764e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	4413      	add	r3, r2
 8007616:	881b      	ldrh	r3, [r3, #0]
 8007618:	b29b      	uxth	r3, r3
 800761a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800761e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007622:	81bb      	strh	r3, [r7, #12]
 8007624:	89bb      	ldrh	r3, [r7, #12]
 8007626:	f083 0320 	eor.w	r3, r3, #32
 800762a:	81bb      	strh	r3, [r7, #12]
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	441a      	add	r2, r3
 8007636:	89bb      	ldrh	r3, [r7, #12]
 8007638:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800763c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007640:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007644:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007648:	b29b      	uxth	r3, r3
 800764a:	8013      	strh	r3, [r2, #0]
 800764c:	e2d5      	b.n	8007bfa <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	4413      	add	r3, r2
 8007658:	881b      	ldrh	r3, [r3, #0]
 800765a:	b29b      	uxth	r3, r3
 800765c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007660:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007664:	81fb      	strh	r3, [r7, #14]
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	441a      	add	r2, r3
 8007670:	89fb      	ldrh	r3, [r7, #14]
 8007672:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007676:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800767a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800767e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007682:	b29b      	uxth	r3, r3
 8007684:	8013      	strh	r3, [r2, #0]
 8007686:	e2b8      	b.n	8007bfa <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	633b      	str	r3, [r7, #48]	@ 0x30
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007692:	b29b      	uxth	r3, r3
 8007694:	461a      	mov	r2, r3
 8007696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007698:	4413      	add	r3, r2
 800769a:	633b      	str	r3, [r7, #48]	@ 0x30
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	011a      	lsls	r2, r3, #4
 80076a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a4:	4413      	add	r3, r2
 80076a6:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80076aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	88db      	ldrh	r3, [r3, #6]
 80076b0:	085b      	lsrs	r3, r3, #1
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	005b      	lsls	r3, r3, #1
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ba:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	461a      	mov	r2, r3
 80076ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076cc:	4413      	add	r3, r2
 80076ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	011a      	lsls	r2, r3, #4
 80076d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d8:	4413      	add	r3, r2
 80076da:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80076de:	627b      	str	r3, [r7, #36]	@ 0x24
 80076e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e2:	881b      	ldrh	r3, [r3, #0]
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ee:	801a      	strh	r2, [r3, #0]
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	691b      	ldr	r3, [r3, #16]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10a      	bne.n	800770e <USB_ActivateEndpoint+0x28a>
 80076f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076fa:	881b      	ldrh	r3, [r3, #0]
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007702:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007706:	b29a      	uxth	r2, r3
 8007708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770a:	801a      	strh	r2, [r3, #0]
 800770c:	e039      	b.n	8007782 <USB_ActivateEndpoint+0x2fe>
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	2b3e      	cmp	r3, #62	@ 0x3e
 8007714:	d818      	bhi.n	8007748 <USB_ActivateEndpoint+0x2c4>
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	085b      	lsrs	r3, r3, #1
 800771c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	f003 0301 	and.w	r3, r3, #1
 8007726:	2b00      	cmp	r3, #0
 8007728:	d002      	beq.n	8007730 <USB_ActivateEndpoint+0x2ac>
 800772a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800772c:	3301      	adds	r3, #1
 800772e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007732:	881b      	ldrh	r3, [r3, #0]
 8007734:	b29a      	uxth	r2, r3
 8007736:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007738:	b29b      	uxth	r3, r3
 800773a:	029b      	lsls	r3, r3, #10
 800773c:	b29b      	uxth	r3, r3
 800773e:	4313      	orrs	r3, r2
 8007740:	b29a      	uxth	r2, r3
 8007742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007744:	801a      	strh	r2, [r3, #0]
 8007746:	e01c      	b.n	8007782 <USB_ActivateEndpoint+0x2fe>
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	095b      	lsrs	r3, r3, #5
 800774e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	f003 031f 	and.w	r3, r3, #31
 8007758:	2b00      	cmp	r3, #0
 800775a:	d102      	bne.n	8007762 <USB_ActivateEndpoint+0x2de>
 800775c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800775e:	3b01      	subs	r3, #1
 8007760:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007764:	881b      	ldrh	r3, [r3, #0]
 8007766:	b29a      	uxth	r2, r3
 8007768:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800776a:	b29b      	uxth	r3, r3
 800776c:	029b      	lsls	r3, r3, #10
 800776e:	b29b      	uxth	r3, r3
 8007770:	4313      	orrs	r3, r2
 8007772:	b29b      	uxth	r3, r3
 8007774:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007778:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800777c:	b29a      	uxth	r2, r3
 800777e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007780:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	4413      	add	r3, r2
 800778c:	881b      	ldrh	r3, [r3, #0]
 800778e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007790:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007792:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007796:	2b00      	cmp	r3, #0
 8007798:	d01b      	beq.n	80077d2 <USB_ActivateEndpoint+0x34e>
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	4413      	add	r3, r2
 80077a4:	881b      	ldrh	r3, [r3, #0]
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077b0:	843b      	strh	r3, [r7, #32]
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	441a      	add	r2, r3
 80077bc:	8c3b      	ldrh	r3, [r7, #32]
 80077be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80077ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d124      	bne.n	8007824 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	4413      	add	r3, r2
 80077e4:	881b      	ldrh	r3, [r3, #0]
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80077ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077f0:	83bb      	strh	r3, [r7, #28]
 80077f2:	8bbb      	ldrh	r3, [r7, #28]
 80077f4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80077f8:	83bb      	strh	r3, [r7, #28]
 80077fa:	8bbb      	ldrh	r3, [r7, #28]
 80077fc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007800:	83bb      	strh	r3, [r7, #28]
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	441a      	add	r2, r3
 800780c:	8bbb      	ldrh	r3, [r7, #28]
 800780e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007812:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007816:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800781a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800781e:	b29b      	uxth	r3, r3
 8007820:	8013      	strh	r3, [r2, #0]
 8007822:	e1ea      	b.n	8007bfa <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	4413      	add	r3, r2
 800782e:	881b      	ldrh	r3, [r3, #0]
 8007830:	b29b      	uxth	r3, r3
 8007832:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007836:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800783a:	83fb      	strh	r3, [r7, #30]
 800783c:	8bfb      	ldrh	r3, [r7, #30]
 800783e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007842:	83fb      	strh	r3, [r7, #30]
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	441a      	add	r2, r3
 800784e:	8bfb      	ldrh	r3, [r7, #30]
 8007850:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007854:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007858:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800785c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007860:	b29b      	uxth	r3, r3
 8007862:	8013      	strh	r3, [r2, #0]
 8007864:	e1c9      	b.n	8007bfa <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	78db      	ldrb	r3, [r3, #3]
 800786a:	2b02      	cmp	r3, #2
 800786c:	d11e      	bne.n	80078ac <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	4413      	add	r3, r2
 8007878:	881b      	ldrh	r3, [r3, #0]
 800787a:	b29b      	uxth	r3, r3
 800787c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007880:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007884:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	441a      	add	r2, r3
 8007892:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007896:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800789a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800789e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80078a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	8013      	strh	r3, [r2, #0]
 80078aa:	e01d      	b.n	80078e8 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	4413      	add	r3, r2
 80078b6:	881b      	ldrh	r3, [r3, #0]
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80078be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078c2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	441a      	add	r2, r3
 80078d0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80078d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	461a      	mov	r2, r3
 80078f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078f8:	4413      	add	r3, r2
 80078fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	011a      	lsls	r2, r3, #4
 8007902:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007904:	4413      	add	r3, r2
 8007906:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800790a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	891b      	ldrh	r3, [r3, #8]
 8007910:	085b      	lsrs	r3, r3, #1
 8007912:	b29b      	uxth	r3, r3
 8007914:	005b      	lsls	r3, r3, #1
 8007916:	b29a      	uxth	r2, r3
 8007918:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800791a:	801a      	strh	r2, [r3, #0]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007926:	b29b      	uxth	r3, r3
 8007928:	461a      	mov	r2, r3
 800792a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800792c:	4413      	add	r3, r2
 800792e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	011a      	lsls	r2, r3, #4
 8007936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007938:	4413      	add	r3, r2
 800793a:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800793e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	895b      	ldrh	r3, [r3, #10]
 8007944:	085b      	lsrs	r3, r3, #1
 8007946:	b29b      	uxth	r3, r3
 8007948:	005b      	lsls	r3, r3, #1
 800794a:	b29a      	uxth	r2, r3
 800794c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800794e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	785b      	ldrb	r3, [r3, #1]
 8007954:	2b00      	cmp	r3, #0
 8007956:	f040 8093 	bne.w	8007a80 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	4413      	add	r3, r2
 8007964:	881b      	ldrh	r3, [r3, #0]
 8007966:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800796a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800796e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007972:	2b00      	cmp	r3, #0
 8007974:	d01b      	beq.n	80079ae <USB_ActivateEndpoint+0x52a>
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	4413      	add	r3, r2
 8007980:	881b      	ldrh	r3, [r3, #0]
 8007982:	b29b      	uxth	r3, r3
 8007984:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007988:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800798c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	441a      	add	r2, r3
 8007998:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800799a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800799e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80079a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	4413      	add	r3, r2
 80079b8:	881b      	ldrh	r3, [r3, #0]
 80079ba:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80079bc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80079be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d01b      	beq.n	80079fe <USB_ActivateEndpoint+0x57a>
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	4413      	add	r3, r2
 80079d0:	881b      	ldrh	r3, [r3, #0]
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079dc:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	441a      	add	r2, r3
 80079e8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80079ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079f6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4413      	add	r3, r2
 8007a08:	881b      	ldrh	r3, [r3, #0]
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a14:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007a16:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007a18:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007a1c:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007a1e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007a20:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007a24:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	441a      	add	r2, r3
 8007a30:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007a32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	4413      	add	r3, r2
 8007a50:	881b      	ldrh	r3, [r3, #0]
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a5c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	441a      	add	r2, r3
 8007a68:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007a6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	8013      	strh	r3, [r2, #0]
 8007a7e:	e0bc      	b.n	8007bfa <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4413      	add	r3, r2
 8007a8a:	881b      	ldrh	r3, [r3, #0]
 8007a8c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8007a90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007a94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d01d      	beq.n	8007ad8 <USB_ActivateEndpoint+0x654>
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	4413      	add	r3, r2
 8007aa6:	881b      	ldrh	r3, [r3, #0]
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007aae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ab2:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	441a      	add	r2, r3
 8007ac0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007ac4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ac8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007acc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007ad0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	4413      	add	r3, r2
 8007ae2:	881b      	ldrh	r3, [r3, #0]
 8007ae4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8007ae8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8007aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d01d      	beq.n	8007b30 <USB_ActivateEndpoint+0x6ac>
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	4413      	add	r3, r2
 8007afe:	881b      	ldrh	r3, [r3, #0]
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b0a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	441a      	add	r2, r3
 8007b18:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007b1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b28:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	78db      	ldrb	r3, [r3, #3]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d024      	beq.n	8007b82 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	4413      	add	r3, r2
 8007b42:	881b      	ldrh	r3, [r3, #0]
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b4e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8007b52:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007b56:	f083 0320 	eor.w	r3, r3, #32
 8007b5a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	441a      	add	r2, r3
 8007b68:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007b6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	8013      	strh	r3, [r2, #0]
 8007b80:	e01d      	b.n	8007bbe <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	4413      	add	r3, r2
 8007b8c:	881b      	ldrh	r3, [r3, #0]
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b98:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	441a      	add	r2, r3
 8007ba6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007baa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	4413      	add	r3, r2
 8007bc8:	881b      	ldrh	r3, [r3, #0]
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007bd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bd4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	441a      	add	r2, r3
 8007be2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007be6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007bfa:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3774      	adds	r7, #116	@ 0x74
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop

08007c0c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b08d      	sub	sp, #52	@ 0x34
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	7b1b      	ldrb	r3, [r3, #12]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	f040 808e 	bne.w	8007d3c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	785b      	ldrb	r3, [r3, #1]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d044      	beq.n	8007cb2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	4413      	add	r3, r2
 8007c32:	881b      	ldrh	r3, [r3, #0]
 8007c34:	81bb      	strh	r3, [r7, #12]
 8007c36:	89bb      	ldrh	r3, [r7, #12]
 8007c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d01b      	beq.n	8007c78 <USB_DeactivateEndpoint+0x6c>
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	4413      	add	r3, r2
 8007c4a:	881b      	ldrh	r3, [r3, #0]
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c56:	817b      	strh	r3, [r7, #10]
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	441a      	add	r2, r3
 8007c62:	897b      	ldrh	r3, [r7, #10]
 8007c64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c70:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4413      	add	r3, r2
 8007c82:	881b      	ldrh	r3, [r3, #0]
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c8e:	813b      	strh	r3, [r7, #8]
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	441a      	add	r2, r3
 8007c9a:	893b      	ldrh	r3, [r7, #8]
 8007c9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ca0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ca4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ca8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	8013      	strh	r3, [r2, #0]
 8007cb0:	e192      	b.n	8007fd8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	4413      	add	r3, r2
 8007cbc:	881b      	ldrh	r3, [r3, #0]
 8007cbe:	827b      	strh	r3, [r7, #18]
 8007cc0:	8a7b      	ldrh	r3, [r7, #18]
 8007cc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d01b      	beq.n	8007d02 <USB_DeactivateEndpoint+0xf6>
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	4413      	add	r3, r2
 8007cd4:	881b      	ldrh	r3, [r3, #0]
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007cdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ce0:	823b      	strh	r3, [r7, #16]
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	441a      	add	r2, r3
 8007cec:	8a3b      	ldrh	r3, [r7, #16]
 8007cee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cf6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007cfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	4413      	add	r3, r2
 8007d0c:	881b      	ldrh	r3, [r3, #0]
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d18:	81fb      	strh	r3, [r7, #14]
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	441a      	add	r2, r3
 8007d24:	89fb      	ldrh	r3, [r7, #14]
 8007d26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	8013      	strh	r3, [r2, #0]
 8007d3a:	e14d      	b.n	8007fd8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	785b      	ldrb	r3, [r3, #1]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f040 80a5 	bne.w	8007e90 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	4413      	add	r3, r2
 8007d50:	881b      	ldrh	r3, [r3, #0]
 8007d52:	843b      	strh	r3, [r7, #32]
 8007d54:	8c3b      	ldrh	r3, [r7, #32]
 8007d56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d01b      	beq.n	8007d96 <USB_DeactivateEndpoint+0x18a>
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	4413      	add	r3, r2
 8007d68:	881b      	ldrh	r3, [r3, #0]
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d74:	83fb      	strh	r3, [r7, #30]
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	441a      	add	r2, r3
 8007d80:	8bfb      	ldrh	r3, [r7, #30]
 8007d82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d8a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007d8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	4413      	add	r3, r2
 8007da0:	881b      	ldrh	r3, [r3, #0]
 8007da2:	83bb      	strh	r3, [r7, #28]
 8007da4:	8bbb      	ldrh	r3, [r7, #28]
 8007da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d01b      	beq.n	8007de6 <USB_DeactivateEndpoint+0x1da>
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	4413      	add	r3, r2
 8007db8:	881b      	ldrh	r3, [r3, #0]
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dc4:	837b      	strh	r3, [r7, #26]
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	441a      	add	r2, r3
 8007dd0:	8b7b      	ldrh	r3, [r7, #26]
 8007dd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007dd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007dde:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	4413      	add	r3, r2
 8007df0:	881b      	ldrh	r3, [r3, #0]
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007df8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dfc:	833b      	strh	r3, [r7, #24]
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	441a      	add	r2, r3
 8007e08:	8b3b      	ldrh	r3, [r7, #24]
 8007e0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e16:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	4413      	add	r3, r2
 8007e28:	881b      	ldrh	r3, [r3, #0]
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e34:	82fb      	strh	r3, [r7, #22]
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	441a      	add	r2, r3
 8007e40:	8afb      	ldrh	r3, [r7, #22]
 8007e42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	4413      	add	r3, r2
 8007e60:	881b      	ldrh	r3, [r3, #0]
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e6c:	82bb      	strh	r3, [r7, #20]
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	441a      	add	r2, r3
 8007e78:	8abb      	ldrh	r3, [r7, #20]
 8007e7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	8013      	strh	r3, [r2, #0]
 8007e8e:	e0a3      	b.n	8007fd8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	4413      	add	r3, r2
 8007e9a:	881b      	ldrh	r3, [r3, #0]
 8007e9c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8007e9e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007ea0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d01b      	beq.n	8007ee0 <USB_DeactivateEndpoint+0x2d4>
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	4413      	add	r3, r2
 8007eb2:	881b      	ldrh	r3, [r3, #0]
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007eba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ebe:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	441a      	add	r2, r3
 8007eca:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007ecc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ed0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ed4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007ed8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	4413      	add	r3, r2
 8007eea:	881b      	ldrh	r3, [r3, #0]
 8007eec:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8007eee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d01b      	beq.n	8007f30 <USB_DeactivateEndpoint+0x324>
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	4413      	add	r3, r2
 8007f02:	881b      	ldrh	r3, [r3, #0]
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f0e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	441a      	add	r2, r3
 8007f1a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007f1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f28:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	4413      	add	r3, r2
 8007f3a:	881b      	ldrh	r3, [r3, #0]
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f46:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	441a      	add	r2, r3
 8007f52:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007f54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007f60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4413      	add	r3, r2
 8007f72:	881b      	ldrh	r3, [r3, #0]
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f7e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	441a      	add	r2, r3
 8007f8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007f8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	4413      	add	r3, r2
 8007faa:	881b      	ldrh	r3, [r3, #0]
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007fb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fb6:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	441a      	add	r2, r3
 8007fc2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007fc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3734      	adds	r7, #52	@ 0x34
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b0c2      	sub	sp, #264	@ 0x108
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ff0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ff4:	6018      	str	r0, [r3, #0]
 8007ff6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ffa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ffe:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008000:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008004:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	785b      	ldrb	r3, [r3, #1]
 800800c:	2b01      	cmp	r3, #1
 800800e:	f040 86b7 	bne.w	8008d80 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008016:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	699a      	ldr	r2, [r3, #24]
 800801e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008022:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	429a      	cmp	r2, r3
 800802c:	d908      	bls.n	8008040 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800802e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008032:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800803e:	e007      	b.n	8008050 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008040:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008044:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	699b      	ldr	r3, [r3, #24]
 800804c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008050:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008054:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	7b1b      	ldrb	r3, [r3, #12]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d13a      	bne.n	80080d6 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008064:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	6959      	ldr	r1, [r3, #20]
 800806c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008070:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	88da      	ldrh	r2, [r3, #6]
 8008078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800807c:	b29b      	uxth	r3, r3
 800807e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008082:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008086:	6800      	ldr	r0, [r0, #0]
 8008088:	f001 fc8d 	bl	80099a6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800808c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008090:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	613b      	str	r3, [r7, #16]
 8008098:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800809c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	461a      	mov	r2, r3
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	4413      	add	r3, r2
 80080ae:	613b      	str	r3, [r7, #16]
 80080b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	011a      	lsls	r2, r3, #4
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	4413      	add	r3, r2
 80080c2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80080c6:	60fb      	str	r3, [r7, #12]
 80080c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080cc:	b29a      	uxth	r2, r3
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	801a      	strh	r2, [r3, #0]
 80080d2:	f000 be1f 	b.w	8008d14 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80080d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	78db      	ldrb	r3, [r3, #3]
 80080e2:	2b02      	cmp	r3, #2
 80080e4:	f040 8462 	bne.w	80089ac <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80080e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	6a1a      	ldr	r2, [r3, #32]
 80080f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	429a      	cmp	r2, r3
 8008102:	f240 83df 	bls.w	80088c4 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008106:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800810a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008114:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	4413      	add	r3, r2
 8008120:	881b      	ldrh	r3, [r3, #0]
 8008122:	b29b      	uxth	r3, r3
 8008124:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008128:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800812c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8008130:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008134:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800813e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	441a      	add	r2, r3
 800814a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800814e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008152:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008156:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800815a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800815e:	b29b      	uxth	r3, r3
 8008160:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008162:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008166:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	6a1a      	ldr	r2, [r3, #32]
 800816e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008172:	1ad2      	subs	r2, r2, r3
 8008174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008178:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008180:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008184:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800818e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	4413      	add	r3, r2
 800819a:	881b      	ldrh	r3, [r3, #0]
 800819c:	b29b      	uxth	r3, r3
 800819e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f000 81c7 	beq.w	8008536 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80081a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80081b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	785b      	ldrb	r3, [r3, #1]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d177      	bne.n	80082b4 <USB_EPStartXfer+0x2ce>
 80081c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081de:	b29b      	uxth	r3, r3
 80081e0:	461a      	mov	r2, r3
 80081e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081e4:	4413      	add	r3, r2
 80081e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	011a      	lsls	r2, r3, #4
 80081f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081f8:	4413      	add	r3, r2
 80081fa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80081fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8008200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008202:	881b      	ldrh	r3, [r3, #0]
 8008204:	b29b      	uxth	r3, r3
 8008206:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800820a:	b29a      	uxth	r2, r3
 800820c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800820e:	801a      	strh	r2, [r3, #0]
 8008210:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008214:	2b00      	cmp	r3, #0
 8008216:	d10a      	bne.n	800822e <USB_EPStartXfer+0x248>
 8008218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800821a:	881b      	ldrh	r3, [r3, #0]
 800821c:	b29b      	uxth	r3, r3
 800821e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008222:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008226:	b29a      	uxth	r2, r3
 8008228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800822a:	801a      	strh	r2, [r3, #0]
 800822c:	e067      	b.n	80082fe <USB_EPStartXfer+0x318>
 800822e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008232:	2b3e      	cmp	r3, #62	@ 0x3e
 8008234:	d81c      	bhi.n	8008270 <USB_EPStartXfer+0x28a>
 8008236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800823a:	085b      	lsrs	r3, r3, #1
 800823c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008240:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008244:	f003 0301 	and.w	r3, r3, #1
 8008248:	2b00      	cmp	r3, #0
 800824a:	d004      	beq.n	8008256 <USB_EPStartXfer+0x270>
 800824c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008250:	3301      	adds	r3, #1
 8008252:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008258:	881b      	ldrh	r3, [r3, #0]
 800825a:	b29a      	uxth	r2, r3
 800825c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008260:	b29b      	uxth	r3, r3
 8008262:	029b      	lsls	r3, r3, #10
 8008264:	b29b      	uxth	r3, r3
 8008266:	4313      	orrs	r3, r2
 8008268:	b29a      	uxth	r2, r3
 800826a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800826c:	801a      	strh	r2, [r3, #0]
 800826e:	e046      	b.n	80082fe <USB_EPStartXfer+0x318>
 8008270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008274:	095b      	lsrs	r3, r3, #5
 8008276:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800827a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800827e:	f003 031f 	and.w	r3, r3, #31
 8008282:	2b00      	cmp	r3, #0
 8008284:	d104      	bne.n	8008290 <USB_EPStartXfer+0x2aa>
 8008286:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800828a:	3b01      	subs	r3, #1
 800828c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008292:	881b      	ldrh	r3, [r3, #0]
 8008294:	b29a      	uxth	r2, r3
 8008296:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800829a:	b29b      	uxth	r3, r3
 800829c:	029b      	lsls	r3, r3, #10
 800829e:	b29b      	uxth	r3, r3
 80082a0:	4313      	orrs	r3, r2
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082ac:	b29a      	uxth	r2, r3
 80082ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b0:	801a      	strh	r2, [r3, #0]
 80082b2:	e024      	b.n	80082fe <USB_EPStartXfer+0x318>
 80082b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	785b      	ldrb	r3, [r3, #1]
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d11c      	bne.n	80082fe <USB_EPStartXfer+0x318>
 80082c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	461a      	mov	r2, r3
 80082d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d8:	4413      	add	r3, r2
 80082da:	633b      	str	r3, [r7, #48]	@ 0x30
 80082dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	011a      	lsls	r2, r3, #4
 80082ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ec:	4413      	add	r3, r2
 80082ee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80082f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80082f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082f8:	b29a      	uxth	r2, r3
 80082fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082fc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80082fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008302:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	895b      	ldrh	r3, [r3, #10]
 800830a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800830e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008312:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	6959      	ldr	r1, [r3, #20]
 800831a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800831e:	b29b      	uxth	r3, r3
 8008320:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008324:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008328:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800832c:	6800      	ldr	r0, [r0, #0]
 800832e:	f001 fb3a 	bl	80099a6 <USB_WritePMA>
            ep->xfer_buff += len;
 8008332:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008336:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	695a      	ldr	r2, [r3, #20]
 800833e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008342:	441a      	add	r2, r3
 8008344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008348:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008354:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	6a1a      	ldr	r2, [r3, #32]
 800835c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008360:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	691b      	ldr	r3, [r3, #16]
 8008368:	429a      	cmp	r2, r3
 800836a:	d90f      	bls.n	800838c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800836c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008370:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	6a1a      	ldr	r2, [r3, #32]
 8008378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800837c:	1ad2      	subs	r2, r2, r3
 800837e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008382:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	621a      	str	r2, [r3, #32]
 800838a:	e00e      	b.n	80083aa <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800838c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008390:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	6a1b      	ldr	r3, [r3, #32]
 8008398:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800839c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2200      	movs	r2, #0
 80083a8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80083aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	785b      	ldrb	r3, [r3, #1]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d177      	bne.n	80084aa <USB_EPStartXfer+0x4c4>
 80083ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	61bb      	str	r3, [r7, #24]
 80083c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	461a      	mov	r2, r3
 80083d8:	69bb      	ldr	r3, [r7, #24]
 80083da:	4413      	add	r3, r2
 80083dc:	61bb      	str	r3, [r7, #24]
 80083de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	011a      	lsls	r2, r3, #4
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	4413      	add	r3, r2
 80083f0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80083f4:	617b      	str	r3, [r7, #20]
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	881b      	ldrh	r3, [r3, #0]
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008400:	b29a      	uxth	r2, r3
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	801a      	strh	r2, [r3, #0]
 8008406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800840a:	2b00      	cmp	r3, #0
 800840c:	d10a      	bne.n	8008424 <USB_EPStartXfer+0x43e>
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	881b      	ldrh	r3, [r3, #0]
 8008412:	b29b      	uxth	r3, r3
 8008414:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008418:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800841c:	b29a      	uxth	r2, r3
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	801a      	strh	r2, [r3, #0]
 8008422:	e06d      	b.n	8008500 <USB_EPStartXfer+0x51a>
 8008424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008428:	2b3e      	cmp	r3, #62	@ 0x3e
 800842a:	d81c      	bhi.n	8008466 <USB_EPStartXfer+0x480>
 800842c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008430:	085b      	lsrs	r3, r3, #1
 8008432:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008436:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800843a:	f003 0301 	and.w	r3, r3, #1
 800843e:	2b00      	cmp	r3, #0
 8008440:	d004      	beq.n	800844c <USB_EPStartXfer+0x466>
 8008442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008446:	3301      	adds	r3, #1
 8008448:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	881b      	ldrh	r3, [r3, #0]
 8008450:	b29a      	uxth	r2, r3
 8008452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008456:	b29b      	uxth	r3, r3
 8008458:	029b      	lsls	r3, r3, #10
 800845a:	b29b      	uxth	r3, r3
 800845c:	4313      	orrs	r3, r2
 800845e:	b29a      	uxth	r2, r3
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	801a      	strh	r2, [r3, #0]
 8008464:	e04c      	b.n	8008500 <USB_EPStartXfer+0x51a>
 8008466:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800846a:	095b      	lsrs	r3, r3, #5
 800846c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008474:	f003 031f 	and.w	r3, r3, #31
 8008478:	2b00      	cmp	r3, #0
 800847a:	d104      	bne.n	8008486 <USB_EPStartXfer+0x4a0>
 800847c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008480:	3b01      	subs	r3, #1
 8008482:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	881b      	ldrh	r3, [r3, #0]
 800848a:	b29a      	uxth	r2, r3
 800848c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008490:	b29b      	uxth	r3, r3
 8008492:	029b      	lsls	r3, r3, #10
 8008494:	b29b      	uxth	r3, r3
 8008496:	4313      	orrs	r3, r2
 8008498:	b29b      	uxth	r3, r3
 800849a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800849e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084a2:	b29a      	uxth	r2, r3
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	801a      	strh	r2, [r3, #0]
 80084a8:	e02a      	b.n	8008500 <USB_EPStartXfer+0x51a>
 80084aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	785b      	ldrb	r3, [r3, #1]
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d122      	bne.n	8008500 <USB_EPStartXfer+0x51a>
 80084ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	623b      	str	r3, [r7, #32]
 80084c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	461a      	mov	r2, r3
 80084d8:	6a3b      	ldr	r3, [r7, #32]
 80084da:	4413      	add	r3, r2
 80084dc:	623b      	str	r3, [r7, #32]
 80084de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	011a      	lsls	r2, r3, #4
 80084ec:	6a3b      	ldr	r3, [r7, #32]
 80084ee:	4413      	add	r3, r2
 80084f0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80084f4:	61fb      	str	r3, [r7, #28]
 80084f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008504:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	891b      	ldrh	r3, [r3, #8]
 800850c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008514:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	6959      	ldr	r1, [r3, #20]
 800851c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008520:	b29b      	uxth	r3, r3
 8008522:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008526:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800852a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800852e:	6800      	ldr	r0, [r0, #0]
 8008530:	f001 fa39 	bl	80099a6 <USB_WritePMA>
 8008534:	e3ee      	b.n	8008d14 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008536:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800853a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	785b      	ldrb	r3, [r3, #1]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d177      	bne.n	8008636 <USB_EPStartXfer+0x650>
 8008546:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800854a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008552:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008556:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008560:	b29b      	uxth	r3, r3
 8008562:	461a      	mov	r2, r3
 8008564:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008566:	4413      	add	r3, r2
 8008568:	64bb      	str	r3, [r7, #72]	@ 0x48
 800856a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800856e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	011a      	lsls	r2, r3, #4
 8008578:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800857a:	4413      	add	r3, r2
 800857c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008580:	647b      	str	r3, [r7, #68]	@ 0x44
 8008582:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008584:	881b      	ldrh	r3, [r3, #0]
 8008586:	b29b      	uxth	r3, r3
 8008588:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800858c:	b29a      	uxth	r2, r3
 800858e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008590:	801a      	strh	r2, [r3, #0]
 8008592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008596:	2b00      	cmp	r3, #0
 8008598:	d10a      	bne.n	80085b0 <USB_EPStartXfer+0x5ca>
 800859a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800859c:	881b      	ldrh	r3, [r3, #0]
 800859e:	b29b      	uxth	r3, r3
 80085a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085a8:	b29a      	uxth	r2, r3
 80085aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085ac:	801a      	strh	r2, [r3, #0]
 80085ae:	e06d      	b.n	800868c <USB_EPStartXfer+0x6a6>
 80085b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80085b6:	d81c      	bhi.n	80085f2 <USB_EPStartXfer+0x60c>
 80085b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085bc:	085b      	lsrs	r3, r3, #1
 80085be:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80085c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085c6:	f003 0301 	and.w	r3, r3, #1
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d004      	beq.n	80085d8 <USB_EPStartXfer+0x5f2>
 80085ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80085d2:	3301      	adds	r3, #1
 80085d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80085d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085da:	881b      	ldrh	r3, [r3, #0]
 80085dc:	b29a      	uxth	r2, r3
 80085de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	029b      	lsls	r3, r3, #10
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	4313      	orrs	r3, r2
 80085ea:	b29a      	uxth	r2, r3
 80085ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085ee:	801a      	strh	r2, [r3, #0]
 80085f0:	e04c      	b.n	800868c <USB_EPStartXfer+0x6a6>
 80085f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085f6:	095b      	lsrs	r3, r3, #5
 80085f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80085fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008600:	f003 031f 	and.w	r3, r3, #31
 8008604:	2b00      	cmp	r3, #0
 8008606:	d104      	bne.n	8008612 <USB_EPStartXfer+0x62c>
 8008608:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800860c:	3b01      	subs	r3, #1
 800860e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008612:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008614:	881b      	ldrh	r3, [r3, #0]
 8008616:	b29a      	uxth	r2, r3
 8008618:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800861c:	b29b      	uxth	r3, r3
 800861e:	029b      	lsls	r3, r3, #10
 8008620:	b29b      	uxth	r3, r3
 8008622:	4313      	orrs	r3, r2
 8008624:	b29b      	uxth	r3, r3
 8008626:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800862a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800862e:	b29a      	uxth	r2, r3
 8008630:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008632:	801a      	strh	r2, [r3, #0]
 8008634:	e02a      	b.n	800868c <USB_EPStartXfer+0x6a6>
 8008636:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800863a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	785b      	ldrb	r3, [r3, #1]
 8008642:	2b01      	cmp	r3, #1
 8008644:	d122      	bne.n	800868c <USB_EPStartXfer+0x6a6>
 8008646:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800864a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	653b      	str	r3, [r7, #80]	@ 0x50
 8008652:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008656:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008660:	b29b      	uxth	r3, r3
 8008662:	461a      	mov	r2, r3
 8008664:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008666:	4413      	add	r3, r2
 8008668:	653b      	str	r3, [r7, #80]	@ 0x50
 800866a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800866e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	011a      	lsls	r2, r3, #4
 8008678:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800867a:	4413      	add	r3, r2
 800867c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008680:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008682:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008686:	b29a      	uxth	r2, r3
 8008688:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800868a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800868c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008690:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	891b      	ldrh	r3, [r3, #8]
 8008698:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800869c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	6959      	ldr	r1, [r3, #20]
 80086a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80086b2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80086b6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80086ba:	6800      	ldr	r0, [r0, #0]
 80086bc:	f001 f973 	bl	80099a6 <USB_WritePMA>
            ep->xfer_buff += len;
 80086c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	695a      	ldr	r2, [r3, #20]
 80086cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086d0:	441a      	add	r2, r3
 80086d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80086de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	6a1a      	ldr	r2, [r3, #32]
 80086ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d90f      	bls.n	800871a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80086fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	6a1a      	ldr	r2, [r3, #32]
 8008706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800870a:	1ad2      	subs	r2, r2, r3
 800870c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008710:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	621a      	str	r2, [r3, #32]
 8008718:	e00e      	b.n	8008738 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800871a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800871e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	6a1b      	ldr	r3, [r3, #32]
 8008726:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800872a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800872e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2200      	movs	r2, #0
 8008736:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008738:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800873c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	643b      	str	r3, [r7, #64]	@ 0x40
 8008744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008748:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	785b      	ldrb	r3, [r3, #1]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d177      	bne.n	8008844 <USB_EPStartXfer+0x85e>
 8008754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008758:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008764:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800876e:	b29b      	uxth	r3, r3
 8008770:	461a      	mov	r2, r3
 8008772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008774:	4413      	add	r3, r2
 8008776:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008778:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800877c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	011a      	lsls	r2, r3, #4
 8008786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008788:	4413      	add	r3, r2
 800878a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800878e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008792:	881b      	ldrh	r3, [r3, #0]
 8008794:	b29b      	uxth	r3, r3
 8008796:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800879a:	b29a      	uxth	r2, r3
 800879c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800879e:	801a      	strh	r2, [r3, #0]
 80087a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d10a      	bne.n	80087be <USB_EPStartXfer+0x7d8>
 80087a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087aa:	881b      	ldrh	r3, [r3, #0]
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087b6:	b29a      	uxth	r2, r3
 80087b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087ba:	801a      	strh	r2, [r3, #0]
 80087bc:	e067      	b.n	800888e <USB_EPStartXfer+0x8a8>
 80087be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087c2:	2b3e      	cmp	r3, #62	@ 0x3e
 80087c4:	d81c      	bhi.n	8008800 <USB_EPStartXfer+0x81a>
 80087c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087ca:	085b      	lsrs	r3, r3, #1
 80087cc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80087d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087d4:	f003 0301 	and.w	r3, r3, #1
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d004      	beq.n	80087e6 <USB_EPStartXfer+0x800>
 80087dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087e0:	3301      	adds	r3, #1
 80087e2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80087e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087e8:	881b      	ldrh	r3, [r3, #0]
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	029b      	lsls	r3, r3, #10
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	4313      	orrs	r3, r2
 80087f8:	b29a      	uxth	r2, r3
 80087fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087fc:	801a      	strh	r2, [r3, #0]
 80087fe:	e046      	b.n	800888e <USB_EPStartXfer+0x8a8>
 8008800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008804:	095b      	lsrs	r3, r3, #5
 8008806:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800880a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800880e:	f003 031f 	and.w	r3, r3, #31
 8008812:	2b00      	cmp	r3, #0
 8008814:	d104      	bne.n	8008820 <USB_EPStartXfer+0x83a>
 8008816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800881a:	3b01      	subs	r3, #1
 800881c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008822:	881b      	ldrh	r3, [r3, #0]
 8008824:	b29a      	uxth	r2, r3
 8008826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800882a:	b29b      	uxth	r3, r3
 800882c:	029b      	lsls	r3, r3, #10
 800882e:	b29b      	uxth	r3, r3
 8008830:	4313      	orrs	r3, r2
 8008832:	b29b      	uxth	r3, r3
 8008834:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008838:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800883c:	b29a      	uxth	r2, r3
 800883e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008840:	801a      	strh	r2, [r3, #0]
 8008842:	e024      	b.n	800888e <USB_EPStartXfer+0x8a8>
 8008844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008848:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	785b      	ldrb	r3, [r3, #1]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d11c      	bne.n	800888e <USB_EPStartXfer+0x8a8>
 8008854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008858:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008862:	b29b      	uxth	r3, r3
 8008864:	461a      	mov	r2, r3
 8008866:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008868:	4413      	add	r3, r2
 800886a:	643b      	str	r3, [r7, #64]	@ 0x40
 800886c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008870:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	011a      	lsls	r2, r3, #4
 800887a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800887c:	4413      	add	r3, r2
 800887e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008882:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008888:	b29a      	uxth	r2, r3
 800888a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800888c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800888e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008892:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	895b      	ldrh	r3, [r3, #10]
 800889a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800889e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	6959      	ldr	r1, [r3, #20]
 80088aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80088b4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80088b8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80088bc:	6800      	ldr	r0, [r0, #0]
 80088be:	f001 f872 	bl	80099a6 <USB_WritePMA>
 80088c2:	e227      	b.n	8008d14 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80088c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	6a1b      	ldr	r3, [r3, #32]
 80088d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80088d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	4413      	add	r3, r2
 80088ee:	881b      	ldrh	r3, [r3, #0]
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80088f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088fa:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80088fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008902:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800890c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	441a      	add	r2, r3
 8008918:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800891c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008920:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008924:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008928:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800892c:	b29b      	uxth	r3, r3
 800892e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008930:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008934:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800893c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008940:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800894a:	b29b      	uxth	r3, r3
 800894c:	461a      	mov	r2, r3
 800894e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008950:	4413      	add	r3, r2
 8008952:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008954:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008958:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	011a      	lsls	r2, r3, #4
 8008962:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008964:	4413      	add	r3, r2
 8008966:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800896a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800896c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008970:	b29a      	uxth	r2, r3
 8008972:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008974:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008976:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800897a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	891b      	ldrh	r3, [r3, #8]
 8008982:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008986:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800898a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	6959      	ldr	r1, [r3, #20]
 8008992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008996:	b29b      	uxth	r3, r3
 8008998:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800899c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80089a0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80089a4:	6800      	ldr	r0, [r0, #0]
 80089a6:	f000 fffe 	bl	80099a6 <USB_WritePMA>
 80089aa:	e1b3      	b.n	8008d14 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80089ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	6a1a      	ldr	r2, [r3, #32]
 80089b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089bc:	1ad2      	subs	r2, r2, r3
 80089be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80089ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	4413      	add	r3, r2
 80089e4:	881b      	ldrh	r3, [r3, #0]
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f000 80c6 	beq.w	8008b7e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80089f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80089fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	785b      	ldrb	r3, [r3, #1]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d177      	bne.n	8008afe <USB_EPStartXfer+0xb18>
 8008a0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008a1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a2e:	4413      	add	r3, r2
 8008a30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008a32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	011a      	lsls	r2, r3, #4
 8008a40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a42:	4413      	add	r3, r2
 8008a44:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008a48:	667b      	str	r3, [r7, #100]	@ 0x64
 8008a4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a4c:	881b      	ldrh	r3, [r3, #0]
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a54:	b29a      	uxth	r2, r3
 8008a56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a58:	801a      	strh	r2, [r3, #0]
 8008a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d10a      	bne.n	8008a78 <USB_EPStartXfer+0xa92>
 8008a62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a64:	881b      	ldrh	r3, [r3, #0]
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a70:	b29a      	uxth	r2, r3
 8008a72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a74:	801a      	strh	r2, [r3, #0]
 8008a76:	e067      	b.n	8008b48 <USB_EPStartXfer+0xb62>
 8008a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8008a7e:	d81c      	bhi.n	8008aba <USB_EPStartXfer+0xad4>
 8008a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a84:	085b      	lsrs	r3, r3, #1
 8008a86:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a8e:	f003 0301 	and.w	r3, r3, #1
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d004      	beq.n	8008aa0 <USB_EPStartXfer+0xaba>
 8008a96:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008aa0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008aa2:	881b      	ldrh	r3, [r3, #0]
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	029b      	lsls	r3, r3, #10
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	b29a      	uxth	r2, r3
 8008ab4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ab6:	801a      	strh	r2, [r3, #0]
 8008ab8:	e046      	b.n	8008b48 <USB_EPStartXfer+0xb62>
 8008aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008abe:	095b      	lsrs	r3, r3, #5
 8008ac0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ac8:	f003 031f 	and.w	r3, r3, #31
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d104      	bne.n	8008ada <USB_EPStartXfer+0xaf4>
 8008ad0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008ad4:	3b01      	subs	r3, #1
 8008ad6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008ada:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008adc:	881b      	ldrh	r3, [r3, #0]
 8008ade:	b29a      	uxth	r2, r3
 8008ae0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	029b      	lsls	r3, r3, #10
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	4313      	orrs	r3, r2
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008af2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008af6:	b29a      	uxth	r2, r3
 8008af8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008afa:	801a      	strh	r2, [r3, #0]
 8008afc:	e024      	b.n	8008b48 <USB_EPStartXfer+0xb62>
 8008afe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	785b      	ldrb	r3, [r3, #1]
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d11c      	bne.n	8008b48 <USB_EPStartXfer+0xb62>
 8008b0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	461a      	mov	r2, r3
 8008b20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b22:	4413      	add	r3, r2
 8008b24:	673b      	str	r3, [r7, #112]	@ 0x70
 8008b26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	011a      	lsls	r2, r3, #4
 8008b34:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b36:	4413      	add	r3, r2
 8008b38:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008b3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b42:	b29a      	uxth	r2, r3
 8008b44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b46:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008b48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	895b      	ldrh	r3, [r3, #10]
 8008b54:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	6959      	ldr	r1, [r3, #20]
 8008b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008b6e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008b72:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008b76:	6800      	ldr	r0, [r0, #0]
 8008b78:	f000 ff15 	bl	80099a6 <USB_WritePMA>
 8008b7c:	e0ca      	b.n	8008d14 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008b7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	785b      	ldrb	r3, [r3, #1]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d177      	bne.n	8008c7e <USB_EPStartXfer+0xc98>
 8008b8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008b9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	461a      	mov	r2, r3
 8008bac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008bae:	4413      	add	r3, r2
 8008bb0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008bb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	011a      	lsls	r2, r3, #4
 8008bc0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008bc2:	4413      	add	r3, r2
 8008bc4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008bc8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008bca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008bcc:	881b      	ldrh	r3, [r3, #0]
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008bd4:	b29a      	uxth	r2, r3
 8008bd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008bd8:	801a      	strh	r2, [r3, #0]
 8008bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d10a      	bne.n	8008bf8 <USB_EPStartXfer+0xc12>
 8008be2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008be4:	881b      	ldrh	r3, [r3, #0]
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bf0:	b29a      	uxth	r2, r3
 8008bf2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008bf4:	801a      	strh	r2, [r3, #0]
 8008bf6:	e073      	b.n	8008ce0 <USB_EPStartXfer+0xcfa>
 8008bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bfc:	2b3e      	cmp	r3, #62	@ 0x3e
 8008bfe:	d81c      	bhi.n	8008c3a <USB_EPStartXfer+0xc54>
 8008c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c04:	085b      	lsrs	r3, r3, #1
 8008c06:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c0e:	f003 0301 	and.w	r3, r3, #1
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d004      	beq.n	8008c20 <USB_EPStartXfer+0xc3a>
 8008c16:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008c20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008c22:	881b      	ldrh	r3, [r3, #0]
 8008c24:	b29a      	uxth	r2, r3
 8008c26:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	029b      	lsls	r3, r3, #10
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	4313      	orrs	r3, r2
 8008c32:	b29a      	uxth	r2, r3
 8008c34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008c36:	801a      	strh	r2, [r3, #0]
 8008c38:	e052      	b.n	8008ce0 <USB_EPStartXfer+0xcfa>
 8008c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c3e:	095b      	lsrs	r3, r3, #5
 8008c40:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c48:	f003 031f 	and.w	r3, r3, #31
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d104      	bne.n	8008c5a <USB_EPStartXfer+0xc74>
 8008c50:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008c54:	3b01      	subs	r3, #1
 8008c56:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008c5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008c5c:	881b      	ldrh	r3, [r3, #0]
 8008c5e:	b29a      	uxth	r2, r3
 8008c60:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	029b      	lsls	r3, r3, #10
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c76:	b29a      	uxth	r2, r3
 8008c78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008c7a:	801a      	strh	r2, [r3, #0]
 8008c7c:	e030      	b.n	8008ce0 <USB_EPStartXfer+0xcfa>
 8008c7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	785b      	ldrb	r3, [r3, #1]
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d128      	bne.n	8008ce0 <USB_EPStartXfer+0xcfa>
 8008c8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ca0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	461a      	mov	r2, r3
 8008cae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008cb2:	4413      	add	r3, r2
 8008cb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008cb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	011a      	lsls	r2, r3, #4
 8008cc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008cca:	4413      	add	r3, r2
 8008ccc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008cd0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cd8:	b29a      	uxth	r2, r3
 8008cda:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008cde:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008ce0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ce4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	891b      	ldrh	r3, [r3, #8]
 8008cec:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008cf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	6959      	ldr	r1, [r3, #20]
 8008cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008d06:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008d0a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008d0e:	6800      	ldr	r0, [r0, #0]
 8008d10:	f000 fe49 	bl	80099a6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008d14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	4413      	add	r3, r2
 8008d2e:	881b      	ldrh	r3, [r3, #0]
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d3a:	817b      	strh	r3, [r7, #10]
 8008d3c:	897b      	ldrh	r3, [r7, #10]
 8008d3e:	f083 0310 	eor.w	r3, r3, #16
 8008d42:	817b      	strh	r3, [r7, #10]
 8008d44:	897b      	ldrh	r3, [r7, #10]
 8008d46:	f083 0320 	eor.w	r3, r3, #32
 8008d4a:	817b      	strh	r3, [r7, #10]
 8008d4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	441a      	add	r2, r3
 8008d66:	897b      	ldrh	r3, [r7, #10]
 8008d68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d78:	b29b      	uxth	r3, r3
 8008d7a:	8013      	strh	r3, [r2, #0]
 8008d7c:	f000 bcdf 	b.w	800973e <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008d80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	7b1b      	ldrb	r3, [r3, #12]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	f040 80bc 	bne.w	8008f0a <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008d92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	699a      	ldr	r2, [r3, #24]
 8008d9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008da2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	691b      	ldr	r3, [r3, #16]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d917      	bls.n	8008dde <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8008dae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008db2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	691b      	ldr	r3, [r3, #16]
 8008dba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8008dbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	699a      	ldr	r2, [r3, #24]
 8008dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dce:	1ad2      	subs	r2, r2, r3
 8008dd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	619a      	str	r2, [r3, #24]
 8008ddc:	e00e      	b.n	8008dfc <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8008dde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008de2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	699b      	ldr	r3, [r3, #24]
 8008dea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8008dee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008df2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008dfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008e0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008e20:	4413      	add	r3, r2
 8008e22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008e26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	011a      	lsls	r2, r3, #4
 8008e34:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008e38:	4413      	add	r3, r2
 8008e3a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008e3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008e42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e46:	881b      	ldrh	r3, [r3, #0]
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e4e:	b29a      	uxth	r2, r3
 8008e50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e54:	801a      	strh	r2, [r3, #0]
 8008e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d10d      	bne.n	8008e7a <USB_EPStartXfer+0xe94>
 8008e5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e62:	881b      	ldrh	r3, [r3, #0]
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e6e:	b29a      	uxth	r2, r3
 8008e70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e74:	801a      	strh	r2, [r3, #0]
 8008e76:	f000 bc28 	b.w	80096ca <USB_EPStartXfer+0x16e4>
 8008e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e7e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008e80:	d81f      	bhi.n	8008ec2 <USB_EPStartXfer+0xedc>
 8008e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e86:	085b      	lsrs	r3, r3, #1
 8008e88:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e90:	f003 0301 	and.w	r3, r3, #1
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d004      	beq.n	8008ea2 <USB_EPStartXfer+0xebc>
 8008e98:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008ea2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ea6:	881b      	ldrh	r3, [r3, #0]
 8008ea8:	b29a      	uxth	r2, r3
 8008eaa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	029b      	lsls	r3, r3, #10
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	b29a      	uxth	r2, r3
 8008eb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ebc:	801a      	strh	r2, [r3, #0]
 8008ebe:	f000 bc04 	b.w	80096ca <USB_EPStartXfer+0x16e4>
 8008ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ec6:	095b      	lsrs	r3, r3, #5
 8008ec8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ed0:	f003 031f 	and.w	r3, r3, #31
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d104      	bne.n	8008ee2 <USB_EPStartXfer+0xefc>
 8008ed8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008edc:	3b01      	subs	r3, #1
 8008ede:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008ee2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ee6:	881b      	ldrh	r3, [r3, #0]
 8008ee8:	b29a      	uxth	r2, r3
 8008eea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	029b      	lsls	r3, r3, #10
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008efc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f00:	b29a      	uxth	r2, r3
 8008f02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008f06:	801a      	strh	r2, [r3, #0]
 8008f08:	e3df      	b.n	80096ca <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008f0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	78db      	ldrb	r3, [r3, #3]
 8008f16:	2b02      	cmp	r3, #2
 8008f18:	f040 8218 	bne.w	800934c <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008f1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	785b      	ldrb	r3, [r3, #1]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	f040 809d 	bne.w	8009068 <USB_EPStartXfer+0x1082>
 8008f2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008f3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f52:	4413      	add	r3, r2
 8008f54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008f58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	011a      	lsls	r2, r3, #4
 8008f66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f6a:	4413      	add	r3, r2
 8008f6c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008f70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008f74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008f78:	881b      	ldrh	r3, [r3, #0]
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f80:	b29a      	uxth	r2, r3
 8008f82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008f86:	801a      	strh	r2, [r3, #0]
 8008f88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	691b      	ldr	r3, [r3, #16]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d10c      	bne.n	8008fb2 <USB_EPStartXfer+0xfcc>
 8008f98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008f9c:	881b      	ldrh	r3, [r3, #0]
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008fae:	801a      	strh	r2, [r3, #0]
 8008fb0:	e08f      	b.n	80090d2 <USB_EPStartXfer+0x10ec>
 8008fb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	691b      	ldr	r3, [r3, #16]
 8008fbe:	2b3e      	cmp	r3, #62	@ 0x3e
 8008fc0:	d826      	bhi.n	8009010 <USB_EPStartXfer+0x102a>
 8008fc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	691b      	ldr	r3, [r3, #16]
 8008fce:	085b      	lsrs	r3, r3, #1
 8008fd0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008fd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	691b      	ldr	r3, [r3, #16]
 8008fe0:	f003 0301 	and.w	r3, r3, #1
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d004      	beq.n	8008ff2 <USB_EPStartXfer+0x100c>
 8008fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fec:	3301      	adds	r3, #1
 8008fee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008ff2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008ff6:	881b      	ldrh	r3, [r3, #0]
 8008ff8:	b29a      	uxth	r2, r3
 8008ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	029b      	lsls	r3, r3, #10
 8009002:	b29b      	uxth	r3, r3
 8009004:	4313      	orrs	r3, r2
 8009006:	b29a      	uxth	r2, r3
 8009008:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800900c:	801a      	strh	r2, [r3, #0]
 800900e:	e060      	b.n	80090d2 <USB_EPStartXfer+0x10ec>
 8009010:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009014:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	691b      	ldr	r3, [r3, #16]
 800901c:	095b      	lsrs	r3, r3, #5
 800901e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009022:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009026:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	691b      	ldr	r3, [r3, #16]
 800902e:	f003 031f 	and.w	r3, r3, #31
 8009032:	2b00      	cmp	r3, #0
 8009034:	d104      	bne.n	8009040 <USB_EPStartXfer+0x105a>
 8009036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800903a:	3b01      	subs	r3, #1
 800903c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009040:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009044:	881b      	ldrh	r3, [r3, #0]
 8009046:	b29a      	uxth	r2, r3
 8009048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800904c:	b29b      	uxth	r3, r3
 800904e:	029b      	lsls	r3, r3, #10
 8009050:	b29b      	uxth	r3, r3
 8009052:	4313      	orrs	r3, r2
 8009054:	b29b      	uxth	r3, r3
 8009056:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800905a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800905e:	b29a      	uxth	r2, r3
 8009060:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009064:	801a      	strh	r2, [r3, #0]
 8009066:	e034      	b.n	80090d2 <USB_EPStartXfer+0x10ec>
 8009068:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800906c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	785b      	ldrb	r3, [r3, #1]
 8009074:	2b01      	cmp	r3, #1
 8009076:	d12c      	bne.n	80090d2 <USB_EPStartXfer+0x10ec>
 8009078:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800907c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800908a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009094:	b29b      	uxth	r3, r3
 8009096:	461a      	mov	r2, r3
 8009098:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800909c:	4413      	add	r3, r2
 800909e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80090a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	011a      	lsls	r2, r3, #4
 80090b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80090b4:	4413      	add	r3, r2
 80090b6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80090ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80090be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	b29a      	uxth	r2, r3
 80090cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80090d0:	801a      	strh	r2, [r3, #0]
 80090d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80090e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	785b      	ldrb	r3, [r3, #1]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f040 809d 	bne.w	800922c <USB_EPStartXfer+0x1246>
 80090f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009104:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800910e:	b29b      	uxth	r3, r3
 8009110:	461a      	mov	r2, r3
 8009112:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009116:	4413      	add	r3, r2
 8009118:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800911c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009120:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	011a      	lsls	r2, r3, #4
 800912a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800912e:	4413      	add	r3, r2
 8009130:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009134:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009138:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800913c:	881b      	ldrh	r3, [r3, #0]
 800913e:	b29b      	uxth	r3, r3
 8009140:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009144:	b29a      	uxth	r2, r3
 8009146:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800914a:	801a      	strh	r2, [r3, #0]
 800914c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009150:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	691b      	ldr	r3, [r3, #16]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d10c      	bne.n	8009176 <USB_EPStartXfer+0x1190>
 800915c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009160:	881b      	ldrh	r3, [r3, #0]
 8009162:	b29b      	uxth	r3, r3
 8009164:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009168:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800916c:	b29a      	uxth	r2, r3
 800916e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009172:	801a      	strh	r2, [r3, #0]
 8009174:	e088      	b.n	8009288 <USB_EPStartXfer+0x12a2>
 8009176:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800917a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	691b      	ldr	r3, [r3, #16]
 8009182:	2b3e      	cmp	r3, #62	@ 0x3e
 8009184:	d826      	bhi.n	80091d4 <USB_EPStartXfer+0x11ee>
 8009186:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800918a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	691b      	ldr	r3, [r3, #16]
 8009192:	085b      	lsrs	r3, r3, #1
 8009194:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800919c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	691b      	ldr	r3, [r3, #16]
 80091a4:	f003 0301 	and.w	r3, r3, #1
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d004      	beq.n	80091b6 <USB_EPStartXfer+0x11d0>
 80091ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091b0:	3301      	adds	r3, #1
 80091b2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80091b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80091ba:	881b      	ldrh	r3, [r3, #0]
 80091bc:	b29a      	uxth	r2, r3
 80091be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	029b      	lsls	r3, r3, #10
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	4313      	orrs	r3, r2
 80091ca:	b29a      	uxth	r2, r3
 80091cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80091d0:	801a      	strh	r2, [r3, #0]
 80091d2:	e059      	b.n	8009288 <USB_EPStartXfer+0x12a2>
 80091d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	691b      	ldr	r3, [r3, #16]
 80091e0:	095b      	lsrs	r3, r3, #5
 80091e2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80091e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	691b      	ldr	r3, [r3, #16]
 80091f2:	f003 031f 	and.w	r3, r3, #31
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d104      	bne.n	8009204 <USB_EPStartXfer+0x121e>
 80091fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091fe:	3b01      	subs	r3, #1
 8009200:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009204:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009208:	881b      	ldrh	r3, [r3, #0]
 800920a:	b29a      	uxth	r2, r3
 800920c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009210:	b29b      	uxth	r3, r3
 8009212:	029b      	lsls	r3, r3, #10
 8009214:	b29b      	uxth	r3, r3
 8009216:	4313      	orrs	r3, r2
 8009218:	b29b      	uxth	r3, r3
 800921a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800921e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009222:	b29a      	uxth	r2, r3
 8009224:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009228:	801a      	strh	r2, [r3, #0]
 800922a:	e02d      	b.n	8009288 <USB_EPStartXfer+0x12a2>
 800922c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009230:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	785b      	ldrb	r3, [r3, #1]
 8009238:	2b01      	cmp	r3, #1
 800923a:	d125      	bne.n	8009288 <USB_EPStartXfer+0x12a2>
 800923c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009240:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800924a:	b29b      	uxth	r3, r3
 800924c:	461a      	mov	r2, r3
 800924e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009252:	4413      	add	r3, r2
 8009254:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009258:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800925c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	011a      	lsls	r2, r3, #4
 8009266:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800926a:	4413      	add	r3, r2
 800926c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009270:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009278:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	691b      	ldr	r3, [r3, #16]
 8009280:	b29a      	uxth	r2, r3
 8009282:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009286:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800928c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	69db      	ldr	r3, [r3, #28]
 8009294:	2b00      	cmp	r3, #0
 8009296:	f000 8218 	beq.w	80096ca <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800929a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800929e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	4413      	add	r3, r2
 80092b4:	881b      	ldrh	r3, [r3, #0]
 80092b6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80092ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80092be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d005      	beq.n	80092d2 <USB_EPStartXfer+0x12ec>
 80092c6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80092ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d10d      	bne.n	80092ee <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80092d2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80092d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80092da:	2b00      	cmp	r3, #0
 80092dc:	f040 81f5 	bne.w	80096ca <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80092e0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80092e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	f040 81ee 	bne.w	80096ca <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80092ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	4413      	add	r3, r2
 8009308:	881b      	ldrh	r3, [r3, #0]
 800930a:	b29b      	uxth	r3, r3
 800930c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009310:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009314:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8009318:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800931c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009326:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	441a      	add	r2, r3
 8009332:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8009336:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800933a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800933e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009342:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009346:	b29b      	uxth	r3, r3
 8009348:	8013      	strh	r3, [r2, #0]
 800934a:	e1be      	b.n	80096ca <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800934c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009350:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	78db      	ldrb	r3, [r3, #3]
 8009358:	2b01      	cmp	r3, #1
 800935a:	f040 81b4 	bne.w	80096c6 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800935e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009362:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	699a      	ldr	r2, [r3, #24]
 800936a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800936e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	691b      	ldr	r3, [r3, #16]
 8009376:	429a      	cmp	r2, r3
 8009378:	d917      	bls.n	80093aa <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800937a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800937e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800938a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800938e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	699a      	ldr	r2, [r3, #24]
 8009396:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800939a:	1ad2      	subs	r2, r2, r3
 800939c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	619a      	str	r2, [r3, #24]
 80093a8:	e00e      	b.n	80093c8 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 80093aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	699b      	ldr	r3, [r3, #24]
 80093b6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80093ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2200      	movs	r2, #0
 80093c6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80093c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	785b      	ldrb	r3, [r3, #1]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	f040 8085 	bne.w	80094e4 <USB_EPStartXfer+0x14fe>
 80093da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80093e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	461a      	mov	r2, r3
 80093fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80093fe:	4413      	add	r3, r2
 8009400:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009408:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	011a      	lsls	r2, r3, #4
 8009412:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009416:	4413      	add	r3, r2
 8009418:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800941c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009420:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009424:	881b      	ldrh	r3, [r3, #0]
 8009426:	b29b      	uxth	r3, r3
 8009428:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800942c:	b29a      	uxth	r2, r3
 800942e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009432:	801a      	strh	r2, [r3, #0]
 8009434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009438:	2b00      	cmp	r3, #0
 800943a:	d10c      	bne.n	8009456 <USB_EPStartXfer+0x1470>
 800943c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009440:	881b      	ldrh	r3, [r3, #0]
 8009442:	b29b      	uxth	r3, r3
 8009444:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009448:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800944c:	b29a      	uxth	r2, r3
 800944e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009452:	801a      	strh	r2, [r3, #0]
 8009454:	e077      	b.n	8009546 <USB_EPStartXfer+0x1560>
 8009456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800945a:	2b3e      	cmp	r3, #62	@ 0x3e
 800945c:	d81e      	bhi.n	800949c <USB_EPStartXfer+0x14b6>
 800945e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009462:	085b      	lsrs	r3, r3, #1
 8009464:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800946c:	f003 0301 	and.w	r3, r3, #1
 8009470:	2b00      	cmp	r3, #0
 8009472:	d004      	beq.n	800947e <USB_EPStartXfer+0x1498>
 8009474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009478:	3301      	adds	r3, #1
 800947a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800947e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009482:	881b      	ldrh	r3, [r3, #0]
 8009484:	b29a      	uxth	r2, r3
 8009486:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800948a:	b29b      	uxth	r3, r3
 800948c:	029b      	lsls	r3, r3, #10
 800948e:	b29b      	uxth	r3, r3
 8009490:	4313      	orrs	r3, r2
 8009492:	b29a      	uxth	r2, r3
 8009494:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009498:	801a      	strh	r2, [r3, #0]
 800949a:	e054      	b.n	8009546 <USB_EPStartXfer+0x1560>
 800949c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094a0:	095b      	lsrs	r3, r3, #5
 80094a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80094a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094aa:	f003 031f 	and.w	r3, r3, #31
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d104      	bne.n	80094bc <USB_EPStartXfer+0x14d6>
 80094b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094b6:	3b01      	subs	r3, #1
 80094b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80094bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80094c0:	881b      	ldrh	r3, [r3, #0]
 80094c2:	b29a      	uxth	r2, r3
 80094c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	029b      	lsls	r3, r3, #10
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	4313      	orrs	r3, r2
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094da:	b29a      	uxth	r2, r3
 80094dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80094e0:	801a      	strh	r2, [r3, #0]
 80094e2:	e030      	b.n	8009546 <USB_EPStartXfer+0x1560>
 80094e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	785b      	ldrb	r3, [r3, #1]
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d128      	bne.n	8009546 <USB_EPStartXfer+0x1560>
 80094f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009502:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009506:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009510:	b29b      	uxth	r3, r3
 8009512:	461a      	mov	r2, r3
 8009514:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009518:	4413      	add	r3, r2
 800951a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800951e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009522:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	011a      	lsls	r2, r3, #4
 800952c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009530:	4413      	add	r3, r2
 8009532:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009536:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800953a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800953e:	b29a      	uxth	r2, r3
 8009540:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8009544:	801a      	strh	r2, [r3, #0]
 8009546:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800954a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009554:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009558:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	785b      	ldrb	r3, [r3, #1]
 8009560:	2b00      	cmp	r3, #0
 8009562:	f040 8085 	bne.w	8009670 <USB_EPStartXfer+0x168a>
 8009566:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800956a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009574:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009578:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009582:	b29b      	uxth	r3, r3
 8009584:	461a      	mov	r2, r3
 8009586:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800958a:	4413      	add	r3, r2
 800958c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009594:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	011a      	lsls	r2, r3, #4
 800959e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80095a2:	4413      	add	r3, r2
 80095a4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80095a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80095ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80095b0:	881b      	ldrh	r3, [r3, #0]
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80095b8:	b29a      	uxth	r2, r3
 80095ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80095be:	801a      	strh	r2, [r3, #0]
 80095c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d10c      	bne.n	80095e2 <USB_EPStartXfer+0x15fc>
 80095c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80095cc:	881b      	ldrh	r3, [r3, #0]
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095d8:	b29a      	uxth	r2, r3
 80095da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80095de:	801a      	strh	r2, [r3, #0]
 80095e0:	e073      	b.n	80096ca <USB_EPStartXfer+0x16e4>
 80095e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095e6:	2b3e      	cmp	r3, #62	@ 0x3e
 80095e8:	d81e      	bhi.n	8009628 <USB_EPStartXfer+0x1642>
 80095ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095ee:	085b      	lsrs	r3, r3, #1
 80095f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80095f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095f8:	f003 0301 	and.w	r3, r3, #1
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d004      	beq.n	800960a <USB_EPStartXfer+0x1624>
 8009600:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009604:	3301      	adds	r3, #1
 8009606:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800960a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800960e:	881b      	ldrh	r3, [r3, #0]
 8009610:	b29a      	uxth	r2, r3
 8009612:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009616:	b29b      	uxth	r3, r3
 8009618:	029b      	lsls	r3, r3, #10
 800961a:	b29b      	uxth	r3, r3
 800961c:	4313      	orrs	r3, r2
 800961e:	b29a      	uxth	r2, r3
 8009620:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009624:	801a      	strh	r2, [r3, #0]
 8009626:	e050      	b.n	80096ca <USB_EPStartXfer+0x16e4>
 8009628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800962c:	095b      	lsrs	r3, r3, #5
 800962e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009632:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009636:	f003 031f 	and.w	r3, r3, #31
 800963a:	2b00      	cmp	r3, #0
 800963c:	d104      	bne.n	8009648 <USB_EPStartXfer+0x1662>
 800963e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009642:	3b01      	subs	r3, #1
 8009644:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009648:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800964c:	881b      	ldrh	r3, [r3, #0]
 800964e:	b29a      	uxth	r2, r3
 8009650:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009654:	b29b      	uxth	r3, r3
 8009656:	029b      	lsls	r3, r3, #10
 8009658:	b29b      	uxth	r3, r3
 800965a:	4313      	orrs	r3, r2
 800965c:	b29b      	uxth	r3, r3
 800965e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009666:	b29a      	uxth	r2, r3
 8009668:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800966c:	801a      	strh	r2, [r3, #0]
 800966e:	e02c      	b.n	80096ca <USB_EPStartXfer+0x16e4>
 8009670:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009674:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	785b      	ldrb	r3, [r3, #1]
 800967c:	2b01      	cmp	r3, #1
 800967e:	d124      	bne.n	80096ca <USB_EPStartXfer+0x16e4>
 8009680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009684:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800968e:	b29b      	uxth	r3, r3
 8009690:	461a      	mov	r2, r3
 8009692:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009696:	4413      	add	r3, r2
 8009698:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800969c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	011a      	lsls	r2, r3, #4
 80096aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80096ae:	4413      	add	r3, r2
 80096b0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80096b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80096b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096bc:	b29a      	uxth	r2, r3
 80096be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80096c2:	801a      	strh	r2, [r3, #0]
 80096c4:	e001      	b.n	80096ca <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 80096c6:	2301      	movs	r3, #1
 80096c8:	e03a      	b.n	8009740 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80096ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	009b      	lsls	r3, r3, #2
 80096e2:	4413      	add	r3, r2
 80096e4:	881b      	ldrh	r3, [r3, #0]
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80096ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096f0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80096f4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80096f8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80096fc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009700:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009704:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009708:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800970c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009710:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800971a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	441a      	add	r2, r3
 8009726:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800972a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800972e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009732:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800973a:	b29b      	uxth	r3, r3
 800973c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800973e:	2300      	movs	r3, #0
}
 8009740:	4618      	mov	r0, r3
 8009742:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}

0800974a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800974a:	b480      	push	{r7}
 800974c:	b085      	sub	sp, #20
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
 8009752:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	785b      	ldrb	r3, [r3, #1]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d020      	beq.n	800979e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	4413      	add	r3, r2
 8009766:	881b      	ldrh	r3, [r3, #0]
 8009768:	b29b      	uxth	r3, r3
 800976a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800976e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009772:	81bb      	strh	r3, [r7, #12]
 8009774:	89bb      	ldrh	r3, [r7, #12]
 8009776:	f083 0310 	eor.w	r3, r3, #16
 800977a:	81bb      	strh	r3, [r7, #12]
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	441a      	add	r2, r3
 8009786:	89bb      	ldrh	r3, [r7, #12]
 8009788:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800978c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009790:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009798:	b29b      	uxth	r3, r3
 800979a:	8013      	strh	r3, [r2, #0]
 800979c:	e01f      	b.n	80097de <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	4413      	add	r3, r2
 80097a8:	881b      	ldrh	r3, [r3, #0]
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80097b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097b4:	81fb      	strh	r3, [r7, #14]
 80097b6:	89fb      	ldrh	r3, [r7, #14]
 80097b8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80097bc:	81fb      	strh	r3, [r7, #14]
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	441a      	add	r2, r3
 80097c8:	89fb      	ldrh	r3, [r7, #14]
 80097ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097da:	b29b      	uxth	r3, r3
 80097dc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80097de:	2300      	movs	r3, #0
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3714      	adds	r7, #20
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr

080097ec <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b087      	sub	sp, #28
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	7b1b      	ldrb	r3, [r3, #12]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	f040 809d 	bne.w	800993a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	785b      	ldrb	r3, [r3, #1]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d04c      	beq.n	80098a2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	4413      	add	r3, r2
 8009812:	881b      	ldrh	r3, [r3, #0]
 8009814:	823b      	strh	r3, [r7, #16]
 8009816:	8a3b      	ldrh	r3, [r7, #16]
 8009818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800981c:	2b00      	cmp	r3, #0
 800981e:	d01b      	beq.n	8009858 <USB_EPClearStall+0x6c>
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	4413      	add	r3, r2
 800982a:	881b      	ldrh	r3, [r3, #0]
 800982c:	b29b      	uxth	r3, r3
 800982e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009832:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009836:	81fb      	strh	r3, [r7, #14]
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	441a      	add	r2, r3
 8009842:	89fb      	ldrh	r3, [r7, #14]
 8009844:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009848:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800984c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009850:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009854:	b29b      	uxth	r3, r3
 8009856:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	78db      	ldrb	r3, [r3, #3]
 800985c:	2b01      	cmp	r3, #1
 800985e:	d06c      	beq.n	800993a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	4413      	add	r3, r2
 800986a:	881b      	ldrh	r3, [r3, #0]
 800986c:	b29b      	uxth	r3, r3
 800986e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009872:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009876:	81bb      	strh	r3, [r7, #12]
 8009878:	89bb      	ldrh	r3, [r7, #12]
 800987a:	f083 0320 	eor.w	r3, r3, #32
 800987e:	81bb      	strh	r3, [r7, #12]
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	781b      	ldrb	r3, [r3, #0]
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	441a      	add	r2, r3
 800988a:	89bb      	ldrh	r3, [r7, #12]
 800988c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009890:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009894:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009898:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800989c:	b29b      	uxth	r3, r3
 800989e:	8013      	strh	r3, [r2, #0]
 80098a0:	e04b      	b.n	800993a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	781b      	ldrb	r3, [r3, #0]
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	4413      	add	r3, r2
 80098ac:	881b      	ldrh	r3, [r3, #0]
 80098ae:	82fb      	strh	r3, [r7, #22]
 80098b0:	8afb      	ldrh	r3, [r7, #22]
 80098b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d01b      	beq.n	80098f2 <USB_EPClearStall+0x106>
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	4413      	add	r3, r2
 80098c4:	881b      	ldrh	r3, [r3, #0]
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80098cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098d0:	82bb      	strh	r3, [r7, #20]
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	441a      	add	r2, r3
 80098dc:	8abb      	ldrh	r3, [r7, #20]
 80098de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80098e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80098e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80098ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	009b      	lsls	r3, r3, #2
 80098fa:	4413      	add	r3, r2
 80098fc:	881b      	ldrh	r3, [r3, #0]
 80098fe:	b29b      	uxth	r3, r3
 8009900:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009904:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009908:	827b      	strh	r3, [r7, #18]
 800990a:	8a7b      	ldrh	r3, [r7, #18]
 800990c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009910:	827b      	strh	r3, [r7, #18]
 8009912:	8a7b      	ldrh	r3, [r7, #18]
 8009914:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009918:	827b      	strh	r3, [r7, #18]
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	009b      	lsls	r3, r3, #2
 8009922:	441a      	add	r2, r3
 8009924:	8a7b      	ldrh	r3, [r7, #18]
 8009926:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800992a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800992e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009932:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009936:	b29b      	uxth	r3, r3
 8009938:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800993a:	2300      	movs	r3, #0
}
 800993c:	4618      	mov	r0, r3
 800993e:	371c      	adds	r7, #28
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009948:	b480      	push	{r7}
 800994a:	b083      	sub	sp, #12
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	460b      	mov	r3, r1
 8009952:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009954:	78fb      	ldrb	r3, [r7, #3]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d103      	bne.n	8009962 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2280      	movs	r2, #128	@ 0x80
 800995e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8009962:	2300      	movs	r3, #0
}
 8009964:	4618      	mov	r0, r3
 8009966:	370c      	adds	r7, #12
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009970:	b480      	push	{r7}
 8009972:	b083      	sub	sp, #12
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009978:	2300      	movs	r3, #0
}
 800997a:	4618      	mov	r0, r3
 800997c:	370c      	adds	r7, #12
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr

08009986 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8009986:	b480      	push	{r7}
 8009988:	b085      	sub	sp, #20
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009994:	b29b      	uxth	r3, r3
 8009996:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009998:	68fb      	ldr	r3, [r7, #12]
}
 800999a:	4618      	mov	r0, r3
 800999c:	3714      	adds	r7, #20
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr

080099a6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80099a6:	b480      	push	{r7}
 80099a8:	b08b      	sub	sp, #44	@ 0x2c
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	60f8      	str	r0, [r7, #12]
 80099ae:	60b9      	str	r1, [r7, #8]
 80099b0:	4611      	mov	r1, r2
 80099b2:	461a      	mov	r2, r3
 80099b4:	460b      	mov	r3, r1
 80099b6:	80fb      	strh	r3, [r7, #6]
 80099b8:	4613      	mov	r3, r2
 80099ba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80099bc:	88bb      	ldrh	r3, [r7, #4]
 80099be:	3301      	adds	r3, #1
 80099c0:	085b      	lsrs	r3, r3, #1
 80099c2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80099cc:	88fb      	ldrh	r3, [r7, #6]
 80099ce:	005a      	lsls	r2, r3, #1
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	4413      	add	r3, r2
 80099d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80099d8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80099da:	69bb      	ldr	r3, [r7, #24]
 80099dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80099de:	e01e      	b.n	8009a1e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80099e0:	69fb      	ldr	r3, [r7, #28]
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80099e6:	69fb      	ldr	r3, [r7, #28]
 80099e8:	3301      	adds	r3, #1
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	021b      	lsls	r3, r3, #8
 80099ee:	b21a      	sxth	r2, r3
 80099f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80099f4:	4313      	orrs	r3, r2
 80099f6:	b21b      	sxth	r3, r3
 80099f8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80099fa:	6a3b      	ldr	r3, [r7, #32]
 80099fc:	8a7a      	ldrh	r2, [r7, #18]
 80099fe:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009a00:	6a3b      	ldr	r3, [r7, #32]
 8009a02:	3302      	adds	r3, #2
 8009a04:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009a06:	6a3b      	ldr	r3, [r7, #32]
 8009a08:	3302      	adds	r3, #2
 8009a0a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8009a0c:	69fb      	ldr	r3, [r7, #28]
 8009a0e:	3301      	adds	r3, #1
 8009a10:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009a12:	69fb      	ldr	r3, [r7, #28]
 8009a14:	3301      	adds	r3, #1
 8009a16:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a1a:	3b01      	subs	r3, #1
 8009a1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d1dd      	bne.n	80099e0 <USB_WritePMA+0x3a>
  }
}
 8009a24:	bf00      	nop
 8009a26:	bf00      	nop
 8009a28:	372c      	adds	r7, #44	@ 0x2c
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr

08009a32 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009a32:	b480      	push	{r7}
 8009a34:	b08b      	sub	sp, #44	@ 0x2c
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	60f8      	str	r0, [r7, #12]
 8009a3a:	60b9      	str	r1, [r7, #8]
 8009a3c:	4611      	mov	r1, r2
 8009a3e:	461a      	mov	r2, r3
 8009a40:	460b      	mov	r3, r1
 8009a42:	80fb      	strh	r3, [r7, #6]
 8009a44:	4613      	mov	r3, r2
 8009a46:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009a48:	88bb      	ldrh	r3, [r7, #4]
 8009a4a:	085b      	lsrs	r3, r3, #1
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009a58:	88fb      	ldrh	r3, [r7, #6]
 8009a5a:	005a      	lsls	r2, r3, #1
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	4413      	add	r3, r2
 8009a60:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009a64:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a6a:	e01b      	b.n	8009aa4 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009a6c:	6a3b      	ldr	r3, [r7, #32]
 8009a6e:	881b      	ldrh	r3, [r3, #0]
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009a74:	6a3b      	ldr	r3, [r7, #32]
 8009a76:	3302      	adds	r3, #2
 8009a78:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	b2da      	uxtb	r2, r3
 8009a7e:	69fb      	ldr	r3, [r7, #28]
 8009a80:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009a82:	69fb      	ldr	r3, [r7, #28]
 8009a84:	3301      	adds	r3, #1
 8009a86:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	0a1b      	lsrs	r3, r3, #8
 8009a8c:	b2da      	uxtb	r2, r3
 8009a8e:	69fb      	ldr	r3, [r7, #28]
 8009a90:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009a92:	69fb      	ldr	r3, [r7, #28]
 8009a94:	3301      	adds	r3, #1
 8009a96:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009a98:	6a3b      	ldr	r3, [r7, #32]
 8009a9a:	3302      	adds	r3, #2
 8009a9c:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8009a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa0:	3b01      	subs	r3, #1
 8009aa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8009aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d1e0      	bne.n	8009a6c <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009aaa:	88bb      	ldrh	r3, [r7, #4]
 8009aac:	f003 0301 	and.w	r3, r3, #1
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d007      	beq.n	8009ac6 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8009ab6:	6a3b      	ldr	r3, [r7, #32]
 8009ab8:	881b      	ldrh	r3, [r3, #0]
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	b2da      	uxtb	r2, r3
 8009ac2:	69fb      	ldr	r3, [r7, #28]
 8009ac4:	701a      	strb	r2, [r3, #0]
  }
}
 8009ac6:	bf00      	nop
 8009ac8:	372c      	adds	r7, #44	@ 0x2c
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr

08009ad2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	b084      	sub	sp, #16
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	60f8      	str	r0, [r7, #12]
 8009ada:	60b9      	str	r1, [r7, #8]
 8009adc:	4613      	mov	r3, r2
 8009ade:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d101      	bne.n	8009aea <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009ae6:	2302      	movs	r3, #2
 8009ae8:	e01a      	b.n	8009b20 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d003      	beq.n	8009afc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2200      	movs	r2, #0
 8009af8:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d003      	beq.n	8009b0a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	68ba      	ldr	r2, [r7, #8]
 8009b06:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	79fa      	ldrb	r2, [r7, #7]
 8009b16:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009b18:	68f8      	ldr	r0, [r7, #12]
 8009b1a:	f7f8 fc7f 	bl	800241c <USBD_LL_Init>

  return USBD_OK;
 8009b1e:	2300      	movs	r3, #0
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3710      	adds	r7, #16
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b085      	sub	sp, #20
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009b32:	2300      	movs	r3, #0
 8009b34:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d006      	beq.n	8009b4a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	683a      	ldr	r2, [r7, #0]
 8009b40:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8009b44:	2300      	movs	r3, #0
 8009b46:	73fb      	strb	r3, [r7, #15]
 8009b48:	e001      	b.n	8009b4e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009b4a:	2302      	movs	r3, #2
 8009b4c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3714      	adds	r7, #20
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f7f8 fca1 	bl	80024ac <USBD_LL_Start>

  return USBD_OK;
 8009b6a:	2300      	movs	r3, #0
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3708      	adds	r7, #8
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009b7c:	2300      	movs	r3, #0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	370c      	adds	r7, #12
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr

08009b8a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009b8a:	b580      	push	{r7, lr}
 8009b8c:	b084      	sub	sp, #16
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	6078      	str	r0, [r7, #4]
 8009b92:	460b      	mov	r3, r1
 8009b94:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009b96:	2302      	movs	r3, #2
 8009b98:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d00c      	beq.n	8009bbe <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	78fa      	ldrb	r2, [r7, #3]
 8009bae:	4611      	mov	r1, r2
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	4798      	blx	r3
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d101      	bne.n	8009bbe <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3710      	adds	r7, #16
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	78fa      	ldrb	r2, [r7, #3]
 8009bde:	4611      	mov	r1, r2
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	4798      	blx	r3

  return USBD_OK;
 8009be4:	2300      	movs	r3, #0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3708      	adds	r7, #8
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b082      	sub	sp, #8
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
 8009bf6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009bfe:	6839      	ldr	r1, [r7, #0]
 8009c00:	4618      	mov	r0, r3
 8009c02:	f000 feda 	bl	800a9ba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2201      	movs	r2, #1
 8009c0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009c14:	461a      	mov	r2, r3
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009c22:	f003 031f 	and.w	r3, r3, #31
 8009c26:	2b02      	cmp	r3, #2
 8009c28:	d016      	beq.n	8009c58 <USBD_LL_SetupStage+0x6a>
 8009c2a:	2b02      	cmp	r3, #2
 8009c2c:	d81c      	bhi.n	8009c68 <USBD_LL_SetupStage+0x7a>
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d002      	beq.n	8009c38 <USBD_LL_SetupStage+0x4a>
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d008      	beq.n	8009c48 <USBD_LL_SetupStage+0x5a>
 8009c36:	e017      	b.n	8009c68 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009c3e:	4619      	mov	r1, r3
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 f9cd 	bl	8009fe0 <USBD_StdDevReq>
      break;
 8009c46:	e01a      	b.n	8009c7e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009c4e:	4619      	mov	r1, r3
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 fa2f 	bl	800a0b4 <USBD_StdItfReq>
      break;
 8009c56:	e012      	b.n	8009c7e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009c5e:	4619      	mov	r1, r3
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 fa6f 	bl	800a144 <USBD_StdEPReq>
      break;
 8009c66:	e00a      	b.n	8009c7e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009c6e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009c72:	b2db      	uxtb	r3, r3
 8009c74:	4619      	mov	r1, r3
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f7f8 fc78 	bl	800256c <USBD_LL_StallEP>
      break;
 8009c7c:	bf00      	nop
  }

  return USBD_OK;
 8009c7e:	2300      	movs	r3, #0
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3708      	adds	r7, #8
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b086      	sub	sp, #24
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	60f8      	str	r0, [r7, #12]
 8009c90:	460b      	mov	r3, r1
 8009c92:	607a      	str	r2, [r7, #4]
 8009c94:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009c96:	7afb      	ldrb	r3, [r7, #11]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d14b      	bne.n	8009d34 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009ca2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009caa:	2b03      	cmp	r3, #3
 8009cac:	d134      	bne.n	8009d18 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	68da      	ldr	r2, [r3, #12]
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	691b      	ldr	r3, [r3, #16]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d919      	bls.n	8009cee <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	68da      	ldr	r2, [r3, #12]
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	691b      	ldr	r3, [r3, #16]
 8009cc2:	1ad2      	subs	r2, r2, r3
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	68da      	ldr	r2, [r3, #12]
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d203      	bcs.n	8009cdc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	e002      	b.n	8009ce2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009ce0:	b29b      	uxth	r3, r3
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	6879      	ldr	r1, [r7, #4]
 8009ce6:	68f8      	ldr	r0, [r7, #12]
 8009ce8:	f001 f8f4 	bl	800aed4 <USBD_CtlContinueRx>
 8009cec:	e038      	b.n	8009d60 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cf4:	691b      	ldr	r3, [r3, #16]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d00a      	beq.n	8009d10 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009d00:	2b03      	cmp	r3, #3
 8009d02:	d105      	bne.n	8009d10 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d0a:	691b      	ldr	r3, [r3, #16]
 8009d0c:	68f8      	ldr	r0, [r7, #12]
 8009d0e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	f001 f8f1 	bl	800aef8 <USBD_CtlSendStatus>
 8009d16:	e023      	b.n	8009d60 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009d1e:	2b05      	cmp	r3, #5
 8009d20:	d11e      	bne.n	8009d60 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2200      	movs	r2, #0
 8009d26:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009d2a:	2100      	movs	r1, #0
 8009d2c:	68f8      	ldr	r0, [r7, #12]
 8009d2e:	f7f8 fc1d 	bl	800256c <USBD_LL_StallEP>
 8009d32:	e015      	b.n	8009d60 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d3a:	699b      	ldr	r3, [r3, #24]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d00d      	beq.n	8009d5c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009d46:	2b03      	cmp	r3, #3
 8009d48:	d108      	bne.n	8009d5c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d50:	699b      	ldr	r3, [r3, #24]
 8009d52:	7afa      	ldrb	r2, [r7, #11]
 8009d54:	4611      	mov	r1, r2
 8009d56:	68f8      	ldr	r0, [r7, #12]
 8009d58:	4798      	blx	r3
 8009d5a:	e001      	b.n	8009d60 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009d5c:	2302      	movs	r3, #2
 8009d5e:	e000      	b.n	8009d62 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009d60:	2300      	movs	r3, #0
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3718      	adds	r7, #24
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}

08009d6a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009d6a:	b580      	push	{r7, lr}
 8009d6c:	b086      	sub	sp, #24
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	60f8      	str	r0, [r7, #12]
 8009d72:	460b      	mov	r3, r1
 8009d74:	607a      	str	r2, [r7, #4]
 8009d76:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009d78:	7afb      	ldrb	r3, [r7, #11]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d17f      	bne.n	8009e7e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	3314      	adds	r3, #20
 8009d82:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009d8a:	2b02      	cmp	r3, #2
 8009d8c:	d15c      	bne.n	8009e48 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	68da      	ldr	r2, [r3, #12]
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	691b      	ldr	r3, [r3, #16]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d915      	bls.n	8009dc6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	68da      	ldr	r2, [r3, #12]
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	691b      	ldr	r3, [r3, #16]
 8009da2:	1ad2      	subs	r2, r2, r3
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	68db      	ldr	r3, [r3, #12]
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	461a      	mov	r2, r3
 8009db0:	6879      	ldr	r1, [r7, #4]
 8009db2:	68f8      	ldr	r0, [r7, #12]
 8009db4:	f001 f87c 	bl	800aeb0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009db8:	2300      	movs	r3, #0
 8009dba:	2200      	movs	r2, #0
 8009dbc:	2100      	movs	r1, #0
 8009dbe:	68f8      	ldr	r0, [r7, #12]
 8009dc0:	f7f8 fc80 	bl	80026c4 <USBD_LL_PrepareReceive>
 8009dc4:	e04e      	b.n	8009e64 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	697a      	ldr	r2, [r7, #20]
 8009dcc:	6912      	ldr	r2, [r2, #16]
 8009dce:	fbb3 f1f2 	udiv	r1, r3, r2
 8009dd2:	fb01 f202 	mul.w	r2, r1, r2
 8009dd6:	1a9b      	subs	r3, r3, r2
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d11c      	bne.n	8009e16 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	689a      	ldr	r2, [r3, #8]
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d316      	bcc.n	8009e16 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	689a      	ldr	r2, [r3, #8]
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d20f      	bcs.n	8009e16 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009df6:	2200      	movs	r2, #0
 8009df8:	2100      	movs	r1, #0
 8009dfa:	68f8      	ldr	r0, [r7, #12]
 8009dfc:	f001 f858 	bl	800aeb0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2200      	movs	r2, #0
 8009e04:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e08:	2300      	movs	r3, #0
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	2100      	movs	r1, #0
 8009e0e:	68f8      	ldr	r0, [r7, #12]
 8009e10:	f7f8 fc58 	bl	80026c4 <USBD_LL_PrepareReceive>
 8009e14:	e026      	b.n	8009e64 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e1c:	68db      	ldr	r3, [r3, #12]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d00a      	beq.n	8009e38 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009e28:	2b03      	cmp	r3, #3
 8009e2a:	d105      	bne.n	8009e38 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e32:	68db      	ldr	r3, [r3, #12]
 8009e34:	68f8      	ldr	r0, [r7, #12]
 8009e36:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009e38:	2180      	movs	r1, #128	@ 0x80
 8009e3a:	68f8      	ldr	r0, [r7, #12]
 8009e3c:	f7f8 fb96 	bl	800256c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009e40:	68f8      	ldr	r0, [r7, #12]
 8009e42:	f001 f86c 	bl	800af1e <USBD_CtlReceiveStatus>
 8009e46:	e00d      	b.n	8009e64 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009e4e:	2b04      	cmp	r3, #4
 8009e50:	d004      	beq.n	8009e5c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d103      	bne.n	8009e64 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009e5c:	2180      	movs	r1, #128	@ 0x80
 8009e5e:	68f8      	ldr	r0, [r7, #12]
 8009e60:	f7f8 fb84 	bl	800256c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	d11d      	bne.n	8009eaa <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009e6e:	68f8      	ldr	r0, [r7, #12]
 8009e70:	f7ff fe80 	bl	8009b74 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2200      	movs	r2, #0
 8009e78:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009e7c:	e015      	b.n	8009eaa <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e84:	695b      	ldr	r3, [r3, #20]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d00d      	beq.n	8009ea6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009e90:	2b03      	cmp	r3, #3
 8009e92:	d108      	bne.n	8009ea6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e9a:	695b      	ldr	r3, [r3, #20]
 8009e9c:	7afa      	ldrb	r2, [r7, #11]
 8009e9e:	4611      	mov	r1, r2
 8009ea0:	68f8      	ldr	r0, [r7, #12]
 8009ea2:	4798      	blx	r3
 8009ea4:	e001      	b.n	8009eaa <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009ea6:	2302      	movs	r3, #2
 8009ea8:	e000      	b.n	8009eac <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009eaa:	2300      	movs	r3, #0
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3718      	adds	r7, #24
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009ebc:	2340      	movs	r3, #64	@ 0x40
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	2100      	movs	r1, #0
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f7f8 fb0d 	bl	80024e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2201      	movs	r2, #1
 8009ecc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2240      	movs	r2, #64	@ 0x40
 8009ed4:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009ed8:	2340      	movs	r3, #64	@ 0x40
 8009eda:	2200      	movs	r2, #0
 8009edc:	2180      	movs	r1, #128	@ 0x80
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f7f8 faff 	bl	80024e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2240      	movs	r2, #64	@ 0x40
 8009eee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2200      	movs	r2, #0
 8009f04:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d009      	beq.n	8009f2c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	6852      	ldr	r2, [r2, #4]
 8009f24:	b2d2      	uxtb	r2, r2
 8009f26:	4611      	mov	r1, r2
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	4798      	blx	r3
  }

  return USBD_OK;
 8009f2c:	2300      	movs	r3, #0
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3708      	adds	r7, #8
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009f36:	b480      	push	{r7}
 8009f38:	b083      	sub	sp, #12
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
 8009f3e:	460b      	mov	r3, r1
 8009f40:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	78fa      	ldrb	r2, [r7, #3]
 8009f46:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009f48:	2300      	movs	r3, #0
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	370c      	adds	r7, #12
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f54:	4770      	bx	lr

08009f56 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009f56:	b480      	push	{r7}
 8009f58:	b083      	sub	sp, #12
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2204      	movs	r2, #4
 8009f6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009f72:	2300      	movs	r3, #0
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	370c      	adds	r7, #12
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f8e:	2b04      	cmp	r3, #4
 8009f90:	d105      	bne.n	8009f9e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009f9e:	2300      	movs	r3, #0
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	370c      	adds	r7, #12
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr

08009fac <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fba:	2b03      	cmp	r3, #3
 8009fbc:	d10b      	bne.n	8009fd6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fc4:	69db      	ldr	r3, [r3, #28]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d005      	beq.n	8009fd6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fd0:	69db      	ldr	r3, [r3, #28]
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009fd6:	2300      	movs	r3, #0
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3708      	adds	r7, #8
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009fea:	2300      	movs	r3, #0
 8009fec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009ff6:	2b40      	cmp	r3, #64	@ 0x40
 8009ff8:	d005      	beq.n	800a006 <USBD_StdDevReq+0x26>
 8009ffa:	2b40      	cmp	r3, #64	@ 0x40
 8009ffc:	d84f      	bhi.n	800a09e <USBD_StdDevReq+0xbe>
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d009      	beq.n	800a016 <USBD_StdDevReq+0x36>
 800a002:	2b20      	cmp	r3, #32
 800a004:	d14b      	bne.n	800a09e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a00c:	689b      	ldr	r3, [r3, #8]
 800a00e:	6839      	ldr	r1, [r7, #0]
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	4798      	blx	r3
      break;
 800a014:	e048      	b.n	800a0a8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	785b      	ldrb	r3, [r3, #1]
 800a01a:	2b09      	cmp	r3, #9
 800a01c:	d839      	bhi.n	800a092 <USBD_StdDevReq+0xb2>
 800a01e:	a201      	add	r2, pc, #4	@ (adr r2, 800a024 <USBD_StdDevReq+0x44>)
 800a020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a024:	0800a075 	.word	0x0800a075
 800a028:	0800a089 	.word	0x0800a089
 800a02c:	0800a093 	.word	0x0800a093
 800a030:	0800a07f 	.word	0x0800a07f
 800a034:	0800a093 	.word	0x0800a093
 800a038:	0800a057 	.word	0x0800a057
 800a03c:	0800a04d 	.word	0x0800a04d
 800a040:	0800a093 	.word	0x0800a093
 800a044:	0800a06b 	.word	0x0800a06b
 800a048:	0800a061 	.word	0x0800a061
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a04c:	6839      	ldr	r1, [r7, #0]
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 f9dc 	bl	800a40c <USBD_GetDescriptor>
          break;
 800a054:	e022      	b.n	800a09c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a056:	6839      	ldr	r1, [r7, #0]
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f000 fb3f 	bl	800a6dc <USBD_SetAddress>
          break;
 800a05e:	e01d      	b.n	800a09c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a060:	6839      	ldr	r1, [r7, #0]
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 fb7e 	bl	800a764 <USBD_SetConfig>
          break;
 800a068:	e018      	b.n	800a09c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a06a:	6839      	ldr	r1, [r7, #0]
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 fc07 	bl	800a880 <USBD_GetConfig>
          break;
 800a072:	e013      	b.n	800a09c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a074:	6839      	ldr	r1, [r7, #0]
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f000 fc37 	bl	800a8ea <USBD_GetStatus>
          break;
 800a07c:	e00e      	b.n	800a09c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a07e:	6839      	ldr	r1, [r7, #0]
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 fc65 	bl	800a950 <USBD_SetFeature>
          break;
 800a086:	e009      	b.n	800a09c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a088:	6839      	ldr	r1, [r7, #0]
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 fc74 	bl	800a978 <USBD_ClrFeature>
          break;
 800a090:	e004      	b.n	800a09c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a092:	6839      	ldr	r1, [r7, #0]
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f000 fcca 	bl	800aa2e <USBD_CtlError>
          break;
 800a09a:	bf00      	nop
      }
      break;
 800a09c:	e004      	b.n	800a0a8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a09e:	6839      	ldr	r1, [r7, #0]
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 fcc4 	bl	800aa2e <USBD_CtlError>
      break;
 800a0a6:	bf00      	nop
  }

  return ret;
 800a0a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3710      	adds	r7, #16
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop

0800a0b4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a0ca:	2b40      	cmp	r3, #64	@ 0x40
 800a0cc:	d005      	beq.n	800a0da <USBD_StdItfReq+0x26>
 800a0ce:	2b40      	cmp	r3, #64	@ 0x40
 800a0d0:	d82e      	bhi.n	800a130 <USBD_StdItfReq+0x7c>
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d001      	beq.n	800a0da <USBD_StdItfReq+0x26>
 800a0d6:	2b20      	cmp	r3, #32
 800a0d8:	d12a      	bne.n	800a130 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0e0:	3b01      	subs	r3, #1
 800a0e2:	2b02      	cmp	r3, #2
 800a0e4:	d81d      	bhi.n	800a122 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	889b      	ldrh	r3, [r3, #4]
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d813      	bhi.n	800a118 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0f6:	689b      	ldr	r3, [r3, #8]
 800a0f8:	6839      	ldr	r1, [r7, #0]
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	4798      	blx	r3
 800a0fe:	4603      	mov	r3, r0
 800a100:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	88db      	ldrh	r3, [r3, #6]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d110      	bne.n	800a12c <USBD_StdItfReq+0x78>
 800a10a:	7bfb      	ldrb	r3, [r7, #15]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d10d      	bne.n	800a12c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 fef1 	bl	800aef8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a116:	e009      	b.n	800a12c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a118:	6839      	ldr	r1, [r7, #0]
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 fc87 	bl	800aa2e <USBD_CtlError>
          break;
 800a120:	e004      	b.n	800a12c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a122:	6839      	ldr	r1, [r7, #0]
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f000 fc82 	bl	800aa2e <USBD_CtlError>
          break;
 800a12a:	e000      	b.n	800a12e <USBD_StdItfReq+0x7a>
          break;
 800a12c:	bf00      	nop
      }
      break;
 800a12e:	e004      	b.n	800a13a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a130:	6839      	ldr	r1, [r7, #0]
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 fc7b 	bl	800aa2e <USBD_CtlError>
      break;
 800a138:	bf00      	nop
  }

  return USBD_OK;
 800a13a:	2300      	movs	r3, #0
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3710      	adds	r7, #16
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a14e:	2300      	movs	r3, #0
 800a150:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	889b      	ldrh	r3, [r3, #4]
 800a156:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a160:	2b40      	cmp	r3, #64	@ 0x40
 800a162:	d007      	beq.n	800a174 <USBD_StdEPReq+0x30>
 800a164:	2b40      	cmp	r3, #64	@ 0x40
 800a166:	f200 8146 	bhi.w	800a3f6 <USBD_StdEPReq+0x2b2>
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00a      	beq.n	800a184 <USBD_StdEPReq+0x40>
 800a16e:	2b20      	cmp	r3, #32
 800a170:	f040 8141 	bne.w	800a3f6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a17a:	689b      	ldr	r3, [r3, #8]
 800a17c:	6839      	ldr	r1, [r7, #0]
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	4798      	blx	r3
      break;
 800a182:	e13d      	b.n	800a400 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a18c:	2b20      	cmp	r3, #32
 800a18e:	d10a      	bne.n	800a1a6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a196:	689b      	ldr	r3, [r3, #8]
 800a198:	6839      	ldr	r1, [r7, #0]
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	4798      	blx	r3
 800a19e:	4603      	mov	r3, r0
 800a1a0:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a1a2:	7bfb      	ldrb	r3, [r7, #15]
 800a1a4:	e12d      	b.n	800a402 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	785b      	ldrb	r3, [r3, #1]
 800a1aa:	2b03      	cmp	r3, #3
 800a1ac:	d007      	beq.n	800a1be <USBD_StdEPReq+0x7a>
 800a1ae:	2b03      	cmp	r3, #3
 800a1b0:	f300 811b 	bgt.w	800a3ea <USBD_StdEPReq+0x2a6>
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d072      	beq.n	800a29e <USBD_StdEPReq+0x15a>
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d03a      	beq.n	800a232 <USBD_StdEPReq+0xee>
 800a1bc:	e115      	b.n	800a3ea <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1c4:	2b02      	cmp	r3, #2
 800a1c6:	d002      	beq.n	800a1ce <USBD_StdEPReq+0x8a>
 800a1c8:	2b03      	cmp	r3, #3
 800a1ca:	d015      	beq.n	800a1f8 <USBD_StdEPReq+0xb4>
 800a1cc:	e02b      	b.n	800a226 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a1ce:	7bbb      	ldrb	r3, [r7, #14]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d00c      	beq.n	800a1ee <USBD_StdEPReq+0xaa>
 800a1d4:	7bbb      	ldrb	r3, [r7, #14]
 800a1d6:	2b80      	cmp	r3, #128	@ 0x80
 800a1d8:	d009      	beq.n	800a1ee <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a1da:	7bbb      	ldrb	r3, [r7, #14]
 800a1dc:	4619      	mov	r1, r3
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f7f8 f9c4 	bl	800256c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a1e4:	2180      	movs	r1, #128	@ 0x80
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f7f8 f9c0 	bl	800256c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a1ec:	e020      	b.n	800a230 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a1ee:	6839      	ldr	r1, [r7, #0]
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 fc1c 	bl	800aa2e <USBD_CtlError>
              break;
 800a1f6:	e01b      	b.n	800a230 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	885b      	ldrh	r3, [r3, #2]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d10e      	bne.n	800a21e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a200:	7bbb      	ldrb	r3, [r7, #14]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d00b      	beq.n	800a21e <USBD_StdEPReq+0xda>
 800a206:	7bbb      	ldrb	r3, [r7, #14]
 800a208:	2b80      	cmp	r3, #128	@ 0x80
 800a20a:	d008      	beq.n	800a21e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	88db      	ldrh	r3, [r3, #6]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d104      	bne.n	800a21e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a214:	7bbb      	ldrb	r3, [r7, #14]
 800a216:	4619      	mov	r1, r3
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f7f8 f9a7 	bl	800256c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 fe6a 	bl	800aef8 <USBD_CtlSendStatus>

              break;
 800a224:	e004      	b.n	800a230 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a226:	6839      	ldr	r1, [r7, #0]
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f000 fc00 	bl	800aa2e <USBD_CtlError>
              break;
 800a22e:	bf00      	nop
          }
          break;
 800a230:	e0e0      	b.n	800a3f4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a238:	2b02      	cmp	r3, #2
 800a23a:	d002      	beq.n	800a242 <USBD_StdEPReq+0xfe>
 800a23c:	2b03      	cmp	r3, #3
 800a23e:	d015      	beq.n	800a26c <USBD_StdEPReq+0x128>
 800a240:	e026      	b.n	800a290 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a242:	7bbb      	ldrb	r3, [r7, #14]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d00c      	beq.n	800a262 <USBD_StdEPReq+0x11e>
 800a248:	7bbb      	ldrb	r3, [r7, #14]
 800a24a:	2b80      	cmp	r3, #128	@ 0x80
 800a24c:	d009      	beq.n	800a262 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a24e:	7bbb      	ldrb	r3, [r7, #14]
 800a250:	4619      	mov	r1, r3
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f7f8 f98a 	bl	800256c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a258:	2180      	movs	r1, #128	@ 0x80
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f7f8 f986 	bl	800256c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a260:	e01c      	b.n	800a29c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a262:	6839      	ldr	r1, [r7, #0]
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f000 fbe2 	bl	800aa2e <USBD_CtlError>
              break;
 800a26a:	e017      	b.n	800a29c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	885b      	ldrh	r3, [r3, #2]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d112      	bne.n	800a29a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a274:	7bbb      	ldrb	r3, [r7, #14]
 800a276:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d004      	beq.n	800a288 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a27e:	7bbb      	ldrb	r3, [r7, #14]
 800a280:	4619      	mov	r1, r3
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f7f8 f991 	bl	80025aa <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f000 fe35 	bl	800aef8 <USBD_CtlSendStatus>
              }
              break;
 800a28e:	e004      	b.n	800a29a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a290:	6839      	ldr	r1, [r7, #0]
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 fbcb 	bl	800aa2e <USBD_CtlError>
              break;
 800a298:	e000      	b.n	800a29c <USBD_StdEPReq+0x158>
              break;
 800a29a:	bf00      	nop
          }
          break;
 800a29c:	e0aa      	b.n	800a3f4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2a4:	2b02      	cmp	r3, #2
 800a2a6:	d002      	beq.n	800a2ae <USBD_StdEPReq+0x16a>
 800a2a8:	2b03      	cmp	r3, #3
 800a2aa:	d032      	beq.n	800a312 <USBD_StdEPReq+0x1ce>
 800a2ac:	e097      	b.n	800a3de <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a2ae:	7bbb      	ldrb	r3, [r7, #14]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d007      	beq.n	800a2c4 <USBD_StdEPReq+0x180>
 800a2b4:	7bbb      	ldrb	r3, [r7, #14]
 800a2b6:	2b80      	cmp	r3, #128	@ 0x80
 800a2b8:	d004      	beq.n	800a2c4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a2ba:	6839      	ldr	r1, [r7, #0]
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 fbb6 	bl	800aa2e <USBD_CtlError>
                break;
 800a2c2:	e091      	b.n	800a3e8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a2c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	da0b      	bge.n	800a2e4 <USBD_StdEPReq+0x1a0>
 800a2cc:	7bbb      	ldrb	r3, [r7, #14]
 800a2ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a2d2:	4613      	mov	r3, r2
 800a2d4:	009b      	lsls	r3, r3, #2
 800a2d6:	4413      	add	r3, r2
 800a2d8:	009b      	lsls	r3, r3, #2
 800a2da:	3310      	adds	r3, #16
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	4413      	add	r3, r2
 800a2e0:	3304      	adds	r3, #4
 800a2e2:	e00b      	b.n	800a2fc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a2e4:	7bbb      	ldrb	r3, [r7, #14]
 800a2e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a2ea:	4613      	mov	r3, r2
 800a2ec:	009b      	lsls	r3, r3, #2
 800a2ee:	4413      	add	r3, r2
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	4413      	add	r3, r2
 800a2fa:	3304      	adds	r3, #4
 800a2fc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	2200      	movs	r2, #0
 800a302:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	2202      	movs	r2, #2
 800a308:	4619      	mov	r1, r3
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f000 fdb4 	bl	800ae78 <USBD_CtlSendData>
              break;
 800a310:	e06a      	b.n	800a3e8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a312:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a316:	2b00      	cmp	r3, #0
 800a318:	da11      	bge.n	800a33e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a31a:	7bbb      	ldrb	r3, [r7, #14]
 800a31c:	f003 020f 	and.w	r2, r3, #15
 800a320:	6879      	ldr	r1, [r7, #4]
 800a322:	4613      	mov	r3, r2
 800a324:	009b      	lsls	r3, r3, #2
 800a326:	4413      	add	r3, r2
 800a328:	009b      	lsls	r3, r3, #2
 800a32a:	440b      	add	r3, r1
 800a32c:	3318      	adds	r3, #24
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d117      	bne.n	800a364 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a334:	6839      	ldr	r1, [r7, #0]
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f000 fb79 	bl	800aa2e <USBD_CtlError>
                  break;
 800a33c:	e054      	b.n	800a3e8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a33e:	7bbb      	ldrb	r3, [r7, #14]
 800a340:	f003 020f 	and.w	r2, r3, #15
 800a344:	6879      	ldr	r1, [r7, #4]
 800a346:	4613      	mov	r3, r2
 800a348:	009b      	lsls	r3, r3, #2
 800a34a:	4413      	add	r3, r2
 800a34c:	009b      	lsls	r3, r3, #2
 800a34e:	440b      	add	r3, r1
 800a350:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d104      	bne.n	800a364 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a35a:	6839      	ldr	r1, [r7, #0]
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f000 fb66 	bl	800aa2e <USBD_CtlError>
                  break;
 800a362:	e041      	b.n	800a3e8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a364:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	da0b      	bge.n	800a384 <USBD_StdEPReq+0x240>
 800a36c:	7bbb      	ldrb	r3, [r7, #14]
 800a36e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a372:	4613      	mov	r3, r2
 800a374:	009b      	lsls	r3, r3, #2
 800a376:	4413      	add	r3, r2
 800a378:	009b      	lsls	r3, r3, #2
 800a37a:	3310      	adds	r3, #16
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	4413      	add	r3, r2
 800a380:	3304      	adds	r3, #4
 800a382:	e00b      	b.n	800a39c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a384:	7bbb      	ldrb	r3, [r7, #14]
 800a386:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a38a:	4613      	mov	r3, r2
 800a38c:	009b      	lsls	r3, r3, #2
 800a38e:	4413      	add	r3, r2
 800a390:	009b      	lsls	r3, r3, #2
 800a392:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	4413      	add	r3, r2
 800a39a:	3304      	adds	r3, #4
 800a39c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a39e:	7bbb      	ldrb	r3, [r7, #14]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d002      	beq.n	800a3aa <USBD_StdEPReq+0x266>
 800a3a4:	7bbb      	ldrb	r3, [r7, #14]
 800a3a6:	2b80      	cmp	r3, #128	@ 0x80
 800a3a8:	d103      	bne.n	800a3b2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	601a      	str	r2, [r3, #0]
 800a3b0:	e00e      	b.n	800a3d0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a3b2:	7bbb      	ldrb	r3, [r7, #14]
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f7f8 f916 	bl	80025e8 <USBD_LL_IsStallEP>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d003      	beq.n	800a3ca <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	2201      	movs	r2, #1
 800a3c6:	601a      	str	r2, [r3, #0]
 800a3c8:	e002      	b.n	800a3d0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	2202      	movs	r2, #2
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f000 fd4e 	bl	800ae78 <USBD_CtlSendData>
              break;
 800a3dc:	e004      	b.n	800a3e8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a3de:	6839      	ldr	r1, [r7, #0]
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 fb24 	bl	800aa2e <USBD_CtlError>
              break;
 800a3e6:	bf00      	nop
          }
          break;
 800a3e8:	e004      	b.n	800a3f4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a3ea:	6839      	ldr	r1, [r7, #0]
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 fb1e 	bl	800aa2e <USBD_CtlError>
          break;
 800a3f2:	bf00      	nop
      }
      break;
 800a3f4:	e004      	b.n	800a400 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a3f6:	6839      	ldr	r1, [r7, #0]
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 fb18 	bl	800aa2e <USBD_CtlError>
      break;
 800a3fe:	bf00      	nop
  }

  return ret;
 800a400:	7bfb      	ldrb	r3, [r7, #15]
}
 800a402:	4618      	mov	r0, r3
 800a404:	3710      	adds	r7, #16
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
	...

0800a40c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b084      	sub	sp, #16
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a416:	2300      	movs	r3, #0
 800a418:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a41a:	2300      	movs	r3, #0
 800a41c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a41e:	2300      	movs	r3, #0
 800a420:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	885b      	ldrh	r3, [r3, #2]
 800a426:	0a1b      	lsrs	r3, r3, #8
 800a428:	b29b      	uxth	r3, r3
 800a42a:	3b01      	subs	r3, #1
 800a42c:	2b06      	cmp	r3, #6
 800a42e:	f200 8128 	bhi.w	800a682 <USBD_GetDescriptor+0x276>
 800a432:	a201      	add	r2, pc, #4	@ (adr r2, 800a438 <USBD_GetDescriptor+0x2c>)
 800a434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a438:	0800a455 	.word	0x0800a455
 800a43c:	0800a46d 	.word	0x0800a46d
 800a440:	0800a4ad 	.word	0x0800a4ad
 800a444:	0800a683 	.word	0x0800a683
 800a448:	0800a683 	.word	0x0800a683
 800a44c:	0800a623 	.word	0x0800a623
 800a450:	0800a64f 	.word	0x0800a64f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	687a      	ldr	r2, [r7, #4]
 800a45e:	7c12      	ldrb	r2, [r2, #16]
 800a460:	f107 0108 	add.w	r1, r7, #8
 800a464:	4610      	mov	r0, r2
 800a466:	4798      	blx	r3
 800a468:	60f8      	str	r0, [r7, #12]
      break;
 800a46a:	e112      	b.n	800a692 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	7c1b      	ldrb	r3, [r3, #16]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d10d      	bne.n	800a490 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a47a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a47c:	f107 0208 	add.w	r2, r7, #8
 800a480:	4610      	mov	r0, r2
 800a482:	4798      	blx	r3
 800a484:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	3301      	adds	r3, #1
 800a48a:	2202      	movs	r2, #2
 800a48c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a48e:	e100      	b.n	800a692 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a498:	f107 0208 	add.w	r2, r7, #8
 800a49c:	4610      	mov	r0, r2
 800a49e:	4798      	blx	r3
 800a4a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	2202      	movs	r2, #2
 800a4a8:	701a      	strb	r2, [r3, #0]
      break;
 800a4aa:	e0f2      	b.n	800a692 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	885b      	ldrh	r3, [r3, #2]
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	2b05      	cmp	r3, #5
 800a4b4:	f200 80ac 	bhi.w	800a610 <USBD_GetDescriptor+0x204>
 800a4b8:	a201      	add	r2, pc, #4	@ (adr r2, 800a4c0 <USBD_GetDescriptor+0xb4>)
 800a4ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4be:	bf00      	nop
 800a4c0:	0800a4d9 	.word	0x0800a4d9
 800a4c4:	0800a50d 	.word	0x0800a50d
 800a4c8:	0800a541 	.word	0x0800a541
 800a4cc:	0800a575 	.word	0x0800a575
 800a4d0:	0800a5a9 	.word	0x0800a5a9
 800a4d4:	0800a5dd 	.word	0x0800a5dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d00b      	beq.n	800a4fc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	7c12      	ldrb	r2, [r2, #16]
 800a4f0:	f107 0108 	add.w	r1, r7, #8
 800a4f4:	4610      	mov	r0, r2
 800a4f6:	4798      	blx	r3
 800a4f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4fa:	e091      	b.n	800a620 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a4fc:	6839      	ldr	r1, [r7, #0]
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f000 fa95 	bl	800aa2e <USBD_CtlError>
            err++;
 800a504:	7afb      	ldrb	r3, [r7, #11]
 800a506:	3301      	adds	r3, #1
 800a508:	72fb      	strb	r3, [r7, #11]
          break;
 800a50a:	e089      	b.n	800a620 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d00b      	beq.n	800a530 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a51e:	689b      	ldr	r3, [r3, #8]
 800a520:	687a      	ldr	r2, [r7, #4]
 800a522:	7c12      	ldrb	r2, [r2, #16]
 800a524:	f107 0108 	add.w	r1, r7, #8
 800a528:	4610      	mov	r0, r2
 800a52a:	4798      	blx	r3
 800a52c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a52e:	e077      	b.n	800a620 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a530:	6839      	ldr	r1, [r7, #0]
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f000 fa7b 	bl	800aa2e <USBD_CtlError>
            err++;
 800a538:	7afb      	ldrb	r3, [r7, #11]
 800a53a:	3301      	adds	r3, #1
 800a53c:	72fb      	strb	r3, [r7, #11]
          break;
 800a53e:	e06f      	b.n	800a620 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a546:	68db      	ldr	r3, [r3, #12]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d00b      	beq.n	800a564 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a552:	68db      	ldr	r3, [r3, #12]
 800a554:	687a      	ldr	r2, [r7, #4]
 800a556:	7c12      	ldrb	r2, [r2, #16]
 800a558:	f107 0108 	add.w	r1, r7, #8
 800a55c:	4610      	mov	r0, r2
 800a55e:	4798      	blx	r3
 800a560:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a562:	e05d      	b.n	800a620 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a564:	6839      	ldr	r1, [r7, #0]
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 fa61 	bl	800aa2e <USBD_CtlError>
            err++;
 800a56c:	7afb      	ldrb	r3, [r7, #11]
 800a56e:	3301      	adds	r3, #1
 800a570:	72fb      	strb	r3, [r7, #11]
          break;
 800a572:	e055      	b.n	800a620 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a57a:	691b      	ldr	r3, [r3, #16]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d00b      	beq.n	800a598 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a586:	691b      	ldr	r3, [r3, #16]
 800a588:	687a      	ldr	r2, [r7, #4]
 800a58a:	7c12      	ldrb	r2, [r2, #16]
 800a58c:	f107 0108 	add.w	r1, r7, #8
 800a590:	4610      	mov	r0, r2
 800a592:	4798      	blx	r3
 800a594:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a596:	e043      	b.n	800a620 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a598:	6839      	ldr	r1, [r7, #0]
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f000 fa47 	bl	800aa2e <USBD_CtlError>
            err++;
 800a5a0:	7afb      	ldrb	r3, [r7, #11]
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	72fb      	strb	r3, [r7, #11]
          break;
 800a5a6:	e03b      	b.n	800a620 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a5ae:	695b      	ldr	r3, [r3, #20]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d00b      	beq.n	800a5cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a5ba:	695b      	ldr	r3, [r3, #20]
 800a5bc:	687a      	ldr	r2, [r7, #4]
 800a5be:	7c12      	ldrb	r2, [r2, #16]
 800a5c0:	f107 0108 	add.w	r1, r7, #8
 800a5c4:	4610      	mov	r0, r2
 800a5c6:	4798      	blx	r3
 800a5c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5ca:	e029      	b.n	800a620 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a5cc:	6839      	ldr	r1, [r7, #0]
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f000 fa2d 	bl	800aa2e <USBD_CtlError>
            err++;
 800a5d4:	7afb      	ldrb	r3, [r7, #11]
 800a5d6:	3301      	adds	r3, #1
 800a5d8:	72fb      	strb	r3, [r7, #11]
          break;
 800a5da:	e021      	b.n	800a620 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a5e2:	699b      	ldr	r3, [r3, #24]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d00b      	beq.n	800a600 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a5ee:	699b      	ldr	r3, [r3, #24]
 800a5f0:	687a      	ldr	r2, [r7, #4]
 800a5f2:	7c12      	ldrb	r2, [r2, #16]
 800a5f4:	f107 0108 	add.w	r1, r7, #8
 800a5f8:	4610      	mov	r0, r2
 800a5fa:	4798      	blx	r3
 800a5fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5fe:	e00f      	b.n	800a620 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a600:	6839      	ldr	r1, [r7, #0]
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 fa13 	bl	800aa2e <USBD_CtlError>
            err++;
 800a608:	7afb      	ldrb	r3, [r7, #11]
 800a60a:	3301      	adds	r3, #1
 800a60c:	72fb      	strb	r3, [r7, #11]
          break;
 800a60e:	e007      	b.n	800a620 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a610:	6839      	ldr	r1, [r7, #0]
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f000 fa0b 	bl	800aa2e <USBD_CtlError>
          err++;
 800a618:	7afb      	ldrb	r3, [r7, #11]
 800a61a:	3301      	adds	r3, #1
 800a61c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a61e:	e038      	b.n	800a692 <USBD_GetDescriptor+0x286>
 800a620:	e037      	b.n	800a692 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	7c1b      	ldrb	r3, [r3, #16]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d109      	bne.n	800a63e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a632:	f107 0208 	add.w	r2, r7, #8
 800a636:	4610      	mov	r0, r2
 800a638:	4798      	blx	r3
 800a63a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a63c:	e029      	b.n	800a692 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a63e:	6839      	ldr	r1, [r7, #0]
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 f9f4 	bl	800aa2e <USBD_CtlError>
        err++;
 800a646:	7afb      	ldrb	r3, [r7, #11]
 800a648:	3301      	adds	r3, #1
 800a64a:	72fb      	strb	r3, [r7, #11]
      break;
 800a64c:	e021      	b.n	800a692 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	7c1b      	ldrb	r3, [r3, #16]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d10d      	bne.n	800a672 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a65c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a65e:	f107 0208 	add.w	r2, r7, #8
 800a662:	4610      	mov	r0, r2
 800a664:	4798      	blx	r3
 800a666:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	3301      	adds	r3, #1
 800a66c:	2207      	movs	r2, #7
 800a66e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a670:	e00f      	b.n	800a692 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a672:	6839      	ldr	r1, [r7, #0]
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 f9da 	bl	800aa2e <USBD_CtlError>
        err++;
 800a67a:	7afb      	ldrb	r3, [r7, #11]
 800a67c:	3301      	adds	r3, #1
 800a67e:	72fb      	strb	r3, [r7, #11]
      break;
 800a680:	e007      	b.n	800a692 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a682:	6839      	ldr	r1, [r7, #0]
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f000 f9d2 	bl	800aa2e <USBD_CtlError>
      err++;
 800a68a:	7afb      	ldrb	r3, [r7, #11]
 800a68c:	3301      	adds	r3, #1
 800a68e:	72fb      	strb	r3, [r7, #11]
      break;
 800a690:	bf00      	nop
  }

  if (err != 0U)
 800a692:	7afb      	ldrb	r3, [r7, #11]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d11c      	bne.n	800a6d2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a698:	893b      	ldrh	r3, [r7, #8]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d011      	beq.n	800a6c2 <USBD_GetDescriptor+0x2b6>
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	88db      	ldrh	r3, [r3, #6]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d00d      	beq.n	800a6c2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	88da      	ldrh	r2, [r3, #6]
 800a6aa:	893b      	ldrh	r3, [r7, #8]
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	bf28      	it	cs
 800a6b0:	4613      	movcs	r3, r2
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a6b6:	893b      	ldrh	r3, [r7, #8]
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	68f9      	ldr	r1, [r7, #12]
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 fbdb 	bl	800ae78 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	88db      	ldrh	r3, [r3, #6]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d104      	bne.n	800a6d4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 fc14 	bl	800aef8 <USBD_CtlSendStatus>
 800a6d0:	e000      	b.n	800a6d4 <USBD_GetDescriptor+0x2c8>
    return;
 800a6d2:	bf00      	nop
    }
  }
}
 800a6d4:	3710      	adds	r7, #16
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop

0800a6dc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b084      	sub	sp, #16
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	889b      	ldrh	r3, [r3, #4]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d130      	bne.n	800a750 <USBD_SetAddress+0x74>
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	88db      	ldrh	r3, [r3, #6]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d12c      	bne.n	800a750 <USBD_SetAddress+0x74>
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	885b      	ldrh	r3, [r3, #2]
 800a6fa:	2b7f      	cmp	r3, #127	@ 0x7f
 800a6fc:	d828      	bhi.n	800a750 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	885b      	ldrh	r3, [r3, #2]
 800a702:	b2db      	uxtb	r3, r3
 800a704:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a708:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a710:	2b03      	cmp	r3, #3
 800a712:	d104      	bne.n	800a71e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a714:	6839      	ldr	r1, [r7, #0]
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f000 f989 	bl	800aa2e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a71c:	e01d      	b.n	800a75a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	7bfa      	ldrb	r2, [r7, #15]
 800a722:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a726:	7bfb      	ldrb	r3, [r7, #15]
 800a728:	4619      	mov	r1, r3
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f7f7 ff88 	bl	8002640 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 fbe1 	bl	800aef8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a736:	7bfb      	ldrb	r3, [r7, #15]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d004      	beq.n	800a746 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2202      	movs	r2, #2
 800a740:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a744:	e009      	b.n	800a75a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2201      	movs	r2, #1
 800a74a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a74e:	e004      	b.n	800a75a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a750:	6839      	ldr	r1, [r7, #0]
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 f96b 	bl	800aa2e <USBD_CtlError>
  }
}
 800a758:	bf00      	nop
 800a75a:	bf00      	nop
 800a75c:	3710      	adds	r7, #16
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
	...

0800a764 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b082      	sub	sp, #8
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	885b      	ldrh	r3, [r3, #2]
 800a772:	b2da      	uxtb	r2, r3
 800a774:	4b41      	ldr	r3, [pc, #260]	@ (800a87c <USBD_SetConfig+0x118>)
 800a776:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a778:	4b40      	ldr	r3, [pc, #256]	@ (800a87c <USBD_SetConfig+0x118>)
 800a77a:	781b      	ldrb	r3, [r3, #0]
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d904      	bls.n	800a78a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a780:	6839      	ldr	r1, [r7, #0]
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 f953 	bl	800aa2e <USBD_CtlError>
 800a788:	e075      	b.n	800a876 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a790:	2b02      	cmp	r3, #2
 800a792:	d002      	beq.n	800a79a <USBD_SetConfig+0x36>
 800a794:	2b03      	cmp	r3, #3
 800a796:	d023      	beq.n	800a7e0 <USBD_SetConfig+0x7c>
 800a798:	e062      	b.n	800a860 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a79a:	4b38      	ldr	r3, [pc, #224]	@ (800a87c <USBD_SetConfig+0x118>)
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d01a      	beq.n	800a7d8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a7a2:	4b36      	ldr	r3, [pc, #216]	@ (800a87c <USBD_SetConfig+0x118>)
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2203      	movs	r2, #3
 800a7b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a7b4:	4b31      	ldr	r3, [pc, #196]	@ (800a87c <USBD_SetConfig+0x118>)
 800a7b6:	781b      	ldrb	r3, [r3, #0]
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f7ff f9e5 	bl	8009b8a <USBD_SetClassConfig>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	2b02      	cmp	r3, #2
 800a7c4:	d104      	bne.n	800a7d0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a7c6:	6839      	ldr	r1, [r7, #0]
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 f930 	bl	800aa2e <USBD_CtlError>
            return;
 800a7ce:	e052      	b.n	800a876 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f000 fb91 	bl	800aef8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a7d6:	e04e      	b.n	800a876 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 fb8d 	bl	800aef8 <USBD_CtlSendStatus>
        break;
 800a7de:	e04a      	b.n	800a876 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a7e0:	4b26      	ldr	r3, [pc, #152]	@ (800a87c <USBD_SetConfig+0x118>)
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d112      	bne.n	800a80e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2202      	movs	r2, #2
 800a7ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800a7f0:	4b22      	ldr	r3, [pc, #136]	@ (800a87c <USBD_SetConfig+0x118>)
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	461a      	mov	r2, r3
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a7fa:	4b20      	ldr	r3, [pc, #128]	@ (800a87c <USBD_SetConfig+0x118>)
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	4619      	mov	r1, r3
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f7ff f9e1 	bl	8009bc8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 fb76 	bl	800aef8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a80c:	e033      	b.n	800a876 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a80e:	4b1b      	ldr	r3, [pc, #108]	@ (800a87c <USBD_SetConfig+0x118>)
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	461a      	mov	r2, r3
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	429a      	cmp	r2, r3
 800a81a:	d01d      	beq.n	800a858 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	b2db      	uxtb	r3, r3
 800a822:	4619      	mov	r1, r3
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f7ff f9cf 	bl	8009bc8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a82a:	4b14      	ldr	r3, [pc, #80]	@ (800a87c <USBD_SetConfig+0x118>)
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	461a      	mov	r2, r3
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a834:	4b11      	ldr	r3, [pc, #68]	@ (800a87c <USBD_SetConfig+0x118>)
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	4619      	mov	r1, r3
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f7ff f9a5 	bl	8009b8a <USBD_SetClassConfig>
 800a840:	4603      	mov	r3, r0
 800a842:	2b02      	cmp	r3, #2
 800a844:	d104      	bne.n	800a850 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a846:	6839      	ldr	r1, [r7, #0]
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 f8f0 	bl	800aa2e <USBD_CtlError>
            return;
 800a84e:	e012      	b.n	800a876 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f000 fb51 	bl	800aef8 <USBD_CtlSendStatus>
        break;
 800a856:	e00e      	b.n	800a876 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f000 fb4d 	bl	800aef8 <USBD_CtlSendStatus>
        break;
 800a85e:	e00a      	b.n	800a876 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a860:	6839      	ldr	r1, [r7, #0]
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 f8e3 	bl	800aa2e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a868:	4b04      	ldr	r3, [pc, #16]	@ (800a87c <USBD_SetConfig+0x118>)
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	4619      	mov	r1, r3
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f7ff f9aa 	bl	8009bc8 <USBD_ClrClassConfig>
        break;
 800a874:	bf00      	nop
    }
  }
}
 800a876:	3708      	adds	r7, #8
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}
 800a87c:	20000b08 	.word	0x20000b08

0800a880 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b082      	sub	sp, #8
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	88db      	ldrh	r3, [r3, #6]
 800a88e:	2b01      	cmp	r3, #1
 800a890:	d004      	beq.n	800a89c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a892:	6839      	ldr	r1, [r7, #0]
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 f8ca 	bl	800aa2e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a89a:	e022      	b.n	800a8e2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8a2:	2b02      	cmp	r3, #2
 800a8a4:	dc02      	bgt.n	800a8ac <USBD_GetConfig+0x2c>
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	dc03      	bgt.n	800a8b2 <USBD_GetConfig+0x32>
 800a8aa:	e015      	b.n	800a8d8 <USBD_GetConfig+0x58>
 800a8ac:	2b03      	cmp	r3, #3
 800a8ae:	d00b      	beq.n	800a8c8 <USBD_GetConfig+0x48>
 800a8b0:	e012      	b.n	800a8d8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	3308      	adds	r3, #8
 800a8bc:	2201      	movs	r2, #1
 800a8be:	4619      	mov	r1, r3
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f000 fad9 	bl	800ae78 <USBD_CtlSendData>
        break;
 800a8c6:	e00c      	b.n	800a8e2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	3304      	adds	r3, #4
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f000 fad1 	bl	800ae78 <USBD_CtlSendData>
        break;
 800a8d6:	e004      	b.n	800a8e2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a8d8:	6839      	ldr	r1, [r7, #0]
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 f8a7 	bl	800aa2e <USBD_CtlError>
        break;
 800a8e0:	bf00      	nop
}
 800a8e2:	bf00      	nop
 800a8e4:	3708      	adds	r7, #8
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}

0800a8ea <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8ea:	b580      	push	{r7, lr}
 800a8ec:	b082      	sub	sp, #8
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	6078      	str	r0, [r7, #4]
 800a8f2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8fa:	3b01      	subs	r3, #1
 800a8fc:	2b02      	cmp	r3, #2
 800a8fe:	d81e      	bhi.n	800a93e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	88db      	ldrh	r3, [r3, #6]
 800a904:	2b02      	cmp	r3, #2
 800a906:	d004      	beq.n	800a912 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a908:	6839      	ldr	r1, [r7, #0]
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 f88f 	bl	800aa2e <USBD_CtlError>
        break;
 800a910:	e01a      	b.n	800a948 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2201      	movs	r2, #1
 800a916:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d005      	beq.n	800a92e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	68db      	ldr	r3, [r3, #12]
 800a926:	f043 0202 	orr.w	r2, r3, #2
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	330c      	adds	r3, #12
 800a932:	2202      	movs	r2, #2
 800a934:	4619      	mov	r1, r3
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 fa9e 	bl	800ae78 <USBD_CtlSendData>
      break;
 800a93c:	e004      	b.n	800a948 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a93e:	6839      	ldr	r1, [r7, #0]
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 f874 	bl	800aa2e <USBD_CtlError>
      break;
 800a946:	bf00      	nop
  }
}
 800a948:	bf00      	nop
 800a94a:	3708      	adds	r7, #8
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	885b      	ldrh	r3, [r3, #2]
 800a95e:	2b01      	cmp	r3, #1
 800a960:	d106      	bne.n	800a970 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2201      	movs	r2, #1
 800a966:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f000 fac4 	bl	800aef8 <USBD_CtlSendStatus>
  }
}
 800a970:	bf00      	nop
 800a972:	3708      	adds	r7, #8
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}

0800a978 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b082      	sub	sp, #8
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a988:	3b01      	subs	r3, #1
 800a98a:	2b02      	cmp	r3, #2
 800a98c:	d80b      	bhi.n	800a9a6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	885b      	ldrh	r3, [r3, #2]
 800a992:	2b01      	cmp	r3, #1
 800a994:	d10c      	bne.n	800a9b0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2200      	movs	r2, #0
 800a99a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f000 faaa 	bl	800aef8 <USBD_CtlSendStatus>
      }
      break;
 800a9a4:	e004      	b.n	800a9b0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a9a6:	6839      	ldr	r1, [r7, #0]
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f000 f840 	bl	800aa2e <USBD_CtlError>
      break;
 800a9ae:	e000      	b.n	800a9b2 <USBD_ClrFeature+0x3a>
      break;
 800a9b0:	bf00      	nop
  }
}
 800a9b2:	bf00      	nop
 800a9b4:	3708      	adds	r7, #8
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}

0800a9ba <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a9ba:	b480      	push	{r7}
 800a9bc:	b083      	sub	sp, #12
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
 800a9c2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	781a      	ldrb	r2, [r3, #0]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	785a      	ldrb	r2, [r3, #1]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	3302      	adds	r3, #2
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	461a      	mov	r2, r3
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	3303      	adds	r3, #3
 800a9e0:	781b      	ldrb	r3, [r3, #0]
 800a9e2:	021b      	lsls	r3, r3, #8
 800a9e4:	b29b      	uxth	r3, r3
 800a9e6:	4413      	add	r3, r2
 800a9e8:	b29a      	uxth	r2, r3
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	3304      	adds	r3, #4
 800a9f2:	781b      	ldrb	r3, [r3, #0]
 800a9f4:	461a      	mov	r2, r3
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	3305      	adds	r3, #5
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	021b      	lsls	r3, r3, #8
 800a9fe:	b29b      	uxth	r3, r3
 800aa00:	4413      	add	r3, r2
 800aa02:	b29a      	uxth	r2, r3
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	3306      	adds	r3, #6
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	461a      	mov	r2, r3
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	3307      	adds	r3, #7
 800aa14:	781b      	ldrb	r3, [r3, #0]
 800aa16:	021b      	lsls	r3, r3, #8
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	4413      	add	r3, r2
 800aa1c:	b29a      	uxth	r2, r3
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	80da      	strh	r2, [r3, #6]

}
 800aa22:	bf00      	nop
 800aa24:	370c      	adds	r7, #12
 800aa26:	46bd      	mov	sp, r7
 800aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2c:	4770      	bx	lr

0800aa2e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800aa2e:	b580      	push	{r7, lr}
 800aa30:	b082      	sub	sp, #8
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
 800aa36:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800aa38:	2180      	movs	r1, #128	@ 0x80
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f7f7 fd96 	bl	800256c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800aa40:	2100      	movs	r1, #0
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f7f7 fd92 	bl	800256c <USBD_LL_StallEP>
}
 800aa48:	bf00      	nop
 800aa4a:	3708      	adds	r7, #8
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b086      	sub	sp, #24
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	60f8      	str	r0, [r7, #12]
 800aa58:	60b9      	str	r1, [r7, #8]
 800aa5a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d032      	beq.n	800aacc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800aa66:	68f8      	ldr	r0, [r7, #12]
 800aa68:	f000 f834 	bl	800aad4 <USBD_GetLen>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	3301      	adds	r3, #1
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	005b      	lsls	r3, r3, #1
 800aa74:	b29a      	uxth	r2, r3
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800aa7a:	7dfb      	ldrb	r3, [r7, #23]
 800aa7c:	1c5a      	adds	r2, r3, #1
 800aa7e:	75fa      	strb	r2, [r7, #23]
 800aa80:	461a      	mov	r2, r3
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	4413      	add	r3, r2
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	7812      	ldrb	r2, [r2, #0]
 800aa8a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800aa8c:	7dfb      	ldrb	r3, [r7, #23]
 800aa8e:	1c5a      	adds	r2, r3, #1
 800aa90:	75fa      	strb	r2, [r7, #23]
 800aa92:	461a      	mov	r2, r3
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	4413      	add	r3, r2
 800aa98:	2203      	movs	r2, #3
 800aa9a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800aa9c:	e012      	b.n	800aac4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	1c5a      	adds	r2, r3, #1
 800aaa2:	60fa      	str	r2, [r7, #12]
 800aaa4:	7dfa      	ldrb	r2, [r7, #23]
 800aaa6:	1c51      	adds	r1, r2, #1
 800aaa8:	75f9      	strb	r1, [r7, #23]
 800aaaa:	4611      	mov	r1, r2
 800aaac:	68ba      	ldr	r2, [r7, #8]
 800aaae:	440a      	add	r2, r1
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800aab4:	7dfb      	ldrb	r3, [r7, #23]
 800aab6:	1c5a      	adds	r2, r3, #1
 800aab8:	75fa      	strb	r2, [r7, #23]
 800aaba:	461a      	mov	r2, r3
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	4413      	add	r3, r2
 800aac0:	2200      	movs	r2, #0
 800aac2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	781b      	ldrb	r3, [r3, #0]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d1e8      	bne.n	800aa9e <USBD_GetString+0x4e>
    }
  }
}
 800aacc:	bf00      	nop
 800aace:	3718      	adds	r7, #24
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b085      	sub	sp, #20
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800aadc:	2300      	movs	r3, #0
 800aade:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800aae0:	e005      	b.n	800aaee <USBD_GetLen+0x1a>
  {
    len++;
 800aae2:	7bfb      	ldrb	r3, [r7, #15]
 800aae4:	3301      	adds	r3, #1
 800aae6:	73fb      	strb	r3, [r7, #15]
    buf++;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	3301      	adds	r3, #1
 800aaec:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	781b      	ldrb	r3, [r3, #0]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d1f5      	bne.n	800aae2 <USBD_GetLen+0xe>
  }

  return len;
 800aaf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3714      	adds	r7, #20
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr

0800ab04 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	460b      	mov	r3, r1
 800ab0e:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800ab10:	2304      	movs	r3, #4
 800ab12:	2203      	movs	r2, #3
 800ab14:	2181      	movs	r1, #129	@ 0x81
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f7f7 fce3 	bl	80024e2 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2201      	movs	r2, #1
 800ab20:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800ab22:	2010      	movs	r0, #16
 800ab24:	f7f7 fdf2 	bl	800270c <USBD_static_malloc>
 800ab28:	4602      	mov	r2, r0
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d101      	bne.n	800ab3e <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 800ab3a:	2302      	movs	r3, #2
 800ab3c:	e005      	b.n	800ab4a <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab44:	2200      	movs	r2, #0
 800ab46:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 800ab48:	2300      	movs	r3, #0
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3708      	adds	r7, #8
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}

0800ab52 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 800ab52:	b580      	push	{r7, lr}
 800ab54:	b082      	sub	sp, #8
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	6078      	str	r0, [r7, #4]
 800ab5a:	460b      	mov	r3, r1
 800ab5c:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800ab5e:	2181      	movs	r1, #129	@ 0x81
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f7f7 fce4 	bl	800252e <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d009      	beq.n	800ab8a <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f7f7 fdd3 	bl	8002728 <USBD_static_free>
    pdev->pClassData = NULL;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2200      	movs	r2, #0
 800ab86:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 800ab8a:	2300      	movs	r3, #0
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3708      	adds	r7, #8
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}

0800ab94 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b088      	sub	sp, #32
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aba4:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800aba6:	2300      	movs	r3, #0
 800aba8:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800abaa:	2300      	movs	r3, #0
 800abac:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800abae:	2300      	movs	r3, #0
 800abb0:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800abb2:	2300      	movs	r3, #0
 800abb4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	781b      	ldrb	r3, [r3, #0]
 800abba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d045      	beq.n	800ac4e <USBD_HID_Setup+0xba>
 800abc2:	2b20      	cmp	r3, #32
 800abc4:	f040 80d3 	bne.w	800ad6e <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	785b      	ldrb	r3, [r3, #1]
 800abcc:	3b02      	subs	r3, #2
 800abce:	2b09      	cmp	r3, #9
 800abd0:	d835      	bhi.n	800ac3e <USBD_HID_Setup+0xaa>
 800abd2:	a201      	add	r2, pc, #4	@ (adr r2, 800abd8 <USBD_HID_Setup+0x44>)
 800abd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abd8:	0800ac2f 	.word	0x0800ac2f
 800abdc:	0800ac0f 	.word	0x0800ac0f
 800abe0:	0800ac3f 	.word	0x0800ac3f
 800abe4:	0800ac3f 	.word	0x0800ac3f
 800abe8:	0800ac3f 	.word	0x0800ac3f
 800abec:	0800ac3f 	.word	0x0800ac3f
 800abf0:	0800ac3f 	.word	0x0800ac3f
 800abf4:	0800ac3f 	.word	0x0800ac3f
 800abf8:	0800ac1d 	.word	0x0800ac1d
 800abfc:	0800ac01 	.word	0x0800ac01
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	885b      	ldrh	r3, [r3, #2]
 800ac04:	b2db      	uxtb	r3, r3
 800ac06:	461a      	mov	r2, r3
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	601a      	str	r2, [r3, #0]
          break;
 800ac0c:	e01e      	b.n	800ac4c <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	2201      	movs	r2, #1
 800ac12:	4619      	mov	r1, r3
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f000 f92f 	bl	800ae78 <USBD_CtlSendData>
          break;
 800ac1a:	e017      	b.n	800ac4c <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	885b      	ldrh	r3, [r3, #2]
 800ac20:	0a1b      	lsrs	r3, r3, #8
 800ac22:	b29b      	uxth	r3, r3
 800ac24:	b2db      	uxtb	r3, r3
 800ac26:	461a      	mov	r2, r3
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	605a      	str	r2, [r3, #4]
          break;
 800ac2c:	e00e      	b.n	800ac4c <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	3304      	adds	r3, #4
 800ac32:	2201      	movs	r2, #1
 800ac34:	4619      	mov	r1, r3
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f000 f91e 	bl	800ae78 <USBD_CtlSendData>
          break;
 800ac3c:	e006      	b.n	800ac4c <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 800ac3e:	6839      	ldr	r1, [r7, #0]
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f7ff fef4 	bl	800aa2e <USBD_CtlError>
          ret = USBD_FAIL;
 800ac46:	2302      	movs	r3, #2
 800ac48:	75fb      	strb	r3, [r7, #23]
          break;
 800ac4a:	bf00      	nop
      }
      break;
 800ac4c:	e096      	b.n	800ad7c <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	785b      	ldrb	r3, [r3, #1]
 800ac52:	2b0b      	cmp	r3, #11
 800ac54:	f200 8083 	bhi.w	800ad5e <USBD_HID_Setup+0x1ca>
 800ac58:	a201      	add	r2, pc, #4	@ (adr r2, 800ac60 <USBD_HID_Setup+0xcc>)
 800ac5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac5e:	bf00      	nop
 800ac60:	0800ac91 	.word	0x0800ac91
 800ac64:	0800ad5f 	.word	0x0800ad5f
 800ac68:	0800ad5f 	.word	0x0800ad5f
 800ac6c:	0800ad5f 	.word	0x0800ad5f
 800ac70:	0800ad5f 	.word	0x0800ad5f
 800ac74:	0800ad5f 	.word	0x0800ad5f
 800ac78:	0800acb9 	.word	0x0800acb9
 800ac7c:	0800ad5f 	.word	0x0800ad5f
 800ac80:	0800ad5f 	.word	0x0800ad5f
 800ac84:	0800ad5f 	.word	0x0800ad5f
 800ac88:	0800ad11 	.word	0x0800ad11
 800ac8c:	0800ad39 	.word	0x0800ad39
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac96:	2b03      	cmp	r3, #3
 800ac98:	d107      	bne.n	800acaa <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800ac9a:	f107 030e 	add.w	r3, r7, #14
 800ac9e:	2202      	movs	r2, #2
 800aca0:	4619      	mov	r1, r3
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f000 f8e8 	bl	800ae78 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aca8:	e060      	b.n	800ad6c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800acaa:	6839      	ldr	r1, [r7, #0]
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f7ff febe 	bl	800aa2e <USBD_CtlError>
            ret = USBD_FAIL;
 800acb2:	2302      	movs	r3, #2
 800acb4:	75fb      	strb	r3, [r7, #23]
          break;
 800acb6:	e059      	b.n	800ad6c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	885b      	ldrh	r3, [r3, #2]
 800acbc:	0a1b      	lsrs	r3, r3, #8
 800acbe:	b29b      	uxth	r3, r3
 800acc0:	2b22      	cmp	r3, #34	@ 0x22
 800acc2:	d108      	bne.n	800acd6 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	88db      	ldrh	r3, [r3, #6]
 800acc8:	2b4a      	cmp	r3, #74	@ 0x4a
 800acca:	bf28      	it	cs
 800accc:	234a      	movcs	r3, #74	@ 0x4a
 800acce:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 800acd0:	4b2d      	ldr	r3, [pc, #180]	@ (800ad88 <USBD_HID_Setup+0x1f4>)
 800acd2:	61bb      	str	r3, [r7, #24]
 800acd4:	e015      	b.n	800ad02 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	885b      	ldrh	r3, [r3, #2]
 800acda:	0a1b      	lsrs	r3, r3, #8
 800acdc:	b29b      	uxth	r3, r3
 800acde:	2b21      	cmp	r3, #33	@ 0x21
 800ace0:	d108      	bne.n	800acf4 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 800ace2:	4b2a      	ldr	r3, [pc, #168]	@ (800ad8c <USBD_HID_Setup+0x1f8>)
 800ace4:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	88db      	ldrh	r3, [r3, #6]
 800acea:	2b09      	cmp	r3, #9
 800acec:	bf28      	it	cs
 800acee:	2309      	movcs	r3, #9
 800acf0:	83fb      	strh	r3, [r7, #30]
 800acf2:	e006      	b.n	800ad02 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800acf4:	6839      	ldr	r1, [r7, #0]
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f7ff fe99 	bl	800aa2e <USBD_CtlError>
            ret = USBD_FAIL;
 800acfc:	2302      	movs	r3, #2
 800acfe:	75fb      	strb	r3, [r7, #23]
            break;
 800ad00:	e034      	b.n	800ad6c <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 800ad02:	8bfb      	ldrh	r3, [r7, #30]
 800ad04:	461a      	mov	r2, r3
 800ad06:	69b9      	ldr	r1, [r7, #24]
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f000 f8b5 	bl	800ae78 <USBD_CtlSendData>
          break;
 800ad0e:	e02d      	b.n	800ad6c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad16:	2b03      	cmp	r3, #3
 800ad18:	d107      	bne.n	800ad2a <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	3308      	adds	r3, #8
 800ad1e:	2201      	movs	r2, #1
 800ad20:	4619      	mov	r1, r3
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f000 f8a8 	bl	800ae78 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ad28:	e020      	b.n	800ad6c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800ad2a:	6839      	ldr	r1, [r7, #0]
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f7ff fe7e 	bl	800aa2e <USBD_CtlError>
            ret = USBD_FAIL;
 800ad32:	2302      	movs	r3, #2
 800ad34:	75fb      	strb	r3, [r7, #23]
          break;
 800ad36:	e019      	b.n	800ad6c <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad3e:	2b03      	cmp	r3, #3
 800ad40:	d106      	bne.n	800ad50 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	885b      	ldrh	r3, [r3, #2]
 800ad46:	b2db      	uxtb	r3, r3
 800ad48:	461a      	mov	r2, r3
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ad4e:	e00d      	b.n	800ad6c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800ad50:	6839      	ldr	r1, [r7, #0]
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f7ff fe6b 	bl	800aa2e <USBD_CtlError>
            ret = USBD_FAIL;
 800ad58:	2302      	movs	r3, #2
 800ad5a:	75fb      	strb	r3, [r7, #23]
          break;
 800ad5c:	e006      	b.n	800ad6c <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 800ad5e:	6839      	ldr	r1, [r7, #0]
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f7ff fe64 	bl	800aa2e <USBD_CtlError>
          ret = USBD_FAIL;
 800ad66:	2302      	movs	r3, #2
 800ad68:	75fb      	strb	r3, [r7, #23]
          break;
 800ad6a:	bf00      	nop
      }
      break;
 800ad6c:	e006      	b.n	800ad7c <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 800ad6e:	6839      	ldr	r1, [r7, #0]
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f7ff fe5c 	bl	800aa2e <USBD_CtlError>
      ret = USBD_FAIL;
 800ad76:	2302      	movs	r3, #2
 800ad78:	75fb      	strb	r3, [r7, #23]
      break;
 800ad7a:	bf00      	nop
  }

  return ret;
 800ad7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3720      	adds	r7, #32
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
 800ad86:	bf00      	nop
 800ad88:	20000120 	.word	0x20000120
 800ad8c:	20000108 	.word	0x20000108

0800ad90 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b086      	sub	sp, #24
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	60f8      	str	r0, [r7, #12]
 800ad98:	60b9      	str	r1, [r7, #8]
 800ad9a:	4613      	mov	r3, r2
 800ad9c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ada4:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adac:	2b03      	cmp	r3, #3
 800adae:	d10c      	bne.n	800adca <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	7b1b      	ldrb	r3, [r3, #12]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d108      	bne.n	800adca <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	2201      	movs	r2, #1
 800adbc:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 800adbe:	88fb      	ldrh	r3, [r7, #6]
 800adc0:	68ba      	ldr	r2, [r7, #8]
 800adc2:	2181      	movs	r1, #129	@ 0x81
 800adc4:	68f8      	ldr	r0, [r7, #12]
 800adc6:	f7f7 fc5a 	bl	800267e <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 800adca:	2300      	movs	r3, #0
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3718      	adds	r7, #24
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800add4:	b480      	push	{r7}
 800add6:	b083      	sub	sp, #12
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2222      	movs	r2, #34	@ 0x22
 800ade0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 800ade2:	4b03      	ldr	r3, [pc, #12]	@ (800adf0 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	370c      	adds	r7, #12
 800ade8:	46bd      	mov	sp, r7
 800adea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adee:	4770      	bx	lr
 800adf0:	2000009c 	.word	0x2000009c

0800adf4 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b083      	sub	sp, #12
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2222      	movs	r2, #34	@ 0x22
 800ae00:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 800ae02:	4b03      	ldr	r3, [pc, #12]	@ (800ae10 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	370c      	adds	r7, #12
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr
 800ae10:	200000c0 	.word	0x200000c0

0800ae14 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b083      	sub	sp, #12
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2222      	movs	r2, #34	@ 0x22
 800ae20:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 800ae22:	4b03      	ldr	r3, [pc, #12]	@ (800ae30 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	370c      	adds	r7, #12
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr
 800ae30:	200000e4 	.word	0x200000e4

0800ae34 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b083      	sub	sp, #12
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae46:	2200      	movs	r2, #0
 800ae48:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800ae4a:	2300      	movs	r3, #0
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	370c      	adds	r7, #12
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b083      	sub	sp, #12
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	220a      	movs	r2, #10
 800ae64:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800ae66:	4b03      	ldr	r3, [pc, #12]	@ (800ae74 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	370c      	adds	r7, #12
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae72:	4770      	bx	lr
 800ae74:	20000114 	.word	0x20000114

0800ae78 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b084      	sub	sp, #16
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	60f8      	str	r0, [r7, #12]
 800ae80:	60b9      	str	r1, [r7, #8]
 800ae82:	4613      	mov	r3, r2
 800ae84:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2202      	movs	r2, #2
 800ae8a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ae8e:	88fa      	ldrh	r2, [r7, #6]
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800ae94:	88fa      	ldrh	r2, [r7, #6]
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ae9a:	88fb      	ldrh	r3, [r7, #6]
 800ae9c:	68ba      	ldr	r2, [r7, #8]
 800ae9e:	2100      	movs	r1, #0
 800aea0:	68f8      	ldr	r0, [r7, #12]
 800aea2:	f7f7 fbec 	bl	800267e <USBD_LL_Transmit>

  return USBD_OK;
 800aea6:	2300      	movs	r3, #0
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3710      	adds	r7, #16
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	4613      	mov	r3, r2
 800aebc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aebe:	88fb      	ldrh	r3, [r7, #6]
 800aec0:	68ba      	ldr	r2, [r7, #8]
 800aec2:	2100      	movs	r1, #0
 800aec4:	68f8      	ldr	r0, [r7, #12]
 800aec6:	f7f7 fbda 	bl	800267e <USBD_LL_Transmit>

  return USBD_OK;
 800aeca:	2300      	movs	r3, #0
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3710      	adds	r7, #16
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b084      	sub	sp, #16
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	60f8      	str	r0, [r7, #12]
 800aedc:	60b9      	str	r1, [r7, #8]
 800aede:	4613      	mov	r3, r2
 800aee0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aee2:	88fb      	ldrh	r3, [r7, #6]
 800aee4:	68ba      	ldr	r2, [r7, #8]
 800aee6:	2100      	movs	r1, #0
 800aee8:	68f8      	ldr	r0, [r7, #12]
 800aeea:	f7f7 fbeb 	bl	80026c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aeee:	2300      	movs	r3, #0
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3710      	adds	r7, #16
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b082      	sub	sp, #8
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2204      	movs	r2, #4
 800af04:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800af08:	2300      	movs	r3, #0
 800af0a:	2200      	movs	r2, #0
 800af0c:	2100      	movs	r1, #0
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f7f7 fbb5 	bl	800267e <USBD_LL_Transmit>

  return USBD_OK;
 800af14:	2300      	movs	r3, #0
}
 800af16:	4618      	mov	r0, r3
 800af18:	3708      	adds	r7, #8
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}

0800af1e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800af1e:	b580      	push	{r7, lr}
 800af20:	b082      	sub	sp, #8
 800af22:	af00      	add	r7, sp, #0
 800af24:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2205      	movs	r2, #5
 800af2a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800af2e:	2300      	movs	r3, #0
 800af30:	2200      	movs	r2, #0
 800af32:	2100      	movs	r1, #0
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f7f7 fbc5 	bl	80026c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af3a:	2300      	movs	r3, #0
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3708      	adds	r7, #8
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <siprintf>:
 800af44:	b40e      	push	{r1, r2, r3}
 800af46:	b500      	push	{lr}
 800af48:	b09c      	sub	sp, #112	@ 0x70
 800af4a:	ab1d      	add	r3, sp, #116	@ 0x74
 800af4c:	9002      	str	r0, [sp, #8]
 800af4e:	9006      	str	r0, [sp, #24]
 800af50:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800af54:	4809      	ldr	r0, [pc, #36]	@ (800af7c <siprintf+0x38>)
 800af56:	9107      	str	r1, [sp, #28]
 800af58:	9104      	str	r1, [sp, #16]
 800af5a:	4909      	ldr	r1, [pc, #36]	@ (800af80 <siprintf+0x3c>)
 800af5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800af60:	9105      	str	r1, [sp, #20]
 800af62:	6800      	ldr	r0, [r0, #0]
 800af64:	9301      	str	r3, [sp, #4]
 800af66:	a902      	add	r1, sp, #8
 800af68:	f000 f994 	bl	800b294 <_svfiprintf_r>
 800af6c:	9b02      	ldr	r3, [sp, #8]
 800af6e:	2200      	movs	r2, #0
 800af70:	701a      	strb	r2, [r3, #0]
 800af72:	b01c      	add	sp, #112	@ 0x70
 800af74:	f85d eb04 	ldr.w	lr, [sp], #4
 800af78:	b003      	add	sp, #12
 800af7a:	4770      	bx	lr
 800af7c:	2000016c 	.word	0x2000016c
 800af80:	ffff0208 	.word	0xffff0208

0800af84 <memset>:
 800af84:	4402      	add	r2, r0
 800af86:	4603      	mov	r3, r0
 800af88:	4293      	cmp	r3, r2
 800af8a:	d100      	bne.n	800af8e <memset+0xa>
 800af8c:	4770      	bx	lr
 800af8e:	f803 1b01 	strb.w	r1, [r3], #1
 800af92:	e7f9      	b.n	800af88 <memset+0x4>

0800af94 <__errno>:
 800af94:	4b01      	ldr	r3, [pc, #4]	@ (800af9c <__errno+0x8>)
 800af96:	6818      	ldr	r0, [r3, #0]
 800af98:	4770      	bx	lr
 800af9a:	bf00      	nop
 800af9c:	2000016c 	.word	0x2000016c

0800afa0 <__libc_init_array>:
 800afa0:	b570      	push	{r4, r5, r6, lr}
 800afa2:	4d0d      	ldr	r5, [pc, #52]	@ (800afd8 <__libc_init_array+0x38>)
 800afa4:	4c0d      	ldr	r4, [pc, #52]	@ (800afdc <__libc_init_array+0x3c>)
 800afa6:	1b64      	subs	r4, r4, r5
 800afa8:	10a4      	asrs	r4, r4, #2
 800afaa:	2600      	movs	r6, #0
 800afac:	42a6      	cmp	r6, r4
 800afae:	d109      	bne.n	800afc4 <__libc_init_array+0x24>
 800afb0:	4d0b      	ldr	r5, [pc, #44]	@ (800afe0 <__libc_init_array+0x40>)
 800afb2:	4c0c      	ldr	r4, [pc, #48]	@ (800afe4 <__libc_init_array+0x44>)
 800afb4:	f002 f854 	bl	800d060 <_init>
 800afb8:	1b64      	subs	r4, r4, r5
 800afba:	10a4      	asrs	r4, r4, #2
 800afbc:	2600      	movs	r6, #0
 800afbe:	42a6      	cmp	r6, r4
 800afc0:	d105      	bne.n	800afce <__libc_init_array+0x2e>
 800afc2:	bd70      	pop	{r4, r5, r6, pc}
 800afc4:	f855 3b04 	ldr.w	r3, [r5], #4
 800afc8:	4798      	blx	r3
 800afca:	3601      	adds	r6, #1
 800afcc:	e7ee      	b.n	800afac <__libc_init_array+0xc>
 800afce:	f855 3b04 	ldr.w	r3, [r5], #4
 800afd2:	4798      	blx	r3
 800afd4:	3601      	adds	r6, #1
 800afd6:	e7f2      	b.n	800afbe <__libc_init_array+0x1e>
 800afd8:	0800d398 	.word	0x0800d398
 800afdc:	0800d398 	.word	0x0800d398
 800afe0:	0800d398 	.word	0x0800d398
 800afe4:	0800d39c 	.word	0x0800d39c

0800afe8 <__retarget_lock_acquire_recursive>:
 800afe8:	4770      	bx	lr

0800afea <__retarget_lock_release_recursive>:
 800afea:	4770      	bx	lr

0800afec <_free_r>:
 800afec:	b538      	push	{r3, r4, r5, lr}
 800afee:	4605      	mov	r5, r0
 800aff0:	2900      	cmp	r1, #0
 800aff2:	d041      	beq.n	800b078 <_free_r+0x8c>
 800aff4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aff8:	1f0c      	subs	r4, r1, #4
 800affa:	2b00      	cmp	r3, #0
 800affc:	bfb8      	it	lt
 800affe:	18e4      	addlt	r4, r4, r3
 800b000:	f000 f8e0 	bl	800b1c4 <__malloc_lock>
 800b004:	4a1d      	ldr	r2, [pc, #116]	@ (800b07c <_free_r+0x90>)
 800b006:	6813      	ldr	r3, [r2, #0]
 800b008:	b933      	cbnz	r3, 800b018 <_free_r+0x2c>
 800b00a:	6063      	str	r3, [r4, #4]
 800b00c:	6014      	str	r4, [r2, #0]
 800b00e:	4628      	mov	r0, r5
 800b010:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b014:	f000 b8dc 	b.w	800b1d0 <__malloc_unlock>
 800b018:	42a3      	cmp	r3, r4
 800b01a:	d908      	bls.n	800b02e <_free_r+0x42>
 800b01c:	6820      	ldr	r0, [r4, #0]
 800b01e:	1821      	adds	r1, r4, r0
 800b020:	428b      	cmp	r3, r1
 800b022:	bf01      	itttt	eq
 800b024:	6819      	ldreq	r1, [r3, #0]
 800b026:	685b      	ldreq	r3, [r3, #4]
 800b028:	1809      	addeq	r1, r1, r0
 800b02a:	6021      	streq	r1, [r4, #0]
 800b02c:	e7ed      	b.n	800b00a <_free_r+0x1e>
 800b02e:	461a      	mov	r2, r3
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	b10b      	cbz	r3, 800b038 <_free_r+0x4c>
 800b034:	42a3      	cmp	r3, r4
 800b036:	d9fa      	bls.n	800b02e <_free_r+0x42>
 800b038:	6811      	ldr	r1, [r2, #0]
 800b03a:	1850      	adds	r0, r2, r1
 800b03c:	42a0      	cmp	r0, r4
 800b03e:	d10b      	bne.n	800b058 <_free_r+0x6c>
 800b040:	6820      	ldr	r0, [r4, #0]
 800b042:	4401      	add	r1, r0
 800b044:	1850      	adds	r0, r2, r1
 800b046:	4283      	cmp	r3, r0
 800b048:	6011      	str	r1, [r2, #0]
 800b04a:	d1e0      	bne.n	800b00e <_free_r+0x22>
 800b04c:	6818      	ldr	r0, [r3, #0]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	6053      	str	r3, [r2, #4]
 800b052:	4408      	add	r0, r1
 800b054:	6010      	str	r0, [r2, #0]
 800b056:	e7da      	b.n	800b00e <_free_r+0x22>
 800b058:	d902      	bls.n	800b060 <_free_r+0x74>
 800b05a:	230c      	movs	r3, #12
 800b05c:	602b      	str	r3, [r5, #0]
 800b05e:	e7d6      	b.n	800b00e <_free_r+0x22>
 800b060:	6820      	ldr	r0, [r4, #0]
 800b062:	1821      	adds	r1, r4, r0
 800b064:	428b      	cmp	r3, r1
 800b066:	bf04      	itt	eq
 800b068:	6819      	ldreq	r1, [r3, #0]
 800b06a:	685b      	ldreq	r3, [r3, #4]
 800b06c:	6063      	str	r3, [r4, #4]
 800b06e:	bf04      	itt	eq
 800b070:	1809      	addeq	r1, r1, r0
 800b072:	6021      	streq	r1, [r4, #0]
 800b074:	6054      	str	r4, [r2, #4]
 800b076:	e7ca      	b.n	800b00e <_free_r+0x22>
 800b078:	bd38      	pop	{r3, r4, r5, pc}
 800b07a:	bf00      	nop
 800b07c:	20000c50 	.word	0x20000c50

0800b080 <sbrk_aligned>:
 800b080:	b570      	push	{r4, r5, r6, lr}
 800b082:	4e0f      	ldr	r6, [pc, #60]	@ (800b0c0 <sbrk_aligned+0x40>)
 800b084:	460c      	mov	r4, r1
 800b086:	6831      	ldr	r1, [r6, #0]
 800b088:	4605      	mov	r5, r0
 800b08a:	b911      	cbnz	r1, 800b092 <sbrk_aligned+0x12>
 800b08c:	f000 fba6 	bl	800b7dc <_sbrk_r>
 800b090:	6030      	str	r0, [r6, #0]
 800b092:	4621      	mov	r1, r4
 800b094:	4628      	mov	r0, r5
 800b096:	f000 fba1 	bl	800b7dc <_sbrk_r>
 800b09a:	1c43      	adds	r3, r0, #1
 800b09c:	d103      	bne.n	800b0a6 <sbrk_aligned+0x26>
 800b09e:	f04f 34ff 	mov.w	r4, #4294967295
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	bd70      	pop	{r4, r5, r6, pc}
 800b0a6:	1cc4      	adds	r4, r0, #3
 800b0a8:	f024 0403 	bic.w	r4, r4, #3
 800b0ac:	42a0      	cmp	r0, r4
 800b0ae:	d0f8      	beq.n	800b0a2 <sbrk_aligned+0x22>
 800b0b0:	1a21      	subs	r1, r4, r0
 800b0b2:	4628      	mov	r0, r5
 800b0b4:	f000 fb92 	bl	800b7dc <_sbrk_r>
 800b0b8:	3001      	adds	r0, #1
 800b0ba:	d1f2      	bne.n	800b0a2 <sbrk_aligned+0x22>
 800b0bc:	e7ef      	b.n	800b09e <sbrk_aligned+0x1e>
 800b0be:	bf00      	nop
 800b0c0:	20000c4c 	.word	0x20000c4c

0800b0c4 <_malloc_r>:
 800b0c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0c8:	1ccd      	adds	r5, r1, #3
 800b0ca:	f025 0503 	bic.w	r5, r5, #3
 800b0ce:	3508      	adds	r5, #8
 800b0d0:	2d0c      	cmp	r5, #12
 800b0d2:	bf38      	it	cc
 800b0d4:	250c      	movcc	r5, #12
 800b0d6:	2d00      	cmp	r5, #0
 800b0d8:	4606      	mov	r6, r0
 800b0da:	db01      	blt.n	800b0e0 <_malloc_r+0x1c>
 800b0dc:	42a9      	cmp	r1, r5
 800b0de:	d904      	bls.n	800b0ea <_malloc_r+0x26>
 800b0e0:	230c      	movs	r3, #12
 800b0e2:	6033      	str	r3, [r6, #0]
 800b0e4:	2000      	movs	r0, #0
 800b0e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b1c0 <_malloc_r+0xfc>
 800b0ee:	f000 f869 	bl	800b1c4 <__malloc_lock>
 800b0f2:	f8d8 3000 	ldr.w	r3, [r8]
 800b0f6:	461c      	mov	r4, r3
 800b0f8:	bb44      	cbnz	r4, 800b14c <_malloc_r+0x88>
 800b0fa:	4629      	mov	r1, r5
 800b0fc:	4630      	mov	r0, r6
 800b0fe:	f7ff ffbf 	bl	800b080 <sbrk_aligned>
 800b102:	1c43      	adds	r3, r0, #1
 800b104:	4604      	mov	r4, r0
 800b106:	d158      	bne.n	800b1ba <_malloc_r+0xf6>
 800b108:	f8d8 4000 	ldr.w	r4, [r8]
 800b10c:	4627      	mov	r7, r4
 800b10e:	2f00      	cmp	r7, #0
 800b110:	d143      	bne.n	800b19a <_malloc_r+0xd6>
 800b112:	2c00      	cmp	r4, #0
 800b114:	d04b      	beq.n	800b1ae <_malloc_r+0xea>
 800b116:	6823      	ldr	r3, [r4, #0]
 800b118:	4639      	mov	r1, r7
 800b11a:	4630      	mov	r0, r6
 800b11c:	eb04 0903 	add.w	r9, r4, r3
 800b120:	f000 fb5c 	bl	800b7dc <_sbrk_r>
 800b124:	4581      	cmp	r9, r0
 800b126:	d142      	bne.n	800b1ae <_malloc_r+0xea>
 800b128:	6821      	ldr	r1, [r4, #0]
 800b12a:	1a6d      	subs	r5, r5, r1
 800b12c:	4629      	mov	r1, r5
 800b12e:	4630      	mov	r0, r6
 800b130:	f7ff ffa6 	bl	800b080 <sbrk_aligned>
 800b134:	3001      	adds	r0, #1
 800b136:	d03a      	beq.n	800b1ae <_malloc_r+0xea>
 800b138:	6823      	ldr	r3, [r4, #0]
 800b13a:	442b      	add	r3, r5
 800b13c:	6023      	str	r3, [r4, #0]
 800b13e:	f8d8 3000 	ldr.w	r3, [r8]
 800b142:	685a      	ldr	r2, [r3, #4]
 800b144:	bb62      	cbnz	r2, 800b1a0 <_malloc_r+0xdc>
 800b146:	f8c8 7000 	str.w	r7, [r8]
 800b14a:	e00f      	b.n	800b16c <_malloc_r+0xa8>
 800b14c:	6822      	ldr	r2, [r4, #0]
 800b14e:	1b52      	subs	r2, r2, r5
 800b150:	d420      	bmi.n	800b194 <_malloc_r+0xd0>
 800b152:	2a0b      	cmp	r2, #11
 800b154:	d917      	bls.n	800b186 <_malloc_r+0xc2>
 800b156:	1961      	adds	r1, r4, r5
 800b158:	42a3      	cmp	r3, r4
 800b15a:	6025      	str	r5, [r4, #0]
 800b15c:	bf18      	it	ne
 800b15e:	6059      	strne	r1, [r3, #4]
 800b160:	6863      	ldr	r3, [r4, #4]
 800b162:	bf08      	it	eq
 800b164:	f8c8 1000 	streq.w	r1, [r8]
 800b168:	5162      	str	r2, [r4, r5]
 800b16a:	604b      	str	r3, [r1, #4]
 800b16c:	4630      	mov	r0, r6
 800b16e:	f000 f82f 	bl	800b1d0 <__malloc_unlock>
 800b172:	f104 000b 	add.w	r0, r4, #11
 800b176:	1d23      	adds	r3, r4, #4
 800b178:	f020 0007 	bic.w	r0, r0, #7
 800b17c:	1ac2      	subs	r2, r0, r3
 800b17e:	bf1c      	itt	ne
 800b180:	1a1b      	subne	r3, r3, r0
 800b182:	50a3      	strne	r3, [r4, r2]
 800b184:	e7af      	b.n	800b0e6 <_malloc_r+0x22>
 800b186:	6862      	ldr	r2, [r4, #4]
 800b188:	42a3      	cmp	r3, r4
 800b18a:	bf0c      	ite	eq
 800b18c:	f8c8 2000 	streq.w	r2, [r8]
 800b190:	605a      	strne	r2, [r3, #4]
 800b192:	e7eb      	b.n	800b16c <_malloc_r+0xa8>
 800b194:	4623      	mov	r3, r4
 800b196:	6864      	ldr	r4, [r4, #4]
 800b198:	e7ae      	b.n	800b0f8 <_malloc_r+0x34>
 800b19a:	463c      	mov	r4, r7
 800b19c:	687f      	ldr	r7, [r7, #4]
 800b19e:	e7b6      	b.n	800b10e <_malloc_r+0x4a>
 800b1a0:	461a      	mov	r2, r3
 800b1a2:	685b      	ldr	r3, [r3, #4]
 800b1a4:	42a3      	cmp	r3, r4
 800b1a6:	d1fb      	bne.n	800b1a0 <_malloc_r+0xdc>
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	6053      	str	r3, [r2, #4]
 800b1ac:	e7de      	b.n	800b16c <_malloc_r+0xa8>
 800b1ae:	230c      	movs	r3, #12
 800b1b0:	6033      	str	r3, [r6, #0]
 800b1b2:	4630      	mov	r0, r6
 800b1b4:	f000 f80c 	bl	800b1d0 <__malloc_unlock>
 800b1b8:	e794      	b.n	800b0e4 <_malloc_r+0x20>
 800b1ba:	6005      	str	r5, [r0, #0]
 800b1bc:	e7d6      	b.n	800b16c <_malloc_r+0xa8>
 800b1be:	bf00      	nop
 800b1c0:	20000c50 	.word	0x20000c50

0800b1c4 <__malloc_lock>:
 800b1c4:	4801      	ldr	r0, [pc, #4]	@ (800b1cc <__malloc_lock+0x8>)
 800b1c6:	f7ff bf0f 	b.w	800afe8 <__retarget_lock_acquire_recursive>
 800b1ca:	bf00      	nop
 800b1cc:	20000c48 	.word	0x20000c48

0800b1d0 <__malloc_unlock>:
 800b1d0:	4801      	ldr	r0, [pc, #4]	@ (800b1d8 <__malloc_unlock+0x8>)
 800b1d2:	f7ff bf0a 	b.w	800afea <__retarget_lock_release_recursive>
 800b1d6:	bf00      	nop
 800b1d8:	20000c48 	.word	0x20000c48

0800b1dc <__ssputs_r>:
 800b1dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1e0:	688e      	ldr	r6, [r1, #8]
 800b1e2:	461f      	mov	r7, r3
 800b1e4:	42be      	cmp	r6, r7
 800b1e6:	680b      	ldr	r3, [r1, #0]
 800b1e8:	4682      	mov	sl, r0
 800b1ea:	460c      	mov	r4, r1
 800b1ec:	4690      	mov	r8, r2
 800b1ee:	d82d      	bhi.n	800b24c <__ssputs_r+0x70>
 800b1f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b1f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b1f8:	d026      	beq.n	800b248 <__ssputs_r+0x6c>
 800b1fa:	6965      	ldr	r5, [r4, #20]
 800b1fc:	6909      	ldr	r1, [r1, #16]
 800b1fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b202:	eba3 0901 	sub.w	r9, r3, r1
 800b206:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b20a:	1c7b      	adds	r3, r7, #1
 800b20c:	444b      	add	r3, r9
 800b20e:	106d      	asrs	r5, r5, #1
 800b210:	429d      	cmp	r5, r3
 800b212:	bf38      	it	cc
 800b214:	461d      	movcc	r5, r3
 800b216:	0553      	lsls	r3, r2, #21
 800b218:	d527      	bpl.n	800b26a <__ssputs_r+0x8e>
 800b21a:	4629      	mov	r1, r5
 800b21c:	f7ff ff52 	bl	800b0c4 <_malloc_r>
 800b220:	4606      	mov	r6, r0
 800b222:	b360      	cbz	r0, 800b27e <__ssputs_r+0xa2>
 800b224:	6921      	ldr	r1, [r4, #16]
 800b226:	464a      	mov	r2, r9
 800b228:	f000 fae8 	bl	800b7fc <memcpy>
 800b22c:	89a3      	ldrh	r3, [r4, #12]
 800b22e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b236:	81a3      	strh	r3, [r4, #12]
 800b238:	6126      	str	r6, [r4, #16]
 800b23a:	6165      	str	r5, [r4, #20]
 800b23c:	444e      	add	r6, r9
 800b23e:	eba5 0509 	sub.w	r5, r5, r9
 800b242:	6026      	str	r6, [r4, #0]
 800b244:	60a5      	str	r5, [r4, #8]
 800b246:	463e      	mov	r6, r7
 800b248:	42be      	cmp	r6, r7
 800b24a:	d900      	bls.n	800b24e <__ssputs_r+0x72>
 800b24c:	463e      	mov	r6, r7
 800b24e:	6820      	ldr	r0, [r4, #0]
 800b250:	4632      	mov	r2, r6
 800b252:	4641      	mov	r1, r8
 800b254:	f000 faa8 	bl	800b7a8 <memmove>
 800b258:	68a3      	ldr	r3, [r4, #8]
 800b25a:	1b9b      	subs	r3, r3, r6
 800b25c:	60a3      	str	r3, [r4, #8]
 800b25e:	6823      	ldr	r3, [r4, #0]
 800b260:	4433      	add	r3, r6
 800b262:	6023      	str	r3, [r4, #0]
 800b264:	2000      	movs	r0, #0
 800b266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b26a:	462a      	mov	r2, r5
 800b26c:	f000 fad4 	bl	800b818 <_realloc_r>
 800b270:	4606      	mov	r6, r0
 800b272:	2800      	cmp	r0, #0
 800b274:	d1e0      	bne.n	800b238 <__ssputs_r+0x5c>
 800b276:	6921      	ldr	r1, [r4, #16]
 800b278:	4650      	mov	r0, sl
 800b27a:	f7ff feb7 	bl	800afec <_free_r>
 800b27e:	230c      	movs	r3, #12
 800b280:	f8ca 3000 	str.w	r3, [sl]
 800b284:	89a3      	ldrh	r3, [r4, #12]
 800b286:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b28a:	81a3      	strh	r3, [r4, #12]
 800b28c:	f04f 30ff 	mov.w	r0, #4294967295
 800b290:	e7e9      	b.n	800b266 <__ssputs_r+0x8a>
	...

0800b294 <_svfiprintf_r>:
 800b294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b298:	4698      	mov	r8, r3
 800b29a:	898b      	ldrh	r3, [r1, #12]
 800b29c:	061b      	lsls	r3, r3, #24
 800b29e:	b09d      	sub	sp, #116	@ 0x74
 800b2a0:	4607      	mov	r7, r0
 800b2a2:	460d      	mov	r5, r1
 800b2a4:	4614      	mov	r4, r2
 800b2a6:	d510      	bpl.n	800b2ca <_svfiprintf_r+0x36>
 800b2a8:	690b      	ldr	r3, [r1, #16]
 800b2aa:	b973      	cbnz	r3, 800b2ca <_svfiprintf_r+0x36>
 800b2ac:	2140      	movs	r1, #64	@ 0x40
 800b2ae:	f7ff ff09 	bl	800b0c4 <_malloc_r>
 800b2b2:	6028      	str	r0, [r5, #0]
 800b2b4:	6128      	str	r0, [r5, #16]
 800b2b6:	b930      	cbnz	r0, 800b2c6 <_svfiprintf_r+0x32>
 800b2b8:	230c      	movs	r3, #12
 800b2ba:	603b      	str	r3, [r7, #0]
 800b2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b2c0:	b01d      	add	sp, #116	@ 0x74
 800b2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2c6:	2340      	movs	r3, #64	@ 0x40
 800b2c8:	616b      	str	r3, [r5, #20]
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2ce:	2320      	movs	r3, #32
 800b2d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b2d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2d8:	2330      	movs	r3, #48	@ 0x30
 800b2da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b478 <_svfiprintf_r+0x1e4>
 800b2de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b2e2:	f04f 0901 	mov.w	r9, #1
 800b2e6:	4623      	mov	r3, r4
 800b2e8:	469a      	mov	sl, r3
 800b2ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2ee:	b10a      	cbz	r2, 800b2f4 <_svfiprintf_r+0x60>
 800b2f0:	2a25      	cmp	r2, #37	@ 0x25
 800b2f2:	d1f9      	bne.n	800b2e8 <_svfiprintf_r+0x54>
 800b2f4:	ebba 0b04 	subs.w	fp, sl, r4
 800b2f8:	d00b      	beq.n	800b312 <_svfiprintf_r+0x7e>
 800b2fa:	465b      	mov	r3, fp
 800b2fc:	4622      	mov	r2, r4
 800b2fe:	4629      	mov	r1, r5
 800b300:	4638      	mov	r0, r7
 800b302:	f7ff ff6b 	bl	800b1dc <__ssputs_r>
 800b306:	3001      	adds	r0, #1
 800b308:	f000 80a7 	beq.w	800b45a <_svfiprintf_r+0x1c6>
 800b30c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b30e:	445a      	add	r2, fp
 800b310:	9209      	str	r2, [sp, #36]	@ 0x24
 800b312:	f89a 3000 	ldrb.w	r3, [sl]
 800b316:	2b00      	cmp	r3, #0
 800b318:	f000 809f 	beq.w	800b45a <_svfiprintf_r+0x1c6>
 800b31c:	2300      	movs	r3, #0
 800b31e:	f04f 32ff 	mov.w	r2, #4294967295
 800b322:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b326:	f10a 0a01 	add.w	sl, sl, #1
 800b32a:	9304      	str	r3, [sp, #16]
 800b32c:	9307      	str	r3, [sp, #28]
 800b32e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b332:	931a      	str	r3, [sp, #104]	@ 0x68
 800b334:	4654      	mov	r4, sl
 800b336:	2205      	movs	r2, #5
 800b338:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b33c:	484e      	ldr	r0, [pc, #312]	@ (800b478 <_svfiprintf_r+0x1e4>)
 800b33e:	f7f4 ff47 	bl	80001d0 <memchr>
 800b342:	9a04      	ldr	r2, [sp, #16]
 800b344:	b9d8      	cbnz	r0, 800b37e <_svfiprintf_r+0xea>
 800b346:	06d0      	lsls	r0, r2, #27
 800b348:	bf44      	itt	mi
 800b34a:	2320      	movmi	r3, #32
 800b34c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b350:	0711      	lsls	r1, r2, #28
 800b352:	bf44      	itt	mi
 800b354:	232b      	movmi	r3, #43	@ 0x2b
 800b356:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b35a:	f89a 3000 	ldrb.w	r3, [sl]
 800b35e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b360:	d015      	beq.n	800b38e <_svfiprintf_r+0xfa>
 800b362:	9a07      	ldr	r2, [sp, #28]
 800b364:	4654      	mov	r4, sl
 800b366:	2000      	movs	r0, #0
 800b368:	f04f 0c0a 	mov.w	ip, #10
 800b36c:	4621      	mov	r1, r4
 800b36e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b372:	3b30      	subs	r3, #48	@ 0x30
 800b374:	2b09      	cmp	r3, #9
 800b376:	d94b      	bls.n	800b410 <_svfiprintf_r+0x17c>
 800b378:	b1b0      	cbz	r0, 800b3a8 <_svfiprintf_r+0x114>
 800b37a:	9207      	str	r2, [sp, #28]
 800b37c:	e014      	b.n	800b3a8 <_svfiprintf_r+0x114>
 800b37e:	eba0 0308 	sub.w	r3, r0, r8
 800b382:	fa09 f303 	lsl.w	r3, r9, r3
 800b386:	4313      	orrs	r3, r2
 800b388:	9304      	str	r3, [sp, #16]
 800b38a:	46a2      	mov	sl, r4
 800b38c:	e7d2      	b.n	800b334 <_svfiprintf_r+0xa0>
 800b38e:	9b03      	ldr	r3, [sp, #12]
 800b390:	1d19      	adds	r1, r3, #4
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	9103      	str	r1, [sp, #12]
 800b396:	2b00      	cmp	r3, #0
 800b398:	bfbb      	ittet	lt
 800b39a:	425b      	neglt	r3, r3
 800b39c:	f042 0202 	orrlt.w	r2, r2, #2
 800b3a0:	9307      	strge	r3, [sp, #28]
 800b3a2:	9307      	strlt	r3, [sp, #28]
 800b3a4:	bfb8      	it	lt
 800b3a6:	9204      	strlt	r2, [sp, #16]
 800b3a8:	7823      	ldrb	r3, [r4, #0]
 800b3aa:	2b2e      	cmp	r3, #46	@ 0x2e
 800b3ac:	d10a      	bne.n	800b3c4 <_svfiprintf_r+0x130>
 800b3ae:	7863      	ldrb	r3, [r4, #1]
 800b3b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3b2:	d132      	bne.n	800b41a <_svfiprintf_r+0x186>
 800b3b4:	9b03      	ldr	r3, [sp, #12]
 800b3b6:	1d1a      	adds	r2, r3, #4
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	9203      	str	r2, [sp, #12]
 800b3bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b3c0:	3402      	adds	r4, #2
 800b3c2:	9305      	str	r3, [sp, #20]
 800b3c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b488 <_svfiprintf_r+0x1f4>
 800b3c8:	7821      	ldrb	r1, [r4, #0]
 800b3ca:	2203      	movs	r2, #3
 800b3cc:	4650      	mov	r0, sl
 800b3ce:	f7f4 feff 	bl	80001d0 <memchr>
 800b3d2:	b138      	cbz	r0, 800b3e4 <_svfiprintf_r+0x150>
 800b3d4:	9b04      	ldr	r3, [sp, #16]
 800b3d6:	eba0 000a 	sub.w	r0, r0, sl
 800b3da:	2240      	movs	r2, #64	@ 0x40
 800b3dc:	4082      	lsls	r2, r0
 800b3de:	4313      	orrs	r3, r2
 800b3e0:	3401      	adds	r4, #1
 800b3e2:	9304      	str	r3, [sp, #16]
 800b3e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3e8:	4824      	ldr	r0, [pc, #144]	@ (800b47c <_svfiprintf_r+0x1e8>)
 800b3ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b3ee:	2206      	movs	r2, #6
 800b3f0:	f7f4 feee 	bl	80001d0 <memchr>
 800b3f4:	2800      	cmp	r0, #0
 800b3f6:	d036      	beq.n	800b466 <_svfiprintf_r+0x1d2>
 800b3f8:	4b21      	ldr	r3, [pc, #132]	@ (800b480 <_svfiprintf_r+0x1ec>)
 800b3fa:	bb1b      	cbnz	r3, 800b444 <_svfiprintf_r+0x1b0>
 800b3fc:	9b03      	ldr	r3, [sp, #12]
 800b3fe:	3307      	adds	r3, #7
 800b400:	f023 0307 	bic.w	r3, r3, #7
 800b404:	3308      	adds	r3, #8
 800b406:	9303      	str	r3, [sp, #12]
 800b408:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b40a:	4433      	add	r3, r6
 800b40c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b40e:	e76a      	b.n	800b2e6 <_svfiprintf_r+0x52>
 800b410:	fb0c 3202 	mla	r2, ip, r2, r3
 800b414:	460c      	mov	r4, r1
 800b416:	2001      	movs	r0, #1
 800b418:	e7a8      	b.n	800b36c <_svfiprintf_r+0xd8>
 800b41a:	2300      	movs	r3, #0
 800b41c:	3401      	adds	r4, #1
 800b41e:	9305      	str	r3, [sp, #20]
 800b420:	4619      	mov	r1, r3
 800b422:	f04f 0c0a 	mov.w	ip, #10
 800b426:	4620      	mov	r0, r4
 800b428:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b42c:	3a30      	subs	r2, #48	@ 0x30
 800b42e:	2a09      	cmp	r2, #9
 800b430:	d903      	bls.n	800b43a <_svfiprintf_r+0x1a6>
 800b432:	2b00      	cmp	r3, #0
 800b434:	d0c6      	beq.n	800b3c4 <_svfiprintf_r+0x130>
 800b436:	9105      	str	r1, [sp, #20]
 800b438:	e7c4      	b.n	800b3c4 <_svfiprintf_r+0x130>
 800b43a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b43e:	4604      	mov	r4, r0
 800b440:	2301      	movs	r3, #1
 800b442:	e7f0      	b.n	800b426 <_svfiprintf_r+0x192>
 800b444:	ab03      	add	r3, sp, #12
 800b446:	9300      	str	r3, [sp, #0]
 800b448:	462a      	mov	r2, r5
 800b44a:	4b0e      	ldr	r3, [pc, #56]	@ (800b484 <_svfiprintf_r+0x1f0>)
 800b44c:	a904      	add	r1, sp, #16
 800b44e:	4638      	mov	r0, r7
 800b450:	f3af 8000 	nop.w
 800b454:	1c42      	adds	r2, r0, #1
 800b456:	4606      	mov	r6, r0
 800b458:	d1d6      	bne.n	800b408 <_svfiprintf_r+0x174>
 800b45a:	89ab      	ldrh	r3, [r5, #12]
 800b45c:	065b      	lsls	r3, r3, #25
 800b45e:	f53f af2d 	bmi.w	800b2bc <_svfiprintf_r+0x28>
 800b462:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b464:	e72c      	b.n	800b2c0 <_svfiprintf_r+0x2c>
 800b466:	ab03      	add	r3, sp, #12
 800b468:	9300      	str	r3, [sp, #0]
 800b46a:	462a      	mov	r2, r5
 800b46c:	4b05      	ldr	r3, [pc, #20]	@ (800b484 <_svfiprintf_r+0x1f0>)
 800b46e:	a904      	add	r1, sp, #16
 800b470:	4638      	mov	r0, r7
 800b472:	f000 f879 	bl	800b568 <_printf_i>
 800b476:	e7ed      	b.n	800b454 <_svfiprintf_r+0x1c0>
 800b478:	0800d110 	.word	0x0800d110
 800b47c:	0800d11a 	.word	0x0800d11a
 800b480:	00000000 	.word	0x00000000
 800b484:	0800b1dd 	.word	0x0800b1dd
 800b488:	0800d116 	.word	0x0800d116

0800b48c <_printf_common>:
 800b48c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b490:	4616      	mov	r6, r2
 800b492:	4698      	mov	r8, r3
 800b494:	688a      	ldr	r2, [r1, #8]
 800b496:	690b      	ldr	r3, [r1, #16]
 800b498:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b49c:	4293      	cmp	r3, r2
 800b49e:	bfb8      	it	lt
 800b4a0:	4613      	movlt	r3, r2
 800b4a2:	6033      	str	r3, [r6, #0]
 800b4a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b4a8:	4607      	mov	r7, r0
 800b4aa:	460c      	mov	r4, r1
 800b4ac:	b10a      	cbz	r2, 800b4b2 <_printf_common+0x26>
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	6033      	str	r3, [r6, #0]
 800b4b2:	6823      	ldr	r3, [r4, #0]
 800b4b4:	0699      	lsls	r1, r3, #26
 800b4b6:	bf42      	ittt	mi
 800b4b8:	6833      	ldrmi	r3, [r6, #0]
 800b4ba:	3302      	addmi	r3, #2
 800b4bc:	6033      	strmi	r3, [r6, #0]
 800b4be:	6825      	ldr	r5, [r4, #0]
 800b4c0:	f015 0506 	ands.w	r5, r5, #6
 800b4c4:	d106      	bne.n	800b4d4 <_printf_common+0x48>
 800b4c6:	f104 0a19 	add.w	sl, r4, #25
 800b4ca:	68e3      	ldr	r3, [r4, #12]
 800b4cc:	6832      	ldr	r2, [r6, #0]
 800b4ce:	1a9b      	subs	r3, r3, r2
 800b4d0:	42ab      	cmp	r3, r5
 800b4d2:	dc26      	bgt.n	800b522 <_printf_common+0x96>
 800b4d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b4d8:	6822      	ldr	r2, [r4, #0]
 800b4da:	3b00      	subs	r3, #0
 800b4dc:	bf18      	it	ne
 800b4de:	2301      	movne	r3, #1
 800b4e0:	0692      	lsls	r2, r2, #26
 800b4e2:	d42b      	bmi.n	800b53c <_printf_common+0xb0>
 800b4e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b4e8:	4641      	mov	r1, r8
 800b4ea:	4638      	mov	r0, r7
 800b4ec:	47c8      	blx	r9
 800b4ee:	3001      	adds	r0, #1
 800b4f0:	d01e      	beq.n	800b530 <_printf_common+0xa4>
 800b4f2:	6823      	ldr	r3, [r4, #0]
 800b4f4:	6922      	ldr	r2, [r4, #16]
 800b4f6:	f003 0306 	and.w	r3, r3, #6
 800b4fa:	2b04      	cmp	r3, #4
 800b4fc:	bf02      	ittt	eq
 800b4fe:	68e5      	ldreq	r5, [r4, #12]
 800b500:	6833      	ldreq	r3, [r6, #0]
 800b502:	1aed      	subeq	r5, r5, r3
 800b504:	68a3      	ldr	r3, [r4, #8]
 800b506:	bf0c      	ite	eq
 800b508:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b50c:	2500      	movne	r5, #0
 800b50e:	4293      	cmp	r3, r2
 800b510:	bfc4      	itt	gt
 800b512:	1a9b      	subgt	r3, r3, r2
 800b514:	18ed      	addgt	r5, r5, r3
 800b516:	2600      	movs	r6, #0
 800b518:	341a      	adds	r4, #26
 800b51a:	42b5      	cmp	r5, r6
 800b51c:	d11a      	bne.n	800b554 <_printf_common+0xc8>
 800b51e:	2000      	movs	r0, #0
 800b520:	e008      	b.n	800b534 <_printf_common+0xa8>
 800b522:	2301      	movs	r3, #1
 800b524:	4652      	mov	r2, sl
 800b526:	4641      	mov	r1, r8
 800b528:	4638      	mov	r0, r7
 800b52a:	47c8      	blx	r9
 800b52c:	3001      	adds	r0, #1
 800b52e:	d103      	bne.n	800b538 <_printf_common+0xac>
 800b530:	f04f 30ff 	mov.w	r0, #4294967295
 800b534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b538:	3501      	adds	r5, #1
 800b53a:	e7c6      	b.n	800b4ca <_printf_common+0x3e>
 800b53c:	18e1      	adds	r1, r4, r3
 800b53e:	1c5a      	adds	r2, r3, #1
 800b540:	2030      	movs	r0, #48	@ 0x30
 800b542:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b546:	4422      	add	r2, r4
 800b548:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b54c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b550:	3302      	adds	r3, #2
 800b552:	e7c7      	b.n	800b4e4 <_printf_common+0x58>
 800b554:	2301      	movs	r3, #1
 800b556:	4622      	mov	r2, r4
 800b558:	4641      	mov	r1, r8
 800b55a:	4638      	mov	r0, r7
 800b55c:	47c8      	blx	r9
 800b55e:	3001      	adds	r0, #1
 800b560:	d0e6      	beq.n	800b530 <_printf_common+0xa4>
 800b562:	3601      	adds	r6, #1
 800b564:	e7d9      	b.n	800b51a <_printf_common+0x8e>
	...

0800b568 <_printf_i>:
 800b568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b56c:	7e0f      	ldrb	r7, [r1, #24]
 800b56e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b570:	2f78      	cmp	r7, #120	@ 0x78
 800b572:	4691      	mov	r9, r2
 800b574:	4680      	mov	r8, r0
 800b576:	460c      	mov	r4, r1
 800b578:	469a      	mov	sl, r3
 800b57a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b57e:	d807      	bhi.n	800b590 <_printf_i+0x28>
 800b580:	2f62      	cmp	r7, #98	@ 0x62
 800b582:	d80a      	bhi.n	800b59a <_printf_i+0x32>
 800b584:	2f00      	cmp	r7, #0
 800b586:	f000 80d2 	beq.w	800b72e <_printf_i+0x1c6>
 800b58a:	2f58      	cmp	r7, #88	@ 0x58
 800b58c:	f000 80b9 	beq.w	800b702 <_printf_i+0x19a>
 800b590:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b594:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b598:	e03a      	b.n	800b610 <_printf_i+0xa8>
 800b59a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b59e:	2b15      	cmp	r3, #21
 800b5a0:	d8f6      	bhi.n	800b590 <_printf_i+0x28>
 800b5a2:	a101      	add	r1, pc, #4	@ (adr r1, 800b5a8 <_printf_i+0x40>)
 800b5a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b5a8:	0800b601 	.word	0x0800b601
 800b5ac:	0800b615 	.word	0x0800b615
 800b5b0:	0800b591 	.word	0x0800b591
 800b5b4:	0800b591 	.word	0x0800b591
 800b5b8:	0800b591 	.word	0x0800b591
 800b5bc:	0800b591 	.word	0x0800b591
 800b5c0:	0800b615 	.word	0x0800b615
 800b5c4:	0800b591 	.word	0x0800b591
 800b5c8:	0800b591 	.word	0x0800b591
 800b5cc:	0800b591 	.word	0x0800b591
 800b5d0:	0800b591 	.word	0x0800b591
 800b5d4:	0800b715 	.word	0x0800b715
 800b5d8:	0800b63f 	.word	0x0800b63f
 800b5dc:	0800b6cf 	.word	0x0800b6cf
 800b5e0:	0800b591 	.word	0x0800b591
 800b5e4:	0800b591 	.word	0x0800b591
 800b5e8:	0800b737 	.word	0x0800b737
 800b5ec:	0800b591 	.word	0x0800b591
 800b5f0:	0800b63f 	.word	0x0800b63f
 800b5f4:	0800b591 	.word	0x0800b591
 800b5f8:	0800b591 	.word	0x0800b591
 800b5fc:	0800b6d7 	.word	0x0800b6d7
 800b600:	6833      	ldr	r3, [r6, #0]
 800b602:	1d1a      	adds	r2, r3, #4
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	6032      	str	r2, [r6, #0]
 800b608:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b60c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b610:	2301      	movs	r3, #1
 800b612:	e09d      	b.n	800b750 <_printf_i+0x1e8>
 800b614:	6833      	ldr	r3, [r6, #0]
 800b616:	6820      	ldr	r0, [r4, #0]
 800b618:	1d19      	adds	r1, r3, #4
 800b61a:	6031      	str	r1, [r6, #0]
 800b61c:	0606      	lsls	r6, r0, #24
 800b61e:	d501      	bpl.n	800b624 <_printf_i+0xbc>
 800b620:	681d      	ldr	r5, [r3, #0]
 800b622:	e003      	b.n	800b62c <_printf_i+0xc4>
 800b624:	0645      	lsls	r5, r0, #25
 800b626:	d5fb      	bpl.n	800b620 <_printf_i+0xb8>
 800b628:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b62c:	2d00      	cmp	r5, #0
 800b62e:	da03      	bge.n	800b638 <_printf_i+0xd0>
 800b630:	232d      	movs	r3, #45	@ 0x2d
 800b632:	426d      	negs	r5, r5
 800b634:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b638:	4859      	ldr	r0, [pc, #356]	@ (800b7a0 <_printf_i+0x238>)
 800b63a:	230a      	movs	r3, #10
 800b63c:	e011      	b.n	800b662 <_printf_i+0xfa>
 800b63e:	6821      	ldr	r1, [r4, #0]
 800b640:	6833      	ldr	r3, [r6, #0]
 800b642:	0608      	lsls	r0, r1, #24
 800b644:	f853 5b04 	ldr.w	r5, [r3], #4
 800b648:	d402      	bmi.n	800b650 <_printf_i+0xe8>
 800b64a:	0649      	lsls	r1, r1, #25
 800b64c:	bf48      	it	mi
 800b64e:	b2ad      	uxthmi	r5, r5
 800b650:	2f6f      	cmp	r7, #111	@ 0x6f
 800b652:	4853      	ldr	r0, [pc, #332]	@ (800b7a0 <_printf_i+0x238>)
 800b654:	6033      	str	r3, [r6, #0]
 800b656:	bf14      	ite	ne
 800b658:	230a      	movne	r3, #10
 800b65a:	2308      	moveq	r3, #8
 800b65c:	2100      	movs	r1, #0
 800b65e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b662:	6866      	ldr	r6, [r4, #4]
 800b664:	60a6      	str	r6, [r4, #8]
 800b666:	2e00      	cmp	r6, #0
 800b668:	bfa2      	ittt	ge
 800b66a:	6821      	ldrge	r1, [r4, #0]
 800b66c:	f021 0104 	bicge.w	r1, r1, #4
 800b670:	6021      	strge	r1, [r4, #0]
 800b672:	b90d      	cbnz	r5, 800b678 <_printf_i+0x110>
 800b674:	2e00      	cmp	r6, #0
 800b676:	d04b      	beq.n	800b710 <_printf_i+0x1a8>
 800b678:	4616      	mov	r6, r2
 800b67a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b67e:	fb03 5711 	mls	r7, r3, r1, r5
 800b682:	5dc7      	ldrb	r7, [r0, r7]
 800b684:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b688:	462f      	mov	r7, r5
 800b68a:	42bb      	cmp	r3, r7
 800b68c:	460d      	mov	r5, r1
 800b68e:	d9f4      	bls.n	800b67a <_printf_i+0x112>
 800b690:	2b08      	cmp	r3, #8
 800b692:	d10b      	bne.n	800b6ac <_printf_i+0x144>
 800b694:	6823      	ldr	r3, [r4, #0]
 800b696:	07df      	lsls	r7, r3, #31
 800b698:	d508      	bpl.n	800b6ac <_printf_i+0x144>
 800b69a:	6923      	ldr	r3, [r4, #16]
 800b69c:	6861      	ldr	r1, [r4, #4]
 800b69e:	4299      	cmp	r1, r3
 800b6a0:	bfde      	ittt	le
 800b6a2:	2330      	movle	r3, #48	@ 0x30
 800b6a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b6a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b6ac:	1b92      	subs	r2, r2, r6
 800b6ae:	6122      	str	r2, [r4, #16]
 800b6b0:	f8cd a000 	str.w	sl, [sp]
 800b6b4:	464b      	mov	r3, r9
 800b6b6:	aa03      	add	r2, sp, #12
 800b6b8:	4621      	mov	r1, r4
 800b6ba:	4640      	mov	r0, r8
 800b6bc:	f7ff fee6 	bl	800b48c <_printf_common>
 800b6c0:	3001      	adds	r0, #1
 800b6c2:	d14a      	bne.n	800b75a <_printf_i+0x1f2>
 800b6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c8:	b004      	add	sp, #16
 800b6ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6ce:	6823      	ldr	r3, [r4, #0]
 800b6d0:	f043 0320 	orr.w	r3, r3, #32
 800b6d4:	6023      	str	r3, [r4, #0]
 800b6d6:	4833      	ldr	r0, [pc, #204]	@ (800b7a4 <_printf_i+0x23c>)
 800b6d8:	2778      	movs	r7, #120	@ 0x78
 800b6da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b6de:	6823      	ldr	r3, [r4, #0]
 800b6e0:	6831      	ldr	r1, [r6, #0]
 800b6e2:	061f      	lsls	r7, r3, #24
 800b6e4:	f851 5b04 	ldr.w	r5, [r1], #4
 800b6e8:	d402      	bmi.n	800b6f0 <_printf_i+0x188>
 800b6ea:	065f      	lsls	r7, r3, #25
 800b6ec:	bf48      	it	mi
 800b6ee:	b2ad      	uxthmi	r5, r5
 800b6f0:	6031      	str	r1, [r6, #0]
 800b6f2:	07d9      	lsls	r1, r3, #31
 800b6f4:	bf44      	itt	mi
 800b6f6:	f043 0320 	orrmi.w	r3, r3, #32
 800b6fa:	6023      	strmi	r3, [r4, #0]
 800b6fc:	b11d      	cbz	r5, 800b706 <_printf_i+0x19e>
 800b6fe:	2310      	movs	r3, #16
 800b700:	e7ac      	b.n	800b65c <_printf_i+0xf4>
 800b702:	4827      	ldr	r0, [pc, #156]	@ (800b7a0 <_printf_i+0x238>)
 800b704:	e7e9      	b.n	800b6da <_printf_i+0x172>
 800b706:	6823      	ldr	r3, [r4, #0]
 800b708:	f023 0320 	bic.w	r3, r3, #32
 800b70c:	6023      	str	r3, [r4, #0]
 800b70e:	e7f6      	b.n	800b6fe <_printf_i+0x196>
 800b710:	4616      	mov	r6, r2
 800b712:	e7bd      	b.n	800b690 <_printf_i+0x128>
 800b714:	6833      	ldr	r3, [r6, #0]
 800b716:	6825      	ldr	r5, [r4, #0]
 800b718:	6961      	ldr	r1, [r4, #20]
 800b71a:	1d18      	adds	r0, r3, #4
 800b71c:	6030      	str	r0, [r6, #0]
 800b71e:	062e      	lsls	r6, r5, #24
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	d501      	bpl.n	800b728 <_printf_i+0x1c0>
 800b724:	6019      	str	r1, [r3, #0]
 800b726:	e002      	b.n	800b72e <_printf_i+0x1c6>
 800b728:	0668      	lsls	r0, r5, #25
 800b72a:	d5fb      	bpl.n	800b724 <_printf_i+0x1bc>
 800b72c:	8019      	strh	r1, [r3, #0]
 800b72e:	2300      	movs	r3, #0
 800b730:	6123      	str	r3, [r4, #16]
 800b732:	4616      	mov	r6, r2
 800b734:	e7bc      	b.n	800b6b0 <_printf_i+0x148>
 800b736:	6833      	ldr	r3, [r6, #0]
 800b738:	1d1a      	adds	r2, r3, #4
 800b73a:	6032      	str	r2, [r6, #0]
 800b73c:	681e      	ldr	r6, [r3, #0]
 800b73e:	6862      	ldr	r2, [r4, #4]
 800b740:	2100      	movs	r1, #0
 800b742:	4630      	mov	r0, r6
 800b744:	f7f4 fd44 	bl	80001d0 <memchr>
 800b748:	b108      	cbz	r0, 800b74e <_printf_i+0x1e6>
 800b74a:	1b80      	subs	r0, r0, r6
 800b74c:	6060      	str	r0, [r4, #4]
 800b74e:	6863      	ldr	r3, [r4, #4]
 800b750:	6123      	str	r3, [r4, #16]
 800b752:	2300      	movs	r3, #0
 800b754:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b758:	e7aa      	b.n	800b6b0 <_printf_i+0x148>
 800b75a:	6923      	ldr	r3, [r4, #16]
 800b75c:	4632      	mov	r2, r6
 800b75e:	4649      	mov	r1, r9
 800b760:	4640      	mov	r0, r8
 800b762:	47d0      	blx	sl
 800b764:	3001      	adds	r0, #1
 800b766:	d0ad      	beq.n	800b6c4 <_printf_i+0x15c>
 800b768:	6823      	ldr	r3, [r4, #0]
 800b76a:	079b      	lsls	r3, r3, #30
 800b76c:	d413      	bmi.n	800b796 <_printf_i+0x22e>
 800b76e:	68e0      	ldr	r0, [r4, #12]
 800b770:	9b03      	ldr	r3, [sp, #12]
 800b772:	4298      	cmp	r0, r3
 800b774:	bfb8      	it	lt
 800b776:	4618      	movlt	r0, r3
 800b778:	e7a6      	b.n	800b6c8 <_printf_i+0x160>
 800b77a:	2301      	movs	r3, #1
 800b77c:	4632      	mov	r2, r6
 800b77e:	4649      	mov	r1, r9
 800b780:	4640      	mov	r0, r8
 800b782:	47d0      	blx	sl
 800b784:	3001      	adds	r0, #1
 800b786:	d09d      	beq.n	800b6c4 <_printf_i+0x15c>
 800b788:	3501      	adds	r5, #1
 800b78a:	68e3      	ldr	r3, [r4, #12]
 800b78c:	9903      	ldr	r1, [sp, #12]
 800b78e:	1a5b      	subs	r3, r3, r1
 800b790:	42ab      	cmp	r3, r5
 800b792:	dcf2      	bgt.n	800b77a <_printf_i+0x212>
 800b794:	e7eb      	b.n	800b76e <_printf_i+0x206>
 800b796:	2500      	movs	r5, #0
 800b798:	f104 0619 	add.w	r6, r4, #25
 800b79c:	e7f5      	b.n	800b78a <_printf_i+0x222>
 800b79e:	bf00      	nop
 800b7a0:	0800d121 	.word	0x0800d121
 800b7a4:	0800d132 	.word	0x0800d132

0800b7a8 <memmove>:
 800b7a8:	4288      	cmp	r0, r1
 800b7aa:	b510      	push	{r4, lr}
 800b7ac:	eb01 0402 	add.w	r4, r1, r2
 800b7b0:	d902      	bls.n	800b7b8 <memmove+0x10>
 800b7b2:	4284      	cmp	r4, r0
 800b7b4:	4623      	mov	r3, r4
 800b7b6:	d807      	bhi.n	800b7c8 <memmove+0x20>
 800b7b8:	1e43      	subs	r3, r0, #1
 800b7ba:	42a1      	cmp	r1, r4
 800b7bc:	d008      	beq.n	800b7d0 <memmove+0x28>
 800b7be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b7c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b7c6:	e7f8      	b.n	800b7ba <memmove+0x12>
 800b7c8:	4402      	add	r2, r0
 800b7ca:	4601      	mov	r1, r0
 800b7cc:	428a      	cmp	r2, r1
 800b7ce:	d100      	bne.n	800b7d2 <memmove+0x2a>
 800b7d0:	bd10      	pop	{r4, pc}
 800b7d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b7d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b7da:	e7f7      	b.n	800b7cc <memmove+0x24>

0800b7dc <_sbrk_r>:
 800b7dc:	b538      	push	{r3, r4, r5, lr}
 800b7de:	4d06      	ldr	r5, [pc, #24]	@ (800b7f8 <_sbrk_r+0x1c>)
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	4604      	mov	r4, r0
 800b7e4:	4608      	mov	r0, r1
 800b7e6:	602b      	str	r3, [r5, #0]
 800b7e8:	f7f6 fb9a 	bl	8001f20 <_sbrk>
 800b7ec:	1c43      	adds	r3, r0, #1
 800b7ee:	d102      	bne.n	800b7f6 <_sbrk_r+0x1a>
 800b7f0:	682b      	ldr	r3, [r5, #0]
 800b7f2:	b103      	cbz	r3, 800b7f6 <_sbrk_r+0x1a>
 800b7f4:	6023      	str	r3, [r4, #0]
 800b7f6:	bd38      	pop	{r3, r4, r5, pc}
 800b7f8:	20000c44 	.word	0x20000c44

0800b7fc <memcpy>:
 800b7fc:	440a      	add	r2, r1
 800b7fe:	4291      	cmp	r1, r2
 800b800:	f100 33ff 	add.w	r3, r0, #4294967295
 800b804:	d100      	bne.n	800b808 <memcpy+0xc>
 800b806:	4770      	bx	lr
 800b808:	b510      	push	{r4, lr}
 800b80a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b80e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b812:	4291      	cmp	r1, r2
 800b814:	d1f9      	bne.n	800b80a <memcpy+0xe>
 800b816:	bd10      	pop	{r4, pc}

0800b818 <_realloc_r>:
 800b818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b81c:	4680      	mov	r8, r0
 800b81e:	4615      	mov	r5, r2
 800b820:	460c      	mov	r4, r1
 800b822:	b921      	cbnz	r1, 800b82e <_realloc_r+0x16>
 800b824:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b828:	4611      	mov	r1, r2
 800b82a:	f7ff bc4b 	b.w	800b0c4 <_malloc_r>
 800b82e:	b92a      	cbnz	r2, 800b83c <_realloc_r+0x24>
 800b830:	f7ff fbdc 	bl	800afec <_free_r>
 800b834:	2400      	movs	r4, #0
 800b836:	4620      	mov	r0, r4
 800b838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b83c:	f000 f81a 	bl	800b874 <_malloc_usable_size_r>
 800b840:	4285      	cmp	r5, r0
 800b842:	4606      	mov	r6, r0
 800b844:	d802      	bhi.n	800b84c <_realloc_r+0x34>
 800b846:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b84a:	d8f4      	bhi.n	800b836 <_realloc_r+0x1e>
 800b84c:	4629      	mov	r1, r5
 800b84e:	4640      	mov	r0, r8
 800b850:	f7ff fc38 	bl	800b0c4 <_malloc_r>
 800b854:	4607      	mov	r7, r0
 800b856:	2800      	cmp	r0, #0
 800b858:	d0ec      	beq.n	800b834 <_realloc_r+0x1c>
 800b85a:	42b5      	cmp	r5, r6
 800b85c:	462a      	mov	r2, r5
 800b85e:	4621      	mov	r1, r4
 800b860:	bf28      	it	cs
 800b862:	4632      	movcs	r2, r6
 800b864:	f7ff ffca 	bl	800b7fc <memcpy>
 800b868:	4621      	mov	r1, r4
 800b86a:	4640      	mov	r0, r8
 800b86c:	f7ff fbbe 	bl	800afec <_free_r>
 800b870:	463c      	mov	r4, r7
 800b872:	e7e0      	b.n	800b836 <_realloc_r+0x1e>

0800b874 <_malloc_usable_size_r>:
 800b874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b878:	1f18      	subs	r0, r3, #4
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	bfbc      	itt	lt
 800b87e:	580b      	ldrlt	r3, [r1, r0]
 800b880:	18c0      	addlt	r0, r0, r3
 800b882:	4770      	bx	lr

0800b884 <atan2>:
 800b884:	f000 bb34 	b.w	800bef0 <__ieee754_atan2>

0800b888 <sqrt>:
 800b888:	b538      	push	{r3, r4, r5, lr}
 800b88a:	ed2d 8b02 	vpush	{d8}
 800b88e:	ec55 4b10 	vmov	r4, r5, d0
 800b892:	f000 f8cd 	bl	800ba30 <__ieee754_sqrt>
 800b896:	4622      	mov	r2, r4
 800b898:	462b      	mov	r3, r5
 800b89a:	4620      	mov	r0, r4
 800b89c:	4629      	mov	r1, r5
 800b89e:	eeb0 8a40 	vmov.f32	s16, s0
 800b8a2:	eef0 8a60 	vmov.f32	s17, s1
 800b8a6:	f7f5 f939 	bl	8000b1c <__aeabi_dcmpun>
 800b8aa:	b990      	cbnz	r0, 800b8d2 <sqrt+0x4a>
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	4629      	mov	r1, r5
 800b8b4:	f7f5 f90a 	bl	8000acc <__aeabi_dcmplt>
 800b8b8:	b158      	cbz	r0, 800b8d2 <sqrt+0x4a>
 800b8ba:	f7ff fb6b 	bl	800af94 <__errno>
 800b8be:	2321      	movs	r3, #33	@ 0x21
 800b8c0:	6003      	str	r3, [r0, #0]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	4610      	mov	r0, r2
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	f7f4 ffb7 	bl	800083c <__aeabi_ddiv>
 800b8ce:	ec41 0b18 	vmov	d8, r0, r1
 800b8d2:	eeb0 0a48 	vmov.f32	s0, s16
 800b8d6:	eef0 0a68 	vmov.f32	s1, s17
 800b8da:	ecbd 8b02 	vpop	{d8}
 800b8de:	bd38      	pop	{r3, r4, r5, pc}

0800b8e0 <cos>:
 800b8e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b8e2:	ec53 2b10 	vmov	r2, r3, d0
 800b8e6:	4826      	ldr	r0, [pc, #152]	@ (800b980 <cos+0xa0>)
 800b8e8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b8ec:	4281      	cmp	r1, r0
 800b8ee:	d806      	bhi.n	800b8fe <cos+0x1e>
 800b8f0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800b978 <cos+0x98>
 800b8f4:	b005      	add	sp, #20
 800b8f6:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8fa:	f000 b975 	b.w	800bbe8 <__kernel_cos>
 800b8fe:	4821      	ldr	r0, [pc, #132]	@ (800b984 <cos+0xa4>)
 800b900:	4281      	cmp	r1, r0
 800b902:	d908      	bls.n	800b916 <cos+0x36>
 800b904:	4610      	mov	r0, r2
 800b906:	4619      	mov	r1, r3
 800b908:	f7f4 fcb6 	bl	8000278 <__aeabi_dsub>
 800b90c:	ec41 0b10 	vmov	d0, r0, r1
 800b910:	b005      	add	sp, #20
 800b912:	f85d fb04 	ldr.w	pc, [sp], #4
 800b916:	4668      	mov	r0, sp
 800b918:	f000 fbb2 	bl	800c080 <__ieee754_rem_pio2>
 800b91c:	f000 0003 	and.w	r0, r0, #3
 800b920:	2801      	cmp	r0, #1
 800b922:	d00b      	beq.n	800b93c <cos+0x5c>
 800b924:	2802      	cmp	r0, #2
 800b926:	d015      	beq.n	800b954 <cos+0x74>
 800b928:	b9d8      	cbnz	r0, 800b962 <cos+0x82>
 800b92a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b92e:	ed9d 0b00 	vldr	d0, [sp]
 800b932:	f000 f959 	bl	800bbe8 <__kernel_cos>
 800b936:	ec51 0b10 	vmov	r0, r1, d0
 800b93a:	e7e7      	b.n	800b90c <cos+0x2c>
 800b93c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b940:	ed9d 0b00 	vldr	d0, [sp]
 800b944:	f000 fa18 	bl	800bd78 <__kernel_sin>
 800b948:	ec53 2b10 	vmov	r2, r3, d0
 800b94c:	4610      	mov	r0, r2
 800b94e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b952:	e7db      	b.n	800b90c <cos+0x2c>
 800b954:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b958:	ed9d 0b00 	vldr	d0, [sp]
 800b95c:	f000 f944 	bl	800bbe8 <__kernel_cos>
 800b960:	e7f2      	b.n	800b948 <cos+0x68>
 800b962:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b966:	ed9d 0b00 	vldr	d0, [sp]
 800b96a:	2001      	movs	r0, #1
 800b96c:	f000 fa04 	bl	800bd78 <__kernel_sin>
 800b970:	e7e1      	b.n	800b936 <cos+0x56>
 800b972:	bf00      	nop
 800b974:	f3af 8000 	nop.w
	...
 800b980:	3fe921fb 	.word	0x3fe921fb
 800b984:	7fefffff 	.word	0x7fefffff

0800b988 <sin>:
 800b988:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b98a:	ec53 2b10 	vmov	r2, r3, d0
 800b98e:	4826      	ldr	r0, [pc, #152]	@ (800ba28 <sin+0xa0>)
 800b990:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b994:	4281      	cmp	r1, r0
 800b996:	d807      	bhi.n	800b9a8 <sin+0x20>
 800b998:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800ba20 <sin+0x98>
 800b99c:	2000      	movs	r0, #0
 800b99e:	b005      	add	sp, #20
 800b9a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9a4:	f000 b9e8 	b.w	800bd78 <__kernel_sin>
 800b9a8:	4820      	ldr	r0, [pc, #128]	@ (800ba2c <sin+0xa4>)
 800b9aa:	4281      	cmp	r1, r0
 800b9ac:	d908      	bls.n	800b9c0 <sin+0x38>
 800b9ae:	4610      	mov	r0, r2
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	f7f4 fc61 	bl	8000278 <__aeabi_dsub>
 800b9b6:	ec41 0b10 	vmov	d0, r0, r1
 800b9ba:	b005      	add	sp, #20
 800b9bc:	f85d fb04 	ldr.w	pc, [sp], #4
 800b9c0:	4668      	mov	r0, sp
 800b9c2:	f000 fb5d 	bl	800c080 <__ieee754_rem_pio2>
 800b9c6:	f000 0003 	and.w	r0, r0, #3
 800b9ca:	2801      	cmp	r0, #1
 800b9cc:	d00c      	beq.n	800b9e8 <sin+0x60>
 800b9ce:	2802      	cmp	r0, #2
 800b9d0:	d011      	beq.n	800b9f6 <sin+0x6e>
 800b9d2:	b9e8      	cbnz	r0, 800ba10 <sin+0x88>
 800b9d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b9d8:	ed9d 0b00 	vldr	d0, [sp]
 800b9dc:	2001      	movs	r0, #1
 800b9de:	f000 f9cb 	bl	800bd78 <__kernel_sin>
 800b9e2:	ec51 0b10 	vmov	r0, r1, d0
 800b9e6:	e7e6      	b.n	800b9b6 <sin+0x2e>
 800b9e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b9ec:	ed9d 0b00 	vldr	d0, [sp]
 800b9f0:	f000 f8fa 	bl	800bbe8 <__kernel_cos>
 800b9f4:	e7f5      	b.n	800b9e2 <sin+0x5a>
 800b9f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b9fa:	ed9d 0b00 	vldr	d0, [sp]
 800b9fe:	2001      	movs	r0, #1
 800ba00:	f000 f9ba 	bl	800bd78 <__kernel_sin>
 800ba04:	ec53 2b10 	vmov	r2, r3, d0
 800ba08:	4610      	mov	r0, r2
 800ba0a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800ba0e:	e7d2      	b.n	800b9b6 <sin+0x2e>
 800ba10:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ba14:	ed9d 0b00 	vldr	d0, [sp]
 800ba18:	f000 f8e6 	bl	800bbe8 <__kernel_cos>
 800ba1c:	e7f2      	b.n	800ba04 <sin+0x7c>
 800ba1e:	bf00      	nop
	...
 800ba28:	3fe921fb 	.word	0x3fe921fb
 800ba2c:	7fefffff 	.word	0x7fefffff

0800ba30 <__ieee754_sqrt>:
 800ba30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba34:	4a68      	ldr	r2, [pc, #416]	@ (800bbd8 <__ieee754_sqrt+0x1a8>)
 800ba36:	ec55 4b10 	vmov	r4, r5, d0
 800ba3a:	43aa      	bics	r2, r5
 800ba3c:	462b      	mov	r3, r5
 800ba3e:	4621      	mov	r1, r4
 800ba40:	d110      	bne.n	800ba64 <__ieee754_sqrt+0x34>
 800ba42:	4622      	mov	r2, r4
 800ba44:	4620      	mov	r0, r4
 800ba46:	4629      	mov	r1, r5
 800ba48:	f7f4 fdce 	bl	80005e8 <__aeabi_dmul>
 800ba4c:	4602      	mov	r2, r0
 800ba4e:	460b      	mov	r3, r1
 800ba50:	4620      	mov	r0, r4
 800ba52:	4629      	mov	r1, r5
 800ba54:	f7f4 fc12 	bl	800027c <__adddf3>
 800ba58:	4604      	mov	r4, r0
 800ba5a:	460d      	mov	r5, r1
 800ba5c:	ec45 4b10 	vmov	d0, r4, r5
 800ba60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba64:	2d00      	cmp	r5, #0
 800ba66:	dc0e      	bgt.n	800ba86 <__ieee754_sqrt+0x56>
 800ba68:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800ba6c:	4322      	orrs	r2, r4
 800ba6e:	d0f5      	beq.n	800ba5c <__ieee754_sqrt+0x2c>
 800ba70:	b19d      	cbz	r5, 800ba9a <__ieee754_sqrt+0x6a>
 800ba72:	4622      	mov	r2, r4
 800ba74:	4620      	mov	r0, r4
 800ba76:	4629      	mov	r1, r5
 800ba78:	f7f4 fbfe 	bl	8000278 <__aeabi_dsub>
 800ba7c:	4602      	mov	r2, r0
 800ba7e:	460b      	mov	r3, r1
 800ba80:	f7f4 fedc 	bl	800083c <__aeabi_ddiv>
 800ba84:	e7e8      	b.n	800ba58 <__ieee754_sqrt+0x28>
 800ba86:	152a      	asrs	r2, r5, #20
 800ba88:	d115      	bne.n	800bab6 <__ieee754_sqrt+0x86>
 800ba8a:	2000      	movs	r0, #0
 800ba8c:	e009      	b.n	800baa2 <__ieee754_sqrt+0x72>
 800ba8e:	0acb      	lsrs	r3, r1, #11
 800ba90:	3a15      	subs	r2, #21
 800ba92:	0549      	lsls	r1, r1, #21
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d0fa      	beq.n	800ba8e <__ieee754_sqrt+0x5e>
 800ba98:	e7f7      	b.n	800ba8a <__ieee754_sqrt+0x5a>
 800ba9a:	462a      	mov	r2, r5
 800ba9c:	e7fa      	b.n	800ba94 <__ieee754_sqrt+0x64>
 800ba9e:	005b      	lsls	r3, r3, #1
 800baa0:	3001      	adds	r0, #1
 800baa2:	02dc      	lsls	r4, r3, #11
 800baa4:	d5fb      	bpl.n	800ba9e <__ieee754_sqrt+0x6e>
 800baa6:	1e44      	subs	r4, r0, #1
 800baa8:	1b12      	subs	r2, r2, r4
 800baaa:	f1c0 0420 	rsb	r4, r0, #32
 800baae:	fa21 f404 	lsr.w	r4, r1, r4
 800bab2:	4323      	orrs	r3, r4
 800bab4:	4081      	lsls	r1, r0
 800bab6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800baba:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800babe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bac2:	07d2      	lsls	r2, r2, #31
 800bac4:	bf5c      	itt	pl
 800bac6:	005b      	lslpl	r3, r3, #1
 800bac8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800bacc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bad0:	bf58      	it	pl
 800bad2:	0049      	lslpl	r1, r1, #1
 800bad4:	2600      	movs	r6, #0
 800bad6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800bada:	106d      	asrs	r5, r5, #1
 800badc:	0049      	lsls	r1, r1, #1
 800bade:	2016      	movs	r0, #22
 800bae0:	4632      	mov	r2, r6
 800bae2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800bae6:	1917      	adds	r7, r2, r4
 800bae8:	429f      	cmp	r7, r3
 800baea:	bfde      	ittt	le
 800baec:	193a      	addle	r2, r7, r4
 800baee:	1bdb      	suble	r3, r3, r7
 800baf0:	1936      	addle	r6, r6, r4
 800baf2:	0fcf      	lsrs	r7, r1, #31
 800baf4:	3801      	subs	r0, #1
 800baf6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800bafa:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bafe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800bb02:	d1f0      	bne.n	800bae6 <__ieee754_sqrt+0xb6>
 800bb04:	4604      	mov	r4, r0
 800bb06:	2720      	movs	r7, #32
 800bb08:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	eb00 0e0c 	add.w	lr, r0, ip
 800bb12:	db02      	blt.n	800bb1a <__ieee754_sqrt+0xea>
 800bb14:	d113      	bne.n	800bb3e <__ieee754_sqrt+0x10e>
 800bb16:	458e      	cmp	lr, r1
 800bb18:	d811      	bhi.n	800bb3e <__ieee754_sqrt+0x10e>
 800bb1a:	f1be 0f00 	cmp.w	lr, #0
 800bb1e:	eb0e 000c 	add.w	r0, lr, ip
 800bb22:	da42      	bge.n	800bbaa <__ieee754_sqrt+0x17a>
 800bb24:	2800      	cmp	r0, #0
 800bb26:	db40      	blt.n	800bbaa <__ieee754_sqrt+0x17a>
 800bb28:	f102 0801 	add.w	r8, r2, #1
 800bb2c:	1a9b      	subs	r3, r3, r2
 800bb2e:	458e      	cmp	lr, r1
 800bb30:	bf88      	it	hi
 800bb32:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800bb36:	eba1 010e 	sub.w	r1, r1, lr
 800bb3a:	4464      	add	r4, ip
 800bb3c:	4642      	mov	r2, r8
 800bb3e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800bb42:	3f01      	subs	r7, #1
 800bb44:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800bb48:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bb4c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800bb50:	d1dc      	bne.n	800bb0c <__ieee754_sqrt+0xdc>
 800bb52:	4319      	orrs	r1, r3
 800bb54:	d01b      	beq.n	800bb8e <__ieee754_sqrt+0x15e>
 800bb56:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800bbdc <__ieee754_sqrt+0x1ac>
 800bb5a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800bbe0 <__ieee754_sqrt+0x1b0>
 800bb5e:	e9da 0100 	ldrd	r0, r1, [sl]
 800bb62:	e9db 2300 	ldrd	r2, r3, [fp]
 800bb66:	f7f4 fb87 	bl	8000278 <__aeabi_dsub>
 800bb6a:	e9da 8900 	ldrd	r8, r9, [sl]
 800bb6e:	4602      	mov	r2, r0
 800bb70:	460b      	mov	r3, r1
 800bb72:	4640      	mov	r0, r8
 800bb74:	4649      	mov	r1, r9
 800bb76:	f7f4 ffb3 	bl	8000ae0 <__aeabi_dcmple>
 800bb7a:	b140      	cbz	r0, 800bb8e <__ieee754_sqrt+0x15e>
 800bb7c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800bb80:	e9da 0100 	ldrd	r0, r1, [sl]
 800bb84:	e9db 2300 	ldrd	r2, r3, [fp]
 800bb88:	d111      	bne.n	800bbae <__ieee754_sqrt+0x17e>
 800bb8a:	3601      	adds	r6, #1
 800bb8c:	463c      	mov	r4, r7
 800bb8e:	1072      	asrs	r2, r6, #1
 800bb90:	0863      	lsrs	r3, r4, #1
 800bb92:	07f1      	lsls	r1, r6, #31
 800bb94:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800bb98:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800bb9c:	bf48      	it	mi
 800bb9e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800bba2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800bba6:	4618      	mov	r0, r3
 800bba8:	e756      	b.n	800ba58 <__ieee754_sqrt+0x28>
 800bbaa:	4690      	mov	r8, r2
 800bbac:	e7be      	b.n	800bb2c <__ieee754_sqrt+0xfc>
 800bbae:	f7f4 fb65 	bl	800027c <__adddf3>
 800bbb2:	e9da 8900 	ldrd	r8, r9, [sl]
 800bbb6:	4602      	mov	r2, r0
 800bbb8:	460b      	mov	r3, r1
 800bbba:	4640      	mov	r0, r8
 800bbbc:	4649      	mov	r1, r9
 800bbbe:	f7f4 ff85 	bl	8000acc <__aeabi_dcmplt>
 800bbc2:	b120      	cbz	r0, 800bbce <__ieee754_sqrt+0x19e>
 800bbc4:	1ca0      	adds	r0, r4, #2
 800bbc6:	bf08      	it	eq
 800bbc8:	3601      	addeq	r6, #1
 800bbca:	3402      	adds	r4, #2
 800bbcc:	e7df      	b.n	800bb8e <__ieee754_sqrt+0x15e>
 800bbce:	1c63      	adds	r3, r4, #1
 800bbd0:	f023 0401 	bic.w	r4, r3, #1
 800bbd4:	e7db      	b.n	800bb8e <__ieee754_sqrt+0x15e>
 800bbd6:	bf00      	nop
 800bbd8:	7ff00000 	.word	0x7ff00000
 800bbdc:	200001c8 	.word	0x200001c8
 800bbe0:	200001c0 	.word	0x200001c0
 800bbe4:	00000000 	.word	0x00000000

0800bbe8 <__kernel_cos>:
 800bbe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbec:	ec57 6b10 	vmov	r6, r7, d0
 800bbf0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800bbf4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800bbf8:	ed8d 1b00 	vstr	d1, [sp]
 800bbfc:	d206      	bcs.n	800bc0c <__kernel_cos+0x24>
 800bbfe:	4630      	mov	r0, r6
 800bc00:	4639      	mov	r1, r7
 800bc02:	f7f4 ffa1 	bl	8000b48 <__aeabi_d2iz>
 800bc06:	2800      	cmp	r0, #0
 800bc08:	f000 8088 	beq.w	800bd1c <__kernel_cos+0x134>
 800bc0c:	4632      	mov	r2, r6
 800bc0e:	463b      	mov	r3, r7
 800bc10:	4630      	mov	r0, r6
 800bc12:	4639      	mov	r1, r7
 800bc14:	f7f4 fce8 	bl	80005e8 <__aeabi_dmul>
 800bc18:	4b51      	ldr	r3, [pc, #324]	@ (800bd60 <__kernel_cos+0x178>)
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	4604      	mov	r4, r0
 800bc1e:	460d      	mov	r5, r1
 800bc20:	f7f4 fce2 	bl	80005e8 <__aeabi_dmul>
 800bc24:	a340      	add	r3, pc, #256	@ (adr r3, 800bd28 <__kernel_cos+0x140>)
 800bc26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc2a:	4682      	mov	sl, r0
 800bc2c:	468b      	mov	fp, r1
 800bc2e:	4620      	mov	r0, r4
 800bc30:	4629      	mov	r1, r5
 800bc32:	f7f4 fcd9 	bl	80005e8 <__aeabi_dmul>
 800bc36:	a33e      	add	r3, pc, #248	@ (adr r3, 800bd30 <__kernel_cos+0x148>)
 800bc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc3c:	f7f4 fb1e 	bl	800027c <__adddf3>
 800bc40:	4622      	mov	r2, r4
 800bc42:	462b      	mov	r3, r5
 800bc44:	f7f4 fcd0 	bl	80005e8 <__aeabi_dmul>
 800bc48:	a33b      	add	r3, pc, #236	@ (adr r3, 800bd38 <__kernel_cos+0x150>)
 800bc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc4e:	f7f4 fb13 	bl	8000278 <__aeabi_dsub>
 800bc52:	4622      	mov	r2, r4
 800bc54:	462b      	mov	r3, r5
 800bc56:	f7f4 fcc7 	bl	80005e8 <__aeabi_dmul>
 800bc5a:	a339      	add	r3, pc, #228	@ (adr r3, 800bd40 <__kernel_cos+0x158>)
 800bc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc60:	f7f4 fb0c 	bl	800027c <__adddf3>
 800bc64:	4622      	mov	r2, r4
 800bc66:	462b      	mov	r3, r5
 800bc68:	f7f4 fcbe 	bl	80005e8 <__aeabi_dmul>
 800bc6c:	a336      	add	r3, pc, #216	@ (adr r3, 800bd48 <__kernel_cos+0x160>)
 800bc6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc72:	f7f4 fb01 	bl	8000278 <__aeabi_dsub>
 800bc76:	4622      	mov	r2, r4
 800bc78:	462b      	mov	r3, r5
 800bc7a:	f7f4 fcb5 	bl	80005e8 <__aeabi_dmul>
 800bc7e:	a334      	add	r3, pc, #208	@ (adr r3, 800bd50 <__kernel_cos+0x168>)
 800bc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc84:	f7f4 fafa 	bl	800027c <__adddf3>
 800bc88:	4622      	mov	r2, r4
 800bc8a:	462b      	mov	r3, r5
 800bc8c:	f7f4 fcac 	bl	80005e8 <__aeabi_dmul>
 800bc90:	4622      	mov	r2, r4
 800bc92:	462b      	mov	r3, r5
 800bc94:	f7f4 fca8 	bl	80005e8 <__aeabi_dmul>
 800bc98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc9c:	4604      	mov	r4, r0
 800bc9e:	460d      	mov	r5, r1
 800bca0:	4630      	mov	r0, r6
 800bca2:	4639      	mov	r1, r7
 800bca4:	f7f4 fca0 	bl	80005e8 <__aeabi_dmul>
 800bca8:	460b      	mov	r3, r1
 800bcaa:	4602      	mov	r2, r0
 800bcac:	4629      	mov	r1, r5
 800bcae:	4620      	mov	r0, r4
 800bcb0:	f7f4 fae2 	bl	8000278 <__aeabi_dsub>
 800bcb4:	4b2b      	ldr	r3, [pc, #172]	@ (800bd64 <__kernel_cos+0x17c>)
 800bcb6:	4598      	cmp	r8, r3
 800bcb8:	4606      	mov	r6, r0
 800bcba:	460f      	mov	r7, r1
 800bcbc:	d810      	bhi.n	800bce0 <__kernel_cos+0xf8>
 800bcbe:	4602      	mov	r2, r0
 800bcc0:	460b      	mov	r3, r1
 800bcc2:	4650      	mov	r0, sl
 800bcc4:	4659      	mov	r1, fp
 800bcc6:	f7f4 fad7 	bl	8000278 <__aeabi_dsub>
 800bcca:	460b      	mov	r3, r1
 800bccc:	4926      	ldr	r1, [pc, #152]	@ (800bd68 <__kernel_cos+0x180>)
 800bcce:	4602      	mov	r2, r0
 800bcd0:	2000      	movs	r0, #0
 800bcd2:	f7f4 fad1 	bl	8000278 <__aeabi_dsub>
 800bcd6:	ec41 0b10 	vmov	d0, r0, r1
 800bcda:	b003      	add	sp, #12
 800bcdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bce0:	4b22      	ldr	r3, [pc, #136]	@ (800bd6c <__kernel_cos+0x184>)
 800bce2:	4921      	ldr	r1, [pc, #132]	@ (800bd68 <__kernel_cos+0x180>)
 800bce4:	4598      	cmp	r8, r3
 800bce6:	bf8c      	ite	hi
 800bce8:	4d21      	ldrhi	r5, [pc, #132]	@ (800bd70 <__kernel_cos+0x188>)
 800bcea:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800bcee:	2400      	movs	r4, #0
 800bcf0:	4622      	mov	r2, r4
 800bcf2:	462b      	mov	r3, r5
 800bcf4:	2000      	movs	r0, #0
 800bcf6:	f7f4 fabf 	bl	8000278 <__aeabi_dsub>
 800bcfa:	4622      	mov	r2, r4
 800bcfc:	4680      	mov	r8, r0
 800bcfe:	4689      	mov	r9, r1
 800bd00:	462b      	mov	r3, r5
 800bd02:	4650      	mov	r0, sl
 800bd04:	4659      	mov	r1, fp
 800bd06:	f7f4 fab7 	bl	8000278 <__aeabi_dsub>
 800bd0a:	4632      	mov	r2, r6
 800bd0c:	463b      	mov	r3, r7
 800bd0e:	f7f4 fab3 	bl	8000278 <__aeabi_dsub>
 800bd12:	4602      	mov	r2, r0
 800bd14:	460b      	mov	r3, r1
 800bd16:	4640      	mov	r0, r8
 800bd18:	4649      	mov	r1, r9
 800bd1a:	e7da      	b.n	800bcd2 <__kernel_cos+0xea>
 800bd1c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800bd58 <__kernel_cos+0x170>
 800bd20:	e7db      	b.n	800bcda <__kernel_cos+0xf2>
 800bd22:	bf00      	nop
 800bd24:	f3af 8000 	nop.w
 800bd28:	be8838d4 	.word	0xbe8838d4
 800bd2c:	bda8fae9 	.word	0xbda8fae9
 800bd30:	bdb4b1c4 	.word	0xbdb4b1c4
 800bd34:	3e21ee9e 	.word	0x3e21ee9e
 800bd38:	809c52ad 	.word	0x809c52ad
 800bd3c:	3e927e4f 	.word	0x3e927e4f
 800bd40:	19cb1590 	.word	0x19cb1590
 800bd44:	3efa01a0 	.word	0x3efa01a0
 800bd48:	16c15177 	.word	0x16c15177
 800bd4c:	3f56c16c 	.word	0x3f56c16c
 800bd50:	5555554c 	.word	0x5555554c
 800bd54:	3fa55555 	.word	0x3fa55555
 800bd58:	00000000 	.word	0x00000000
 800bd5c:	3ff00000 	.word	0x3ff00000
 800bd60:	3fe00000 	.word	0x3fe00000
 800bd64:	3fd33332 	.word	0x3fd33332
 800bd68:	3ff00000 	.word	0x3ff00000
 800bd6c:	3fe90000 	.word	0x3fe90000
 800bd70:	3fd20000 	.word	0x3fd20000
 800bd74:	00000000 	.word	0x00000000

0800bd78 <__kernel_sin>:
 800bd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd7c:	ec55 4b10 	vmov	r4, r5, d0
 800bd80:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800bd84:	b085      	sub	sp, #20
 800bd86:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800bd8a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800bd8e:	4680      	mov	r8, r0
 800bd90:	d205      	bcs.n	800bd9e <__kernel_sin+0x26>
 800bd92:	4620      	mov	r0, r4
 800bd94:	4629      	mov	r1, r5
 800bd96:	f7f4 fed7 	bl	8000b48 <__aeabi_d2iz>
 800bd9a:	2800      	cmp	r0, #0
 800bd9c:	d052      	beq.n	800be44 <__kernel_sin+0xcc>
 800bd9e:	4622      	mov	r2, r4
 800bda0:	462b      	mov	r3, r5
 800bda2:	4620      	mov	r0, r4
 800bda4:	4629      	mov	r1, r5
 800bda6:	f7f4 fc1f 	bl	80005e8 <__aeabi_dmul>
 800bdaa:	4682      	mov	sl, r0
 800bdac:	468b      	mov	fp, r1
 800bdae:	4602      	mov	r2, r0
 800bdb0:	460b      	mov	r3, r1
 800bdb2:	4620      	mov	r0, r4
 800bdb4:	4629      	mov	r1, r5
 800bdb6:	f7f4 fc17 	bl	80005e8 <__aeabi_dmul>
 800bdba:	a342      	add	r3, pc, #264	@ (adr r3, 800bec4 <__kernel_sin+0x14c>)
 800bdbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc0:	e9cd 0100 	strd	r0, r1, [sp]
 800bdc4:	4650      	mov	r0, sl
 800bdc6:	4659      	mov	r1, fp
 800bdc8:	f7f4 fc0e 	bl	80005e8 <__aeabi_dmul>
 800bdcc:	a33f      	add	r3, pc, #252	@ (adr r3, 800becc <__kernel_sin+0x154>)
 800bdce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd2:	f7f4 fa51 	bl	8000278 <__aeabi_dsub>
 800bdd6:	4652      	mov	r2, sl
 800bdd8:	465b      	mov	r3, fp
 800bdda:	f7f4 fc05 	bl	80005e8 <__aeabi_dmul>
 800bdde:	a33d      	add	r3, pc, #244	@ (adr r3, 800bed4 <__kernel_sin+0x15c>)
 800bde0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde4:	f7f4 fa4a 	bl	800027c <__adddf3>
 800bde8:	4652      	mov	r2, sl
 800bdea:	465b      	mov	r3, fp
 800bdec:	f7f4 fbfc 	bl	80005e8 <__aeabi_dmul>
 800bdf0:	a33a      	add	r3, pc, #232	@ (adr r3, 800bedc <__kernel_sin+0x164>)
 800bdf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf6:	f7f4 fa3f 	bl	8000278 <__aeabi_dsub>
 800bdfa:	4652      	mov	r2, sl
 800bdfc:	465b      	mov	r3, fp
 800bdfe:	f7f4 fbf3 	bl	80005e8 <__aeabi_dmul>
 800be02:	a338      	add	r3, pc, #224	@ (adr r3, 800bee4 <__kernel_sin+0x16c>)
 800be04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be08:	f7f4 fa38 	bl	800027c <__adddf3>
 800be0c:	4606      	mov	r6, r0
 800be0e:	460f      	mov	r7, r1
 800be10:	f1b8 0f00 	cmp.w	r8, #0
 800be14:	d11b      	bne.n	800be4e <__kernel_sin+0xd6>
 800be16:	4602      	mov	r2, r0
 800be18:	460b      	mov	r3, r1
 800be1a:	4650      	mov	r0, sl
 800be1c:	4659      	mov	r1, fp
 800be1e:	f7f4 fbe3 	bl	80005e8 <__aeabi_dmul>
 800be22:	a325      	add	r3, pc, #148	@ (adr r3, 800beb8 <__kernel_sin+0x140>)
 800be24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be28:	f7f4 fa26 	bl	8000278 <__aeabi_dsub>
 800be2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be30:	f7f4 fbda 	bl	80005e8 <__aeabi_dmul>
 800be34:	4602      	mov	r2, r0
 800be36:	460b      	mov	r3, r1
 800be38:	4620      	mov	r0, r4
 800be3a:	4629      	mov	r1, r5
 800be3c:	f7f4 fa1e 	bl	800027c <__adddf3>
 800be40:	4604      	mov	r4, r0
 800be42:	460d      	mov	r5, r1
 800be44:	ec45 4b10 	vmov	d0, r4, r5
 800be48:	b005      	add	sp, #20
 800be4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be52:	4b1b      	ldr	r3, [pc, #108]	@ (800bec0 <__kernel_sin+0x148>)
 800be54:	2200      	movs	r2, #0
 800be56:	f7f4 fbc7 	bl	80005e8 <__aeabi_dmul>
 800be5a:	4632      	mov	r2, r6
 800be5c:	4680      	mov	r8, r0
 800be5e:	4689      	mov	r9, r1
 800be60:	463b      	mov	r3, r7
 800be62:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be66:	f7f4 fbbf 	bl	80005e8 <__aeabi_dmul>
 800be6a:	4602      	mov	r2, r0
 800be6c:	460b      	mov	r3, r1
 800be6e:	4640      	mov	r0, r8
 800be70:	4649      	mov	r1, r9
 800be72:	f7f4 fa01 	bl	8000278 <__aeabi_dsub>
 800be76:	4652      	mov	r2, sl
 800be78:	465b      	mov	r3, fp
 800be7a:	f7f4 fbb5 	bl	80005e8 <__aeabi_dmul>
 800be7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be82:	f7f4 f9f9 	bl	8000278 <__aeabi_dsub>
 800be86:	a30c      	add	r3, pc, #48	@ (adr r3, 800beb8 <__kernel_sin+0x140>)
 800be88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be8c:	4606      	mov	r6, r0
 800be8e:	460f      	mov	r7, r1
 800be90:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be94:	f7f4 fba8 	bl	80005e8 <__aeabi_dmul>
 800be98:	4602      	mov	r2, r0
 800be9a:	460b      	mov	r3, r1
 800be9c:	4630      	mov	r0, r6
 800be9e:	4639      	mov	r1, r7
 800bea0:	f7f4 f9ec 	bl	800027c <__adddf3>
 800bea4:	4602      	mov	r2, r0
 800bea6:	460b      	mov	r3, r1
 800bea8:	4620      	mov	r0, r4
 800beaa:	4629      	mov	r1, r5
 800beac:	f7f4 f9e4 	bl	8000278 <__aeabi_dsub>
 800beb0:	e7c6      	b.n	800be40 <__kernel_sin+0xc8>
 800beb2:	bf00      	nop
 800beb4:	f3af 8000 	nop.w
 800beb8:	55555549 	.word	0x55555549
 800bebc:	3fc55555 	.word	0x3fc55555
 800bec0:	3fe00000 	.word	0x3fe00000
 800bec4:	5acfd57c 	.word	0x5acfd57c
 800bec8:	3de5d93a 	.word	0x3de5d93a
 800becc:	8a2b9ceb 	.word	0x8a2b9ceb
 800bed0:	3e5ae5e6 	.word	0x3e5ae5e6
 800bed4:	57b1fe7d 	.word	0x57b1fe7d
 800bed8:	3ec71de3 	.word	0x3ec71de3
 800bedc:	19c161d5 	.word	0x19c161d5
 800bee0:	3f2a01a0 	.word	0x3f2a01a0
 800bee4:	1110f8a6 	.word	0x1110f8a6
 800bee8:	3f811111 	.word	0x3f811111
 800beec:	00000000 	.word	0x00000000

0800bef0 <__ieee754_atan2>:
 800bef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bef4:	ec57 6b11 	vmov	r6, r7, d1
 800bef8:	4273      	negs	r3, r6
 800befa:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800c078 <__ieee754_atan2+0x188>
 800befe:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800bf02:	4333      	orrs	r3, r6
 800bf04:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800bf08:	4543      	cmp	r3, r8
 800bf0a:	ec51 0b10 	vmov	r0, r1, d0
 800bf0e:	4635      	mov	r5, r6
 800bf10:	d809      	bhi.n	800bf26 <__ieee754_atan2+0x36>
 800bf12:	4244      	negs	r4, r0
 800bf14:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bf18:	4304      	orrs	r4, r0
 800bf1a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800bf1e:	4544      	cmp	r4, r8
 800bf20:	468e      	mov	lr, r1
 800bf22:	4681      	mov	r9, r0
 800bf24:	d907      	bls.n	800bf36 <__ieee754_atan2+0x46>
 800bf26:	4632      	mov	r2, r6
 800bf28:	463b      	mov	r3, r7
 800bf2a:	f7f4 f9a7 	bl	800027c <__adddf3>
 800bf2e:	ec41 0b10 	vmov	d0, r0, r1
 800bf32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf36:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800bf3a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800bf3e:	4334      	orrs	r4, r6
 800bf40:	d103      	bne.n	800bf4a <__ieee754_atan2+0x5a>
 800bf42:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf46:	f000 ba97 	b.w	800c478 <atan>
 800bf4a:	17bc      	asrs	r4, r7, #30
 800bf4c:	f004 0402 	and.w	r4, r4, #2
 800bf50:	ea53 0909 	orrs.w	r9, r3, r9
 800bf54:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800bf58:	d107      	bne.n	800bf6a <__ieee754_atan2+0x7a>
 800bf5a:	2c02      	cmp	r4, #2
 800bf5c:	d05f      	beq.n	800c01e <__ieee754_atan2+0x12e>
 800bf5e:	2c03      	cmp	r4, #3
 800bf60:	d1e5      	bne.n	800bf2e <__ieee754_atan2+0x3e>
 800bf62:	a141      	add	r1, pc, #260	@ (adr r1, 800c068 <__ieee754_atan2+0x178>)
 800bf64:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf68:	e7e1      	b.n	800bf2e <__ieee754_atan2+0x3e>
 800bf6a:	4315      	orrs	r5, r2
 800bf6c:	d106      	bne.n	800bf7c <__ieee754_atan2+0x8c>
 800bf6e:	f1be 0f00 	cmp.w	lr, #0
 800bf72:	da5f      	bge.n	800c034 <__ieee754_atan2+0x144>
 800bf74:	a13e      	add	r1, pc, #248	@ (adr r1, 800c070 <__ieee754_atan2+0x180>)
 800bf76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf7a:	e7d8      	b.n	800bf2e <__ieee754_atan2+0x3e>
 800bf7c:	4542      	cmp	r2, r8
 800bf7e:	d10f      	bne.n	800bfa0 <__ieee754_atan2+0xb0>
 800bf80:	4293      	cmp	r3, r2
 800bf82:	f104 34ff 	add.w	r4, r4, #4294967295
 800bf86:	d107      	bne.n	800bf98 <__ieee754_atan2+0xa8>
 800bf88:	2c02      	cmp	r4, #2
 800bf8a:	d84c      	bhi.n	800c026 <__ieee754_atan2+0x136>
 800bf8c:	4b34      	ldr	r3, [pc, #208]	@ (800c060 <__ieee754_atan2+0x170>)
 800bf8e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bf92:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bf96:	e7ca      	b.n	800bf2e <__ieee754_atan2+0x3e>
 800bf98:	2c02      	cmp	r4, #2
 800bf9a:	d848      	bhi.n	800c02e <__ieee754_atan2+0x13e>
 800bf9c:	4b31      	ldr	r3, [pc, #196]	@ (800c064 <__ieee754_atan2+0x174>)
 800bf9e:	e7f6      	b.n	800bf8e <__ieee754_atan2+0x9e>
 800bfa0:	4543      	cmp	r3, r8
 800bfa2:	d0e4      	beq.n	800bf6e <__ieee754_atan2+0x7e>
 800bfa4:	1a9b      	subs	r3, r3, r2
 800bfa6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800bfaa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bfae:	da1e      	bge.n	800bfee <__ieee754_atan2+0xfe>
 800bfb0:	2f00      	cmp	r7, #0
 800bfb2:	da01      	bge.n	800bfb8 <__ieee754_atan2+0xc8>
 800bfb4:	323c      	adds	r2, #60	@ 0x3c
 800bfb6:	db1e      	blt.n	800bff6 <__ieee754_atan2+0x106>
 800bfb8:	4632      	mov	r2, r6
 800bfba:	463b      	mov	r3, r7
 800bfbc:	f7f4 fc3e 	bl	800083c <__aeabi_ddiv>
 800bfc0:	ec41 0b10 	vmov	d0, r0, r1
 800bfc4:	f000 fbf0 	bl	800c7a8 <fabs>
 800bfc8:	f000 fa56 	bl	800c478 <atan>
 800bfcc:	ec51 0b10 	vmov	r0, r1, d0
 800bfd0:	2c01      	cmp	r4, #1
 800bfd2:	d013      	beq.n	800bffc <__ieee754_atan2+0x10c>
 800bfd4:	2c02      	cmp	r4, #2
 800bfd6:	d015      	beq.n	800c004 <__ieee754_atan2+0x114>
 800bfd8:	2c00      	cmp	r4, #0
 800bfda:	d0a8      	beq.n	800bf2e <__ieee754_atan2+0x3e>
 800bfdc:	a318      	add	r3, pc, #96	@ (adr r3, 800c040 <__ieee754_atan2+0x150>)
 800bfde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe2:	f7f4 f949 	bl	8000278 <__aeabi_dsub>
 800bfe6:	a318      	add	r3, pc, #96	@ (adr r3, 800c048 <__ieee754_atan2+0x158>)
 800bfe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfec:	e014      	b.n	800c018 <__ieee754_atan2+0x128>
 800bfee:	a118      	add	r1, pc, #96	@ (adr r1, 800c050 <__ieee754_atan2+0x160>)
 800bff0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bff4:	e7ec      	b.n	800bfd0 <__ieee754_atan2+0xe0>
 800bff6:	2000      	movs	r0, #0
 800bff8:	2100      	movs	r1, #0
 800bffa:	e7e9      	b.n	800bfd0 <__ieee754_atan2+0xe0>
 800bffc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c000:	4619      	mov	r1, r3
 800c002:	e794      	b.n	800bf2e <__ieee754_atan2+0x3e>
 800c004:	a30e      	add	r3, pc, #56	@ (adr r3, 800c040 <__ieee754_atan2+0x150>)
 800c006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c00a:	f7f4 f935 	bl	8000278 <__aeabi_dsub>
 800c00e:	4602      	mov	r2, r0
 800c010:	460b      	mov	r3, r1
 800c012:	a10d      	add	r1, pc, #52	@ (adr r1, 800c048 <__ieee754_atan2+0x158>)
 800c014:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c018:	f7f4 f92e 	bl	8000278 <__aeabi_dsub>
 800c01c:	e787      	b.n	800bf2e <__ieee754_atan2+0x3e>
 800c01e:	a10a      	add	r1, pc, #40	@ (adr r1, 800c048 <__ieee754_atan2+0x158>)
 800c020:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c024:	e783      	b.n	800bf2e <__ieee754_atan2+0x3e>
 800c026:	a10c      	add	r1, pc, #48	@ (adr r1, 800c058 <__ieee754_atan2+0x168>)
 800c028:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c02c:	e77f      	b.n	800bf2e <__ieee754_atan2+0x3e>
 800c02e:	2000      	movs	r0, #0
 800c030:	2100      	movs	r1, #0
 800c032:	e77c      	b.n	800bf2e <__ieee754_atan2+0x3e>
 800c034:	a106      	add	r1, pc, #24	@ (adr r1, 800c050 <__ieee754_atan2+0x160>)
 800c036:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c03a:	e778      	b.n	800bf2e <__ieee754_atan2+0x3e>
 800c03c:	f3af 8000 	nop.w
 800c040:	33145c07 	.word	0x33145c07
 800c044:	3ca1a626 	.word	0x3ca1a626
 800c048:	54442d18 	.word	0x54442d18
 800c04c:	400921fb 	.word	0x400921fb
 800c050:	54442d18 	.word	0x54442d18
 800c054:	3ff921fb 	.word	0x3ff921fb
 800c058:	54442d18 	.word	0x54442d18
 800c05c:	3fe921fb 	.word	0x3fe921fb
 800c060:	0800d160 	.word	0x0800d160
 800c064:	0800d148 	.word	0x0800d148
 800c068:	54442d18 	.word	0x54442d18
 800c06c:	c00921fb 	.word	0xc00921fb
 800c070:	54442d18 	.word	0x54442d18
 800c074:	bff921fb 	.word	0xbff921fb
 800c078:	7ff00000 	.word	0x7ff00000
 800c07c:	00000000 	.word	0x00000000

0800c080 <__ieee754_rem_pio2>:
 800c080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c084:	ec57 6b10 	vmov	r6, r7, d0
 800c088:	4bc5      	ldr	r3, [pc, #788]	@ (800c3a0 <__ieee754_rem_pio2+0x320>)
 800c08a:	b08d      	sub	sp, #52	@ 0x34
 800c08c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800c090:	4598      	cmp	r8, r3
 800c092:	4604      	mov	r4, r0
 800c094:	9704      	str	r7, [sp, #16]
 800c096:	d807      	bhi.n	800c0a8 <__ieee754_rem_pio2+0x28>
 800c098:	2200      	movs	r2, #0
 800c09a:	2300      	movs	r3, #0
 800c09c:	ed80 0b00 	vstr	d0, [r0]
 800c0a0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c0a4:	2500      	movs	r5, #0
 800c0a6:	e028      	b.n	800c0fa <__ieee754_rem_pio2+0x7a>
 800c0a8:	4bbe      	ldr	r3, [pc, #760]	@ (800c3a4 <__ieee754_rem_pio2+0x324>)
 800c0aa:	4598      	cmp	r8, r3
 800c0ac:	d878      	bhi.n	800c1a0 <__ieee754_rem_pio2+0x120>
 800c0ae:	9b04      	ldr	r3, [sp, #16]
 800c0b0:	4dbd      	ldr	r5, [pc, #756]	@ (800c3a8 <__ieee754_rem_pio2+0x328>)
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	4630      	mov	r0, r6
 800c0b6:	a3ac      	add	r3, pc, #688	@ (adr r3, 800c368 <__ieee754_rem_pio2+0x2e8>)
 800c0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0bc:	4639      	mov	r1, r7
 800c0be:	dd38      	ble.n	800c132 <__ieee754_rem_pio2+0xb2>
 800c0c0:	f7f4 f8da 	bl	8000278 <__aeabi_dsub>
 800c0c4:	45a8      	cmp	r8, r5
 800c0c6:	4606      	mov	r6, r0
 800c0c8:	460f      	mov	r7, r1
 800c0ca:	d01a      	beq.n	800c102 <__ieee754_rem_pio2+0x82>
 800c0cc:	a3a8      	add	r3, pc, #672	@ (adr r3, 800c370 <__ieee754_rem_pio2+0x2f0>)
 800c0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d2:	f7f4 f8d1 	bl	8000278 <__aeabi_dsub>
 800c0d6:	4602      	mov	r2, r0
 800c0d8:	460b      	mov	r3, r1
 800c0da:	4680      	mov	r8, r0
 800c0dc:	4689      	mov	r9, r1
 800c0de:	4630      	mov	r0, r6
 800c0e0:	4639      	mov	r1, r7
 800c0e2:	f7f4 f8c9 	bl	8000278 <__aeabi_dsub>
 800c0e6:	a3a2      	add	r3, pc, #648	@ (adr r3, 800c370 <__ieee754_rem_pio2+0x2f0>)
 800c0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ec:	f7f4 f8c4 	bl	8000278 <__aeabi_dsub>
 800c0f0:	e9c4 8900 	strd	r8, r9, [r4]
 800c0f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c0f8:	2501      	movs	r5, #1
 800c0fa:	4628      	mov	r0, r5
 800c0fc:	b00d      	add	sp, #52	@ 0x34
 800c0fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c102:	a39d      	add	r3, pc, #628	@ (adr r3, 800c378 <__ieee754_rem_pio2+0x2f8>)
 800c104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c108:	f7f4 f8b6 	bl	8000278 <__aeabi_dsub>
 800c10c:	a39c      	add	r3, pc, #624	@ (adr r3, 800c380 <__ieee754_rem_pio2+0x300>)
 800c10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c112:	4606      	mov	r6, r0
 800c114:	460f      	mov	r7, r1
 800c116:	f7f4 f8af 	bl	8000278 <__aeabi_dsub>
 800c11a:	4602      	mov	r2, r0
 800c11c:	460b      	mov	r3, r1
 800c11e:	4680      	mov	r8, r0
 800c120:	4689      	mov	r9, r1
 800c122:	4630      	mov	r0, r6
 800c124:	4639      	mov	r1, r7
 800c126:	f7f4 f8a7 	bl	8000278 <__aeabi_dsub>
 800c12a:	a395      	add	r3, pc, #596	@ (adr r3, 800c380 <__ieee754_rem_pio2+0x300>)
 800c12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c130:	e7dc      	b.n	800c0ec <__ieee754_rem_pio2+0x6c>
 800c132:	f7f4 f8a3 	bl	800027c <__adddf3>
 800c136:	45a8      	cmp	r8, r5
 800c138:	4606      	mov	r6, r0
 800c13a:	460f      	mov	r7, r1
 800c13c:	d018      	beq.n	800c170 <__ieee754_rem_pio2+0xf0>
 800c13e:	a38c      	add	r3, pc, #560	@ (adr r3, 800c370 <__ieee754_rem_pio2+0x2f0>)
 800c140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c144:	f7f4 f89a 	bl	800027c <__adddf3>
 800c148:	4602      	mov	r2, r0
 800c14a:	460b      	mov	r3, r1
 800c14c:	4680      	mov	r8, r0
 800c14e:	4689      	mov	r9, r1
 800c150:	4630      	mov	r0, r6
 800c152:	4639      	mov	r1, r7
 800c154:	f7f4 f890 	bl	8000278 <__aeabi_dsub>
 800c158:	a385      	add	r3, pc, #532	@ (adr r3, 800c370 <__ieee754_rem_pio2+0x2f0>)
 800c15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15e:	f7f4 f88d 	bl	800027c <__adddf3>
 800c162:	f04f 35ff 	mov.w	r5, #4294967295
 800c166:	e9c4 8900 	strd	r8, r9, [r4]
 800c16a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c16e:	e7c4      	b.n	800c0fa <__ieee754_rem_pio2+0x7a>
 800c170:	a381      	add	r3, pc, #516	@ (adr r3, 800c378 <__ieee754_rem_pio2+0x2f8>)
 800c172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c176:	f7f4 f881 	bl	800027c <__adddf3>
 800c17a:	a381      	add	r3, pc, #516	@ (adr r3, 800c380 <__ieee754_rem_pio2+0x300>)
 800c17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c180:	4606      	mov	r6, r0
 800c182:	460f      	mov	r7, r1
 800c184:	f7f4 f87a 	bl	800027c <__adddf3>
 800c188:	4602      	mov	r2, r0
 800c18a:	460b      	mov	r3, r1
 800c18c:	4680      	mov	r8, r0
 800c18e:	4689      	mov	r9, r1
 800c190:	4630      	mov	r0, r6
 800c192:	4639      	mov	r1, r7
 800c194:	f7f4 f870 	bl	8000278 <__aeabi_dsub>
 800c198:	a379      	add	r3, pc, #484	@ (adr r3, 800c380 <__ieee754_rem_pio2+0x300>)
 800c19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c19e:	e7de      	b.n	800c15e <__ieee754_rem_pio2+0xde>
 800c1a0:	4b82      	ldr	r3, [pc, #520]	@ (800c3ac <__ieee754_rem_pio2+0x32c>)
 800c1a2:	4598      	cmp	r8, r3
 800c1a4:	f200 80d1 	bhi.w	800c34a <__ieee754_rem_pio2+0x2ca>
 800c1a8:	f000 fafe 	bl	800c7a8 <fabs>
 800c1ac:	ec57 6b10 	vmov	r6, r7, d0
 800c1b0:	a375      	add	r3, pc, #468	@ (adr r3, 800c388 <__ieee754_rem_pio2+0x308>)
 800c1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b6:	4630      	mov	r0, r6
 800c1b8:	4639      	mov	r1, r7
 800c1ba:	f7f4 fa15 	bl	80005e8 <__aeabi_dmul>
 800c1be:	4b7c      	ldr	r3, [pc, #496]	@ (800c3b0 <__ieee754_rem_pio2+0x330>)
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	f7f4 f85b 	bl	800027c <__adddf3>
 800c1c6:	f7f4 fcbf 	bl	8000b48 <__aeabi_d2iz>
 800c1ca:	4605      	mov	r5, r0
 800c1cc:	f7f4 f9a2 	bl	8000514 <__aeabi_i2d>
 800c1d0:	4602      	mov	r2, r0
 800c1d2:	460b      	mov	r3, r1
 800c1d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c1d8:	a363      	add	r3, pc, #396	@ (adr r3, 800c368 <__ieee754_rem_pio2+0x2e8>)
 800c1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1de:	f7f4 fa03 	bl	80005e8 <__aeabi_dmul>
 800c1e2:	4602      	mov	r2, r0
 800c1e4:	460b      	mov	r3, r1
 800c1e6:	4630      	mov	r0, r6
 800c1e8:	4639      	mov	r1, r7
 800c1ea:	f7f4 f845 	bl	8000278 <__aeabi_dsub>
 800c1ee:	a360      	add	r3, pc, #384	@ (adr r3, 800c370 <__ieee754_rem_pio2+0x2f0>)
 800c1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f4:	4682      	mov	sl, r0
 800c1f6:	468b      	mov	fp, r1
 800c1f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1fc:	f7f4 f9f4 	bl	80005e8 <__aeabi_dmul>
 800c200:	2d1f      	cmp	r5, #31
 800c202:	4606      	mov	r6, r0
 800c204:	460f      	mov	r7, r1
 800c206:	dc0c      	bgt.n	800c222 <__ieee754_rem_pio2+0x1a2>
 800c208:	4b6a      	ldr	r3, [pc, #424]	@ (800c3b4 <__ieee754_rem_pio2+0x334>)
 800c20a:	1e6a      	subs	r2, r5, #1
 800c20c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c210:	4543      	cmp	r3, r8
 800c212:	d006      	beq.n	800c222 <__ieee754_rem_pio2+0x1a2>
 800c214:	4632      	mov	r2, r6
 800c216:	463b      	mov	r3, r7
 800c218:	4650      	mov	r0, sl
 800c21a:	4659      	mov	r1, fp
 800c21c:	f7f4 f82c 	bl	8000278 <__aeabi_dsub>
 800c220:	e00e      	b.n	800c240 <__ieee754_rem_pio2+0x1c0>
 800c222:	463b      	mov	r3, r7
 800c224:	4632      	mov	r2, r6
 800c226:	4650      	mov	r0, sl
 800c228:	4659      	mov	r1, fp
 800c22a:	f7f4 f825 	bl	8000278 <__aeabi_dsub>
 800c22e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c232:	9305      	str	r3, [sp, #20]
 800c234:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c238:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800c23c:	2b10      	cmp	r3, #16
 800c23e:	dc02      	bgt.n	800c246 <__ieee754_rem_pio2+0x1c6>
 800c240:	e9c4 0100 	strd	r0, r1, [r4]
 800c244:	e039      	b.n	800c2ba <__ieee754_rem_pio2+0x23a>
 800c246:	a34c      	add	r3, pc, #304	@ (adr r3, 800c378 <__ieee754_rem_pio2+0x2f8>)
 800c248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c24c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c250:	f7f4 f9ca 	bl	80005e8 <__aeabi_dmul>
 800c254:	4606      	mov	r6, r0
 800c256:	460f      	mov	r7, r1
 800c258:	4602      	mov	r2, r0
 800c25a:	460b      	mov	r3, r1
 800c25c:	4650      	mov	r0, sl
 800c25e:	4659      	mov	r1, fp
 800c260:	f7f4 f80a 	bl	8000278 <__aeabi_dsub>
 800c264:	4602      	mov	r2, r0
 800c266:	460b      	mov	r3, r1
 800c268:	4680      	mov	r8, r0
 800c26a:	4689      	mov	r9, r1
 800c26c:	4650      	mov	r0, sl
 800c26e:	4659      	mov	r1, fp
 800c270:	f7f4 f802 	bl	8000278 <__aeabi_dsub>
 800c274:	4632      	mov	r2, r6
 800c276:	463b      	mov	r3, r7
 800c278:	f7f3 fffe 	bl	8000278 <__aeabi_dsub>
 800c27c:	a340      	add	r3, pc, #256	@ (adr r3, 800c380 <__ieee754_rem_pio2+0x300>)
 800c27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c282:	4606      	mov	r6, r0
 800c284:	460f      	mov	r7, r1
 800c286:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c28a:	f7f4 f9ad 	bl	80005e8 <__aeabi_dmul>
 800c28e:	4632      	mov	r2, r6
 800c290:	463b      	mov	r3, r7
 800c292:	f7f3 fff1 	bl	8000278 <__aeabi_dsub>
 800c296:	4602      	mov	r2, r0
 800c298:	460b      	mov	r3, r1
 800c29a:	4606      	mov	r6, r0
 800c29c:	460f      	mov	r7, r1
 800c29e:	4640      	mov	r0, r8
 800c2a0:	4649      	mov	r1, r9
 800c2a2:	f7f3 ffe9 	bl	8000278 <__aeabi_dsub>
 800c2a6:	9a05      	ldr	r2, [sp, #20]
 800c2a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c2ac:	1ad3      	subs	r3, r2, r3
 800c2ae:	2b31      	cmp	r3, #49	@ 0x31
 800c2b0:	dc20      	bgt.n	800c2f4 <__ieee754_rem_pio2+0x274>
 800c2b2:	e9c4 0100 	strd	r0, r1, [r4]
 800c2b6:	46c2      	mov	sl, r8
 800c2b8:	46cb      	mov	fp, r9
 800c2ba:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c2be:	4650      	mov	r0, sl
 800c2c0:	4642      	mov	r2, r8
 800c2c2:	464b      	mov	r3, r9
 800c2c4:	4659      	mov	r1, fp
 800c2c6:	f7f3 ffd7 	bl	8000278 <__aeabi_dsub>
 800c2ca:	463b      	mov	r3, r7
 800c2cc:	4632      	mov	r2, r6
 800c2ce:	f7f3 ffd3 	bl	8000278 <__aeabi_dsub>
 800c2d2:	9b04      	ldr	r3, [sp, #16]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c2da:	f6bf af0e 	bge.w	800c0fa <__ieee754_rem_pio2+0x7a>
 800c2de:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800c2e2:	6063      	str	r3, [r4, #4]
 800c2e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c2e8:	f8c4 8000 	str.w	r8, [r4]
 800c2ec:	60a0      	str	r0, [r4, #8]
 800c2ee:	60e3      	str	r3, [r4, #12]
 800c2f0:	426d      	negs	r5, r5
 800c2f2:	e702      	b.n	800c0fa <__ieee754_rem_pio2+0x7a>
 800c2f4:	a326      	add	r3, pc, #152	@ (adr r3, 800c390 <__ieee754_rem_pio2+0x310>)
 800c2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2fe:	f7f4 f973 	bl	80005e8 <__aeabi_dmul>
 800c302:	4606      	mov	r6, r0
 800c304:	460f      	mov	r7, r1
 800c306:	4602      	mov	r2, r0
 800c308:	460b      	mov	r3, r1
 800c30a:	4640      	mov	r0, r8
 800c30c:	4649      	mov	r1, r9
 800c30e:	f7f3 ffb3 	bl	8000278 <__aeabi_dsub>
 800c312:	4602      	mov	r2, r0
 800c314:	460b      	mov	r3, r1
 800c316:	4682      	mov	sl, r0
 800c318:	468b      	mov	fp, r1
 800c31a:	4640      	mov	r0, r8
 800c31c:	4649      	mov	r1, r9
 800c31e:	f7f3 ffab 	bl	8000278 <__aeabi_dsub>
 800c322:	4632      	mov	r2, r6
 800c324:	463b      	mov	r3, r7
 800c326:	f7f3 ffa7 	bl	8000278 <__aeabi_dsub>
 800c32a:	a31b      	add	r3, pc, #108	@ (adr r3, 800c398 <__ieee754_rem_pio2+0x318>)
 800c32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c330:	4606      	mov	r6, r0
 800c332:	460f      	mov	r7, r1
 800c334:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c338:	f7f4 f956 	bl	80005e8 <__aeabi_dmul>
 800c33c:	4632      	mov	r2, r6
 800c33e:	463b      	mov	r3, r7
 800c340:	f7f3 ff9a 	bl	8000278 <__aeabi_dsub>
 800c344:	4606      	mov	r6, r0
 800c346:	460f      	mov	r7, r1
 800c348:	e764      	b.n	800c214 <__ieee754_rem_pio2+0x194>
 800c34a:	4b1b      	ldr	r3, [pc, #108]	@ (800c3b8 <__ieee754_rem_pio2+0x338>)
 800c34c:	4598      	cmp	r8, r3
 800c34e:	d935      	bls.n	800c3bc <__ieee754_rem_pio2+0x33c>
 800c350:	4632      	mov	r2, r6
 800c352:	463b      	mov	r3, r7
 800c354:	4630      	mov	r0, r6
 800c356:	4639      	mov	r1, r7
 800c358:	f7f3 ff8e 	bl	8000278 <__aeabi_dsub>
 800c35c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c360:	e9c4 0100 	strd	r0, r1, [r4]
 800c364:	e69e      	b.n	800c0a4 <__ieee754_rem_pio2+0x24>
 800c366:	bf00      	nop
 800c368:	54400000 	.word	0x54400000
 800c36c:	3ff921fb 	.word	0x3ff921fb
 800c370:	1a626331 	.word	0x1a626331
 800c374:	3dd0b461 	.word	0x3dd0b461
 800c378:	1a600000 	.word	0x1a600000
 800c37c:	3dd0b461 	.word	0x3dd0b461
 800c380:	2e037073 	.word	0x2e037073
 800c384:	3ba3198a 	.word	0x3ba3198a
 800c388:	6dc9c883 	.word	0x6dc9c883
 800c38c:	3fe45f30 	.word	0x3fe45f30
 800c390:	2e000000 	.word	0x2e000000
 800c394:	3ba3198a 	.word	0x3ba3198a
 800c398:	252049c1 	.word	0x252049c1
 800c39c:	397b839a 	.word	0x397b839a
 800c3a0:	3fe921fb 	.word	0x3fe921fb
 800c3a4:	4002d97b 	.word	0x4002d97b
 800c3a8:	3ff921fb 	.word	0x3ff921fb
 800c3ac:	413921fb 	.word	0x413921fb
 800c3b0:	3fe00000 	.word	0x3fe00000
 800c3b4:	0800d178 	.word	0x0800d178
 800c3b8:	7fefffff 	.word	0x7fefffff
 800c3bc:	ea4f 5528 	mov.w	r5, r8, asr #20
 800c3c0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800c3c4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800c3c8:	4630      	mov	r0, r6
 800c3ca:	460f      	mov	r7, r1
 800c3cc:	f7f4 fbbc 	bl	8000b48 <__aeabi_d2iz>
 800c3d0:	f7f4 f8a0 	bl	8000514 <__aeabi_i2d>
 800c3d4:	4602      	mov	r2, r0
 800c3d6:	460b      	mov	r3, r1
 800c3d8:	4630      	mov	r0, r6
 800c3da:	4639      	mov	r1, r7
 800c3dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c3e0:	f7f3 ff4a 	bl	8000278 <__aeabi_dsub>
 800c3e4:	4b22      	ldr	r3, [pc, #136]	@ (800c470 <__ieee754_rem_pio2+0x3f0>)
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	f7f4 f8fe 	bl	80005e8 <__aeabi_dmul>
 800c3ec:	460f      	mov	r7, r1
 800c3ee:	4606      	mov	r6, r0
 800c3f0:	f7f4 fbaa 	bl	8000b48 <__aeabi_d2iz>
 800c3f4:	f7f4 f88e 	bl	8000514 <__aeabi_i2d>
 800c3f8:	4602      	mov	r2, r0
 800c3fa:	460b      	mov	r3, r1
 800c3fc:	4630      	mov	r0, r6
 800c3fe:	4639      	mov	r1, r7
 800c400:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c404:	f7f3 ff38 	bl	8000278 <__aeabi_dsub>
 800c408:	4b19      	ldr	r3, [pc, #100]	@ (800c470 <__ieee754_rem_pio2+0x3f0>)
 800c40a:	2200      	movs	r2, #0
 800c40c:	f7f4 f8ec 	bl	80005e8 <__aeabi_dmul>
 800c410:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800c414:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800c418:	f04f 0803 	mov.w	r8, #3
 800c41c:	2600      	movs	r6, #0
 800c41e:	2700      	movs	r7, #0
 800c420:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800c424:	4632      	mov	r2, r6
 800c426:	463b      	mov	r3, r7
 800c428:	46c2      	mov	sl, r8
 800c42a:	f108 38ff 	add.w	r8, r8, #4294967295
 800c42e:	f7f4 fb43 	bl	8000ab8 <__aeabi_dcmpeq>
 800c432:	2800      	cmp	r0, #0
 800c434:	d1f4      	bne.n	800c420 <__ieee754_rem_pio2+0x3a0>
 800c436:	4b0f      	ldr	r3, [pc, #60]	@ (800c474 <__ieee754_rem_pio2+0x3f4>)
 800c438:	9301      	str	r3, [sp, #4]
 800c43a:	2302      	movs	r3, #2
 800c43c:	9300      	str	r3, [sp, #0]
 800c43e:	462a      	mov	r2, r5
 800c440:	4653      	mov	r3, sl
 800c442:	4621      	mov	r1, r4
 800c444:	a806      	add	r0, sp, #24
 800c446:	f000 f9b7 	bl	800c7b8 <__kernel_rem_pio2>
 800c44a:	9b04      	ldr	r3, [sp, #16]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	4605      	mov	r5, r0
 800c450:	f6bf ae53 	bge.w	800c0fa <__ieee754_rem_pio2+0x7a>
 800c454:	e9d4 2100 	ldrd	r2, r1, [r4]
 800c458:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c45c:	e9c4 2300 	strd	r2, r3, [r4]
 800c460:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800c464:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c468:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c46c:	e740      	b.n	800c2f0 <__ieee754_rem_pio2+0x270>
 800c46e:	bf00      	nop
 800c470:	41700000 	.word	0x41700000
 800c474:	0800d1f8 	.word	0x0800d1f8

0800c478 <atan>:
 800c478:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c47c:	ec55 4b10 	vmov	r4, r5, d0
 800c480:	4bbf      	ldr	r3, [pc, #764]	@ (800c780 <atan+0x308>)
 800c482:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800c486:	429e      	cmp	r6, r3
 800c488:	46ab      	mov	fp, r5
 800c48a:	d918      	bls.n	800c4be <atan+0x46>
 800c48c:	4bbd      	ldr	r3, [pc, #756]	@ (800c784 <atan+0x30c>)
 800c48e:	429e      	cmp	r6, r3
 800c490:	d801      	bhi.n	800c496 <atan+0x1e>
 800c492:	d109      	bne.n	800c4a8 <atan+0x30>
 800c494:	b144      	cbz	r4, 800c4a8 <atan+0x30>
 800c496:	4622      	mov	r2, r4
 800c498:	462b      	mov	r3, r5
 800c49a:	4620      	mov	r0, r4
 800c49c:	4629      	mov	r1, r5
 800c49e:	f7f3 feed 	bl	800027c <__adddf3>
 800c4a2:	4604      	mov	r4, r0
 800c4a4:	460d      	mov	r5, r1
 800c4a6:	e006      	b.n	800c4b6 <atan+0x3e>
 800c4a8:	f1bb 0f00 	cmp.w	fp, #0
 800c4ac:	f340 812b 	ble.w	800c706 <atan+0x28e>
 800c4b0:	a597      	add	r5, pc, #604	@ (adr r5, 800c710 <atan+0x298>)
 800c4b2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c4b6:	ec45 4b10 	vmov	d0, r4, r5
 800c4ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4be:	4bb2      	ldr	r3, [pc, #712]	@ (800c788 <atan+0x310>)
 800c4c0:	429e      	cmp	r6, r3
 800c4c2:	d813      	bhi.n	800c4ec <atan+0x74>
 800c4c4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800c4c8:	429e      	cmp	r6, r3
 800c4ca:	d80c      	bhi.n	800c4e6 <atan+0x6e>
 800c4cc:	a392      	add	r3, pc, #584	@ (adr r3, 800c718 <atan+0x2a0>)
 800c4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d2:	4620      	mov	r0, r4
 800c4d4:	4629      	mov	r1, r5
 800c4d6:	f7f3 fed1 	bl	800027c <__adddf3>
 800c4da:	4bac      	ldr	r3, [pc, #688]	@ (800c78c <atan+0x314>)
 800c4dc:	2200      	movs	r2, #0
 800c4de:	f7f4 fb13 	bl	8000b08 <__aeabi_dcmpgt>
 800c4e2:	2800      	cmp	r0, #0
 800c4e4:	d1e7      	bne.n	800c4b6 <atan+0x3e>
 800c4e6:	f04f 3aff 	mov.w	sl, #4294967295
 800c4ea:	e029      	b.n	800c540 <atan+0xc8>
 800c4ec:	f000 f95c 	bl	800c7a8 <fabs>
 800c4f0:	4ba7      	ldr	r3, [pc, #668]	@ (800c790 <atan+0x318>)
 800c4f2:	429e      	cmp	r6, r3
 800c4f4:	ec55 4b10 	vmov	r4, r5, d0
 800c4f8:	f200 80bc 	bhi.w	800c674 <atan+0x1fc>
 800c4fc:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800c500:	429e      	cmp	r6, r3
 800c502:	f200 809e 	bhi.w	800c642 <atan+0x1ca>
 800c506:	4622      	mov	r2, r4
 800c508:	462b      	mov	r3, r5
 800c50a:	4620      	mov	r0, r4
 800c50c:	4629      	mov	r1, r5
 800c50e:	f7f3 feb5 	bl	800027c <__adddf3>
 800c512:	4b9e      	ldr	r3, [pc, #632]	@ (800c78c <atan+0x314>)
 800c514:	2200      	movs	r2, #0
 800c516:	f7f3 feaf 	bl	8000278 <__aeabi_dsub>
 800c51a:	2200      	movs	r2, #0
 800c51c:	4606      	mov	r6, r0
 800c51e:	460f      	mov	r7, r1
 800c520:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c524:	4620      	mov	r0, r4
 800c526:	4629      	mov	r1, r5
 800c528:	f7f3 fea8 	bl	800027c <__adddf3>
 800c52c:	4602      	mov	r2, r0
 800c52e:	460b      	mov	r3, r1
 800c530:	4630      	mov	r0, r6
 800c532:	4639      	mov	r1, r7
 800c534:	f7f4 f982 	bl	800083c <__aeabi_ddiv>
 800c538:	f04f 0a00 	mov.w	sl, #0
 800c53c:	4604      	mov	r4, r0
 800c53e:	460d      	mov	r5, r1
 800c540:	4622      	mov	r2, r4
 800c542:	462b      	mov	r3, r5
 800c544:	4620      	mov	r0, r4
 800c546:	4629      	mov	r1, r5
 800c548:	f7f4 f84e 	bl	80005e8 <__aeabi_dmul>
 800c54c:	4602      	mov	r2, r0
 800c54e:	460b      	mov	r3, r1
 800c550:	4680      	mov	r8, r0
 800c552:	4689      	mov	r9, r1
 800c554:	f7f4 f848 	bl	80005e8 <__aeabi_dmul>
 800c558:	a371      	add	r3, pc, #452	@ (adr r3, 800c720 <atan+0x2a8>)
 800c55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c55e:	4606      	mov	r6, r0
 800c560:	460f      	mov	r7, r1
 800c562:	f7f4 f841 	bl	80005e8 <__aeabi_dmul>
 800c566:	a370      	add	r3, pc, #448	@ (adr r3, 800c728 <atan+0x2b0>)
 800c568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c56c:	f7f3 fe86 	bl	800027c <__adddf3>
 800c570:	4632      	mov	r2, r6
 800c572:	463b      	mov	r3, r7
 800c574:	f7f4 f838 	bl	80005e8 <__aeabi_dmul>
 800c578:	a36d      	add	r3, pc, #436	@ (adr r3, 800c730 <atan+0x2b8>)
 800c57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c57e:	f7f3 fe7d 	bl	800027c <__adddf3>
 800c582:	4632      	mov	r2, r6
 800c584:	463b      	mov	r3, r7
 800c586:	f7f4 f82f 	bl	80005e8 <__aeabi_dmul>
 800c58a:	a36b      	add	r3, pc, #428	@ (adr r3, 800c738 <atan+0x2c0>)
 800c58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c590:	f7f3 fe74 	bl	800027c <__adddf3>
 800c594:	4632      	mov	r2, r6
 800c596:	463b      	mov	r3, r7
 800c598:	f7f4 f826 	bl	80005e8 <__aeabi_dmul>
 800c59c:	a368      	add	r3, pc, #416	@ (adr r3, 800c740 <atan+0x2c8>)
 800c59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a2:	f7f3 fe6b 	bl	800027c <__adddf3>
 800c5a6:	4632      	mov	r2, r6
 800c5a8:	463b      	mov	r3, r7
 800c5aa:	f7f4 f81d 	bl	80005e8 <__aeabi_dmul>
 800c5ae:	a366      	add	r3, pc, #408	@ (adr r3, 800c748 <atan+0x2d0>)
 800c5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b4:	f7f3 fe62 	bl	800027c <__adddf3>
 800c5b8:	4642      	mov	r2, r8
 800c5ba:	464b      	mov	r3, r9
 800c5bc:	f7f4 f814 	bl	80005e8 <__aeabi_dmul>
 800c5c0:	a363      	add	r3, pc, #396	@ (adr r3, 800c750 <atan+0x2d8>)
 800c5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c6:	4680      	mov	r8, r0
 800c5c8:	4689      	mov	r9, r1
 800c5ca:	4630      	mov	r0, r6
 800c5cc:	4639      	mov	r1, r7
 800c5ce:	f7f4 f80b 	bl	80005e8 <__aeabi_dmul>
 800c5d2:	a361      	add	r3, pc, #388	@ (adr r3, 800c758 <atan+0x2e0>)
 800c5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d8:	f7f3 fe4e 	bl	8000278 <__aeabi_dsub>
 800c5dc:	4632      	mov	r2, r6
 800c5de:	463b      	mov	r3, r7
 800c5e0:	f7f4 f802 	bl	80005e8 <__aeabi_dmul>
 800c5e4:	a35e      	add	r3, pc, #376	@ (adr r3, 800c760 <atan+0x2e8>)
 800c5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ea:	f7f3 fe45 	bl	8000278 <__aeabi_dsub>
 800c5ee:	4632      	mov	r2, r6
 800c5f0:	463b      	mov	r3, r7
 800c5f2:	f7f3 fff9 	bl	80005e8 <__aeabi_dmul>
 800c5f6:	a35c      	add	r3, pc, #368	@ (adr r3, 800c768 <atan+0x2f0>)
 800c5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5fc:	f7f3 fe3c 	bl	8000278 <__aeabi_dsub>
 800c600:	4632      	mov	r2, r6
 800c602:	463b      	mov	r3, r7
 800c604:	f7f3 fff0 	bl	80005e8 <__aeabi_dmul>
 800c608:	a359      	add	r3, pc, #356	@ (adr r3, 800c770 <atan+0x2f8>)
 800c60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c60e:	f7f3 fe33 	bl	8000278 <__aeabi_dsub>
 800c612:	4632      	mov	r2, r6
 800c614:	463b      	mov	r3, r7
 800c616:	f7f3 ffe7 	bl	80005e8 <__aeabi_dmul>
 800c61a:	4602      	mov	r2, r0
 800c61c:	460b      	mov	r3, r1
 800c61e:	4640      	mov	r0, r8
 800c620:	4649      	mov	r1, r9
 800c622:	f7f3 fe2b 	bl	800027c <__adddf3>
 800c626:	4622      	mov	r2, r4
 800c628:	462b      	mov	r3, r5
 800c62a:	f7f3 ffdd 	bl	80005e8 <__aeabi_dmul>
 800c62e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c632:	4602      	mov	r2, r0
 800c634:	460b      	mov	r3, r1
 800c636:	d148      	bne.n	800c6ca <atan+0x252>
 800c638:	4620      	mov	r0, r4
 800c63a:	4629      	mov	r1, r5
 800c63c:	f7f3 fe1c 	bl	8000278 <__aeabi_dsub>
 800c640:	e72f      	b.n	800c4a2 <atan+0x2a>
 800c642:	4b52      	ldr	r3, [pc, #328]	@ (800c78c <atan+0x314>)
 800c644:	2200      	movs	r2, #0
 800c646:	4620      	mov	r0, r4
 800c648:	4629      	mov	r1, r5
 800c64a:	f7f3 fe15 	bl	8000278 <__aeabi_dsub>
 800c64e:	4b4f      	ldr	r3, [pc, #316]	@ (800c78c <atan+0x314>)
 800c650:	4606      	mov	r6, r0
 800c652:	460f      	mov	r7, r1
 800c654:	2200      	movs	r2, #0
 800c656:	4620      	mov	r0, r4
 800c658:	4629      	mov	r1, r5
 800c65a:	f7f3 fe0f 	bl	800027c <__adddf3>
 800c65e:	4602      	mov	r2, r0
 800c660:	460b      	mov	r3, r1
 800c662:	4630      	mov	r0, r6
 800c664:	4639      	mov	r1, r7
 800c666:	f7f4 f8e9 	bl	800083c <__aeabi_ddiv>
 800c66a:	f04f 0a01 	mov.w	sl, #1
 800c66e:	4604      	mov	r4, r0
 800c670:	460d      	mov	r5, r1
 800c672:	e765      	b.n	800c540 <atan+0xc8>
 800c674:	4b47      	ldr	r3, [pc, #284]	@ (800c794 <atan+0x31c>)
 800c676:	429e      	cmp	r6, r3
 800c678:	d21c      	bcs.n	800c6b4 <atan+0x23c>
 800c67a:	4b47      	ldr	r3, [pc, #284]	@ (800c798 <atan+0x320>)
 800c67c:	2200      	movs	r2, #0
 800c67e:	4620      	mov	r0, r4
 800c680:	4629      	mov	r1, r5
 800c682:	f7f3 fdf9 	bl	8000278 <__aeabi_dsub>
 800c686:	4b44      	ldr	r3, [pc, #272]	@ (800c798 <atan+0x320>)
 800c688:	4606      	mov	r6, r0
 800c68a:	460f      	mov	r7, r1
 800c68c:	2200      	movs	r2, #0
 800c68e:	4620      	mov	r0, r4
 800c690:	4629      	mov	r1, r5
 800c692:	f7f3 ffa9 	bl	80005e8 <__aeabi_dmul>
 800c696:	4b3d      	ldr	r3, [pc, #244]	@ (800c78c <atan+0x314>)
 800c698:	2200      	movs	r2, #0
 800c69a:	f7f3 fdef 	bl	800027c <__adddf3>
 800c69e:	4602      	mov	r2, r0
 800c6a0:	460b      	mov	r3, r1
 800c6a2:	4630      	mov	r0, r6
 800c6a4:	4639      	mov	r1, r7
 800c6a6:	f7f4 f8c9 	bl	800083c <__aeabi_ddiv>
 800c6aa:	f04f 0a02 	mov.w	sl, #2
 800c6ae:	4604      	mov	r4, r0
 800c6b0:	460d      	mov	r5, r1
 800c6b2:	e745      	b.n	800c540 <atan+0xc8>
 800c6b4:	4622      	mov	r2, r4
 800c6b6:	462b      	mov	r3, r5
 800c6b8:	4938      	ldr	r1, [pc, #224]	@ (800c79c <atan+0x324>)
 800c6ba:	2000      	movs	r0, #0
 800c6bc:	f7f4 f8be 	bl	800083c <__aeabi_ddiv>
 800c6c0:	f04f 0a03 	mov.w	sl, #3
 800c6c4:	4604      	mov	r4, r0
 800c6c6:	460d      	mov	r5, r1
 800c6c8:	e73a      	b.n	800c540 <atan+0xc8>
 800c6ca:	4b35      	ldr	r3, [pc, #212]	@ (800c7a0 <atan+0x328>)
 800c6cc:	4e35      	ldr	r6, [pc, #212]	@ (800c7a4 <atan+0x32c>)
 800c6ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d6:	f7f3 fdcf 	bl	8000278 <__aeabi_dsub>
 800c6da:	4622      	mov	r2, r4
 800c6dc:	462b      	mov	r3, r5
 800c6de:	f7f3 fdcb 	bl	8000278 <__aeabi_dsub>
 800c6e2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c6e6:	4602      	mov	r2, r0
 800c6e8:	460b      	mov	r3, r1
 800c6ea:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c6ee:	f7f3 fdc3 	bl	8000278 <__aeabi_dsub>
 800c6f2:	f1bb 0f00 	cmp.w	fp, #0
 800c6f6:	4604      	mov	r4, r0
 800c6f8:	460d      	mov	r5, r1
 800c6fa:	f6bf aedc 	bge.w	800c4b6 <atan+0x3e>
 800c6fe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c702:	461d      	mov	r5, r3
 800c704:	e6d7      	b.n	800c4b6 <atan+0x3e>
 800c706:	a51c      	add	r5, pc, #112	@ (adr r5, 800c778 <atan+0x300>)
 800c708:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c70c:	e6d3      	b.n	800c4b6 <atan+0x3e>
 800c70e:	bf00      	nop
 800c710:	54442d18 	.word	0x54442d18
 800c714:	3ff921fb 	.word	0x3ff921fb
 800c718:	8800759c 	.word	0x8800759c
 800c71c:	7e37e43c 	.word	0x7e37e43c
 800c720:	e322da11 	.word	0xe322da11
 800c724:	3f90ad3a 	.word	0x3f90ad3a
 800c728:	24760deb 	.word	0x24760deb
 800c72c:	3fa97b4b 	.word	0x3fa97b4b
 800c730:	a0d03d51 	.word	0xa0d03d51
 800c734:	3fb10d66 	.word	0x3fb10d66
 800c738:	c54c206e 	.word	0xc54c206e
 800c73c:	3fb745cd 	.word	0x3fb745cd
 800c740:	920083ff 	.word	0x920083ff
 800c744:	3fc24924 	.word	0x3fc24924
 800c748:	5555550d 	.word	0x5555550d
 800c74c:	3fd55555 	.word	0x3fd55555
 800c750:	2c6a6c2f 	.word	0x2c6a6c2f
 800c754:	bfa2b444 	.word	0xbfa2b444
 800c758:	52defd9a 	.word	0x52defd9a
 800c75c:	3fadde2d 	.word	0x3fadde2d
 800c760:	af749a6d 	.word	0xaf749a6d
 800c764:	3fb3b0f2 	.word	0x3fb3b0f2
 800c768:	fe231671 	.word	0xfe231671
 800c76c:	3fbc71c6 	.word	0x3fbc71c6
 800c770:	9998ebc4 	.word	0x9998ebc4
 800c774:	3fc99999 	.word	0x3fc99999
 800c778:	54442d18 	.word	0x54442d18
 800c77c:	bff921fb 	.word	0xbff921fb
 800c780:	440fffff 	.word	0x440fffff
 800c784:	7ff00000 	.word	0x7ff00000
 800c788:	3fdbffff 	.word	0x3fdbffff
 800c78c:	3ff00000 	.word	0x3ff00000
 800c790:	3ff2ffff 	.word	0x3ff2ffff
 800c794:	40038000 	.word	0x40038000
 800c798:	3ff80000 	.word	0x3ff80000
 800c79c:	bff00000 	.word	0xbff00000
 800c7a0:	0800d300 	.word	0x0800d300
 800c7a4:	0800d320 	.word	0x0800d320

0800c7a8 <fabs>:
 800c7a8:	ec51 0b10 	vmov	r0, r1, d0
 800c7ac:	4602      	mov	r2, r0
 800c7ae:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c7b2:	ec43 2b10 	vmov	d0, r2, r3
 800c7b6:	4770      	bx	lr

0800c7b8 <__kernel_rem_pio2>:
 800c7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7bc:	ed2d 8b02 	vpush	{d8}
 800c7c0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800c7c4:	f112 0f14 	cmn.w	r2, #20
 800c7c8:	9306      	str	r3, [sp, #24]
 800c7ca:	9104      	str	r1, [sp, #16]
 800c7cc:	4bbe      	ldr	r3, [pc, #760]	@ (800cac8 <__kernel_rem_pio2+0x310>)
 800c7ce:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800c7d0:	9008      	str	r0, [sp, #32]
 800c7d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c7d6:	9300      	str	r3, [sp, #0]
 800c7d8:	9b06      	ldr	r3, [sp, #24]
 800c7da:	f103 33ff 	add.w	r3, r3, #4294967295
 800c7de:	bfa8      	it	ge
 800c7e0:	1ed4      	subge	r4, r2, #3
 800c7e2:	9305      	str	r3, [sp, #20]
 800c7e4:	bfb2      	itee	lt
 800c7e6:	2400      	movlt	r4, #0
 800c7e8:	2318      	movge	r3, #24
 800c7ea:	fb94 f4f3 	sdivge	r4, r4, r3
 800c7ee:	f06f 0317 	mvn.w	r3, #23
 800c7f2:	fb04 3303 	mla	r3, r4, r3, r3
 800c7f6:	eb03 0b02 	add.w	fp, r3, r2
 800c7fa:	9b00      	ldr	r3, [sp, #0]
 800c7fc:	9a05      	ldr	r2, [sp, #20]
 800c7fe:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800cab8 <__kernel_rem_pio2+0x300>
 800c802:	eb03 0802 	add.w	r8, r3, r2
 800c806:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800c808:	1aa7      	subs	r7, r4, r2
 800c80a:	ae20      	add	r6, sp, #128	@ 0x80
 800c80c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c810:	2500      	movs	r5, #0
 800c812:	4545      	cmp	r5, r8
 800c814:	dd13      	ble.n	800c83e <__kernel_rem_pio2+0x86>
 800c816:	9b06      	ldr	r3, [sp, #24]
 800c818:	aa20      	add	r2, sp, #128	@ 0x80
 800c81a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c81e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800c822:	f04f 0800 	mov.w	r8, #0
 800c826:	9b00      	ldr	r3, [sp, #0]
 800c828:	4598      	cmp	r8, r3
 800c82a:	dc31      	bgt.n	800c890 <__kernel_rem_pio2+0xd8>
 800c82c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800cab8 <__kernel_rem_pio2+0x300>
 800c830:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c834:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c838:	462f      	mov	r7, r5
 800c83a:	2600      	movs	r6, #0
 800c83c:	e01b      	b.n	800c876 <__kernel_rem_pio2+0xbe>
 800c83e:	42ef      	cmn	r7, r5
 800c840:	d407      	bmi.n	800c852 <__kernel_rem_pio2+0x9a>
 800c842:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c846:	f7f3 fe65 	bl	8000514 <__aeabi_i2d>
 800c84a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c84e:	3501      	adds	r5, #1
 800c850:	e7df      	b.n	800c812 <__kernel_rem_pio2+0x5a>
 800c852:	ec51 0b18 	vmov	r0, r1, d8
 800c856:	e7f8      	b.n	800c84a <__kernel_rem_pio2+0x92>
 800c858:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c85c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c860:	f7f3 fec2 	bl	80005e8 <__aeabi_dmul>
 800c864:	4602      	mov	r2, r0
 800c866:	460b      	mov	r3, r1
 800c868:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c86c:	f7f3 fd06 	bl	800027c <__adddf3>
 800c870:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c874:	3601      	adds	r6, #1
 800c876:	9b05      	ldr	r3, [sp, #20]
 800c878:	429e      	cmp	r6, r3
 800c87a:	f1a7 0708 	sub.w	r7, r7, #8
 800c87e:	ddeb      	ble.n	800c858 <__kernel_rem_pio2+0xa0>
 800c880:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c884:	f108 0801 	add.w	r8, r8, #1
 800c888:	ecaa 7b02 	vstmia	sl!, {d7}
 800c88c:	3508      	adds	r5, #8
 800c88e:	e7ca      	b.n	800c826 <__kernel_rem_pio2+0x6e>
 800c890:	9b00      	ldr	r3, [sp, #0]
 800c892:	f8dd 8000 	ldr.w	r8, [sp]
 800c896:	aa0c      	add	r2, sp, #48	@ 0x30
 800c898:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c89c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c89e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800c8a0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c8a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8a6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800c8aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c8ac:	ab98      	add	r3, sp, #608	@ 0x260
 800c8ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c8b2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800c8b6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c8ba:	ac0c      	add	r4, sp, #48	@ 0x30
 800c8bc:	ab70      	add	r3, sp, #448	@ 0x1c0
 800c8be:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800c8c2:	46a1      	mov	r9, r4
 800c8c4:	46c2      	mov	sl, r8
 800c8c6:	f1ba 0f00 	cmp.w	sl, #0
 800c8ca:	f1a5 0508 	sub.w	r5, r5, #8
 800c8ce:	dc77      	bgt.n	800c9c0 <__kernel_rem_pio2+0x208>
 800c8d0:	4658      	mov	r0, fp
 800c8d2:	ed9d 0b02 	vldr	d0, [sp, #8]
 800c8d6:	f000 fac7 	bl	800ce68 <scalbn>
 800c8da:	ec57 6b10 	vmov	r6, r7, d0
 800c8de:	2200      	movs	r2, #0
 800c8e0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800c8e4:	4630      	mov	r0, r6
 800c8e6:	4639      	mov	r1, r7
 800c8e8:	f7f3 fe7e 	bl	80005e8 <__aeabi_dmul>
 800c8ec:	ec41 0b10 	vmov	d0, r0, r1
 800c8f0:	f000 fb3a 	bl	800cf68 <floor>
 800c8f4:	4b75      	ldr	r3, [pc, #468]	@ (800cacc <__kernel_rem_pio2+0x314>)
 800c8f6:	ec51 0b10 	vmov	r0, r1, d0
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	f7f3 fe74 	bl	80005e8 <__aeabi_dmul>
 800c900:	4602      	mov	r2, r0
 800c902:	460b      	mov	r3, r1
 800c904:	4630      	mov	r0, r6
 800c906:	4639      	mov	r1, r7
 800c908:	f7f3 fcb6 	bl	8000278 <__aeabi_dsub>
 800c90c:	460f      	mov	r7, r1
 800c90e:	4606      	mov	r6, r0
 800c910:	f7f4 f91a 	bl	8000b48 <__aeabi_d2iz>
 800c914:	9002      	str	r0, [sp, #8]
 800c916:	f7f3 fdfd 	bl	8000514 <__aeabi_i2d>
 800c91a:	4602      	mov	r2, r0
 800c91c:	460b      	mov	r3, r1
 800c91e:	4630      	mov	r0, r6
 800c920:	4639      	mov	r1, r7
 800c922:	f7f3 fca9 	bl	8000278 <__aeabi_dsub>
 800c926:	f1bb 0f00 	cmp.w	fp, #0
 800c92a:	4606      	mov	r6, r0
 800c92c:	460f      	mov	r7, r1
 800c92e:	dd6c      	ble.n	800ca0a <__kernel_rem_pio2+0x252>
 800c930:	f108 31ff 	add.w	r1, r8, #4294967295
 800c934:	ab0c      	add	r3, sp, #48	@ 0x30
 800c936:	9d02      	ldr	r5, [sp, #8]
 800c938:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c93c:	f1cb 0018 	rsb	r0, fp, #24
 800c940:	fa43 f200 	asr.w	r2, r3, r0
 800c944:	4415      	add	r5, r2
 800c946:	4082      	lsls	r2, r0
 800c948:	1a9b      	subs	r3, r3, r2
 800c94a:	aa0c      	add	r2, sp, #48	@ 0x30
 800c94c:	9502      	str	r5, [sp, #8]
 800c94e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c952:	f1cb 0217 	rsb	r2, fp, #23
 800c956:	fa43 f902 	asr.w	r9, r3, r2
 800c95a:	f1b9 0f00 	cmp.w	r9, #0
 800c95e:	dd64      	ble.n	800ca2a <__kernel_rem_pio2+0x272>
 800c960:	9b02      	ldr	r3, [sp, #8]
 800c962:	2200      	movs	r2, #0
 800c964:	3301      	adds	r3, #1
 800c966:	9302      	str	r3, [sp, #8]
 800c968:	4615      	mov	r5, r2
 800c96a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800c96e:	4590      	cmp	r8, r2
 800c970:	f300 80b8 	bgt.w	800cae4 <__kernel_rem_pio2+0x32c>
 800c974:	f1bb 0f00 	cmp.w	fp, #0
 800c978:	dd07      	ble.n	800c98a <__kernel_rem_pio2+0x1d2>
 800c97a:	f1bb 0f01 	cmp.w	fp, #1
 800c97e:	f000 80bf 	beq.w	800cb00 <__kernel_rem_pio2+0x348>
 800c982:	f1bb 0f02 	cmp.w	fp, #2
 800c986:	f000 80c6 	beq.w	800cb16 <__kernel_rem_pio2+0x35e>
 800c98a:	f1b9 0f02 	cmp.w	r9, #2
 800c98e:	d14c      	bne.n	800ca2a <__kernel_rem_pio2+0x272>
 800c990:	4632      	mov	r2, r6
 800c992:	463b      	mov	r3, r7
 800c994:	494e      	ldr	r1, [pc, #312]	@ (800cad0 <__kernel_rem_pio2+0x318>)
 800c996:	2000      	movs	r0, #0
 800c998:	f7f3 fc6e 	bl	8000278 <__aeabi_dsub>
 800c99c:	4606      	mov	r6, r0
 800c99e:	460f      	mov	r7, r1
 800c9a0:	2d00      	cmp	r5, #0
 800c9a2:	d042      	beq.n	800ca2a <__kernel_rem_pio2+0x272>
 800c9a4:	4658      	mov	r0, fp
 800c9a6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800cac0 <__kernel_rem_pio2+0x308>
 800c9aa:	f000 fa5d 	bl	800ce68 <scalbn>
 800c9ae:	4630      	mov	r0, r6
 800c9b0:	4639      	mov	r1, r7
 800c9b2:	ec53 2b10 	vmov	r2, r3, d0
 800c9b6:	f7f3 fc5f 	bl	8000278 <__aeabi_dsub>
 800c9ba:	4606      	mov	r6, r0
 800c9bc:	460f      	mov	r7, r1
 800c9be:	e034      	b.n	800ca2a <__kernel_rem_pio2+0x272>
 800c9c0:	4b44      	ldr	r3, [pc, #272]	@ (800cad4 <__kernel_rem_pio2+0x31c>)
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9c8:	f7f3 fe0e 	bl	80005e8 <__aeabi_dmul>
 800c9cc:	f7f4 f8bc 	bl	8000b48 <__aeabi_d2iz>
 800c9d0:	f7f3 fda0 	bl	8000514 <__aeabi_i2d>
 800c9d4:	4b40      	ldr	r3, [pc, #256]	@ (800cad8 <__kernel_rem_pio2+0x320>)
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	4606      	mov	r6, r0
 800c9da:	460f      	mov	r7, r1
 800c9dc:	f7f3 fe04 	bl	80005e8 <__aeabi_dmul>
 800c9e0:	4602      	mov	r2, r0
 800c9e2:	460b      	mov	r3, r1
 800c9e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9e8:	f7f3 fc46 	bl	8000278 <__aeabi_dsub>
 800c9ec:	f7f4 f8ac 	bl	8000b48 <__aeabi_d2iz>
 800c9f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c9f4:	f849 0b04 	str.w	r0, [r9], #4
 800c9f8:	4639      	mov	r1, r7
 800c9fa:	4630      	mov	r0, r6
 800c9fc:	f7f3 fc3e 	bl	800027c <__adddf3>
 800ca00:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ca04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca08:	e75d      	b.n	800c8c6 <__kernel_rem_pio2+0x10e>
 800ca0a:	d107      	bne.n	800ca1c <__kernel_rem_pio2+0x264>
 800ca0c:	f108 33ff 	add.w	r3, r8, #4294967295
 800ca10:	aa0c      	add	r2, sp, #48	@ 0x30
 800ca12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca16:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800ca1a:	e79e      	b.n	800c95a <__kernel_rem_pio2+0x1a2>
 800ca1c:	4b2f      	ldr	r3, [pc, #188]	@ (800cadc <__kernel_rem_pio2+0x324>)
 800ca1e:	2200      	movs	r2, #0
 800ca20:	f7f4 f868 	bl	8000af4 <__aeabi_dcmpge>
 800ca24:	2800      	cmp	r0, #0
 800ca26:	d143      	bne.n	800cab0 <__kernel_rem_pio2+0x2f8>
 800ca28:	4681      	mov	r9, r0
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	4630      	mov	r0, r6
 800ca30:	4639      	mov	r1, r7
 800ca32:	f7f4 f841 	bl	8000ab8 <__aeabi_dcmpeq>
 800ca36:	2800      	cmp	r0, #0
 800ca38:	f000 80bf 	beq.w	800cbba <__kernel_rem_pio2+0x402>
 800ca3c:	f108 33ff 	add.w	r3, r8, #4294967295
 800ca40:	2200      	movs	r2, #0
 800ca42:	9900      	ldr	r1, [sp, #0]
 800ca44:	428b      	cmp	r3, r1
 800ca46:	da6e      	bge.n	800cb26 <__kernel_rem_pio2+0x36e>
 800ca48:	2a00      	cmp	r2, #0
 800ca4a:	f000 8089 	beq.w	800cb60 <__kernel_rem_pio2+0x3a8>
 800ca4e:	f108 38ff 	add.w	r8, r8, #4294967295
 800ca52:	ab0c      	add	r3, sp, #48	@ 0x30
 800ca54:	f1ab 0b18 	sub.w	fp, fp, #24
 800ca58:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d0f6      	beq.n	800ca4e <__kernel_rem_pio2+0x296>
 800ca60:	4658      	mov	r0, fp
 800ca62:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800cac0 <__kernel_rem_pio2+0x308>
 800ca66:	f000 f9ff 	bl	800ce68 <scalbn>
 800ca6a:	f108 0301 	add.w	r3, r8, #1
 800ca6e:	00da      	lsls	r2, r3, #3
 800ca70:	9205      	str	r2, [sp, #20]
 800ca72:	ec55 4b10 	vmov	r4, r5, d0
 800ca76:	aa70      	add	r2, sp, #448	@ 0x1c0
 800ca78:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800cad4 <__kernel_rem_pio2+0x31c>
 800ca7c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800ca80:	4646      	mov	r6, r8
 800ca82:	f04f 0a00 	mov.w	sl, #0
 800ca86:	2e00      	cmp	r6, #0
 800ca88:	f280 80cf 	bge.w	800cc2a <__kernel_rem_pio2+0x472>
 800ca8c:	4644      	mov	r4, r8
 800ca8e:	2c00      	cmp	r4, #0
 800ca90:	f2c0 80fd 	blt.w	800cc8e <__kernel_rem_pio2+0x4d6>
 800ca94:	4b12      	ldr	r3, [pc, #72]	@ (800cae0 <__kernel_rem_pio2+0x328>)
 800ca96:	461f      	mov	r7, r3
 800ca98:	ab70      	add	r3, sp, #448	@ 0x1c0
 800ca9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ca9e:	9306      	str	r3, [sp, #24]
 800caa0:	f04f 0a00 	mov.w	sl, #0
 800caa4:	f04f 0b00 	mov.w	fp, #0
 800caa8:	2600      	movs	r6, #0
 800caaa:	eba8 0504 	sub.w	r5, r8, r4
 800caae:	e0e2      	b.n	800cc76 <__kernel_rem_pio2+0x4be>
 800cab0:	f04f 0902 	mov.w	r9, #2
 800cab4:	e754      	b.n	800c960 <__kernel_rem_pio2+0x1a8>
 800cab6:	bf00      	nop
	...
 800cac4:	3ff00000 	.word	0x3ff00000
 800cac8:	0800d380 	.word	0x0800d380
 800cacc:	40200000 	.word	0x40200000
 800cad0:	3ff00000 	.word	0x3ff00000
 800cad4:	3e700000 	.word	0x3e700000
 800cad8:	41700000 	.word	0x41700000
 800cadc:	3fe00000 	.word	0x3fe00000
 800cae0:	0800d340 	.word	0x0800d340
 800cae4:	f854 3b04 	ldr.w	r3, [r4], #4
 800cae8:	b945      	cbnz	r5, 800cafc <__kernel_rem_pio2+0x344>
 800caea:	b123      	cbz	r3, 800caf6 <__kernel_rem_pio2+0x33e>
 800caec:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800caf0:	f844 3c04 	str.w	r3, [r4, #-4]
 800caf4:	2301      	movs	r3, #1
 800caf6:	3201      	adds	r2, #1
 800caf8:	461d      	mov	r5, r3
 800cafa:	e738      	b.n	800c96e <__kernel_rem_pio2+0x1b6>
 800cafc:	1acb      	subs	r3, r1, r3
 800cafe:	e7f7      	b.n	800caf0 <__kernel_rem_pio2+0x338>
 800cb00:	f108 32ff 	add.w	r2, r8, #4294967295
 800cb04:	ab0c      	add	r3, sp, #48	@ 0x30
 800cb06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb0a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800cb0e:	a90c      	add	r1, sp, #48	@ 0x30
 800cb10:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800cb14:	e739      	b.n	800c98a <__kernel_rem_pio2+0x1d2>
 800cb16:	f108 32ff 	add.w	r2, r8, #4294967295
 800cb1a:	ab0c      	add	r3, sp, #48	@ 0x30
 800cb1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb20:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cb24:	e7f3      	b.n	800cb0e <__kernel_rem_pio2+0x356>
 800cb26:	a90c      	add	r1, sp, #48	@ 0x30
 800cb28:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800cb2c:	3b01      	subs	r3, #1
 800cb2e:	430a      	orrs	r2, r1
 800cb30:	e787      	b.n	800ca42 <__kernel_rem_pio2+0x28a>
 800cb32:	3401      	adds	r4, #1
 800cb34:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cb38:	2a00      	cmp	r2, #0
 800cb3a:	d0fa      	beq.n	800cb32 <__kernel_rem_pio2+0x37a>
 800cb3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb3e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800cb42:	eb0d 0503 	add.w	r5, sp, r3
 800cb46:	9b06      	ldr	r3, [sp, #24]
 800cb48:	aa20      	add	r2, sp, #128	@ 0x80
 800cb4a:	4443      	add	r3, r8
 800cb4c:	f108 0701 	add.w	r7, r8, #1
 800cb50:	3d98      	subs	r5, #152	@ 0x98
 800cb52:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800cb56:	4444      	add	r4, r8
 800cb58:	42bc      	cmp	r4, r7
 800cb5a:	da04      	bge.n	800cb66 <__kernel_rem_pio2+0x3ae>
 800cb5c:	46a0      	mov	r8, r4
 800cb5e:	e6a2      	b.n	800c8a6 <__kernel_rem_pio2+0xee>
 800cb60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb62:	2401      	movs	r4, #1
 800cb64:	e7e6      	b.n	800cb34 <__kernel_rem_pio2+0x37c>
 800cb66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb68:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800cb6c:	f7f3 fcd2 	bl	8000514 <__aeabi_i2d>
 800cb70:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800ce38 <__kernel_rem_pio2+0x680>
 800cb74:	e8e6 0102 	strd	r0, r1, [r6], #8
 800cb78:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cb7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cb80:	46b2      	mov	sl, r6
 800cb82:	f04f 0800 	mov.w	r8, #0
 800cb86:	9b05      	ldr	r3, [sp, #20]
 800cb88:	4598      	cmp	r8, r3
 800cb8a:	dd05      	ble.n	800cb98 <__kernel_rem_pio2+0x3e0>
 800cb8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cb90:	3701      	adds	r7, #1
 800cb92:	eca5 7b02 	vstmia	r5!, {d7}
 800cb96:	e7df      	b.n	800cb58 <__kernel_rem_pio2+0x3a0>
 800cb98:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800cb9c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800cba0:	f7f3 fd22 	bl	80005e8 <__aeabi_dmul>
 800cba4:	4602      	mov	r2, r0
 800cba6:	460b      	mov	r3, r1
 800cba8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbac:	f7f3 fb66 	bl	800027c <__adddf3>
 800cbb0:	f108 0801 	add.w	r8, r8, #1
 800cbb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cbb8:	e7e5      	b.n	800cb86 <__kernel_rem_pio2+0x3ce>
 800cbba:	f1cb 0000 	rsb	r0, fp, #0
 800cbbe:	ec47 6b10 	vmov	d0, r6, r7
 800cbc2:	f000 f951 	bl	800ce68 <scalbn>
 800cbc6:	ec55 4b10 	vmov	r4, r5, d0
 800cbca:	4b9d      	ldr	r3, [pc, #628]	@ (800ce40 <__kernel_rem_pio2+0x688>)
 800cbcc:	2200      	movs	r2, #0
 800cbce:	4620      	mov	r0, r4
 800cbd0:	4629      	mov	r1, r5
 800cbd2:	f7f3 ff8f 	bl	8000af4 <__aeabi_dcmpge>
 800cbd6:	b300      	cbz	r0, 800cc1a <__kernel_rem_pio2+0x462>
 800cbd8:	4b9a      	ldr	r3, [pc, #616]	@ (800ce44 <__kernel_rem_pio2+0x68c>)
 800cbda:	2200      	movs	r2, #0
 800cbdc:	4620      	mov	r0, r4
 800cbde:	4629      	mov	r1, r5
 800cbe0:	f7f3 fd02 	bl	80005e8 <__aeabi_dmul>
 800cbe4:	f7f3 ffb0 	bl	8000b48 <__aeabi_d2iz>
 800cbe8:	4606      	mov	r6, r0
 800cbea:	f7f3 fc93 	bl	8000514 <__aeabi_i2d>
 800cbee:	4b94      	ldr	r3, [pc, #592]	@ (800ce40 <__kernel_rem_pio2+0x688>)
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	f7f3 fcf9 	bl	80005e8 <__aeabi_dmul>
 800cbf6:	460b      	mov	r3, r1
 800cbf8:	4602      	mov	r2, r0
 800cbfa:	4629      	mov	r1, r5
 800cbfc:	4620      	mov	r0, r4
 800cbfe:	f7f3 fb3b 	bl	8000278 <__aeabi_dsub>
 800cc02:	f7f3 ffa1 	bl	8000b48 <__aeabi_d2iz>
 800cc06:	ab0c      	add	r3, sp, #48	@ 0x30
 800cc08:	f10b 0b18 	add.w	fp, fp, #24
 800cc0c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800cc10:	f108 0801 	add.w	r8, r8, #1
 800cc14:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800cc18:	e722      	b.n	800ca60 <__kernel_rem_pio2+0x2a8>
 800cc1a:	4620      	mov	r0, r4
 800cc1c:	4629      	mov	r1, r5
 800cc1e:	f7f3 ff93 	bl	8000b48 <__aeabi_d2iz>
 800cc22:	ab0c      	add	r3, sp, #48	@ 0x30
 800cc24:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800cc28:	e71a      	b.n	800ca60 <__kernel_rem_pio2+0x2a8>
 800cc2a:	ab0c      	add	r3, sp, #48	@ 0x30
 800cc2c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800cc30:	f7f3 fc70 	bl	8000514 <__aeabi_i2d>
 800cc34:	4622      	mov	r2, r4
 800cc36:	462b      	mov	r3, r5
 800cc38:	f7f3 fcd6 	bl	80005e8 <__aeabi_dmul>
 800cc3c:	4652      	mov	r2, sl
 800cc3e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800cc42:	465b      	mov	r3, fp
 800cc44:	4620      	mov	r0, r4
 800cc46:	4629      	mov	r1, r5
 800cc48:	f7f3 fcce 	bl	80005e8 <__aeabi_dmul>
 800cc4c:	3e01      	subs	r6, #1
 800cc4e:	4604      	mov	r4, r0
 800cc50:	460d      	mov	r5, r1
 800cc52:	e718      	b.n	800ca86 <__kernel_rem_pio2+0x2ce>
 800cc54:	9906      	ldr	r1, [sp, #24]
 800cc56:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800cc5a:	9106      	str	r1, [sp, #24]
 800cc5c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800cc60:	f7f3 fcc2 	bl	80005e8 <__aeabi_dmul>
 800cc64:	4602      	mov	r2, r0
 800cc66:	460b      	mov	r3, r1
 800cc68:	4650      	mov	r0, sl
 800cc6a:	4659      	mov	r1, fp
 800cc6c:	f7f3 fb06 	bl	800027c <__adddf3>
 800cc70:	3601      	adds	r6, #1
 800cc72:	4682      	mov	sl, r0
 800cc74:	468b      	mov	fp, r1
 800cc76:	9b00      	ldr	r3, [sp, #0]
 800cc78:	429e      	cmp	r6, r3
 800cc7a:	dc01      	bgt.n	800cc80 <__kernel_rem_pio2+0x4c8>
 800cc7c:	42b5      	cmp	r5, r6
 800cc7e:	dae9      	bge.n	800cc54 <__kernel_rem_pio2+0x49c>
 800cc80:	ab48      	add	r3, sp, #288	@ 0x120
 800cc82:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800cc86:	e9c5 ab00 	strd	sl, fp, [r5]
 800cc8a:	3c01      	subs	r4, #1
 800cc8c:	e6ff      	b.n	800ca8e <__kernel_rem_pio2+0x2d6>
 800cc8e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800cc90:	2b02      	cmp	r3, #2
 800cc92:	dc0b      	bgt.n	800ccac <__kernel_rem_pio2+0x4f4>
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	dc39      	bgt.n	800cd0c <__kernel_rem_pio2+0x554>
 800cc98:	d05d      	beq.n	800cd56 <__kernel_rem_pio2+0x59e>
 800cc9a:	9b02      	ldr	r3, [sp, #8]
 800cc9c:	f003 0007 	and.w	r0, r3, #7
 800cca0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800cca4:	ecbd 8b02 	vpop	{d8}
 800cca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccac:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800ccae:	2b03      	cmp	r3, #3
 800ccb0:	d1f3      	bne.n	800cc9a <__kernel_rem_pio2+0x4e2>
 800ccb2:	9b05      	ldr	r3, [sp, #20]
 800ccb4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ccb8:	eb0d 0403 	add.w	r4, sp, r3
 800ccbc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800ccc0:	4625      	mov	r5, r4
 800ccc2:	46c2      	mov	sl, r8
 800ccc4:	f1ba 0f00 	cmp.w	sl, #0
 800ccc8:	f1a5 0508 	sub.w	r5, r5, #8
 800cccc:	dc6b      	bgt.n	800cda6 <__kernel_rem_pio2+0x5ee>
 800ccce:	4645      	mov	r5, r8
 800ccd0:	2d01      	cmp	r5, #1
 800ccd2:	f1a4 0408 	sub.w	r4, r4, #8
 800ccd6:	f300 8087 	bgt.w	800cde8 <__kernel_rem_pio2+0x630>
 800ccda:	9c05      	ldr	r4, [sp, #20]
 800ccdc:	ab48      	add	r3, sp, #288	@ 0x120
 800ccde:	441c      	add	r4, r3
 800cce0:	2000      	movs	r0, #0
 800cce2:	2100      	movs	r1, #0
 800cce4:	f1b8 0f01 	cmp.w	r8, #1
 800cce8:	f300 809c 	bgt.w	800ce24 <__kernel_rem_pio2+0x66c>
 800ccec:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800ccf0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800ccf4:	f1b9 0f00 	cmp.w	r9, #0
 800ccf8:	f040 80a6 	bne.w	800ce48 <__kernel_rem_pio2+0x690>
 800ccfc:	9b04      	ldr	r3, [sp, #16]
 800ccfe:	e9c3 7800 	strd	r7, r8, [r3]
 800cd02:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800cd06:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800cd0a:	e7c6      	b.n	800cc9a <__kernel_rem_pio2+0x4e2>
 800cd0c:	9d05      	ldr	r5, [sp, #20]
 800cd0e:	ab48      	add	r3, sp, #288	@ 0x120
 800cd10:	441d      	add	r5, r3
 800cd12:	4644      	mov	r4, r8
 800cd14:	2000      	movs	r0, #0
 800cd16:	2100      	movs	r1, #0
 800cd18:	2c00      	cmp	r4, #0
 800cd1a:	da35      	bge.n	800cd88 <__kernel_rem_pio2+0x5d0>
 800cd1c:	f1b9 0f00 	cmp.w	r9, #0
 800cd20:	d038      	beq.n	800cd94 <__kernel_rem_pio2+0x5dc>
 800cd22:	4602      	mov	r2, r0
 800cd24:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cd28:	9c04      	ldr	r4, [sp, #16]
 800cd2a:	e9c4 2300 	strd	r2, r3, [r4]
 800cd2e:	4602      	mov	r2, r0
 800cd30:	460b      	mov	r3, r1
 800cd32:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800cd36:	f7f3 fa9f 	bl	8000278 <__aeabi_dsub>
 800cd3a:	ad4a      	add	r5, sp, #296	@ 0x128
 800cd3c:	2401      	movs	r4, #1
 800cd3e:	45a0      	cmp	r8, r4
 800cd40:	da2b      	bge.n	800cd9a <__kernel_rem_pio2+0x5e2>
 800cd42:	f1b9 0f00 	cmp.w	r9, #0
 800cd46:	d002      	beq.n	800cd4e <__kernel_rem_pio2+0x596>
 800cd48:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cd4c:	4619      	mov	r1, r3
 800cd4e:	9b04      	ldr	r3, [sp, #16]
 800cd50:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800cd54:	e7a1      	b.n	800cc9a <__kernel_rem_pio2+0x4e2>
 800cd56:	9c05      	ldr	r4, [sp, #20]
 800cd58:	ab48      	add	r3, sp, #288	@ 0x120
 800cd5a:	441c      	add	r4, r3
 800cd5c:	2000      	movs	r0, #0
 800cd5e:	2100      	movs	r1, #0
 800cd60:	f1b8 0f00 	cmp.w	r8, #0
 800cd64:	da09      	bge.n	800cd7a <__kernel_rem_pio2+0x5c2>
 800cd66:	f1b9 0f00 	cmp.w	r9, #0
 800cd6a:	d002      	beq.n	800cd72 <__kernel_rem_pio2+0x5ba>
 800cd6c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cd70:	4619      	mov	r1, r3
 800cd72:	9b04      	ldr	r3, [sp, #16]
 800cd74:	e9c3 0100 	strd	r0, r1, [r3]
 800cd78:	e78f      	b.n	800cc9a <__kernel_rem_pio2+0x4e2>
 800cd7a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cd7e:	f7f3 fa7d 	bl	800027c <__adddf3>
 800cd82:	f108 38ff 	add.w	r8, r8, #4294967295
 800cd86:	e7eb      	b.n	800cd60 <__kernel_rem_pio2+0x5a8>
 800cd88:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800cd8c:	f7f3 fa76 	bl	800027c <__adddf3>
 800cd90:	3c01      	subs	r4, #1
 800cd92:	e7c1      	b.n	800cd18 <__kernel_rem_pio2+0x560>
 800cd94:	4602      	mov	r2, r0
 800cd96:	460b      	mov	r3, r1
 800cd98:	e7c6      	b.n	800cd28 <__kernel_rem_pio2+0x570>
 800cd9a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800cd9e:	f7f3 fa6d 	bl	800027c <__adddf3>
 800cda2:	3401      	adds	r4, #1
 800cda4:	e7cb      	b.n	800cd3e <__kernel_rem_pio2+0x586>
 800cda6:	ed95 7b00 	vldr	d7, [r5]
 800cdaa:	ed8d 7b00 	vstr	d7, [sp]
 800cdae:	ed95 7b02 	vldr	d7, [r5, #8]
 800cdb2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cdb6:	ec53 2b17 	vmov	r2, r3, d7
 800cdba:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cdbe:	f7f3 fa5d 	bl	800027c <__adddf3>
 800cdc2:	4602      	mov	r2, r0
 800cdc4:	460b      	mov	r3, r1
 800cdc6:	4606      	mov	r6, r0
 800cdc8:	460f      	mov	r7, r1
 800cdca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cdce:	f7f3 fa53 	bl	8000278 <__aeabi_dsub>
 800cdd2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cdd6:	f7f3 fa51 	bl	800027c <__adddf3>
 800cdda:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cdde:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800cde2:	e9c5 6700 	strd	r6, r7, [r5]
 800cde6:	e76d      	b.n	800ccc4 <__kernel_rem_pio2+0x50c>
 800cde8:	ed94 7b00 	vldr	d7, [r4]
 800cdec:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800cdf0:	ec51 0b17 	vmov	r0, r1, d7
 800cdf4:	4652      	mov	r2, sl
 800cdf6:	465b      	mov	r3, fp
 800cdf8:	ed8d 7b00 	vstr	d7, [sp]
 800cdfc:	f7f3 fa3e 	bl	800027c <__adddf3>
 800ce00:	4602      	mov	r2, r0
 800ce02:	460b      	mov	r3, r1
 800ce04:	4606      	mov	r6, r0
 800ce06:	460f      	mov	r7, r1
 800ce08:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce0c:	f7f3 fa34 	bl	8000278 <__aeabi_dsub>
 800ce10:	4652      	mov	r2, sl
 800ce12:	465b      	mov	r3, fp
 800ce14:	f7f3 fa32 	bl	800027c <__adddf3>
 800ce18:	3d01      	subs	r5, #1
 800ce1a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ce1e:	e9c4 6700 	strd	r6, r7, [r4]
 800ce22:	e755      	b.n	800ccd0 <__kernel_rem_pio2+0x518>
 800ce24:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ce28:	f7f3 fa28 	bl	800027c <__adddf3>
 800ce2c:	f108 38ff 	add.w	r8, r8, #4294967295
 800ce30:	e758      	b.n	800cce4 <__kernel_rem_pio2+0x52c>
 800ce32:	bf00      	nop
 800ce34:	f3af 8000 	nop.w
	...
 800ce40:	41700000 	.word	0x41700000
 800ce44:	3e700000 	.word	0x3e700000
 800ce48:	9b04      	ldr	r3, [sp, #16]
 800ce4a:	9a04      	ldr	r2, [sp, #16]
 800ce4c:	601f      	str	r7, [r3, #0]
 800ce4e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800ce52:	605c      	str	r4, [r3, #4]
 800ce54:	609d      	str	r5, [r3, #8]
 800ce56:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ce5a:	60d3      	str	r3, [r2, #12]
 800ce5c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ce60:	6110      	str	r0, [r2, #16]
 800ce62:	6153      	str	r3, [r2, #20]
 800ce64:	e719      	b.n	800cc9a <__kernel_rem_pio2+0x4e2>
 800ce66:	bf00      	nop

0800ce68 <scalbn>:
 800ce68:	b570      	push	{r4, r5, r6, lr}
 800ce6a:	ec55 4b10 	vmov	r4, r5, d0
 800ce6e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800ce72:	4606      	mov	r6, r0
 800ce74:	462b      	mov	r3, r5
 800ce76:	b991      	cbnz	r1, 800ce9e <scalbn+0x36>
 800ce78:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800ce7c:	4323      	orrs	r3, r4
 800ce7e:	d03d      	beq.n	800cefc <scalbn+0x94>
 800ce80:	4b35      	ldr	r3, [pc, #212]	@ (800cf58 <scalbn+0xf0>)
 800ce82:	4620      	mov	r0, r4
 800ce84:	4629      	mov	r1, r5
 800ce86:	2200      	movs	r2, #0
 800ce88:	f7f3 fbae 	bl	80005e8 <__aeabi_dmul>
 800ce8c:	4b33      	ldr	r3, [pc, #204]	@ (800cf5c <scalbn+0xf4>)
 800ce8e:	429e      	cmp	r6, r3
 800ce90:	4604      	mov	r4, r0
 800ce92:	460d      	mov	r5, r1
 800ce94:	da0f      	bge.n	800ceb6 <scalbn+0x4e>
 800ce96:	a328      	add	r3, pc, #160	@ (adr r3, 800cf38 <scalbn+0xd0>)
 800ce98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce9c:	e01e      	b.n	800cedc <scalbn+0x74>
 800ce9e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800cea2:	4291      	cmp	r1, r2
 800cea4:	d10b      	bne.n	800cebe <scalbn+0x56>
 800cea6:	4622      	mov	r2, r4
 800cea8:	4620      	mov	r0, r4
 800ceaa:	4629      	mov	r1, r5
 800ceac:	f7f3 f9e6 	bl	800027c <__adddf3>
 800ceb0:	4604      	mov	r4, r0
 800ceb2:	460d      	mov	r5, r1
 800ceb4:	e022      	b.n	800cefc <scalbn+0x94>
 800ceb6:	460b      	mov	r3, r1
 800ceb8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800cebc:	3936      	subs	r1, #54	@ 0x36
 800cebe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800cec2:	4296      	cmp	r6, r2
 800cec4:	dd0d      	ble.n	800cee2 <scalbn+0x7a>
 800cec6:	2d00      	cmp	r5, #0
 800cec8:	a11d      	add	r1, pc, #116	@ (adr r1, 800cf40 <scalbn+0xd8>)
 800ceca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cece:	da02      	bge.n	800ced6 <scalbn+0x6e>
 800ced0:	a11d      	add	r1, pc, #116	@ (adr r1, 800cf48 <scalbn+0xe0>)
 800ced2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ced6:	a31a      	add	r3, pc, #104	@ (adr r3, 800cf40 <scalbn+0xd8>)
 800ced8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cedc:	f7f3 fb84 	bl	80005e8 <__aeabi_dmul>
 800cee0:	e7e6      	b.n	800ceb0 <scalbn+0x48>
 800cee2:	1872      	adds	r2, r6, r1
 800cee4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800cee8:	428a      	cmp	r2, r1
 800ceea:	dcec      	bgt.n	800cec6 <scalbn+0x5e>
 800ceec:	2a00      	cmp	r2, #0
 800ceee:	dd08      	ble.n	800cf02 <scalbn+0x9a>
 800cef0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800cef4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800cef8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cefc:	ec45 4b10 	vmov	d0, r4, r5
 800cf00:	bd70      	pop	{r4, r5, r6, pc}
 800cf02:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800cf06:	da08      	bge.n	800cf1a <scalbn+0xb2>
 800cf08:	2d00      	cmp	r5, #0
 800cf0a:	a10b      	add	r1, pc, #44	@ (adr r1, 800cf38 <scalbn+0xd0>)
 800cf0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf10:	dac1      	bge.n	800ce96 <scalbn+0x2e>
 800cf12:	a10f      	add	r1, pc, #60	@ (adr r1, 800cf50 <scalbn+0xe8>)
 800cf14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf18:	e7bd      	b.n	800ce96 <scalbn+0x2e>
 800cf1a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800cf1e:	3236      	adds	r2, #54	@ 0x36
 800cf20:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800cf24:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cf28:	4620      	mov	r0, r4
 800cf2a:	4b0d      	ldr	r3, [pc, #52]	@ (800cf60 <scalbn+0xf8>)
 800cf2c:	4629      	mov	r1, r5
 800cf2e:	2200      	movs	r2, #0
 800cf30:	e7d4      	b.n	800cedc <scalbn+0x74>
 800cf32:	bf00      	nop
 800cf34:	f3af 8000 	nop.w
 800cf38:	c2f8f359 	.word	0xc2f8f359
 800cf3c:	01a56e1f 	.word	0x01a56e1f
 800cf40:	8800759c 	.word	0x8800759c
 800cf44:	7e37e43c 	.word	0x7e37e43c
 800cf48:	8800759c 	.word	0x8800759c
 800cf4c:	fe37e43c 	.word	0xfe37e43c
 800cf50:	c2f8f359 	.word	0xc2f8f359
 800cf54:	81a56e1f 	.word	0x81a56e1f
 800cf58:	43500000 	.word	0x43500000
 800cf5c:	ffff3cb0 	.word	0xffff3cb0
 800cf60:	3c900000 	.word	0x3c900000
 800cf64:	00000000 	.word	0x00000000

0800cf68 <floor>:
 800cf68:	ec51 0b10 	vmov	r0, r1, d0
 800cf6c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cf70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf74:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800cf78:	2e13      	cmp	r6, #19
 800cf7a:	460c      	mov	r4, r1
 800cf7c:	4605      	mov	r5, r0
 800cf7e:	4680      	mov	r8, r0
 800cf80:	dc34      	bgt.n	800cfec <floor+0x84>
 800cf82:	2e00      	cmp	r6, #0
 800cf84:	da17      	bge.n	800cfb6 <floor+0x4e>
 800cf86:	a332      	add	r3, pc, #200	@ (adr r3, 800d050 <floor+0xe8>)
 800cf88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf8c:	f7f3 f976 	bl	800027c <__adddf3>
 800cf90:	2200      	movs	r2, #0
 800cf92:	2300      	movs	r3, #0
 800cf94:	f7f3 fdb8 	bl	8000b08 <__aeabi_dcmpgt>
 800cf98:	b150      	cbz	r0, 800cfb0 <floor+0x48>
 800cf9a:	2c00      	cmp	r4, #0
 800cf9c:	da55      	bge.n	800d04a <floor+0xe2>
 800cf9e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800cfa2:	432c      	orrs	r4, r5
 800cfa4:	2500      	movs	r5, #0
 800cfa6:	42ac      	cmp	r4, r5
 800cfa8:	4c2b      	ldr	r4, [pc, #172]	@ (800d058 <floor+0xf0>)
 800cfaa:	bf08      	it	eq
 800cfac:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800cfb0:	4621      	mov	r1, r4
 800cfb2:	4628      	mov	r0, r5
 800cfb4:	e023      	b.n	800cffe <floor+0x96>
 800cfb6:	4f29      	ldr	r7, [pc, #164]	@ (800d05c <floor+0xf4>)
 800cfb8:	4137      	asrs	r7, r6
 800cfba:	ea01 0307 	and.w	r3, r1, r7
 800cfbe:	4303      	orrs	r3, r0
 800cfc0:	d01d      	beq.n	800cffe <floor+0x96>
 800cfc2:	a323      	add	r3, pc, #140	@ (adr r3, 800d050 <floor+0xe8>)
 800cfc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc8:	f7f3 f958 	bl	800027c <__adddf3>
 800cfcc:	2200      	movs	r2, #0
 800cfce:	2300      	movs	r3, #0
 800cfd0:	f7f3 fd9a 	bl	8000b08 <__aeabi_dcmpgt>
 800cfd4:	2800      	cmp	r0, #0
 800cfd6:	d0eb      	beq.n	800cfb0 <floor+0x48>
 800cfd8:	2c00      	cmp	r4, #0
 800cfda:	bfbe      	ittt	lt
 800cfdc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800cfe0:	4133      	asrlt	r3, r6
 800cfe2:	18e4      	addlt	r4, r4, r3
 800cfe4:	ea24 0407 	bic.w	r4, r4, r7
 800cfe8:	2500      	movs	r5, #0
 800cfea:	e7e1      	b.n	800cfb0 <floor+0x48>
 800cfec:	2e33      	cmp	r6, #51	@ 0x33
 800cfee:	dd0a      	ble.n	800d006 <floor+0x9e>
 800cff0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800cff4:	d103      	bne.n	800cffe <floor+0x96>
 800cff6:	4602      	mov	r2, r0
 800cff8:	460b      	mov	r3, r1
 800cffa:	f7f3 f93f 	bl	800027c <__adddf3>
 800cffe:	ec41 0b10 	vmov	d0, r0, r1
 800d002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d006:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800d00a:	f04f 37ff 	mov.w	r7, #4294967295
 800d00e:	40df      	lsrs	r7, r3
 800d010:	4207      	tst	r7, r0
 800d012:	d0f4      	beq.n	800cffe <floor+0x96>
 800d014:	a30e      	add	r3, pc, #56	@ (adr r3, 800d050 <floor+0xe8>)
 800d016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d01a:	f7f3 f92f 	bl	800027c <__adddf3>
 800d01e:	2200      	movs	r2, #0
 800d020:	2300      	movs	r3, #0
 800d022:	f7f3 fd71 	bl	8000b08 <__aeabi_dcmpgt>
 800d026:	2800      	cmp	r0, #0
 800d028:	d0c2      	beq.n	800cfb0 <floor+0x48>
 800d02a:	2c00      	cmp	r4, #0
 800d02c:	da0a      	bge.n	800d044 <floor+0xdc>
 800d02e:	2e14      	cmp	r6, #20
 800d030:	d101      	bne.n	800d036 <floor+0xce>
 800d032:	3401      	adds	r4, #1
 800d034:	e006      	b.n	800d044 <floor+0xdc>
 800d036:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800d03a:	2301      	movs	r3, #1
 800d03c:	40b3      	lsls	r3, r6
 800d03e:	441d      	add	r5, r3
 800d040:	4545      	cmp	r5, r8
 800d042:	d3f6      	bcc.n	800d032 <floor+0xca>
 800d044:	ea25 0507 	bic.w	r5, r5, r7
 800d048:	e7b2      	b.n	800cfb0 <floor+0x48>
 800d04a:	2500      	movs	r5, #0
 800d04c:	462c      	mov	r4, r5
 800d04e:	e7af      	b.n	800cfb0 <floor+0x48>
 800d050:	8800759c 	.word	0x8800759c
 800d054:	7e37e43c 	.word	0x7e37e43c
 800d058:	bff00000 	.word	0xbff00000
 800d05c:	000fffff 	.word	0x000fffff

0800d060 <_init>:
 800d060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d062:	bf00      	nop
 800d064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d066:	bc08      	pop	{r3}
 800d068:	469e      	mov	lr, r3
 800d06a:	4770      	bx	lr

0800d06c <_fini>:
 800d06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d06e:	bf00      	nop
 800d070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d072:	bc08      	pop	{r3}
 800d074:	469e      	mov	lr, r3
 800d076:	4770      	bx	lr
