
PlsWork.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa54  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800abe4  0800abe4  0000bbe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acb4  0800acb4  0000c1cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800acb4  0800acb4  0000bcb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800acbc  0800acbc  0000c1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acbc  0800acbc  0000bcbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800acc0  0800acc0  0000bcc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  0800acc4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1cc  2**0
                  CONTENTS
 10 .bss          00001454  200001cc  200001cc  0000c1cc  2**2
                  ALLOC
 11 ._user_heap_stack 00006000  20001620  20001620  0000c1cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012b9a  00000000  00000000  0000c1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000345e  00000000  00000000  0001ed96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff8  00000000  00000000  000221f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c08  00000000  00000000  000231f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fd86  00000000  00000000  00023df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016a98  00000000  00000000  00043b7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b0af9  00000000  00000000  0005a616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010b10f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045c4  00000000  00000000  0010b154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  0010f718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001cc 	.word	0x200001cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800abcc 	.word	0x0800abcc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d0 	.word	0x200001d0
 80001cc:	0800abcc 	.word	0x0800abcc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <Error>:
#include "stm32f3xx_hal.h"
extern SPI_HandleTypeDef hspi1;
extern I2C_HandleTypeDef hi2c1;

void Error(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_9,GPIO_PIN_SET);
 8000284:	2201      	movs	r2, #1
 8000286:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800028a:	4802      	ldr	r0, [pc, #8]	@ (8000294 <Error+0x14>)
 800028c:	f001 fe06 	bl	8001e9c <HAL_GPIO_WritePin>
}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}
 8000294:	48001000 	.word	0x48001000

08000298 <Success>:

void Success(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 800029c:	2200      	movs	r2, #0
 800029e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002a2:	4802      	ldr	r0, [pc, #8]	@ (80002ac <Success+0x14>)
 80002a4:	f001 fdfa 	bl	8001e9c <HAL_GPIO_WritePin>
}
 80002a8:	bf00      	nop
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	48001000 	.word	0x48001000

080002b0 <I2C_Read>:

static uint8_t I2C_Read(uint16_t Addr, uint8_t Reg)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b088      	sub	sp, #32
 80002b4:	af04      	add	r7, sp, #16
 80002b6:	4603      	mov	r3, r0
 80002b8:	460a      	mov	r2, r1
 80002ba:	80fb      	strh	r3, [r7, #6]
 80002bc:	4613      	mov	r3, r2
 80002be:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_OK;
 80002c0:	2300      	movs	r3, #0
 80002c2:	73fb      	strb	r3, [r7, #15]
	uint8_t value = 0;
 80002c4:	2300      	movs	r3, #0
 80002c6:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 80002c8:	797b      	ldrb	r3, [r7, #5]
 80002ca:	b29a      	uxth	r2, r3
 80002cc:	88f9      	ldrh	r1, [r7, #6]
 80002ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002d2:	9302      	str	r3, [sp, #8]
 80002d4:	2301      	movs	r3, #1
 80002d6:	9301      	str	r3, [sp, #4]
 80002d8:	f107 030e 	add.w	r3, r7, #14
 80002dc:	9300      	str	r3, [sp, #0]
 80002de:	2301      	movs	r3, #1
 80002e0:	4808      	ldr	r0, [pc, #32]	@ (8000304 <I2C_Read+0x54>)
 80002e2:	f001 ffbb 	bl	800225c <HAL_I2C_Mem_Read>
 80002e6:	4603      	mov	r3, r0
 80002e8:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) Error();
 80002ea:	7bfb      	ldrb	r3, [r7, #15]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d002      	beq.n	80002f6 <I2C_Read+0x46>
 80002f0:	f7ff ffc6 	bl	8000280 <Error>
 80002f4:	e001      	b.n	80002fa <I2C_Read+0x4a>
	else Success();
 80002f6:	f7ff ffcf 	bl	8000298 <Success>
	return value;
 80002fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80002fc:	4618      	mov	r0, r3
 80002fe:	3710      	adds	r7, #16
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	200001e8 	.word	0x200001e8

08000308 <I2C_Write>:

static void I2C_Write(uint16_t Addr, uint8_t Reg,  uint8_t Value)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b088      	sub	sp, #32
 800030c:	af04      	add	r7, sp, #16
 800030e:	4603      	mov	r3, r0
 8000310:	80fb      	strh	r3, [r7, #6]
 8000312:	460b      	mov	r3, r1
 8000314:	717b      	strb	r3, [r7, #5]
 8000316:	4613      	mov	r3, r2
 8000318:	713b      	strb	r3, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 800031a:	2300      	movs	r3, #0
 800031c:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Mem_Write(&hi2c1, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
 800031e:	797b      	ldrb	r3, [r7, #5]
 8000320:	b29a      	uxth	r2, r3
 8000322:	88f9      	ldrh	r1, [r7, #6]
 8000324:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000328:	9302      	str	r3, [sp, #8]
 800032a:	2301      	movs	r3, #1
 800032c:	9301      	str	r3, [sp, #4]
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	2301      	movs	r3, #1
 8000334:	4808      	ldr	r0, [pc, #32]	@ (8000358 <I2C_Write+0x50>)
 8000336:	f001 fe7d 	bl	8002034 <HAL_I2C_Mem_Write>
 800033a:	4603      	mov	r3, r0
 800033c:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) Error();
 800033e:	7bfb      	ldrb	r3, [r7, #15]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d002      	beq.n	800034a <I2C_Write+0x42>
 8000344:	f7ff ff9c 	bl	8000280 <Error>
	else Success();
}
 8000348:	e001      	b.n	800034e <I2C_Write+0x46>
	else Success();
 800034a:	f7ff ffa5 	bl	8000298 <Success>
}
 800034e:	bf00      	nop
 8000350:	3710      	adds	r7, #16
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	200001e8 	.word	0x200001e8

0800035c <I2C_ReadID>:

uint8_t I2C_ReadID(uint16_t Addr)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b084      	sub	sp, #16
 8000360:	af00      	add	r7, sp, #0
 8000362:	4603      	mov	r3, r0
 8000364:	80fb      	strh	r3, [r7, #6]
	uint8_t ctrl = 0x00;
 8000366:	2300      	movs	r3, #0
 8000368:	73fb      	strb	r3, [r7, #15]
	ctrl = I2C_Read(Addr, 0x0F);
 800036a:	88fb      	ldrh	r3, [r7, #6]
 800036c:	210f      	movs	r1, #15
 800036e:	4618      	mov	r0, r3
 8000370:	f7ff ff9e 	bl	80002b0 <I2C_Read>
 8000374:	4603      	mov	r3, r0
 8000376:	73fb      	strb	r3, [r7, #15]
	return ctrl;
 8000378:	7bfb      	ldrb	r3, [r7, #15]
}
 800037a:	4618      	mov	r0, r3
 800037c:	3710      	adds	r7, #16
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}

08000382 <Accel_Ini>:

void Accel_Ini(void)
{
 8000382:	b580      	push	{r7, lr}
 8000384:	b082      	sub	sp, #8
 8000386:	af00      	add	r7, sp, #0
	uint8_t ctrl;
	if (I2C_ReadID(0x33)==0x33)
 8000388:	2033      	movs	r0, #51	@ 0x33
 800038a:	f7ff ffe7 	bl	800035c <I2C_ReadID>
 800038e:	4603      	mov	r3, r0
 8000390:	2b33      	cmp	r3, #51	@ 0x33
 8000392:	d11f      	bne.n	80003d4 <Accel_Ini+0x52>
	{
		ctrl=0b10010111;
 8000394:	2397      	movs	r3, #151	@ 0x97
 8000396:	71fb      	strb	r3, [r7, #7]
		I2C_Write(0x32,0x20,ctrl);
 8000398:	79fb      	ldrb	r3, [r7, #7]
 800039a:	461a      	mov	r2, r3
 800039c:	2120      	movs	r1, #32
 800039e:	2032      	movs	r0, #50	@ 0x32
 80003a0:	f7ff ffb2 	bl	8000308 <I2C_Write>
		ctrl=0b00010000;
 80003a4:	2310      	movs	r3, #16
 80003a6:	71fb      	strb	r3, [r7, #7]
		I2C_Write(0x32,0x22,ctrl);
 80003a8:	79fb      	ldrb	r3, [r7, #7]
 80003aa:	461a      	mov	r2, r3
 80003ac:	2122      	movs	r1, #34	@ 0x22
 80003ae:	2032      	movs	r0, #50	@ 0x32
 80003b0:	f7ff ffaa 	bl	8000308 <I2C_Write>
		ctrl=0b00001000;
 80003b4:	2308      	movs	r3, #8
 80003b6:	71fb      	strb	r3, [r7, #7]
		I2C_Write(0x32,0x23,ctrl);
 80003b8:	79fb      	ldrb	r3, [r7, #7]
 80003ba:	461a      	mov	r2, r3
 80003bc:	2123      	movs	r1, #35	@ 0x23
 80003be:	2032      	movs	r0, #50	@ 0x32
 80003c0:	f7ff ffa2 	bl	8000308 <I2C_Write>
		ctrl=0b00000000;
 80003c4:	2300      	movs	r3, #0
 80003c6:	71fb      	strb	r3, [r7, #7]
		I2C_Write(0x32,0x25,ctrl);
 80003c8:	79fb      	ldrb	r3, [r7, #7]
 80003ca:	461a      	mov	r2, r3
 80003cc:	2125      	movs	r1, #37	@ 0x25
 80003ce:	2032      	movs	r0, #50	@ 0x32
 80003d0:	f7ff ff9a 	bl	8000308 <I2C_Write>
	}
	HAL_Delay(500);
 80003d4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80003d8:	f001 fab0 	bl	800193c <HAL_Delay>
}
 80003dc:	bf00      	nop
 80003de:	3708      	adds	r7, #8
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <Accel_GetXYZ>:

void Accel_GetXYZ(int16_t* pData)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
	uint8_t buffer[6];
	uint8_t i=0;
 80003ec:	2300      	movs	r3, #0
 80003ee:	73fb      	strb	r3, [r7, #15]

	buffer[0] = I2C_Read(0x32,0x28);
 80003f0:	2128      	movs	r1, #40	@ 0x28
 80003f2:	2032      	movs	r0, #50	@ 0x32
 80003f4:	f7ff ff5c 	bl	80002b0 <I2C_Read>
 80003f8:	4603      	mov	r3, r0
 80003fa:	723b      	strb	r3, [r7, #8]
	buffer[1] = I2C_Read(0x32,0x29);
 80003fc:	2129      	movs	r1, #41	@ 0x29
 80003fe:	2032      	movs	r0, #50	@ 0x32
 8000400:	f7ff ff56 	bl	80002b0 <I2C_Read>
 8000404:	4603      	mov	r3, r0
 8000406:	727b      	strb	r3, [r7, #9]
	buffer[2] = I2C_Read(0x32,0x2A);
 8000408:	212a      	movs	r1, #42	@ 0x2a
 800040a:	2032      	movs	r0, #50	@ 0x32
 800040c:	f7ff ff50 	bl	80002b0 <I2C_Read>
 8000410:	4603      	mov	r3, r0
 8000412:	72bb      	strb	r3, [r7, #10]
	buffer[3] = I2C_Read(0x32,0x2B);
 8000414:	212b      	movs	r1, #43	@ 0x2b
 8000416:	2032      	movs	r0, #50	@ 0x32
 8000418:	f7ff ff4a 	bl	80002b0 <I2C_Read>
 800041c:	4603      	mov	r3, r0
 800041e:	72fb      	strb	r3, [r7, #11]
	buffer[4] = I2C_Read(0x32,0x2C);
 8000420:	212c      	movs	r1, #44	@ 0x2c
 8000422:	2032      	movs	r0, #50	@ 0x32
 8000424:	f7ff ff44 	bl	80002b0 <I2C_Read>
 8000428:	4603      	mov	r3, r0
 800042a:	733b      	strb	r3, [r7, #12]
	buffer[5] = I2C_Read(0x32,0x2D);
 800042c:	212d      	movs	r1, #45	@ 0x2d
 800042e:	2032      	movs	r0, #50	@ 0x32
 8000430:	f7ff ff3e 	bl	80002b0 <I2C_Read>
 8000434:	4603      	mov	r3, r0
 8000436:	737b      	strb	r3, [r7, #13]

	for(i=0;i<3;i++)
 8000438:	2300      	movs	r3, #0
 800043a:	73fb      	strb	r3, [r7, #15]
 800043c:	e019      	b.n	8000472 <Accel_GetXYZ+0x8e>
	{
		pData[i]=((int16_t)((uint16_t)buffer[2*i+1]<<8)+buffer[2*i]);
 800043e:	7bfb      	ldrb	r3, [r7, #15]
 8000440:	005b      	lsls	r3, r3, #1
 8000442:	3301      	adds	r3, #1
 8000444:	3310      	adds	r3, #16
 8000446:	443b      	add	r3, r7
 8000448:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800044c:	021b      	lsls	r3, r3, #8
 800044e:	b29b      	uxth	r3, r3
 8000450:	7bfa      	ldrb	r2, [r7, #15]
 8000452:	0052      	lsls	r2, r2, #1
 8000454:	3210      	adds	r2, #16
 8000456:	443a      	add	r2, r7
 8000458:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800045c:	4413      	add	r3, r2
 800045e:	b299      	uxth	r1, r3
 8000460:	7bfb      	ldrb	r3, [r7, #15]
 8000462:	005b      	lsls	r3, r3, #1
 8000464:	687a      	ldr	r2, [r7, #4]
 8000466:	4413      	add	r3, r2
 8000468:	b20a      	sxth	r2, r1
 800046a:	801a      	strh	r2, [r3, #0]
	for(i=0;i<3;i++)
 800046c:	7bfb      	ldrb	r3, [r7, #15]
 800046e:	3301      	adds	r3, #1
 8000470:	73fb      	strb	r3, [r7, #15]
 8000472:	7bfb      	ldrb	r3, [r7, #15]
 8000474:	2b02      	cmp	r3, #2
 8000476:	d9e2      	bls.n	800043e <Accel_GetXYZ+0x5a>
	}
}
 8000478:	bf00      	nop
 800047a:	bf00      	nop
 800047c:	3710      	adds	r7, #16
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
	...

08000484 <SPIx_WriteRead>:

uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b086      	sub	sp, #24
 8000488:	af02      	add	r7, sp, #8
 800048a:	4603      	mov	r3, r0
 800048c:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 800048e:	2300      	movs	r3, #0
 8000490:	73fb      	strb	r3, [r7, #15]
	if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 8000492:	f107 020f 	add.w	r2, r7, #15
 8000496:	1df9      	adds	r1, r7, #7
 8000498:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800049c:	9300      	str	r3, [sp, #0]
 800049e:	2301      	movs	r3, #1
 80004a0:	4807      	ldr	r0, [pc, #28]	@ (80004c0 <SPIx_WriteRead+0x3c>)
 80004a2:	f005 fc80 	bl	8005da6 <HAL_SPI_TransmitReceive>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d002      	beq.n	80004b2 <SPIx_WriteRead+0x2e>
	{
		Error();
 80004ac:	f7ff fee8 	bl	8000280 <Error>
 80004b0:	e001      	b.n	80004b6 <SPIx_WriteRead+0x32>
	}
	else
	{
		Success();
 80004b2:	f7ff fef1 	bl	8000298 <Success>
	}
}
 80004b6:	bf00      	nop
 80004b8:	4618      	mov	r0, r3
 80004ba:	3710      	adds	r7, #16
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	2000023c 	.word	0x2000023c

080004c4 <Gyro_IO_Read>:

void Gyro_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	460b      	mov	r3, r1
 80004ce:	70fb      	strb	r3, [r7, #3]
 80004d0:	4613      	mov	r3, r2
 80004d2:	803b      	strh	r3, [r7, #0]
	if(NumByteToRead>0x01)
 80004d4:	883b      	ldrh	r3, [r7, #0]
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	d904      	bls.n	80004e4 <Gyro_IO_Read+0x20>
	{
		ReadAddr |= (uint8_t) (READWRITE_CMD | MULTIPLEBYTE_CMD);
 80004da:	78fb      	ldrb	r3, [r7, #3]
 80004dc:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80004e0:	70fb      	strb	r3, [r7, #3]
 80004e2:	e003      	b.n	80004ec <Gyro_IO_Read+0x28>
	}
	else
	{
		ReadAddr |= (uint8_t)READWRITE_CMD;
 80004e4:	78fb      	ldrb	r3, [r7, #3]
 80004e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80004ea:	70fb      	strb	r3, [r7, #3]
	}
	CS_ON;
 80004ec:	2200      	movs	r2, #0
 80004ee:	2108      	movs	r1, #8
 80004f0:	4810      	ldr	r0, [pc, #64]	@ (8000534 <Gyro_IO_Read+0x70>)
 80004f2:	f001 fcd3 	bl	8001e9c <HAL_GPIO_WritePin>
	SPIx_WriteRead(ReadAddr);
 80004f6:	78fb      	ldrb	r3, [r7, #3]
 80004f8:	4618      	mov	r0, r3
 80004fa:	f7ff ffc3 	bl	8000484 <SPIx_WriteRead>
	while(NumByteToRead > 0x00)
 80004fe:	e00c      	b.n	800051a <Gyro_IO_Read+0x56>
	{
		*pBuffer=SPIx_WriteRead(DUMMY_BYTE);
 8000500:	2000      	movs	r0, #0
 8000502:	f7ff ffbf 	bl	8000484 <SPIx_WriteRead>
 8000506:	4603      	mov	r3, r0
 8000508:	461a      	mov	r2, r3
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	701a      	strb	r2, [r3, #0]
		NumByteToRead--;
 800050e:	883b      	ldrh	r3, [r7, #0]
 8000510:	3b01      	subs	r3, #1
 8000512:	803b      	strh	r3, [r7, #0]
		pBuffer++;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	3301      	adds	r3, #1
 8000518:	607b      	str	r3, [r7, #4]
	while(NumByteToRead > 0x00)
 800051a:	883b      	ldrh	r3, [r7, #0]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d1ef      	bne.n	8000500 <Gyro_IO_Read+0x3c>
	}
	CS_OFF;
 8000520:	2201      	movs	r2, #1
 8000522:	2108      	movs	r1, #8
 8000524:	4803      	ldr	r0, [pc, #12]	@ (8000534 <Gyro_IO_Read+0x70>)
 8000526:	f001 fcb9 	bl	8001e9c <HAL_GPIO_WritePin>
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	48001000 	.word	0x48001000

08000538 <Gyro_IO_Write>:

void Gyro_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	460b      	mov	r3, r1
 8000542:	70fb      	strb	r3, [r7, #3]
 8000544:	4613      	mov	r3, r2
 8000546:	803b      	strh	r3, [r7, #0]
	CS_OFF;
 8000548:	2201      	movs	r2, #1
 800054a:	2108      	movs	r1, #8
 800054c:	4815      	ldr	r0, [pc, #84]	@ (80005a4 <Gyro_IO_Write+0x6c>)
 800054e:	f001 fca5 	bl	8001e9c <HAL_GPIO_WritePin>
	if(NumByteToWrite>0x01)
 8000552:	883b      	ldrh	r3, [r7, #0]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d903      	bls.n	8000560 <Gyro_IO_Write+0x28>
	{
		WriteAddr |= (uint8_t) MULTIPLEBYTE_CMD;
 8000558:	78fb      	ldrb	r3, [r7, #3]
 800055a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800055e:	70fb      	strb	r3, [r7, #3]
	}
	CS_ON;
 8000560:	2200      	movs	r2, #0
 8000562:	2108      	movs	r1, #8
 8000564:	480f      	ldr	r0, [pc, #60]	@ (80005a4 <Gyro_IO_Write+0x6c>)
 8000566:	f001 fc99 	bl	8001e9c <HAL_GPIO_WritePin>
	SPIx_WriteRead(WriteAddr);
 800056a:	78fb      	ldrb	r3, [r7, #3]
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff ff89 	bl	8000484 <SPIx_WriteRead>
	while(NumByteToWrite > 0x00)
 8000572:	e00a      	b.n	800058a <Gyro_IO_Write+0x52>
	{
		SPIx_WriteRead(*pBuffer);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	4618      	mov	r0, r3
 800057a:	f7ff ff83 	bl	8000484 <SPIx_WriteRead>
		NumByteToWrite--;
 800057e:	883b      	ldrh	r3, [r7, #0]
 8000580:	3b01      	subs	r3, #1
 8000582:	803b      	strh	r3, [r7, #0]
		pBuffer++;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	3301      	adds	r3, #1
 8000588:	607b      	str	r3, [r7, #4]
	while(NumByteToWrite > 0x00)
 800058a:	883b      	ldrh	r3, [r7, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d1f1      	bne.n	8000574 <Gyro_IO_Write+0x3c>
	}
	CS_OFF;
 8000590:	2201      	movs	r2, #1
 8000592:	2108      	movs	r1, #8
 8000594:	4803      	ldr	r0, [pc, #12]	@ (80005a4 <Gyro_IO_Write+0x6c>)
 8000596:	f001 fc81 	bl	8001e9c <HAL_GPIO_WritePin>
}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	48001000 	.word	0x48001000

080005a8 <Gyro_ReadID>:

uint8_t Gyro_ReadID(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
	uint8_t ctrl = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	71fb      	strb	r3, [r7, #7]
	Gyro_IO_Read(&ctrl,0x0F,1);
 80005b2:	1dfb      	adds	r3, r7, #7
 80005b4:	2201      	movs	r2, #1
 80005b6:	210f      	movs	r1, #15
 80005b8:	4618      	mov	r0, r3
 80005ba:	f7ff ff83 	bl	80004c4 <Gyro_IO_Read>
	return ctrl;
 80005be:	79fb      	ldrb	r3, [r7, #7]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <Gyro_Ini>:

void Gyro_Ini(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
	uint8_t ctrl = 0x00;
 80005ce:	2300      	movs	r3, #0
 80005d0:	71fb      	strb	r3, [r7, #7]

	if(Gyro_ReadID() == 0xD4)
 80005d2:	f7ff ffe9 	bl	80005a8 <Gyro_ReadID>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2bd4      	cmp	r3, #212	@ 0xd4
 80005da:	d128      	bne.n	800062e <Gyro_Ini+0x66>
	{
		ctrl=0b01111111;
 80005dc:	237f      	movs	r3, #127	@ 0x7f
 80005de:	71fb      	strb	r3, [r7, #7]
		Gyro_IO_Write(&ctrl, 0x20,1);
 80005e0:	1dfb      	adds	r3, r7, #7
 80005e2:	2201      	movs	r2, #1
 80005e4:	2120      	movs	r1, #32
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff ffa6 	bl	8000538 <Gyro_IO_Write>
		ctrl=0b00000000;
 80005ec:	2300      	movs	r3, #0
 80005ee:	71fb      	strb	r3, [r7, #7]
		Gyro_IO_Write(&ctrl, 0x21,1);
 80005f0:	1dfb      	adds	r3, r7, #7
 80005f2:	2201      	movs	r2, #1
 80005f4:	2121      	movs	r1, #33	@ 0x21
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff ff9e 	bl	8000538 <Gyro_IO_Write>

		ctrl=0b00001000;
 80005fc:	2308      	movs	r3, #8
 80005fe:	71fb      	strb	r3, [r7, #7]
		Gyro_IO_Write(&ctrl, 0x22,1);
 8000600:	1dfb      	adds	r3, r7, #7
 8000602:	2201      	movs	r2, #1
 8000604:	2122      	movs	r1, #34	@ 0x22
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff ff96 	bl	8000538 <Gyro_IO_Write>

		ctrl=0b00010000;
 800060c:	2310      	movs	r3, #16
 800060e:	71fb      	strb	r3, [r7, #7]
		Gyro_IO_Write(&ctrl, 0x23,1);
 8000610:	1dfb      	adds	r3, r7, #7
 8000612:	2201      	movs	r2, #1
 8000614:	2123      	movs	r1, #35	@ 0x23
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff ff8e 	bl	8000538 <Gyro_IO_Write>
		ctrl=0b00010000;
 800061c:	2310      	movs	r3, #16
 800061e:	71fb      	strb	r3, [r7, #7]
		Gyro_IO_Write(&ctrl, 0x24,1);
 8000620:	1dfb      	adds	r3, r7, #7
 8000622:	2201      	movs	r2, #1
 8000624:	2124      	movs	r1, #36	@ 0x24
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff ff86 	bl	8000538 <Gyro_IO_Write>
 800062c:	e001      	b.n	8000632 <Gyro_Ini+0x6a>
	}
	else Error();
 800062e:	f7ff fe27 	bl	8000280 <Error>
	HAL_Delay(500);
 8000632:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000636:	f001 f981 	bl	800193c <HAL_Delay>
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}

08000642 <Gyro_GetXYZ>:

void Gyro_GetXYZ(int16_t* pData)
{
 8000642:	b580      	push	{r7, lr}
 8000644:	b086      	sub	sp, #24
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
	uint8_t buffer[6];
	float valueinfloat = 0;
 800064a:	f04f 0300 	mov.w	r3, #0
 800064e:	613b      	str	r3, [r7, #16]

	Gyro_IO_Read((uint8_t*)&buffer[0], 0x28,1);
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	2201      	movs	r2, #1
 8000656:	2128      	movs	r1, #40	@ 0x28
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff ff33 	bl	80004c4 <Gyro_IO_Read>
	Gyro_IO_Read((uint8_t*)&buffer[1], 0x29,1);
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	3301      	adds	r3, #1
 8000664:	2201      	movs	r2, #1
 8000666:	2129      	movs	r1, #41	@ 0x29
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ff2b 	bl	80004c4 <Gyro_IO_Read>
	Gyro_IO_Read((uint8_t*)&buffer[2], 0x2A,1);
 800066e:	f107 0308 	add.w	r3, r7, #8
 8000672:	3302      	adds	r3, #2
 8000674:	2201      	movs	r2, #1
 8000676:	212a      	movs	r1, #42	@ 0x2a
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ff23 	bl	80004c4 <Gyro_IO_Read>
	Gyro_IO_Read((uint8_t*)&buffer[3], 0x2B,1);
 800067e:	f107 0308 	add.w	r3, r7, #8
 8000682:	3303      	adds	r3, #3
 8000684:	2201      	movs	r2, #1
 8000686:	212b      	movs	r1, #43	@ 0x2b
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ff1b 	bl	80004c4 <Gyro_IO_Read>
	Gyro_IO_Read((uint8_t*)&buffer[4], 0x2C,1);
 800068e:	f107 0308 	add.w	r3, r7, #8
 8000692:	3304      	adds	r3, #4
 8000694:	2201      	movs	r2, #1
 8000696:	212c      	movs	r1, #44	@ 0x2c
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ff13 	bl	80004c4 <Gyro_IO_Read>
	Gyro_IO_Read((uint8_t*)&buffer[5], 0x2D,1);
 800069e:	f107 0308 	add.w	r3, r7, #8
 80006a2:	3305      	adds	r3, #5
 80006a4:	2201      	movs	r2, #1
 80006a6:	212d      	movs	r1, #45	@ 0x2d
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ff0b 	bl	80004c4 <Gyro_IO_Read>

	for(int i=0;i<3;i++)
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]
 80006b2:	e023      	b.n	80006fc <Gyro_GetXYZ+0xba>
	{
		valueinfloat = ((buffer[2*i+1] << 8) + buffer[2*i]);
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	3301      	adds	r3, #1
 80006ba:	3318      	adds	r3, #24
 80006bc:	443b      	add	r3, r7
 80006be:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80006c2:	021b      	lsls	r3, r3, #8
 80006c4:	697a      	ldr	r2, [r7, #20]
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	3218      	adds	r2, #24
 80006ca:	443a      	add	r2, r7
 80006cc:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80006d0:	4413      	add	r3, r2
 80006d2:	ee07 3a90 	vmov	s15, r3
 80006d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006da:	edc7 7a04 	vstr	s15, [r7, #16]
		pData[i]=(int16_t)valueinfloat;
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	4413      	add	r3, r2
 80006e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80006ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006ee:	ee17 2a90 	vmov	r2, s15
 80006f2:	b212      	sxth	r2, r2
 80006f4:	801a      	strh	r2, [r3, #0]
	for(int i=0;i<3;i++)
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	3301      	adds	r3, #1
 80006fa:	617b      	str	r3, [r7, #20]
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	2b02      	cmp	r3, #2
 8000700:	ddd8      	ble.n	80006b4 <Gyro_GetXYZ+0x72>
	}
}
 8000702:	bf00      	nop
 8000704:	bf00      	nop
 8000706:	3718      	adds	r7, #24
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800070c:	b5b0      	push	{r4, r5, r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000712:	f001 f8ad 	bl	8001870 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000716:	f000 f905 	bl	8000924 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071a:	f000 f9ed 	bl	8000af8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800071e:	f000 f96d 	bl	80009fc <MX_I2C1_Init>
  MX_SPI1_Init();
 8000722:	f000 f9ab 	bl	8000a7c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000726:	f000 fbc9 	bl	8000ebc <MX_USB_DEVICE_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800072a:	f000 f95b 	bl	80009e4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  Gyro_Ini();
 800072e:	f7ff ff4b 	bl	80005c8 <Gyro_Ini>
  Accel_Ini();
 8000732:	f7ff fe26 	bl	8000382 <Accel_Ini>
  Accel_GetXYZ(AccelData);
 8000736:	4875      	ldr	r0, [pc, #468]	@ (800090c <main+0x200>)
 8000738:	f7ff fe54 	bl	80003e4 <Accel_GetXYZ>
  Gyro_GetXYZ(GyroData);
 800073c:	4874      	ldr	r0, [pc, #464]	@ (8000910 <main+0x204>)
 800073e:	f7ff ff80 	bl	8000642 <Gyro_GetXYZ>
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_14,GPIO_PIN_RESET);
	  sprintf(str1,"Hi");
	  CDC_Transmit_FS((uint8_t*)str1, strlen(str1));
	  HAL_Delay(500);
	  */
	  Accel_GetXYZ(AccelData);
 8000742:	4872      	ldr	r0, [pc, #456]	@ (800090c <main+0x200>)
 8000744:	f7ff fe4e 	bl	80003e4 <Accel_GetXYZ>
	  sprintf(str1,"gX: %06d; gY: %06d; gZ: %06d; \n\r", AccelData[0], AccelData[1], AccelData[2], GyroData[0], GyroData[1], GyroData[2]);
 8000748:	4b70      	ldr	r3, [pc, #448]	@ (800090c <main+0x200>)
 800074a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800074e:	461c      	mov	r4, r3
 8000750:	4b6e      	ldr	r3, [pc, #440]	@ (800090c <main+0x200>)
 8000752:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000756:	461d      	mov	r5, r3
 8000758:	4b6c      	ldr	r3, [pc, #432]	@ (800090c <main+0x200>)
 800075a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800075e:	461a      	mov	r2, r3
 8000760:	4b6b      	ldr	r3, [pc, #428]	@ (8000910 <main+0x204>)
 8000762:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000766:	4619      	mov	r1, r3
 8000768:	4b69      	ldr	r3, [pc, #420]	@ (8000910 <main+0x204>)
 800076a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800076e:	4618      	mov	r0, r3
 8000770:	4b67      	ldr	r3, [pc, #412]	@ (8000910 <main+0x204>)
 8000772:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000776:	9303      	str	r3, [sp, #12]
 8000778:	9002      	str	r0, [sp, #8]
 800077a:	9101      	str	r1, [sp, #4]
 800077c:	9200      	str	r2, [sp, #0]
 800077e:	462b      	mov	r3, r5
 8000780:	4622      	mov	r2, r4
 8000782:	4964      	ldr	r1, [pc, #400]	@ (8000914 <main+0x208>)
 8000784:	4864      	ldr	r0, [pc, #400]	@ (8000918 <main+0x20c>)
 8000786:	f009 fd81 	bl	800a28c <siprintf>
	  HAL_Delay(500);
 800078a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800078e:	f001 f8d5 	bl	800193c <HAL_Delay>
	  /*HAL_UART_Transmit(&huart1,(uint8_t*)str1, strlen(str1),0x1000);*/
	  CDC_Transmit_FS((uint8_t*)str1, strlen(str1));
 8000792:	4861      	ldr	r0, [pc, #388]	@ (8000918 <main+0x20c>)
 8000794:	f7ff fd1c 	bl	80001d0 <strlen>
 8000798:	4603      	mov	r3, r0
 800079a:	4619      	mov	r1, r3
 800079c:	485e      	ldr	r0, [pc, #376]	@ (8000918 <main+0x20c>)
 800079e:	f000 fc4b 	bl	8001038 <CDC_Transmit_FS>
	  if(AccelData[0] > 1500)
 80007a2:	4b5a      	ldr	r3, [pc, #360]	@ (800090c <main+0x200>)
 80007a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007a8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80007ac:	4293      	cmp	r3, r2
 80007ae:	dd2c      	ble.n	800080a <main+0xfe>
	  {
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11 , GPIO_PIN_SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007b6:	4859      	ldr	r0, [pc, #356]	@ (800091c <main+0x210>)
 80007b8:	f001 fb70 	bl	8001e9c <HAL_GPIO_WritePin>
	      if(AccelData[1] > 1500)
 80007bc:	4b53      	ldr	r3, [pc, #332]	@ (800090c <main+0x200>)
 80007be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80007c2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80007c6:	4293      	cmp	r3, r2
 80007c8:	dd0c      	ble.n	80007e4 <main+0xd8>
	      {
	    	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11 , GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007d0:	4852      	ldr	r0, [pc, #328]	@ (800091c <main+0x210>)
 80007d2:	f001 fb63 	bl	8001e9c <HAL_GPIO_WritePin>
	    	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12 , GPIO_PIN_SET);
 80007d6:	2201      	movs	r2, #1
 80007d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007dc:	484f      	ldr	r0, [pc, #316]	@ (800091c <main+0x210>)
 80007de:	f001 fb5d 	bl	8001e9c <HAL_GPIO_WritePin>
 80007e2:	e05f      	b.n	80008a4 <main+0x198>
	      }
	      else if(AccelData[1] < -1500)
 80007e4:	4b49      	ldr	r3, [pc, #292]	@ (800090c <main+0x200>)
 80007e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80007ea:	4a4d      	ldr	r2, [pc, #308]	@ (8000920 <main+0x214>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	da59      	bge.n	80008a4 <main+0x198>
	      {
	    	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11 , GPIO_PIN_RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007f6:	4849      	ldr	r0, [pc, #292]	@ (800091c <main+0x210>)
 80007f8:	f001 fb50 	bl	8001e9c <HAL_GPIO_WritePin>
	    	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10 , GPIO_PIN_SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000802:	4846      	ldr	r0, [pc, #280]	@ (800091c <main+0x210>)
 8000804:	f001 fb4a 	bl	8001e9c <HAL_GPIO_WritePin>
 8000808:	e04c      	b.n	80008a4 <main+0x198>
	      }
	  }
	  else if(AccelData[0] < -1500)
 800080a:	4b40      	ldr	r3, [pc, #256]	@ (800090c <main+0x200>)
 800080c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000810:	4a43      	ldr	r2, [pc, #268]	@ (8000920 <main+0x214>)
 8000812:	4293      	cmp	r3, r2
 8000814:	da2c      	bge.n	8000870 <main+0x164>
	  {
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8000816:	2201      	movs	r2, #1
 8000818:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800081c:	483f      	ldr	r0, [pc, #252]	@ (800091c <main+0x210>)
 800081e:	f001 fb3d 	bl	8001e9c <HAL_GPIO_WritePin>
	          if(AccelData[1] > 1500)
 8000822:	4b3a      	ldr	r3, [pc, #232]	@ (800090c <main+0x200>)
 8000824:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000828:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800082c:	4293      	cmp	r3, r2
 800082e:	dd0c      	ble.n	800084a <main+0x13e>
	          {
	        	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000836:	4839      	ldr	r0, [pc, #228]	@ (800091c <main+0x210>)
 8000838:	f001 fb30 	bl	8001e9c <HAL_GPIO_WritePin>
	        	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14 , GPIO_PIN_SET);
 800083c:	2201      	movs	r2, #1
 800083e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000842:	4836      	ldr	r0, [pc, #216]	@ (800091c <main+0x210>)
 8000844:	f001 fb2a 	bl	8001e9c <HAL_GPIO_WritePin>
 8000848:	e02c      	b.n	80008a4 <main+0x198>
	          }
	  else if(AccelData[1] < -1500)
 800084a:	4b30      	ldr	r3, [pc, #192]	@ (800090c <main+0x200>)
 800084c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000850:	4a33      	ldr	r2, [pc, #204]	@ (8000920 <main+0x214>)
 8000852:	4293      	cmp	r3, r2
 8000854:	da26      	bge.n	80008a4 <main+0x198>

	   {
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15 , GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800085c:	482f      	ldr	r0, [pc, #188]	@ (800091c <main+0x210>)
 800085e:	f001 fb1d 	bl	8001e9c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8 , GPIO_PIN_SET);
 8000862:	2201      	movs	r2, #1
 8000864:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000868:	482c      	ldr	r0, [pc, #176]	@ (800091c <main+0x210>)
 800086a:	f001 fb17 	bl	8001e9c <HAL_GPIO_WritePin>
 800086e:	e019      	b.n	80008a4 <main+0x198>
	   }
	   }
	  else
	  {
	          if(AccelData[1] > 1500)
 8000870:	4b26      	ldr	r3, [pc, #152]	@ (800090c <main+0x200>)
 8000872:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000876:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800087a:	4293      	cmp	r3, r2
 800087c:	dd06      	ble.n	800088c <main+0x180>
	          {
	        	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13 , GPIO_PIN_SET);
 800087e:	2201      	movs	r2, #1
 8000880:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000884:	4825      	ldr	r0, [pc, #148]	@ (800091c <main+0x210>)
 8000886:	f001 fb09 	bl	8001e9c <HAL_GPIO_WritePin>
 800088a:	e00b      	b.n	80008a4 <main+0x198>
	          }

	          else if(AccelData[1] < -1500)
 800088c:	4b1f      	ldr	r3, [pc, #124]	@ (800090c <main+0x200>)
 800088e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000892:	4a23      	ldr	r2, [pc, #140]	@ (8000920 <main+0x214>)
 8000894:	4293      	cmp	r3, r2
 8000896:	da05      	bge.n	80008a4 <main+0x198>
	          {
	        	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9 , GPIO_PIN_SET);
 8000898:	2201      	movs	r2, #1
 800089a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800089e:	481f      	ldr	r0, [pc, #124]	@ (800091c <main+0x210>)
 80008a0:	f001 fafc 	bl	8001e9c <HAL_GPIO_WritePin>
	          }
	  }
	  HAL_Delay(50);
 80008a4:	2032      	movs	r0, #50	@ 0x32
 80008a6:	f001 f849 	bl	800193c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008b0:	481a      	ldr	r0, [pc, #104]	@ (800091c <main+0x210>)
 80008b2:	f001 faf3 	bl	8001e9c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15 , GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008bc:	4817      	ldr	r0, [pc, #92]	@ (800091c <main+0x210>)
 80008be:	f001 faed 	bl	8001e9c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11 , GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008c8:	4814      	ldr	r0, [pc, #80]	@ (800091c <main+0x210>)
 80008ca:	f001 fae7 	bl	8001e9c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8 , GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008d4:	4811      	ldr	r0, [pc, #68]	@ (800091c <main+0x210>)
 80008d6:	f001 fae1 	bl	8001e9c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13 , GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008e0:	480e      	ldr	r0, [pc, #56]	@ (800091c <main+0x210>)
 80008e2:	f001 fadb 	bl	8001e9c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14 , GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008ec:	480b      	ldr	r0, [pc, #44]	@ (800091c <main+0x210>)
 80008ee:	f001 fad5 	bl	8001e9c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12 , GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008f8:	4808      	ldr	r0, [pc, #32]	@ (800091c <main+0x210>)
 80008fa:	f001 facf 	bl	8001e9c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10 , GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000904:	4805      	ldr	r0, [pc, #20]	@ (800091c <main+0x210>)
 8000906:	f001 fac9 	bl	8001e9c <HAL_GPIO_WritePin>
  {
 800090a:	e71a      	b.n	8000742 <main+0x36>
 800090c:	20000304 	.word	0x20000304
 8000910:	2000030c 	.word	0x2000030c
 8000914:	0800abe4 	.word	0x0800abe4
 8000918:	200002a0 	.word	0x200002a0
 800091c:	48001000 	.word	0x48001000
 8000920:	fffffa24 	.word	0xfffffa24

08000924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b09e      	sub	sp, #120	@ 0x78
 8000928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800092e:	2228      	movs	r2, #40	@ 0x28
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f009 fcca 	bl	800a2cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000938:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000948:	463b      	mov	r3, r7
 800094a:	223c      	movs	r2, #60	@ 0x3c
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f009 fcbc 	bl	800a2cc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000954:	2303      	movs	r3, #3
 8000956:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000958:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800095c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800095e:	2300      	movs	r3, #0
 8000960:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000962:	2301      	movs	r3, #1
 8000964:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000966:	2310      	movs	r3, #16
 8000968:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800096a:	2302      	movs	r3, #2
 800096c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800096e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000972:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000974:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000978:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800097e:	4618      	mov	r0, r3
 8000980:	f003 fda8 	bl	80044d4 <HAL_RCC_OscConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800098a:	f000 f947 	bl	8000c1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098e:	230f      	movs	r3, #15
 8000990:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000992:	2302      	movs	r3, #2
 8000994:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000996:	2300      	movs	r3, #0
 8000998:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800099a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800099e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a0:	2300      	movs	r3, #0
 80009a2:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009a4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80009a8:	2102      	movs	r1, #2
 80009aa:	4618      	mov	r0, r3
 80009ac:	f004 fdd0 	bl	8005550 <HAL_RCC_ClockConfig>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009b6:	f000 f931 	bl	8000c1c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 80009ba:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <SystemClock_Config+0xbc>)
 80009bc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80009c2:	2300      	movs	r3, #0
 80009c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c6:	463b      	mov	r3, r7
 80009c8:	4618      	mov	r0, r3
 80009ca:	f004 ff91 	bl	80058f0 <HAL_RCCEx_PeriphCLKConfig>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80009d4:	f000 f922 	bl	8000c1c <Error_Handler>
  }
}
 80009d8:	bf00      	nop
 80009da:	3778      	adds	r7, #120	@ 0x78
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	00020020 	.word	0x00020020

080009e4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* EXTI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2100      	movs	r1, #0
 80009ec:	2007      	movs	r0, #7
 80009ee:	f001 f8a4 	bl	8001b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80009f2:	2007      	movs	r0, #7
 80009f4:	f001 f8bd 	bl	8001b72 <HAL_NVIC_EnableIRQ>
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}

080009fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a00:	4b1b      	ldr	r3, [pc, #108]	@ (8000a70 <MX_I2C1_Init+0x74>)
 8000a02:	4a1c      	ldr	r2, [pc, #112]	@ (8000a74 <MX_I2C1_Init+0x78>)
 8000a04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010020A;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	@ (8000a70 <MX_I2C1_Init+0x74>)
 8000a08:	4a1b      	ldr	r2, [pc, #108]	@ (8000a78 <MX_I2C1_Init+0x7c>)
 8000a0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a0c:	4b18      	ldr	r3, [pc, #96]	@ (8000a70 <MX_I2C1_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a12:	4b17      	ldr	r3, [pc, #92]	@ (8000a70 <MX_I2C1_Init+0x74>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a18:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <MX_I2C1_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <MX_I2C1_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a24:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <MX_I2C1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <MX_I2C1_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	@ (8000a70 <MX_I2C1_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a36:	480e      	ldr	r0, [pc, #56]	@ (8000a70 <MX_I2C1_Init+0x74>)
 8000a38:	f001 fa60 	bl	8001efc <HAL_I2C_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a42:	f000 f8eb 	bl	8000c1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a46:	2100      	movs	r1, #0
 8000a48:	4809      	ldr	r0, [pc, #36]	@ (8000a70 <MX_I2C1_Init+0x74>)
 8000a4a:	f001 ffe3 	bl	8002a14 <HAL_I2CEx_ConfigAnalogFilter>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a54:	f000 f8e2 	bl	8000c1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4805      	ldr	r0, [pc, #20]	@ (8000a70 <MX_I2C1_Init+0x74>)
 8000a5c:	f002 f825 	bl	8002aaa <HAL_I2CEx_ConfigDigitalFilter>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a66:	f000 f8d9 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	200001e8 	.word	0x200001e8
 8000a74:	40005400 	.word	0x40005400
 8000a78:	0010020a 	.word	0x0010020a

08000a7c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a80:	4b1b      	ldr	r3, [pc, #108]	@ (8000af0 <MX_SPI1_Init+0x74>)
 8000a82:	4a1c      	ldr	r2, [pc, #112]	@ (8000af4 <MX_SPI1_Init+0x78>)
 8000a84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a86:	4b1a      	ldr	r3, [pc, #104]	@ (8000af0 <MX_SPI1_Init+0x74>)
 8000a88:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a8e:	4b18      	ldr	r3, [pc, #96]	@ (8000af0 <MX_SPI1_Init+0x74>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a94:	4b16      	ldr	r3, [pc, #88]	@ (8000af0 <MX_SPI1_Init+0x74>)
 8000a96:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000a9a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a9c:	4b14      	ldr	r3, [pc, #80]	@ (8000af0 <MX_SPI1_Init+0x74>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aa2:	4b13      	ldr	r3, [pc, #76]	@ (8000af0 <MX_SPI1_Init+0x74>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <MX_SPI1_Init+0x74>)
 8000aaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000aae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8000af0 <MX_SPI1_Init+0x74>)
 8000ab2:	2218      	movs	r2, #24
 8000ab4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8000af0 <MX_SPI1_Init+0x74>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000abc:	4b0c      	ldr	r3, [pc, #48]	@ (8000af0 <MX_SPI1_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8000af0 <MX_SPI1_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ac8:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <MX_SPI1_Init+0x74>)
 8000aca:	2207      	movs	r2, #7
 8000acc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ace:	4b08      	ldr	r3, [pc, #32]	@ (8000af0 <MX_SPI1_Init+0x74>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <MX_SPI1_Init+0x74>)
 8000ad6:	2208      	movs	r2, #8
 8000ad8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ada:	4805      	ldr	r0, [pc, #20]	@ (8000af0 <MX_SPI1_Init+0x74>)
 8000adc:	f005 f8b8 	bl	8005c50 <HAL_SPI_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ae6:	f000 f899 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	2000023c 	.word	0x2000023c
 8000af4:	40013000 	.word	0x40013000

08000af8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	@ 0x28
 8000afc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
 8000b0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b0e:	4b38      	ldr	r3, [pc, #224]	@ (8000bf0 <MX_GPIO_Init+0xf8>)
 8000b10:	695b      	ldr	r3, [r3, #20]
 8000b12:	4a37      	ldr	r2, [pc, #220]	@ (8000bf0 <MX_GPIO_Init+0xf8>)
 8000b14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b18:	6153      	str	r3, [r2, #20]
 8000b1a:	4b35      	ldr	r3, [pc, #212]	@ (8000bf0 <MX_GPIO_Init+0xf8>)
 8000b1c:	695b      	ldr	r3, [r3, #20]
 8000b1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b26:	4b32      	ldr	r3, [pc, #200]	@ (8000bf0 <MX_GPIO_Init+0xf8>)
 8000b28:	695b      	ldr	r3, [r3, #20]
 8000b2a:	4a31      	ldr	r2, [pc, #196]	@ (8000bf0 <MX_GPIO_Init+0xf8>)
 8000b2c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b30:	6153      	str	r3, [r2, #20]
 8000b32:	4b2f      	ldr	r3, [pc, #188]	@ (8000bf0 <MX_GPIO_Init+0xf8>)
 8000b34:	695b      	ldr	r3, [r3, #20]
 8000b36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	4b2c      	ldr	r3, [pc, #176]	@ (8000bf0 <MX_GPIO_Init+0xf8>)
 8000b40:	695b      	ldr	r3, [r3, #20]
 8000b42:	4a2b      	ldr	r2, [pc, #172]	@ (8000bf0 <MX_GPIO_Init+0xf8>)
 8000b44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b48:	6153      	str	r3, [r2, #20]
 8000b4a:	4b29      	ldr	r3, [pc, #164]	@ (8000bf0 <MX_GPIO_Init+0xf8>)
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b56:	4b26      	ldr	r3, [pc, #152]	@ (8000bf0 <MX_GPIO_Init+0xf8>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	4a25      	ldr	r2, [pc, #148]	@ (8000bf0 <MX_GPIO_Init+0xf8>)
 8000b5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b60:	6153      	str	r3, [r2, #20]
 8000b62:	4b23      	ldr	r3, [pc, #140]	@ (8000bf0 <MX_GPIO_Init+0xf8>)
 8000b64:	695b      	ldr	r3, [r3, #20]
 8000b66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000b74:	481f      	ldr	r0, [pc, #124]	@ (8000bf4 <MX_GPIO_Init+0xfc>)
 8000b76:	f001 f991 	bl	8001e9c <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8000b7a:	2314      	movs	r3, #20
 8000b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b7e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4819      	ldr	r0, [pc, #100]	@ (8000bf4 <MX_GPIO_Init+0xfc>)
 8000b90:	f001 f80a 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE3 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000b94:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8000b98:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	4811      	ldr	r0, [pc, #68]	@ (8000bf4 <MX_GPIO_Init+0xfc>)
 8000bae:	f000 fffb 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bb6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bca:	f000 ffed 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bd2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	4804      	ldr	r0, [pc, #16]	@ (8000bf4 <MX_GPIO_Init+0xfc>)
 8000be4:	f000 ffe0 	bl	8001ba8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000be8:	bf00      	nop
 8000bea:	3728      	adds	r7, #40	@ 0x28
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	48001000 	.word	0x48001000

08000bf8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_1)
 8000c02:	88fb      	ldrh	r3, [r7, #6]
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d102      	bne.n	8000c0e <HAL_GPIO_EXTI_Callback+0x16>
	{
		Gyro_GetXYZ(GyroData);
 8000c08:	4803      	ldr	r0, [pc, #12]	@ (8000c18 <HAL_GPIO_EXTI_Callback+0x20>)
 8000c0a:	f7ff fd1a 	bl	8000642 <Gyro_GetXYZ>
	}
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	2000030c 	.word	0x2000030c

08000c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c20:	b672      	cpsid	i
}
 8000c22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <Error_Handler+0x8>

08000c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c6c <HAL_MspInit+0x44>)
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	4a0e      	ldr	r2, [pc, #56]	@ (8000c6c <HAL_MspInit+0x44>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6193      	str	r3, [r2, #24]
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c6c <HAL_MspInit+0x44>)
 8000c3c:	699b      	ldr	r3, [r3, #24]
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c46:	4b09      	ldr	r3, [pc, #36]	@ (8000c6c <HAL_MspInit+0x44>)
 8000c48:	69db      	ldr	r3, [r3, #28]
 8000c4a:	4a08      	ldr	r2, [pc, #32]	@ (8000c6c <HAL_MspInit+0x44>)
 8000c4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c50:	61d3      	str	r3, [r2, #28]
 8000c52:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <HAL_MspInit+0x44>)
 8000c54:	69db      	ldr	r3, [r3, #28]
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40021000 	.word	0x40021000

08000c70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	@ 0x28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a17      	ldr	r2, [pc, #92]	@ (8000cec <HAL_I2C_MspInit+0x7c>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d127      	bne.n	8000ce2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c92:	4b17      	ldr	r3, [pc, #92]	@ (8000cf0 <HAL_I2C_MspInit+0x80>)
 8000c94:	695b      	ldr	r3, [r3, #20]
 8000c96:	4a16      	ldr	r2, [pc, #88]	@ (8000cf0 <HAL_I2C_MspInit+0x80>)
 8000c98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c9c:	6153      	str	r3, [r2, #20]
 8000c9e:	4b14      	ldr	r3, [pc, #80]	@ (8000cf0 <HAL_I2C_MspInit+0x80>)
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000caa:	23c0      	movs	r3, #192	@ 0xc0
 8000cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cae:	2312      	movs	r3, #18
 8000cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cba:	2304      	movs	r3, #4
 8000cbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	480b      	ldr	r0, [pc, #44]	@ (8000cf4 <HAL_I2C_MspInit+0x84>)
 8000cc6:	f000 ff6f 	bl	8001ba8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cca:	4b09      	ldr	r3, [pc, #36]	@ (8000cf0 <HAL_I2C_MspInit+0x80>)
 8000ccc:	69db      	ldr	r3, [r3, #28]
 8000cce:	4a08      	ldr	r2, [pc, #32]	@ (8000cf0 <HAL_I2C_MspInit+0x80>)
 8000cd0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cd4:	61d3      	str	r3, [r2, #28]
 8000cd6:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <HAL_I2C_MspInit+0x80>)
 8000cd8:	69db      	ldr	r3, [r3, #28]
 8000cda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ce2:	bf00      	nop
 8000ce4:	3728      	adds	r7, #40	@ 0x28
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40005400 	.word	0x40005400
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	48000400 	.word	0x48000400

08000cf8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	@ 0x28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a17      	ldr	r2, [pc, #92]	@ (8000d74 <HAL_SPI_MspInit+0x7c>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d128      	bne.n	8000d6c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d1a:	4b17      	ldr	r3, [pc, #92]	@ (8000d78 <HAL_SPI_MspInit+0x80>)
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	4a16      	ldr	r2, [pc, #88]	@ (8000d78 <HAL_SPI_MspInit+0x80>)
 8000d20:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d24:	6193      	str	r3, [r2, #24]
 8000d26:	4b14      	ldr	r3, [pc, #80]	@ (8000d78 <HAL_SPI_MspInit+0x80>)
 8000d28:	699b      	ldr	r3, [r3, #24]
 8000d2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	4b11      	ldr	r3, [pc, #68]	@ (8000d78 <HAL_SPI_MspInit+0x80>)
 8000d34:	695b      	ldr	r3, [r3, #20]
 8000d36:	4a10      	ldr	r2, [pc, #64]	@ (8000d78 <HAL_SPI_MspInit+0x80>)
 8000d38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d3c:	6153      	str	r3, [r2, #20]
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d78 <HAL_SPI_MspInit+0x80>)
 8000d40:	695b      	ldr	r3, [r3, #20]
 8000d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d4a:	23e0      	movs	r3, #224	@ 0xe0
 8000d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d56:	2303      	movs	r3, #3
 8000d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d5a:	2305      	movs	r3, #5
 8000d5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	4619      	mov	r1, r3
 8000d64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d68:	f000 ff1e 	bl	8001ba8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d6c:	bf00      	nop
 8000d6e:	3728      	adds	r7, #40	@ 0x28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40013000 	.word	0x40013000
 8000d78:	40021000 	.word	0x40021000

08000d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <NMI_Handler+0x4>

08000d84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <HardFault_Handler+0x4>

08000d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <MemManage_Handler+0x4>

08000d94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <BusFault_Handler+0x4>

08000d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <UsageFault_Handler+0x4>

08000da4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd2:	f000 fd93 	bl	80018fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000dde:	2002      	movs	r0, #2
 8000de0:	f001 f874 	bl	8001ecc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000dec:	4802      	ldr	r0, [pc, #8]	@ (8000df8 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000dee:	f001 ff95 	bl	8002d1c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000fdc 	.word	0x20000fdc

08000dfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e04:	4a14      	ldr	r2, [pc, #80]	@ (8000e58 <_sbrk+0x5c>)
 8000e06:	4b15      	ldr	r3, [pc, #84]	@ (8000e5c <_sbrk+0x60>)
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e10:	4b13      	ldr	r3, [pc, #76]	@ (8000e60 <_sbrk+0x64>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d102      	bne.n	8000e1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e18:	4b11      	ldr	r3, [pc, #68]	@ (8000e60 <_sbrk+0x64>)
 8000e1a:	4a12      	ldr	r2, [pc, #72]	@ (8000e64 <_sbrk+0x68>)
 8000e1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e1e:	4b10      	ldr	r3, [pc, #64]	@ (8000e60 <_sbrk+0x64>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4413      	add	r3, r2
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d207      	bcs.n	8000e3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e2c:	f009 fa56 	bl	800a2dc <__errno>
 8000e30:	4603      	mov	r3, r0
 8000e32:	220c      	movs	r2, #12
 8000e34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3a:	e009      	b.n	8000e50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e3c:	4b08      	ldr	r3, [pc, #32]	@ (8000e60 <_sbrk+0x64>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e42:	4b07      	ldr	r3, [pc, #28]	@ (8000e60 <_sbrk+0x64>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	4a05      	ldr	r2, [pc, #20]	@ (8000e60 <_sbrk+0x64>)
 8000e4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	2000a000 	.word	0x2000a000
 8000e5c:	00004000 	.word	0x00004000
 8000e60:	20000314 	.word	0x20000314
 8000e64:	20001620 	.word	0x20001620

08000e68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ea0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e6c:	f000 fcee 	bl	800184c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e70:	480c      	ldr	r0, [pc, #48]	@ (8000ea4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e72:	490d      	ldr	r1, [pc, #52]	@ (8000ea8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e74:	4a0d      	ldr	r2, [pc, #52]	@ (8000eac <LoopForever+0xe>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e78:	e002      	b.n	8000e80 <LoopCopyDataInit>

08000e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7e:	3304      	adds	r3, #4

08000e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e84:	d3f9      	bcc.n	8000e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e86:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e88:	4c0a      	ldr	r4, [pc, #40]	@ (8000eb4 <LoopForever+0x16>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e8c:	e001      	b.n	8000e92 <LoopFillZerobss>

08000e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e90:	3204      	adds	r2, #4

08000e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e94:	d3fb      	bcc.n	8000e8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e96:	f009 fa27 	bl	800a2e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e9a:	f7ff fc37 	bl	800070c <main>

08000e9e <LoopForever>:

LoopForever:
    b LoopForever
 8000e9e:	e7fe      	b.n	8000e9e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ea0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea8:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8000eac:	0800acc4 	.word	0x0800acc4
  ldr r2, =_sbss
 8000eb0:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8000eb4:	20001620 	.word	0x20001620

08000eb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000eb8:	e7fe      	b.n	8000eb8 <ADC1_2_IRQHandler>
	...

08000ebc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	4912      	ldr	r1, [pc, #72]	@ (8000f0c <MX_USB_DEVICE_Init+0x50>)
 8000ec4:	4812      	ldr	r0, [pc, #72]	@ (8000f10 <MX_USB_DEVICE_Init+0x54>)
 8000ec6:	f008 f943 	bl	8009150 <USBD_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8000ed0:	f7ff fea4 	bl	8000c1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8000ed4:	490f      	ldr	r1, [pc, #60]	@ (8000f14 <MX_USB_DEVICE_Init+0x58>)
 8000ed6:	480e      	ldr	r0, [pc, #56]	@ (8000f10 <MX_USB_DEVICE_Init+0x54>)
 8000ed8:	f008 f965 	bl	80091a6 <USBD_RegisterClass>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8000ee2:	f7ff fe9b 	bl	8000c1c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8000ee6:	490c      	ldr	r1, [pc, #48]	@ (8000f18 <MX_USB_DEVICE_Init+0x5c>)
 8000ee8:	4809      	ldr	r0, [pc, #36]	@ (8000f10 <MX_USB_DEVICE_Init+0x54>)
 8000eea:	f008 f893 	bl	8009014 <USBD_CDC_RegisterInterface>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8000ef4:	f7ff fe92 	bl	8000c1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8000ef8:	4805      	ldr	r0, [pc, #20]	@ (8000f10 <MX_USB_DEVICE_Init+0x54>)
 8000efa:	f008 f96e 	bl	80091da <USBD_Start>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8000f04:	f7ff fe8a 	bl	8000c1c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000010 	.word	0x20000010
 8000f10:	20000318 	.word	0x20000318
 8000f14:	20000078 	.word	0x20000078
 8000f18:	20000000 	.word	0x20000000

08000f1c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8000f20:	2200      	movs	r2, #0
 8000f22:	4905      	ldr	r1, [pc, #20]	@ (8000f38 <CDC_Init_FS+0x1c>)
 8000f24:	4805      	ldr	r0, [pc, #20]	@ (8000f3c <CDC_Init_FS+0x20>)
 8000f26:	f008 f88c 	bl	8009042 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8000f2a:	4905      	ldr	r1, [pc, #20]	@ (8000f40 <CDC_Init_FS+0x24>)
 8000f2c:	4803      	ldr	r0, [pc, #12]	@ (8000f3c <CDC_Init_FS+0x20>)
 8000f2e:	f008 f8a2 	bl	8009076 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8000f32:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	200009dc 	.word	0x200009dc
 8000f3c:	20000318 	.word	0x20000318
 8000f40:	200005dc 	.word	0x200005dc

08000f44 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8000f48:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	71fb      	strb	r3, [r7, #7]
 8000f60:	4613      	mov	r3, r2
 8000f62:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	2b23      	cmp	r3, #35	@ 0x23
 8000f68:	d84a      	bhi.n	8001000 <CDC_Control_FS+0xac>
 8000f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8000f70 <CDC_Control_FS+0x1c>)
 8000f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f70:	08001001 	.word	0x08001001
 8000f74:	08001001 	.word	0x08001001
 8000f78:	08001001 	.word	0x08001001
 8000f7c:	08001001 	.word	0x08001001
 8000f80:	08001001 	.word	0x08001001
 8000f84:	08001001 	.word	0x08001001
 8000f88:	08001001 	.word	0x08001001
 8000f8c:	08001001 	.word	0x08001001
 8000f90:	08001001 	.word	0x08001001
 8000f94:	08001001 	.word	0x08001001
 8000f98:	08001001 	.word	0x08001001
 8000f9c:	08001001 	.word	0x08001001
 8000fa0:	08001001 	.word	0x08001001
 8000fa4:	08001001 	.word	0x08001001
 8000fa8:	08001001 	.word	0x08001001
 8000fac:	08001001 	.word	0x08001001
 8000fb0:	08001001 	.word	0x08001001
 8000fb4:	08001001 	.word	0x08001001
 8000fb8:	08001001 	.word	0x08001001
 8000fbc:	08001001 	.word	0x08001001
 8000fc0:	08001001 	.word	0x08001001
 8000fc4:	08001001 	.word	0x08001001
 8000fc8:	08001001 	.word	0x08001001
 8000fcc:	08001001 	.word	0x08001001
 8000fd0:	08001001 	.word	0x08001001
 8000fd4:	08001001 	.word	0x08001001
 8000fd8:	08001001 	.word	0x08001001
 8000fdc:	08001001 	.word	0x08001001
 8000fe0:	08001001 	.word	0x08001001
 8000fe4:	08001001 	.word	0x08001001
 8000fe8:	08001001 	.word	0x08001001
 8000fec:	08001001 	.word	0x08001001
 8000ff0:	08001001 	.word	0x08001001
 8000ff4:	08001001 	.word	0x08001001
 8000ff8:	08001001 	.word	0x08001001
 8000ffc:	08001001 	.word	0x08001001
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8001000:	bf00      	nop
  }

  return (USBD_OK);
 8001002:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8001004:	4618      	mov	r0, r3
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	4805      	ldr	r0, [pc, #20]	@ (8001034 <CDC_Receive_FS+0x24>)
 800101e:	f008 f82a 	bl	8009076 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8001022:	4804      	ldr	r0, [pc, #16]	@ (8001034 <CDC_Receive_FS+0x24>)
 8001024:	f008 f86a 	bl	80090fc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8001028:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000318 	.word	0x20000318

08001038 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8001044:	2300      	movs	r3, #0
 8001046:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8001048:	4b0d      	ldr	r3, [pc, #52]	@ (8001080 <CDC_Transmit_FS+0x48>)
 800104a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800104e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800105a:	2301      	movs	r3, #1
 800105c:	e00b      	b.n	8001076 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800105e:	887b      	ldrh	r3, [r7, #2]
 8001060:	461a      	mov	r2, r3
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	4806      	ldr	r0, [pc, #24]	@ (8001080 <CDC_Transmit_FS+0x48>)
 8001066:	f007 ffec 	bl	8009042 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800106a:	4805      	ldr	r0, [pc, #20]	@ (8001080 <CDC_Transmit_FS+0x48>)
 800106c:	f008 f817 	bl	800909e <USBD_CDC_TransmitPacket>
 8001070:	4603      	mov	r3, r0
 8001072:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8001074:	7bfb      	ldrb	r3, [r7, #15]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000318 	.word	0x20000318

08001084 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	2212      	movs	r2, #18
 8001094:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8001096:	4b03      	ldr	r3, [pc, #12]	@ (80010a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8001098:	4618      	mov	r0, r3
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	2000002c 	.word	0x2000002c

080010a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	6039      	str	r1, [r7, #0]
 80010b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	2204      	movs	r2, #4
 80010b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80010ba:	4b03      	ldr	r3, [pc, #12]	@ (80010c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80010bc:	4618      	mov	r0, r3
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	20000040 	.word	0x20000040

080010cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	6039      	str	r1, [r7, #0]
 80010d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d105      	bne.n	80010ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80010de:	683a      	ldr	r2, [r7, #0]
 80010e0:	4907      	ldr	r1, [pc, #28]	@ (8001100 <USBD_FS_ProductStrDescriptor+0x34>)
 80010e2:	4808      	ldr	r0, [pc, #32]	@ (8001104 <USBD_FS_ProductStrDescriptor+0x38>)
 80010e4:	f008 fff4 	bl	800a0d0 <USBD_GetString>
 80010e8:	e004      	b.n	80010f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80010ea:	683a      	ldr	r2, [r7, #0]
 80010ec:	4904      	ldr	r1, [pc, #16]	@ (8001100 <USBD_FS_ProductStrDescriptor+0x34>)
 80010ee:	4805      	ldr	r0, [pc, #20]	@ (8001104 <USBD_FS_ProductStrDescriptor+0x38>)
 80010f0:	f008 ffee 	bl	800a0d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80010f4:	4b02      	ldr	r3, [pc, #8]	@ (8001100 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000ddc 	.word	0x20000ddc
 8001104:	0800ac08 	.word	0x0800ac08

08001108 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8001114:	683a      	ldr	r2, [r7, #0]
 8001116:	4904      	ldr	r1, [pc, #16]	@ (8001128 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8001118:	4804      	ldr	r0, [pc, #16]	@ (800112c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800111a:	f008 ffd9 	bl	800a0d0 <USBD_GetString>
  return USBD_StrDesc;
 800111e:	4b02      	ldr	r3, [pc, #8]	@ (8001128 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000ddc 	.word	0x20000ddc
 800112c:	0800ac20 	.word	0x0800ac20

08001130 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	6039      	str	r1, [r7, #0]
 800113a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	221a      	movs	r2, #26
 8001140:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8001142:	f000 f843 	bl	80011cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8001146:	4b02      	ldr	r3, [pc, #8]	@ (8001150 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000044 	.word	0x20000044

08001154 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	6039      	str	r1, [r7, #0]
 800115e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d105      	bne.n	8001172 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8001166:	683a      	ldr	r2, [r7, #0]
 8001168:	4907      	ldr	r1, [pc, #28]	@ (8001188 <USBD_FS_ConfigStrDescriptor+0x34>)
 800116a:	4808      	ldr	r0, [pc, #32]	@ (800118c <USBD_FS_ConfigStrDescriptor+0x38>)
 800116c:	f008 ffb0 	bl	800a0d0 <USBD_GetString>
 8001170:	e004      	b.n	800117c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8001172:	683a      	ldr	r2, [r7, #0]
 8001174:	4904      	ldr	r1, [pc, #16]	@ (8001188 <USBD_FS_ConfigStrDescriptor+0x34>)
 8001176:	4805      	ldr	r0, [pc, #20]	@ (800118c <USBD_FS_ConfigStrDescriptor+0x38>)
 8001178:	f008 ffaa 	bl	800a0d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800117c:	4b02      	ldr	r3, [pc, #8]	@ (8001188 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000ddc 	.word	0x20000ddc
 800118c:	0800ac34 	.word	0x0800ac34

08001190 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	6039      	str	r1, [r7, #0]
 800119a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d105      	bne.n	80011ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80011a2:	683a      	ldr	r2, [r7, #0]
 80011a4:	4907      	ldr	r1, [pc, #28]	@ (80011c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80011a6:	4808      	ldr	r0, [pc, #32]	@ (80011c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80011a8:	f008 ff92 	bl	800a0d0 <USBD_GetString>
 80011ac:	e004      	b.n	80011b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80011ae:	683a      	ldr	r2, [r7, #0]
 80011b0:	4904      	ldr	r1, [pc, #16]	@ (80011c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80011b2:	4805      	ldr	r0, [pc, #20]	@ (80011c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80011b4:	f008 ff8c 	bl	800a0d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80011b8:	4b02      	ldr	r3, [pc, #8]	@ (80011c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000ddc 	.word	0x20000ddc
 80011c8:	0800ac40 	.word	0x0800ac40

080011cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80011d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001210 <Get_SerialNum+0x44>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80011d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <Get_SerialNum+0x48>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80011de:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <Get_SerialNum+0x4c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d009      	beq.n	8001206 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80011f2:	2208      	movs	r2, #8
 80011f4:	4909      	ldr	r1, [pc, #36]	@ (800121c <Get_SerialNum+0x50>)
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f000 f814 	bl	8001224 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80011fc:	2204      	movs	r2, #4
 80011fe:	4908      	ldr	r1, [pc, #32]	@ (8001220 <Get_SerialNum+0x54>)
 8001200:	68b8      	ldr	r0, [r7, #8]
 8001202:	f000 f80f 	bl	8001224 <IntToUnicode>
  }
}
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	1ffff7ac 	.word	0x1ffff7ac
 8001214:	1ffff7b0 	.word	0x1ffff7b0
 8001218:	1ffff7b4 	.word	0x1ffff7b4
 800121c:	20000046 	.word	0x20000046
 8001220:	20000056 	.word	0x20000056

08001224 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8001224:	b480      	push	{r7}
 8001226:	b087      	sub	sp, #28
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	4613      	mov	r3, r2
 8001230:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8001236:	2300      	movs	r3, #0
 8001238:	75fb      	strb	r3, [r7, #23]
 800123a:	e027      	b.n	800128c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	0f1b      	lsrs	r3, r3, #28
 8001240:	2b09      	cmp	r3, #9
 8001242:	d80b      	bhi.n	800125c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	0f1b      	lsrs	r3, r3, #28
 8001248:	b2da      	uxtb	r2, r3
 800124a:	7dfb      	ldrb	r3, [r7, #23]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	4619      	mov	r1, r3
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	440b      	add	r3, r1
 8001254:	3230      	adds	r2, #48	@ 0x30
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	701a      	strb	r2, [r3, #0]
 800125a:	e00a      	b.n	8001272 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	0f1b      	lsrs	r3, r3, #28
 8001260:	b2da      	uxtb	r2, r3
 8001262:	7dfb      	ldrb	r3, [r7, #23]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	4619      	mov	r1, r3
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	440b      	add	r3, r1
 800126c:	3237      	adds	r2, #55	@ 0x37
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	011b      	lsls	r3, r3, #4
 8001276:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8001278:	7dfb      	ldrb	r3, [r7, #23]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	3301      	adds	r3, #1
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	4413      	add	r3, r2
 8001282:	2200      	movs	r2, #0
 8001284:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8001286:	7dfb      	ldrb	r3, [r7, #23]
 8001288:	3301      	adds	r3, #1
 800128a:	75fb      	strb	r3, [r7, #23]
 800128c:	7dfa      	ldrb	r2, [r7, #23]
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	429a      	cmp	r2, r3
 8001292:	d3d3      	bcc.n	800123c <IntToUnicode+0x18>
  }
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	371c      	adds	r7, #28
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	@ 0x28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a1c      	ldr	r2, [pc, #112]	@ (8001334 <HAL_PCD_MspInit+0x90>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d131      	bne.n	800132a <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001338 <HAL_PCD_MspInit+0x94>)
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	4a1b      	ldr	r2, [pc, #108]	@ (8001338 <HAL_PCD_MspInit+0x94>)
 80012cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012d0:	6153      	str	r3, [r2, #20]
 80012d2:	4b19      	ldr	r3, [pc, #100]	@ (8001338 <HAL_PCD_MspInit+0x94>)
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80012de:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80012e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012ec:	2303      	movs	r3, #3
 80012ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80012f0:	230e      	movs	r3, #14
 80012f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012fe:	f000 fc53 	bl	8001ba8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001302:	4b0d      	ldr	r3, [pc, #52]	@ (8001338 <HAL_PCD_MspInit+0x94>)
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	4a0c      	ldr	r2, [pc, #48]	@ (8001338 <HAL_PCD_MspInit+0x94>)
 8001308:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800130c:	61d3      	str	r3, [r2, #28]
 800130e:	4b0a      	ldr	r3, [pc, #40]	@ (8001338 <HAL_PCD_MspInit+0x94>)
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2100      	movs	r1, #0
 800131e:	2014      	movs	r0, #20
 8001320:	f000 fc0b 	bl	8001b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8001324:	2014      	movs	r0, #20
 8001326:	f000 fc24 	bl	8001b72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800132a:	bf00      	nop
 800132c:	3728      	adds	r7, #40	@ 0x28
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40005c00 	.word	0x40005c00
 8001338:	40021000 	.word	0x40021000

0800133c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8001350:	4619      	mov	r1, r3
 8001352:	4610      	mov	r0, r2
 8001354:	f007 ff8a 	bl	800926c <USBD_LL_SetupStage>
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 8001372:	78fa      	ldrb	r2, [r7, #3]
 8001374:	6879      	ldr	r1, [r7, #4]
 8001376:	4613      	mov	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	440b      	add	r3, r1
 8001380:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	78fb      	ldrb	r3, [r7, #3]
 8001388:	4619      	mov	r1, r3
 800138a:	f007 ffbc 	bl	8009306 <USBD_LL_DataOutStage>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	460b      	mov	r3, r1
 80013a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 80013a8:	78fa      	ldrb	r2, [r7, #3]
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	4613      	mov	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	440b      	add	r3, r1
 80013b6:	3324      	adds	r3, #36	@ 0x24
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	78fb      	ldrb	r3, [r7, #3]
 80013bc:	4619      	mov	r1, r3
 80013be:	f008 f813 	bl	80093e8 <USBD_LL_DataInStage>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 80013d8:	4618      	mov	r0, r3
 80013da:	f008 f926 	bl	800962a <USBD_LL_SOF>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b084      	sub	sp, #16
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80013ee:	2301      	movs	r3, #1
 80013f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	795b      	ldrb	r3, [r3, #5]
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d001      	beq.n	80013fe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80013fa:	f7ff fc0f 	bl	8000c1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8001404:	7bfa      	ldrb	r2, [r7, #15]
 8001406:	4611      	mov	r1, r2
 8001408:	4618      	mov	r0, r3
 800140a:	f008 f8d3 	bl	80095b4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8001414:	4618      	mov	r0, r3
 8001416:	f008 f88c 	bl	8009532 <USBD_LL_Reset>
}
 800141a:	bf00      	nop
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8001432:	4618      	mov	r0, r3
 8001434:	f008 f8ce 	bl	80095d4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	7a5b      	ldrb	r3, [r3, #9]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d005      	beq.n	800144c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8001440:	4b04      	ldr	r3, [pc, #16]	@ (8001454 <HAL_PCD_SuspendCallback+0x30>)
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	4a03      	ldr	r2, [pc, #12]	@ (8001454 <HAL_PCD_SuspendCallback+0x30>)
 8001446:	f043 0306 	orr.w	r3, r3, #6
 800144a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8001466:	4618      	mov	r0, r3
 8001468:	f008 f8c9 	bl	80095fe <USBD_LL_Resume>
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800147c:	4a28      	ldr	r2, [pc, #160]	@ (8001520 <USBD_LL_Init+0xac>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f8c2 32d0 	str.w	r3, [r2, #720]	@ 0x2d0
  pdev->pData = &hpcd_USB_FS;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a26      	ldr	r2, [pc, #152]	@ (8001520 <USBD_LL_Init+0xac>)
 8001488:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800148c:	4b24      	ldr	r3, [pc, #144]	@ (8001520 <USBD_LL_Init+0xac>)
 800148e:	4a25      	ldr	r2, [pc, #148]	@ (8001524 <USBD_LL_Init+0xb0>)
 8001490:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001492:	4b23      	ldr	r3, [pc, #140]	@ (8001520 <USBD_LL_Init+0xac>)
 8001494:	2208      	movs	r2, #8
 8001496:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001498:	4b21      	ldr	r3, [pc, #132]	@ (8001520 <USBD_LL_Init+0xac>)
 800149a:	2202      	movs	r2, #2
 800149c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800149e:	4b20      	ldr	r3, [pc, #128]	@ (8001520 <USBD_LL_Init+0xac>)
 80014a0:	2202      	movs	r2, #2
 80014a2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80014a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001520 <USBD_LL_Init+0xac>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80014aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001520 <USBD_LL_Init+0xac>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80014b0:	481b      	ldr	r0, [pc, #108]	@ (8001520 <USBD_LL_Init+0xac>)
 80014b2:	f001 fb46 	bl	8002b42 <HAL_PCD_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80014bc:	f7ff fbae 	bl	8000c1c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80014c6:	2318      	movs	r3, #24
 80014c8:	2200      	movs	r2, #0
 80014ca:	2100      	movs	r1, #0
 80014cc:	f002 ffbf 	bl	800444e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80014d6:	2358      	movs	r3, #88	@ 0x58
 80014d8:	2200      	movs	r2, #0
 80014da:	2180      	movs	r1, #128	@ 0x80
 80014dc:	f002 ffb7 	bl	800444e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80014e6:	23c0      	movs	r3, #192	@ 0xc0
 80014e8:	2200      	movs	r2, #0
 80014ea:	2181      	movs	r1, #129	@ 0x81
 80014ec:	f002 ffaf 	bl	800444e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80014f6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80014fa:	2200      	movs	r2, #0
 80014fc:	2101      	movs	r1, #1
 80014fe:	f002 ffa6 	bl	800444e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8001508:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800150c:	2200      	movs	r2, #0
 800150e:	2182      	movs	r1, #130	@ 0x82
 8001510:	f002 ff9d 	bl	800444e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000fdc 	.word	0x20000fdc
 8001524:	40005c00 	.word	0x40005c00

08001528 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001530:	2300      	movs	r3, #0
 8001532:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001534:	2300      	movs	r3, #0
 8001536:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800153e:	4618      	mov	r0, r3
 8001540:	f001 fbc6 	bl	8002cd0 <HAL_PCD_Start>
 8001544:	4603      	mov	r3, r0
 8001546:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001548:	7bfb      	ldrb	r3, [r7, #15]
 800154a:	4618      	mov	r0, r3
 800154c:	f000 f952 	bl	80017f4 <USBD_Get_USB_Status>
 8001550:	4603      	mov	r3, r0
 8001552:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001554:	7bbb      	ldrb	r3, [r7, #14]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b084      	sub	sp, #16
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
 8001566:	4608      	mov	r0, r1
 8001568:	4611      	mov	r1, r2
 800156a:	461a      	mov	r2, r3
 800156c:	4603      	mov	r3, r0
 800156e:	70fb      	strb	r3, [r7, #3]
 8001570:	460b      	mov	r3, r1
 8001572:	70bb      	strb	r3, [r7, #2]
 8001574:	4613      	mov	r3, r2
 8001576:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001578:	2300      	movs	r3, #0
 800157a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800157c:	2300      	movs	r3, #0
 800157e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8001586:	78bb      	ldrb	r3, [r7, #2]
 8001588:	883a      	ldrh	r2, [r7, #0]
 800158a:	78f9      	ldrb	r1, [r7, #3]
 800158c:	f001 fcbe 	bl	8002f0c <HAL_PCD_EP_Open>
 8001590:	4603      	mov	r3, r0
 8001592:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	4618      	mov	r0, r3
 8001598:	f000 f92c 	bl	80017f4 <USBD_Get_USB_Status>
 800159c:	4603      	mov	r3, r0
 800159e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80015a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b084      	sub	sp, #16
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	460b      	mov	r3, r1
 80015b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80015b6:	2300      	movs	r3, #0
 80015b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80015c4:	78fa      	ldrb	r2, [r7, #3]
 80015c6:	4611      	mov	r1, r2
 80015c8:	4618      	mov	r0, r3
 80015ca:	f001 fcfc 	bl	8002fc6 <HAL_PCD_EP_Close>
 80015ce:	4603      	mov	r3, r0
 80015d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f000 f90d 	bl	80017f4 <USBD_Get_USB_Status>
 80015da:	4603      	mov	r3, r0
 80015dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80015de:	7bbb      	ldrb	r3, [r7, #14]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80015f8:	2300      	movs	r3, #0
 80015fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8001602:	78fa      	ldrb	r2, [r7, #3]
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f001 fda5 	bl	8003156 <HAL_PCD_EP_SetStall>
 800160c:	4603      	mov	r3, r0
 800160e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	4618      	mov	r0, r3
 8001614:	f000 f8ee 	bl	80017f4 <USBD_Get_USB_Status>
 8001618:	4603      	mov	r3, r0
 800161a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800161c:	7bbb      	ldrb	r3, [r7, #14]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b084      	sub	sp, #16
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	460b      	mov	r3, r1
 8001630:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001632:	2300      	movs	r3, #0
 8001634:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001636:	2300      	movs	r3, #0
 8001638:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8001640:	78fa      	ldrb	r2, [r7, #3]
 8001642:	4611      	mov	r1, r2
 8001644:	4618      	mov	r0, r3
 8001646:	f001 fdd8 	bl	80031fa <HAL_PCD_EP_ClrStall>
 800164a:	4603      	mov	r3, r0
 800164c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	4618      	mov	r0, r3
 8001652:	f000 f8cf 	bl	80017f4 <USBD_Get_USB_Status>
 8001656:	4603      	mov	r3, r0
 8001658:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800165a:	7bbb      	ldrb	r3, [r7, #14]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8001676:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8001678:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800167c:	2b00      	cmp	r3, #0
 800167e:	da0b      	bge.n	8001698 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8001680:	78fb      	ldrb	r3, [r7, #3]
 8001682:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001686:	68f9      	ldr	r1, [r7, #12]
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	440b      	add	r3, r1
 8001692:	3312      	adds	r3, #18
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	e00b      	b.n	80016b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8001698:	78fb      	ldrb	r3, [r7, #3]
 800169a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800169e:	68f9      	ldr	r1, [r7, #12]
 80016a0:	4613      	mov	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	440b      	add	r3, r1
 80016aa:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80016ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80016c8:	2300      	movs	r3, #0
 80016ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80016d6:	78fa      	ldrb	r2, [r7, #3]
 80016d8:	4611      	mov	r1, r2
 80016da:	4618      	mov	r0, r3
 80016dc:	f001 fbf2 	bl	8002ec4 <HAL_PCD_SetAddress>
 80016e0:	4603      	mov	r3, r0
 80016e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 f884 	bl	80017f4 <USBD_Get_USB_Status>
 80016ec:	4603      	mov	r3, r0
 80016ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80016f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b086      	sub	sp, #24
 80016fe:	af00      	add	r7, sp, #0
 8001700:	60f8      	str	r0, [r7, #12]
 8001702:	607a      	str	r2, [r7, #4]
 8001704:	461a      	mov	r2, r3
 8001706:	460b      	mov	r3, r1
 8001708:	72fb      	strb	r3, [r7, #11]
 800170a:	4613      	mov	r3, r2
 800170c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800170e:	2300      	movs	r3, #0
 8001710:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800171c:	893b      	ldrh	r3, [r7, #8]
 800171e:	7af9      	ldrb	r1, [r7, #11]
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	f001 fce1 	bl	80030e8 <HAL_PCD_EP_Transmit>
 8001726:	4603      	mov	r3, r0
 8001728:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800172a:	7dfb      	ldrb	r3, [r7, #23]
 800172c:	4618      	mov	r0, r3
 800172e:	f000 f861 	bl	80017f4 <USBD_Get_USB_Status>
 8001732:	4603      	mov	r3, r0
 8001734:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8001736:	7dbb      	ldrb	r3, [r7, #22]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	607a      	str	r2, [r7, #4]
 800174a:	461a      	mov	r2, r3
 800174c:	460b      	mov	r3, r1
 800174e:	72fb      	strb	r3, [r7, #11]
 8001750:	4613      	mov	r3, r2
 8001752:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001758:	2300      	movs	r3, #0
 800175a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8001762:	893b      	ldrh	r3, [r7, #8]
 8001764:	7af9      	ldrb	r1, [r7, #11]
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	f001 fc75 	bl	8003056 <HAL_PCD_EP_Receive>
 800176c:	4603      	mov	r3, r0
 800176e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001770:	7dfb      	ldrb	r3, [r7, #23]
 8001772:	4618      	mov	r0, r3
 8001774:	f000 f83e 	bl	80017f4 <USBD_Get_USB_Status>
 8001778:	4603      	mov	r3, r0
 800177a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800177c:	7dbb      	ldrb	r3, [r7, #22]
}
 800177e:	4618      	mov	r0, r3
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
 800178e:	460b      	mov	r3, r1
 8001790:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8001798:	78fa      	ldrb	r2, [r7, #3]
 800179a:	4611      	mov	r1, r2
 800179c:	4618      	mov	r0, r3
 800179e:	f001 fc8b 	bl	80030b8 <HAL_PCD_EP_GetRxCount>
 80017a2:	4603      	mov	r3, r0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80017b4:	4b03      	ldr	r3, [pc, #12]	@ (80017c4 <USBD_static_malloc+0x18>)
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	200012b0 	.word	0x200012b0

080017c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]

}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80017fe:	2300      	movs	r3, #0
 8001800:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	2b03      	cmp	r3, #3
 8001806:	d817      	bhi.n	8001838 <USBD_Get_USB_Status+0x44>
 8001808:	a201      	add	r2, pc, #4	@ (adr r2, 8001810 <USBD_Get_USB_Status+0x1c>)
 800180a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800180e:	bf00      	nop
 8001810:	08001821 	.word	0x08001821
 8001814:	08001827 	.word	0x08001827
 8001818:	0800182d 	.word	0x0800182d
 800181c:	08001833 	.word	0x08001833
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8001820:	2300      	movs	r3, #0
 8001822:	73fb      	strb	r3, [r7, #15]
    break;
 8001824:	e00b      	b.n	800183e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8001826:	2302      	movs	r3, #2
 8001828:	73fb      	strb	r3, [r7, #15]
    break;
 800182a:	e008      	b.n	800183e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800182c:	2301      	movs	r3, #1
 800182e:	73fb      	strb	r3, [r7, #15]
    break;
 8001830:	e005      	b.n	800183e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8001832:	2302      	movs	r3, #2
 8001834:	73fb      	strb	r3, [r7, #15]
    break;
 8001836:	e002      	b.n	800183e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8001838:	2302      	movs	r3, #2
 800183a:	73fb      	strb	r3, [r7, #15]
    break;
 800183c:	bf00      	nop
  }
  return usb_status;
 800183e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001850:	4b06      	ldr	r3, [pc, #24]	@ (800186c <SystemInit+0x20>)
 8001852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001856:	4a05      	ldr	r2, [pc, #20]	@ (800186c <SystemInit+0x20>)
 8001858:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800185c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001874:	4b08      	ldr	r3, [pc, #32]	@ (8001898 <HAL_Init+0x28>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a07      	ldr	r2, [pc, #28]	@ (8001898 <HAL_Init+0x28>)
 800187a:	f043 0310 	orr.w	r3, r3, #16
 800187e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001880:	2003      	movs	r0, #3
 8001882:	f000 f94f 	bl	8001b24 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001886:	200f      	movs	r0, #15
 8001888:	f000 f808 	bl	800189c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800188c:	f7ff f9cc 	bl	8000c28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40022000 	.word	0x40022000

0800189c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018a4:	4b12      	ldr	r3, [pc, #72]	@ (80018f0 <HAL_InitTick+0x54>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b12      	ldr	r3, [pc, #72]	@ (80018f4 <HAL_InitTick+0x58>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	4619      	mov	r1, r3
 80018ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 f967 	bl	8001b8e <HAL_SYSTICK_Config>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e00e      	b.n	80018e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b0f      	cmp	r3, #15
 80018ce:	d80a      	bhi.n	80018e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d0:	2200      	movs	r2, #0
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	f04f 30ff 	mov.w	r0, #4294967295
 80018d8:	f000 f92f 	bl	8001b3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018dc:	4a06      	ldr	r2, [pc, #24]	@ (80018f8 <HAL_InitTick+0x5c>)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80018e2:	2300      	movs	r3, #0
 80018e4:	e000      	b.n	80018e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20000060 	.word	0x20000060
 80018f4:	20000068 	.word	0x20000068
 80018f8:	20000064 	.word	0x20000064

080018fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001900:	4b06      	ldr	r3, [pc, #24]	@ (800191c <HAL_IncTick+0x20>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	461a      	mov	r2, r3
 8001906:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <HAL_IncTick+0x24>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4413      	add	r3, r2
 800190c:	4a04      	ldr	r2, [pc, #16]	@ (8001920 <HAL_IncTick+0x24>)
 800190e:	6013      	str	r3, [r2, #0]
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	20000068 	.word	0x20000068
 8001920:	200014d0 	.word	0x200014d0

08001924 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return uwTick;  
 8001928:	4b03      	ldr	r3, [pc, #12]	@ (8001938 <HAL_GetTick+0x14>)
 800192a:	681b      	ldr	r3, [r3, #0]
}
 800192c:	4618      	mov	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	200014d0 	.word	0x200014d0

0800193c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001944:	f7ff ffee 	bl	8001924 <HAL_GetTick>
 8001948:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001954:	d005      	beq.n	8001962 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001956:	4b0a      	ldr	r3, [pc, #40]	@ (8001980 <HAL_Delay+0x44>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	461a      	mov	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4413      	add	r3, r2
 8001960:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001962:	bf00      	nop
 8001964:	f7ff ffde 	bl	8001924 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	429a      	cmp	r2, r3
 8001972:	d8f7      	bhi.n	8001964 <HAL_Delay+0x28>
  {
  }
}
 8001974:	bf00      	nop
 8001976:	bf00      	nop
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000068 	.word	0x20000068

08001984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001994:	4b0c      	ldr	r3, [pc, #48]	@ (80019c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019a0:	4013      	ands	r3, r2
 80019a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019b6:	4a04      	ldr	r2, [pc, #16]	@ (80019c8 <__NVIC_SetPriorityGrouping+0x44>)
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	60d3      	str	r3, [r2, #12]
}
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d0:	4b04      	ldr	r3, [pc, #16]	@ (80019e4 <__NVIC_GetPriorityGrouping+0x18>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	0a1b      	lsrs	r3, r3, #8
 80019d6:	f003 0307 	and.w	r3, r3, #7
}
 80019da:	4618      	mov	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	db0b      	blt.n	8001a12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	f003 021f 	and.w	r2, r3, #31
 8001a00:	4907      	ldr	r1, [pc, #28]	@ (8001a20 <__NVIC_EnableIRQ+0x38>)
 8001a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a06:	095b      	lsrs	r3, r3, #5
 8001a08:	2001      	movs	r0, #1
 8001a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	e000e100 	.word	0xe000e100

08001a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	6039      	str	r1, [r7, #0]
 8001a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	db0a      	blt.n	8001a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	490c      	ldr	r1, [pc, #48]	@ (8001a70 <__NVIC_SetPriority+0x4c>)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	0112      	lsls	r2, r2, #4
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	440b      	add	r3, r1
 8001a48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a4c:	e00a      	b.n	8001a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4908      	ldr	r1, [pc, #32]	@ (8001a74 <__NVIC_SetPriority+0x50>)
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	3b04      	subs	r3, #4
 8001a5c:	0112      	lsls	r2, r2, #4
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	440b      	add	r3, r1
 8001a62:	761a      	strb	r2, [r3, #24]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000e100 	.word	0xe000e100
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b089      	sub	sp, #36	@ 0x24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f1c3 0307 	rsb	r3, r3, #7
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	bf28      	it	cs
 8001a96:	2304      	movcs	r3, #4
 8001a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	2b06      	cmp	r3, #6
 8001aa0:	d902      	bls.n	8001aa8 <NVIC_EncodePriority+0x30>
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3b03      	subs	r3, #3
 8001aa6:	e000      	b.n	8001aaa <NVIC_EncodePriority+0x32>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aac:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43da      	mvns	r2, r3
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	401a      	ands	r2, r3
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aca:	43d9      	mvns	r1, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad0:	4313      	orrs	r3, r2
         );
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3724      	adds	r7, #36	@ 0x24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001af0:	d301      	bcc.n	8001af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af2:	2301      	movs	r3, #1
 8001af4:	e00f      	b.n	8001b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001af6:	4a0a      	ldr	r2, [pc, #40]	@ (8001b20 <SysTick_Config+0x40>)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001afe:	210f      	movs	r1, #15
 8001b00:	f04f 30ff 	mov.w	r0, #4294967295
 8001b04:	f7ff ff8e 	bl	8001a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b08:	4b05      	ldr	r3, [pc, #20]	@ (8001b20 <SysTick_Config+0x40>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b0e:	4b04      	ldr	r3, [pc, #16]	@ (8001b20 <SysTick_Config+0x40>)
 8001b10:	2207      	movs	r2, #7
 8001b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	e000e010 	.word	0xe000e010

08001b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff ff29 	bl	8001984 <__NVIC_SetPriorityGrouping>
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b086      	sub	sp, #24
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	4603      	mov	r3, r0
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	607a      	str	r2, [r7, #4]
 8001b46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b4c:	f7ff ff3e 	bl	80019cc <__NVIC_GetPriorityGrouping>
 8001b50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	68b9      	ldr	r1, [r7, #8]
 8001b56:	6978      	ldr	r0, [r7, #20]
 8001b58:	f7ff ff8e 	bl	8001a78 <NVIC_EncodePriority>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b62:	4611      	mov	r1, r2
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ff5d 	bl	8001a24 <__NVIC_SetPriority>
}
 8001b6a:	bf00      	nop
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff31 	bl	80019e8 <__NVIC_EnableIRQ>
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff ffa2 	bl	8001ae0 <SysTick_Config>
 8001b9c:	4603      	mov	r3, r0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b087      	sub	sp, #28
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bb6:	e154      	b.n	8001e62 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f000 8146 	beq.w	8001e5c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 0303 	and.w	r3, r3, #3
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d005      	beq.n	8001be8 <HAL_GPIO_Init+0x40>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d130      	bne.n	8001c4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	2203      	movs	r2, #3
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	68da      	ldr	r2, [r3, #12]
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c1e:	2201      	movs	r2, #1
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	091b      	lsrs	r3, r3, #4
 8001c34:	f003 0201 	and.w	r2, r3, #1
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f003 0303 	and.w	r3, r3, #3
 8001c52:	2b03      	cmp	r3, #3
 8001c54:	d017      	beq.n	8001c86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	2203      	movs	r2, #3
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43db      	mvns	r3, r3
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d123      	bne.n	8001cda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	08da      	lsrs	r2, r3, #3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3208      	adds	r2, #8
 8001c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	220f      	movs	r2, #15
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	691a      	ldr	r2, [r3, #16]
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	08da      	lsrs	r2, r3, #3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3208      	adds	r2, #8
 8001cd4:	6939      	ldr	r1, [r7, #16]
 8001cd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	2203      	movs	r2, #3
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f003 0203 	and.w	r2, r3, #3
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f000 80a0 	beq.w	8001e5c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1c:	4b58      	ldr	r3, [pc, #352]	@ (8001e80 <HAL_GPIO_Init+0x2d8>)
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	4a57      	ldr	r2, [pc, #348]	@ (8001e80 <HAL_GPIO_Init+0x2d8>)
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	6193      	str	r3, [r2, #24]
 8001d28:	4b55      	ldr	r3, [pc, #340]	@ (8001e80 <HAL_GPIO_Init+0x2d8>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d34:	4a53      	ldr	r2, [pc, #332]	@ (8001e84 <HAL_GPIO_Init+0x2dc>)
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	089b      	lsrs	r3, r3, #2
 8001d3a:	3302      	adds	r3, #2
 8001d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	f003 0303 	and.w	r3, r3, #3
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	220f      	movs	r2, #15
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	4013      	ands	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d5e:	d019      	beq.n	8001d94 <HAL_GPIO_Init+0x1ec>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a49      	ldr	r2, [pc, #292]	@ (8001e88 <HAL_GPIO_Init+0x2e0>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d013      	beq.n	8001d90 <HAL_GPIO_Init+0x1e8>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a48      	ldr	r2, [pc, #288]	@ (8001e8c <HAL_GPIO_Init+0x2e4>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d00d      	beq.n	8001d8c <HAL_GPIO_Init+0x1e4>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a47      	ldr	r2, [pc, #284]	@ (8001e90 <HAL_GPIO_Init+0x2e8>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d007      	beq.n	8001d88 <HAL_GPIO_Init+0x1e0>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a46      	ldr	r2, [pc, #280]	@ (8001e94 <HAL_GPIO_Init+0x2ec>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d101      	bne.n	8001d84 <HAL_GPIO_Init+0x1dc>
 8001d80:	2304      	movs	r3, #4
 8001d82:	e008      	b.n	8001d96 <HAL_GPIO_Init+0x1ee>
 8001d84:	2305      	movs	r3, #5
 8001d86:	e006      	b.n	8001d96 <HAL_GPIO_Init+0x1ee>
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e004      	b.n	8001d96 <HAL_GPIO_Init+0x1ee>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	e002      	b.n	8001d96 <HAL_GPIO_Init+0x1ee>
 8001d90:	2301      	movs	r3, #1
 8001d92:	e000      	b.n	8001d96 <HAL_GPIO_Init+0x1ee>
 8001d94:	2300      	movs	r3, #0
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	f002 0203 	and.w	r2, r2, #3
 8001d9c:	0092      	lsls	r2, r2, #2
 8001d9e:	4093      	lsls	r3, r2
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001da6:	4937      	ldr	r1, [pc, #220]	@ (8001e84 <HAL_GPIO_Init+0x2dc>)
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	089b      	lsrs	r3, r3, #2
 8001dac:	3302      	adds	r3, #2
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001db4:	4b38      	ldr	r3, [pc, #224]	@ (8001e98 <HAL_GPIO_Init+0x2f0>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001dd8:	4a2f      	ldr	r2, [pc, #188]	@ (8001e98 <HAL_GPIO_Init+0x2f0>)
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dde:	4b2e      	ldr	r3, [pc, #184]	@ (8001e98 <HAL_GPIO_Init+0x2f0>)
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	43db      	mvns	r3, r3
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	4013      	ands	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e02:	4a25      	ldr	r2, [pc, #148]	@ (8001e98 <HAL_GPIO_Init+0x2f0>)
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e08:	4b23      	ldr	r3, [pc, #140]	@ (8001e98 <HAL_GPIO_Init+0x2f0>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	43db      	mvns	r3, r3
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4013      	ands	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e2c:	4a1a      	ldr	r2, [pc, #104]	@ (8001e98 <HAL_GPIO_Init+0x2f0>)
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e32:	4b19      	ldr	r3, [pc, #100]	@ (8001e98 <HAL_GPIO_Init+0x2f0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e56:	4a10      	ldr	r2, [pc, #64]	@ (8001e98 <HAL_GPIO_Init+0x2f0>)
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	fa22 f303 	lsr.w	r3, r2, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f47f aea3 	bne.w	8001bb8 <HAL_GPIO_Init+0x10>
  }
}
 8001e72:	bf00      	nop
 8001e74:	bf00      	nop
 8001e76:	371c      	adds	r7, #28
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40010000 	.word	0x40010000
 8001e88:	48000400 	.word	0x48000400
 8001e8c:	48000800 	.word	0x48000800
 8001e90:	48000c00 	.word	0x48000c00
 8001e94:	48001000 	.word	0x48001000
 8001e98:	40010400 	.word	0x40010400

08001e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	807b      	strh	r3, [r7, #2]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eac:	787b      	ldrb	r3, [r7, #1]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001eb2:	887a      	ldrh	r2, [r7, #2]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001eb8:	e002      	b.n	8001ec0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001eba:	887a      	ldrh	r2, [r7, #2]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ed6:	4b08      	ldr	r3, [pc, #32]	@ (8001ef8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ed8:	695a      	ldr	r2, [r3, #20]
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	4013      	ands	r3, r2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d006      	beq.n	8001ef0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ee2:	4a05      	ldr	r2, [pc, #20]	@ (8001ef8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ee4:	88fb      	ldrh	r3, [r7, #6]
 8001ee6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ee8:	88fb      	ldrh	r3, [r7, #6]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7fe fe84 	bl	8000bf8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40010400 	.word	0x40010400

08001efc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e08d      	b.n	800202a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d106      	bne.n	8001f28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7fe fea4 	bl	8000c70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2224      	movs	r2, #36	@ 0x24
 8001f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0201 	bic.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d107      	bne.n	8001f76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	e006      	b.n	8001f84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689a      	ldr	r2, [r3, #8]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001f82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d108      	bne.n	8001f9e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f9a:	605a      	str	r2, [r3, #4]
 8001f9c:	e007      	b.n	8001fae <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6812      	ldr	r2, [r2, #0]
 8001fb8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001fbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fc0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fd0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691a      	ldr	r2, [r3, #16]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69d9      	ldr	r1, [r3, #28]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a1a      	ldr	r2, [r3, #32]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 0201 	orr.w	r2, r2, #1
 800200a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2220      	movs	r2, #32
 8002016:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b088      	sub	sp, #32
 8002038:	af02      	add	r7, sp, #8
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	4608      	mov	r0, r1
 800203e:	4611      	mov	r1, r2
 8002040:	461a      	mov	r2, r3
 8002042:	4603      	mov	r3, r0
 8002044:	817b      	strh	r3, [r7, #10]
 8002046:	460b      	mov	r3, r1
 8002048:	813b      	strh	r3, [r7, #8]
 800204a:	4613      	mov	r3, r2
 800204c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b20      	cmp	r3, #32
 8002058:	f040 80f9 	bne.w	800224e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800205c:	6a3b      	ldr	r3, [r7, #32]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d002      	beq.n	8002068 <HAL_I2C_Mem_Write+0x34>
 8002062:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002064:	2b00      	cmp	r3, #0
 8002066:	d105      	bne.n	8002074 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800206e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0ed      	b.n	8002250 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800207a:	2b01      	cmp	r3, #1
 800207c:	d101      	bne.n	8002082 <HAL_I2C_Mem_Write+0x4e>
 800207e:	2302      	movs	r3, #2
 8002080:	e0e6      	b.n	8002250 <HAL_I2C_Mem_Write+0x21c>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800208a:	f7ff fc4b 	bl	8001924 <HAL_GetTick>
 800208e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	2319      	movs	r3, #25
 8002096:	2201      	movs	r2, #1
 8002098:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f000 fac3 	bl	8002628 <I2C_WaitOnFlagUntilTimeout>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e0d1      	b.n	8002250 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2221      	movs	r2, #33	@ 0x21
 80020b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2240      	movs	r2, #64	@ 0x40
 80020b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6a3a      	ldr	r2, [r7, #32]
 80020c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80020cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020d4:	88f8      	ldrh	r0, [r7, #6]
 80020d6:	893a      	ldrh	r2, [r7, #8]
 80020d8:	8979      	ldrh	r1, [r7, #10]
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	9301      	str	r3, [sp, #4]
 80020de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	4603      	mov	r3, r0
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f000 f9d3 	bl	8002490 <I2C_RequestMemoryWrite>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d005      	beq.n	80020fc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e0a9      	b.n	8002250 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002100:	b29b      	uxth	r3, r3
 8002102:	2bff      	cmp	r3, #255	@ 0xff
 8002104:	d90e      	bls.n	8002124 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	22ff      	movs	r2, #255	@ 0xff
 800210a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002110:	b2da      	uxtb	r2, r3
 8002112:	8979      	ldrh	r1, [r7, #10]
 8002114:	2300      	movs	r3, #0
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f000 fc47 	bl	80029b0 <I2C_TransferConfig>
 8002122:	e00f      	b.n	8002144 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002128:	b29a      	uxth	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002132:	b2da      	uxtb	r2, r3
 8002134:	8979      	ldrh	r1, [r7, #10]
 8002136:	2300      	movs	r3, #0
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f000 fc36 	bl	80029b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f000 fac6 	bl	80026da <I2C_WaitOnTXISFlagUntilTimeout>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e07b      	b.n	8002250 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215c:	781a      	ldrb	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002168:	1c5a      	adds	r2, r3, #1
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002172:	b29b      	uxth	r3, r3
 8002174:	3b01      	subs	r3, #1
 8002176:	b29a      	uxth	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002180:	3b01      	subs	r3, #1
 8002182:	b29a      	uxth	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800218c:	b29b      	uxth	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d034      	beq.n	80021fc <HAL_I2C_Mem_Write+0x1c8>
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002196:	2b00      	cmp	r3, #0
 8002198:	d130      	bne.n	80021fc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021a0:	2200      	movs	r2, #0
 80021a2:	2180      	movs	r1, #128	@ 0x80
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f000 fa3f 	bl	8002628 <I2C_WaitOnFlagUntilTimeout>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e04d      	b.n	8002250 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	2bff      	cmp	r3, #255	@ 0xff
 80021bc:	d90e      	bls.n	80021dc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	22ff      	movs	r2, #255	@ 0xff
 80021c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	8979      	ldrh	r1, [r7, #10]
 80021cc:	2300      	movs	r3, #0
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f000 fbeb 	bl	80029b0 <I2C_TransferConfig>
 80021da:	e00f      	b.n	80021fc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	8979      	ldrh	r1, [r7, #10]
 80021ee:	2300      	movs	r3, #0
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f000 fbda 	bl	80029b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002200:	b29b      	uxth	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d19e      	bne.n	8002144 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 faac 	bl	8002768 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e01a      	b.n	8002250 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2220      	movs	r2, #32
 8002220:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6859      	ldr	r1, [r3, #4]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	4b0a      	ldr	r3, [pc, #40]	@ (8002258 <HAL_I2C_Mem_Write+0x224>)
 800222e:	400b      	ands	r3, r1
 8002230:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2220      	movs	r2, #32
 8002236:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800224a:	2300      	movs	r3, #0
 800224c:	e000      	b.n	8002250 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800224e:	2302      	movs	r3, #2
  }
}
 8002250:	4618      	mov	r0, r3
 8002252:	3718      	adds	r7, #24
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	fe00e800 	.word	0xfe00e800

0800225c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af02      	add	r7, sp, #8
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	4608      	mov	r0, r1
 8002266:	4611      	mov	r1, r2
 8002268:	461a      	mov	r2, r3
 800226a:	4603      	mov	r3, r0
 800226c:	817b      	strh	r3, [r7, #10]
 800226e:	460b      	mov	r3, r1
 8002270:	813b      	strh	r3, [r7, #8]
 8002272:	4613      	mov	r3, r2
 8002274:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b20      	cmp	r3, #32
 8002280:	f040 80fd 	bne.w	800247e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002284:	6a3b      	ldr	r3, [r7, #32]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d002      	beq.n	8002290 <HAL_I2C_Mem_Read+0x34>
 800228a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800228c:	2b00      	cmp	r3, #0
 800228e:	d105      	bne.n	800229c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002296:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e0f1      	b.n	8002480 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d101      	bne.n	80022aa <HAL_I2C_Mem_Read+0x4e>
 80022a6:	2302      	movs	r3, #2
 80022a8:	e0ea      	b.n	8002480 <HAL_I2C_Mem_Read+0x224>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022b2:	f7ff fb37 	bl	8001924 <HAL_GetTick>
 80022b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	2319      	movs	r3, #25
 80022be:	2201      	movs	r2, #1
 80022c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f000 f9af 	bl	8002628 <I2C_WaitOnFlagUntilTimeout>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e0d5      	b.n	8002480 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2222      	movs	r2, #34	@ 0x22
 80022d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2240      	movs	r2, #64	@ 0x40
 80022e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6a3a      	ldr	r2, [r7, #32]
 80022ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80022f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022fc:	88f8      	ldrh	r0, [r7, #6]
 80022fe:	893a      	ldrh	r2, [r7, #8]
 8002300:	8979      	ldrh	r1, [r7, #10]
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	9301      	str	r3, [sp, #4]
 8002306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	4603      	mov	r3, r0
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f000 f913 	bl	8002538 <I2C_RequestMemoryRead>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d005      	beq.n	8002324 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e0ad      	b.n	8002480 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002328:	b29b      	uxth	r3, r3
 800232a:	2bff      	cmp	r3, #255	@ 0xff
 800232c:	d90e      	bls.n	800234c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2201      	movs	r2, #1
 8002332:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002338:	b2da      	uxtb	r2, r3
 800233a:	8979      	ldrh	r1, [r7, #10]
 800233c:	4b52      	ldr	r3, [pc, #328]	@ (8002488 <HAL_I2C_Mem_Read+0x22c>)
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 fb33 	bl	80029b0 <I2C_TransferConfig>
 800234a:	e00f      	b.n	800236c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002350:	b29a      	uxth	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800235a:	b2da      	uxtb	r2, r3
 800235c:	8979      	ldrh	r1, [r7, #10]
 800235e:	4b4a      	ldr	r3, [pc, #296]	@ (8002488 <HAL_I2C_Mem_Read+0x22c>)
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f000 fb22 	bl	80029b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002372:	2200      	movs	r2, #0
 8002374:	2104      	movs	r1, #4
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f000 f956 	bl	8002628 <I2C_WaitOnFlagUntilTimeout>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e07c      	b.n	8002480 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002398:	1c5a      	adds	r2, r3, #1
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023a2:	3b01      	subs	r3, #1
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	3b01      	subs	r3, #1
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023bc:	b29b      	uxth	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d034      	beq.n	800242c <HAL_I2C_Mem_Read+0x1d0>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d130      	bne.n	800242c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023d0:	2200      	movs	r2, #0
 80023d2:	2180      	movs	r1, #128	@ 0x80
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f000 f927 	bl	8002628 <I2C_WaitOnFlagUntilTimeout>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e04d      	b.n	8002480 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	2bff      	cmp	r3, #255	@ 0xff
 80023ec:	d90e      	bls.n	800240c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2201      	movs	r2, #1
 80023f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	8979      	ldrh	r1, [r7, #10]
 80023fc:	2300      	movs	r3, #0
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f000 fad3 	bl	80029b0 <I2C_TransferConfig>
 800240a:	e00f      	b.n	800242c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002410:	b29a      	uxth	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800241a:	b2da      	uxtb	r2, r3
 800241c:	8979      	ldrh	r1, [r7, #10]
 800241e:	2300      	movs	r3, #0
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 fac2 	bl	80029b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002430:	b29b      	uxth	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d19a      	bne.n	800236c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f000 f994 	bl	8002768 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e01a      	b.n	8002480 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2220      	movs	r2, #32
 8002450:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6859      	ldr	r1, [r3, #4]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4b0b      	ldr	r3, [pc, #44]	@ (800248c <HAL_I2C_Mem_Read+0x230>)
 800245e:	400b      	ands	r3, r1
 8002460:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2220      	movs	r2, #32
 8002466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	e000      	b.n	8002480 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800247e:	2302      	movs	r3, #2
  }
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	80002400 	.word	0x80002400
 800248c:	fe00e800 	.word	0xfe00e800

08002490 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af02      	add	r7, sp, #8
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	4608      	mov	r0, r1
 800249a:	4611      	mov	r1, r2
 800249c:	461a      	mov	r2, r3
 800249e:	4603      	mov	r3, r0
 80024a0:	817b      	strh	r3, [r7, #10]
 80024a2:	460b      	mov	r3, r1
 80024a4:	813b      	strh	r3, [r7, #8]
 80024a6:	4613      	mov	r3, r2
 80024a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80024aa:	88fb      	ldrh	r3, [r7, #6]
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	8979      	ldrh	r1, [r7, #10]
 80024b0:	4b20      	ldr	r3, [pc, #128]	@ (8002534 <I2C_RequestMemoryWrite+0xa4>)
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f000 fa79 	bl	80029b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024be:	69fa      	ldr	r2, [r7, #28]
 80024c0:	69b9      	ldr	r1, [r7, #24]
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 f909 	bl	80026da <I2C_WaitOnTXISFlagUntilTimeout>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e02c      	b.n	800252c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80024d2:	88fb      	ldrh	r3, [r7, #6]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d105      	bne.n	80024e4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024d8:	893b      	ldrh	r3, [r7, #8]
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80024e2:	e015      	b.n	8002510 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80024e4:	893b      	ldrh	r3, [r7, #8]
 80024e6:	0a1b      	lsrs	r3, r3, #8
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024f2:	69fa      	ldr	r2, [r7, #28]
 80024f4:	69b9      	ldr	r1, [r7, #24]
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 f8ef 	bl	80026da <I2C_WaitOnTXISFlagUntilTimeout>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e012      	b.n	800252c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002506:	893b      	ldrh	r3, [r7, #8]
 8002508:	b2da      	uxtb	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	2200      	movs	r2, #0
 8002518:	2180      	movs	r1, #128	@ 0x80
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 f884 	bl	8002628 <I2C_WaitOnFlagUntilTimeout>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	80002000 	.word	0x80002000

08002538 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af02      	add	r7, sp, #8
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	4608      	mov	r0, r1
 8002542:	4611      	mov	r1, r2
 8002544:	461a      	mov	r2, r3
 8002546:	4603      	mov	r3, r0
 8002548:	817b      	strh	r3, [r7, #10]
 800254a:	460b      	mov	r3, r1
 800254c:	813b      	strh	r3, [r7, #8]
 800254e:	4613      	mov	r3, r2
 8002550:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002552:	88fb      	ldrh	r3, [r7, #6]
 8002554:	b2da      	uxtb	r2, r3
 8002556:	8979      	ldrh	r1, [r7, #10]
 8002558:	4b20      	ldr	r3, [pc, #128]	@ (80025dc <I2C_RequestMemoryRead+0xa4>)
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	2300      	movs	r3, #0
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f000 fa26 	bl	80029b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002564:	69fa      	ldr	r2, [r7, #28]
 8002566:	69b9      	ldr	r1, [r7, #24]
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 f8b6 	bl	80026da <I2C_WaitOnTXISFlagUntilTimeout>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e02c      	b.n	80025d2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002578:	88fb      	ldrh	r3, [r7, #6]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d105      	bne.n	800258a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800257e:	893b      	ldrh	r3, [r7, #8]
 8002580:	b2da      	uxtb	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	629a      	str	r2, [r3, #40]	@ 0x28
 8002588:	e015      	b.n	80025b6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800258a:	893b      	ldrh	r3, [r7, #8]
 800258c:	0a1b      	lsrs	r3, r3, #8
 800258e:	b29b      	uxth	r3, r3
 8002590:	b2da      	uxtb	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002598:	69fa      	ldr	r2, [r7, #28]
 800259a:	69b9      	ldr	r1, [r7, #24]
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 f89c 	bl	80026da <I2C_WaitOnTXISFlagUntilTimeout>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e012      	b.n	80025d2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025ac:	893b      	ldrh	r3, [r7, #8]
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	2200      	movs	r2, #0
 80025be:	2140      	movs	r1, #64	@ 0x40
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f000 f831 	bl	8002628 <I2C_WaitOnFlagUntilTimeout>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e000      	b.n	80025d2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	80002000 	.word	0x80002000

080025e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d103      	bne.n	80025fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2200      	movs	r2, #0
 80025fc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b01      	cmp	r3, #1
 800260a:	d007      	beq.n	800261c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	699a      	ldr	r2, [r3, #24]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 0201 	orr.w	r2, r2, #1
 800261a:	619a      	str	r2, [r3, #24]
  }
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	603b      	str	r3, [r7, #0]
 8002634:	4613      	mov	r3, r2
 8002636:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002638:	e03b      	b.n	80026b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	6839      	ldr	r1, [r7, #0]
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 f8d6 	bl	80027f0 <I2C_IsErrorOccurred>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e041      	b.n	80026d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002654:	d02d      	beq.n	80026b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002656:	f7ff f965 	bl	8001924 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	429a      	cmp	r2, r3
 8002664:	d302      	bcc.n	800266c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d122      	bne.n	80026b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	699a      	ldr	r2, [r3, #24]
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	4013      	ands	r3, r2
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	429a      	cmp	r2, r3
 800267a:	bf0c      	ite	eq
 800267c:	2301      	moveq	r3, #1
 800267e:	2300      	movne	r3, #0
 8002680:	b2db      	uxtb	r3, r3
 8002682:	461a      	mov	r2, r3
 8002684:	79fb      	ldrb	r3, [r7, #7]
 8002686:	429a      	cmp	r2, r3
 8002688:	d113      	bne.n	80026b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800268e:	f043 0220 	orr.w	r2, r3, #32
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2220      	movs	r2, #32
 800269a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e00f      	b.n	80026d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	699a      	ldr	r2, [r3, #24]
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	4013      	ands	r3, r2
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	429a      	cmp	r2, r3
 80026c0:	bf0c      	ite	eq
 80026c2:	2301      	moveq	r3, #1
 80026c4:	2300      	movne	r3, #0
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	461a      	mov	r2, r3
 80026ca:	79fb      	ldrb	r3, [r7, #7]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d0b4      	beq.n	800263a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b084      	sub	sp, #16
 80026de:	af00      	add	r7, sp, #0
 80026e0:	60f8      	str	r0, [r7, #12]
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026e6:	e033      	b.n	8002750 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	68b9      	ldr	r1, [r7, #8]
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f000 f87f 	bl	80027f0 <I2C_IsErrorOccurred>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e031      	b.n	8002760 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002702:	d025      	beq.n	8002750 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002704:	f7ff f90e 	bl	8001924 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	429a      	cmp	r2, r3
 8002712:	d302      	bcc.n	800271a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d11a      	bne.n	8002750 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b02      	cmp	r3, #2
 8002726:	d013      	beq.n	8002750 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800272c:	f043 0220 	orr.w	r2, r3, #32
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2220      	movs	r2, #32
 8002738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e007      	b.n	8002760 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b02      	cmp	r3, #2
 800275c:	d1c4      	bne.n	80026e8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002774:	e02f      	b.n	80027d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	68b9      	ldr	r1, [r7, #8]
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 f838 	bl	80027f0 <I2C_IsErrorOccurred>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e02d      	b.n	80027e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800278a:	f7ff f8cb 	bl	8001924 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	68ba      	ldr	r2, [r7, #8]
 8002796:	429a      	cmp	r2, r3
 8002798:	d302      	bcc.n	80027a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d11a      	bne.n	80027d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	f003 0320 	and.w	r3, r3, #32
 80027aa:	2b20      	cmp	r3, #32
 80027ac:	d013      	beq.n	80027d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b2:	f043 0220 	orr.w	r2, r3, #32
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2220      	movs	r2, #32
 80027be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e007      	b.n	80027e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	f003 0320 	and.w	r3, r3, #32
 80027e0:	2b20      	cmp	r3, #32
 80027e2:	d1c8      	bne.n	8002776 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08a      	sub	sp, #40	@ 0x28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027fc:	2300      	movs	r3, #0
 80027fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800280a:	2300      	movs	r3, #0
 800280c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	f003 0310 	and.w	r3, r3, #16
 8002818:	2b00      	cmp	r3, #0
 800281a:	d068      	beq.n	80028ee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2210      	movs	r2, #16
 8002822:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002824:	e049      	b.n	80028ba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800282c:	d045      	beq.n	80028ba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800282e:	f7ff f879 	bl	8001924 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	429a      	cmp	r2, r3
 800283c:	d302      	bcc.n	8002844 <I2C_IsErrorOccurred+0x54>
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d13a      	bne.n	80028ba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800284e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002856:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002862:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002866:	d121      	bne.n	80028ac <I2C_IsErrorOccurred+0xbc>
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800286e:	d01d      	beq.n	80028ac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002870:	7cfb      	ldrb	r3, [r7, #19]
 8002872:	2b20      	cmp	r3, #32
 8002874:	d01a      	beq.n	80028ac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002884:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002886:	f7ff f84d 	bl	8001924 <HAL_GetTick>
 800288a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800288c:	e00e      	b.n	80028ac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800288e:	f7ff f849 	bl	8001924 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b19      	cmp	r3, #25
 800289a:	d907      	bls.n	80028ac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	f043 0320 	orr.w	r3, r3, #32
 80028a2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80028aa:	e006      	b.n	80028ba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	f003 0320 	and.w	r3, r3, #32
 80028b6:	2b20      	cmp	r3, #32
 80028b8:	d1e9      	bne.n	800288e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	f003 0320 	and.w	r3, r3, #32
 80028c4:	2b20      	cmp	r3, #32
 80028c6:	d003      	beq.n	80028d0 <I2C_IsErrorOccurred+0xe0>
 80028c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0aa      	beq.n	8002826 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80028d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d103      	bne.n	80028e0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2220      	movs	r2, #32
 80028de:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80028e0:	6a3b      	ldr	r3, [r7, #32]
 80028e2:	f043 0304 	orr.w	r3, r3, #4
 80028e6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00b      	beq.n	8002918 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	f043 0301 	orr.w	r3, r3, #1
 8002906:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002910:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00b      	beq.n	800293a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	f043 0308 	orr.w	r3, r3, #8
 8002928:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002932:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00b      	beq.n	800295c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002944:	6a3b      	ldr	r3, [r7, #32]
 8002946:	f043 0302 	orr.w	r3, r3, #2
 800294a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002954:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800295c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002960:	2b00      	cmp	r3, #0
 8002962:	d01c      	beq.n	800299e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f7ff fe3b 	bl	80025e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6859      	ldr	r1, [r3, #4]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	4b0d      	ldr	r3, [pc, #52]	@ (80029ac <I2C_IsErrorOccurred+0x1bc>)
 8002976:	400b      	ands	r3, r1
 8002978:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800297e:	6a3b      	ldr	r3, [r7, #32]
 8002980:	431a      	orrs	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2220      	movs	r2, #32
 800298a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800299e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3728      	adds	r7, #40	@ 0x28
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	fe00e800 	.word	0xfe00e800

080029b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b087      	sub	sp, #28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	607b      	str	r3, [r7, #4]
 80029ba:	460b      	mov	r3, r1
 80029bc:	817b      	strh	r3, [r7, #10]
 80029be:	4613      	mov	r3, r2
 80029c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029c2:	897b      	ldrh	r3, [r7, #10]
 80029c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80029c8:	7a7b      	ldrb	r3, [r7, #9]
 80029ca:	041b      	lsls	r3, r3, #16
 80029cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029d0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	4313      	orrs	r3, r2
 80029da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80029de:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	6a3b      	ldr	r3, [r7, #32]
 80029e8:	0d5b      	lsrs	r3, r3, #21
 80029ea:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80029ee:	4b08      	ldr	r3, [pc, #32]	@ (8002a10 <I2C_TransferConfig+0x60>)
 80029f0:	430b      	orrs	r3, r1
 80029f2:	43db      	mvns	r3, r3
 80029f4:	ea02 0103 	and.w	r1, r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002a02:	bf00      	nop
 8002a04:	371c      	adds	r7, #28
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	03ff63ff 	.word	0x03ff63ff

08002a14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b20      	cmp	r3, #32
 8002a28:	d138      	bne.n	8002a9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d101      	bne.n	8002a38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a34:	2302      	movs	r3, #2
 8002a36:	e032      	b.n	8002a9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2224      	movs	r2, #36	@ 0x24
 8002a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0201 	bic.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6819      	ldr	r1, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0201 	orr.w	r2, r2, #1
 8002a86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	e000      	b.n	8002a9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a9c:	2302      	movs	r3, #2
  }
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b085      	sub	sp, #20
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b20      	cmp	r3, #32
 8002abe:	d139      	bne.n	8002b34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d101      	bne.n	8002ace <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002aca:	2302      	movs	r3, #2
 8002acc:	e033      	b.n	8002b36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2224      	movs	r2, #36	@ 0x24
 8002ada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0201 	bic.w	r2, r2, #1
 8002aec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002afc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	021b      	lsls	r3, r3, #8
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0201 	orr.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2220      	movs	r2, #32
 8002b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b30:	2300      	movs	r3, #0
 8002b32:	e000      	b.n	8002b36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b34:	2302      	movs	r3, #2
  }
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b084      	sub	sp, #16
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d101      	bne.n	8002b54 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e0b9      	b.n	8002cc8 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d106      	bne.n	8002b6e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f7fe fb9b 	bl	80012a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2203      	movs	r2, #3
 8002b72:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f003 fcb1 	bl	80064e2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b80:	2300      	movs	r3, #0
 8002b82:	73fb      	strb	r3, [r7, #15]
 8002b84:	e03e      	b.n	8002c04 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b86:	7bfa      	ldrb	r2, [r7, #15]
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	440b      	add	r3, r1
 8002b94:	3311      	adds	r3, #17
 8002b96:	2201      	movs	r2, #1
 8002b98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b9a:	7bfa      	ldrb	r2, [r7, #15]
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	440b      	add	r3, r1
 8002ba8:	3310      	adds	r3, #16
 8002baa:	7bfa      	ldrb	r2, [r7, #15]
 8002bac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bae:	7bfa      	ldrb	r2, [r7, #15]
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	440b      	add	r3, r1
 8002bbc:	3313      	adds	r3, #19
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bc2:	7bfa      	ldrb	r2, [r7, #15]
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	440b      	add	r3, r1
 8002bd0:	3320      	adds	r3, #32
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bd6:	7bfa      	ldrb	r2, [r7, #15]
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	440b      	add	r3, r1
 8002be4:	3324      	adds	r3, #36	@ 0x24
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	1c5a      	adds	r2, r3, #1
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	440b      	add	r3, r1
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bfe:	7bfb      	ldrb	r3, [r7, #15]
 8002c00:	3301      	adds	r3, #1
 8002c02:	73fb      	strb	r3, [r7, #15]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	791b      	ldrb	r3, [r3, #4]
 8002c08:	7bfa      	ldrb	r2, [r7, #15]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d3bb      	bcc.n	8002b86 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c0e:	2300      	movs	r3, #0
 8002c10:	73fb      	strb	r3, [r7, #15]
 8002c12:	e044      	b.n	8002c9e <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c14:	7bfa      	ldrb	r2, [r7, #15]
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	440b      	add	r3, r1
 8002c22:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002c26:	2200      	movs	r2, #0
 8002c28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c2a:	7bfa      	ldrb	r2, [r7, #15]
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	440b      	add	r3, r1
 8002c38:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002c3c:	7bfa      	ldrb	r2, [r7, #15]
 8002c3e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c40:	7bfa      	ldrb	r2, [r7, #15]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	440b      	add	r3, r1
 8002c4e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002c52:	2200      	movs	r2, #0
 8002c54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c56:	7bfa      	ldrb	r2, [r7, #15]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	440b      	add	r3, r1
 8002c64:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c6c:	7bfa      	ldrb	r2, [r7, #15]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	440b      	add	r3, r1
 8002c7a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c82:	7bfa      	ldrb	r2, [r7, #15]
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	440b      	add	r3, r1
 8002c90:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c98:	7bfb      	ldrb	r3, [r7, #15]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	73fb      	strb	r3, [r7, #15]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	791b      	ldrb	r3, [r3, #4]
 8002ca2:	7bfa      	ldrb	r2, [r7, #15]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d3b5      	bcc.n	8002c14 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6818      	ldr	r0, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3304      	adds	r3, #4
 8002cb0:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002cb4:	f003 fc30 	bl	8006518 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d101      	bne.n	8002ce6 <HAL_PCD_Start+0x16>
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	e016      	b.n	8002d14 <HAL_PCD_Start+0x44>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f003 fbde 	bl	80064b4 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7fe fd6e 	bl	80017dc <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f005 fe9b 	bl	8008a40 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f005 fe94 	bl	8008a56 <USB_ReadInterrupts>
 8002d2e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 fab1 	bl	80032a2 <PCD_EP_ISR_Handler>

    return;
 8002d40:	e0bd      	b.n	8002ebe <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d013      	beq.n	8002d74 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d5e:	b292      	uxth	r2, r2
 8002d60:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7fe fb3e 	bl	80013e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f8a9 	bl	8002ec4 <HAL_PCD_SetAddress>

    return;
 8002d72:	e0a4      	b.n	8002ebe <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00c      	beq.n	8002d98 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002d90:	b292      	uxth	r2, r2
 8002d92:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002d96:	e092      	b.n	8002ebe <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00c      	beq.n	8002dbc <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002db4:	b292      	uxth	r2, r2
 8002db6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002dba:	e080      	b.n	8002ebe <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d027      	beq.n	8002e16 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0204 	bic.w	r2, r2, #4
 8002dd8:	b292      	uxth	r2, r2
 8002dda:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0208 	bic.w	r2, r2, #8
 8002df0:	b292      	uxth	r2, r2
 8002df2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7fe fb2e 	bl	8001458 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e0e:	b292      	uxth	r2, r2
 8002e10:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002e14:	e053      	b.n	8002ebe <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d027      	beq.n	8002e70 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0208 	orr.w	r2, r2, #8
 8002e32:	b292      	uxth	r2, r2
 8002e34:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e4a:	b292      	uxth	r2, r2
 8002e4c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0204 	orr.w	r2, r2, #4
 8002e62:	b292      	uxth	r2, r2
 8002e64:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7fe fadb 	bl	8001424 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002e6e:	e026      	b.n	8002ebe <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00f      	beq.n	8002e9a <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e8c:	b292      	uxth	r2, r2
 8002e8e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7fe fa99 	bl	80013ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002e98:	e011      	b.n	8002ebe <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00c      	beq.n	8002ebe <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002eb6:	b292      	uxth	r2, r2
 8002eb8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002ebc:	bf00      	nop
  }
}
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d101      	bne.n	8002ede <HAL_PCD_SetAddress+0x1a>
 8002eda:	2302      	movs	r3, #2
 8002edc:	e012      	b.n	8002f04 <HAL_PCD_SetAddress+0x40>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	78fa      	ldrb	r2, [r7, #3]
 8002eea:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	78fa      	ldrb	r2, [r7, #3]
 8002ef2:	4611      	mov	r1, r2
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f005 fd8f 	bl	8008a18 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	4608      	mov	r0, r1
 8002f16:	4611      	mov	r1, r2
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	70fb      	strb	r3, [r7, #3]
 8002f1e:	460b      	mov	r3, r1
 8002f20:	803b      	strh	r3, [r7, #0]
 8002f22:	4613      	mov	r3, r2
 8002f24:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f26:	2300      	movs	r3, #0
 8002f28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	da0e      	bge.n	8002f50 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f32:	78fb      	ldrb	r3, [r7, #3]
 8002f34:	f003 0207 	and.w	r2, r3, #7
 8002f38:	4613      	mov	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4413      	add	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	3310      	adds	r3, #16
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	4413      	add	r3, r2
 8002f46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	705a      	strb	r2, [r3, #1]
 8002f4e:	e00e      	b.n	8002f6e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f50:	78fb      	ldrb	r3, [r7, #3]
 8002f52:	f003 0207 	and.w	r2, r3, #7
 8002f56:	4613      	mov	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	4413      	add	r3, r2
 8002f66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f6e:	78fb      	ldrb	r3, [r7, #3]
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f7a:	883a      	ldrh	r2, [r7, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	78ba      	ldrb	r2, [r7, #2]
 8002f84:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f86:	78bb      	ldrb	r3, [r7, #2]
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d102      	bne.n	8002f92 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d101      	bne.n	8002fa0 <HAL_PCD_EP_Open+0x94>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	e00e      	b.n	8002fbe <HAL_PCD_EP_Open+0xb2>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68f9      	ldr	r1, [r7, #12]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f003 fad0 	bl	8006554 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002fbc:	7afb      	ldrb	r3, [r7, #11]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b084      	sub	sp, #16
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
 8002fce:	460b      	mov	r3, r1
 8002fd0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	da0e      	bge.n	8002ff8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fda:	78fb      	ldrb	r3, [r7, #3]
 8002fdc:	f003 0207 	and.w	r2, r3, #7
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	3310      	adds	r3, #16
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	4413      	add	r3, r2
 8002fee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	705a      	strb	r2, [r3, #1]
 8002ff6:	e00e      	b.n	8003016 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ff8:	78fb      	ldrb	r3, [r7, #3]
 8002ffa:	f003 0207 	and.w	r2, r3, #7
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	4413      	add	r3, r2
 800300e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003016:	78fb      	ldrb	r3, [r7, #3]
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	b2da      	uxtb	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_PCD_EP_Close+0x6a>
 800302c:	2302      	movs	r3, #2
 800302e:	e00e      	b.n	800304e <HAL_PCD_EP_Close+0x88>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68f9      	ldr	r1, [r7, #12]
 800303e:	4618      	mov	r0, r3
 8003040:	f003 fe4c 	bl	8006cdc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b086      	sub	sp, #24
 800305a:	af00      	add	r7, sp, #0
 800305c:	60f8      	str	r0, [r7, #12]
 800305e:	607a      	str	r2, [r7, #4]
 8003060:	603b      	str	r3, [r7, #0]
 8003062:	460b      	mov	r3, r1
 8003064:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003066:	7afb      	ldrb	r3, [r7, #11]
 8003068:	f003 0207 	and.w	r2, r3, #7
 800306c:	4613      	mov	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	4413      	add	r3, r2
 800307c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2200      	movs	r2, #0
 800308e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	2200      	movs	r2, #0
 8003094:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003096:	7afb      	ldrb	r3, [r7, #11]
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	b2da      	uxtb	r2, r3
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6979      	ldr	r1, [r7, #20]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f004 f804 	bl	80070b6 <USB_EPStartXfer>

  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3718      	adds	r7, #24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	460b      	mov	r3, r1
 80030c2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80030c4:	78fb      	ldrb	r3, [r7, #3]
 80030c6:	f003 0207 	and.w	r2, r3, #7
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	440b      	add	r3, r1
 80030d6:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80030da:	681b      	ldr	r3, [r3, #0]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	607a      	str	r2, [r7, #4]
 80030f2:	603b      	str	r3, [r7, #0]
 80030f4:	460b      	mov	r3, r1
 80030f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030f8:	7afb      	ldrb	r3, [r7, #11]
 80030fa:	f003 0207 	and.w	r2, r3, #7
 80030fe:	4613      	mov	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4413      	add	r3, r2
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	3310      	adds	r3, #16
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	4413      	add	r3, r2
 800310c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	2200      	movs	r2, #0
 800312c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	2201      	movs	r2, #1
 8003132:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003134:	7afb      	ldrb	r3, [r7, #11]
 8003136:	f003 0307 	and.w	r3, r3, #7
 800313a:	b2da      	uxtb	r2, r3
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6979      	ldr	r1, [r7, #20]
 8003146:	4618      	mov	r0, r3
 8003148:	f003 ffb5 	bl	80070b6 <USB_EPStartXfer>

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b084      	sub	sp, #16
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
 800315e:	460b      	mov	r3, r1
 8003160:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003162:	78fb      	ldrb	r3, [r7, #3]
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	7912      	ldrb	r2, [r2, #4]
 800316c:	4293      	cmp	r3, r2
 800316e:	d901      	bls.n	8003174 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e03e      	b.n	80031f2 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003174:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003178:	2b00      	cmp	r3, #0
 800317a:	da0e      	bge.n	800319a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800317c:	78fb      	ldrb	r3, [r7, #3]
 800317e:	f003 0207 	and.w	r2, r3, #7
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	3310      	adds	r3, #16
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	4413      	add	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2201      	movs	r2, #1
 8003196:	705a      	strb	r2, [r3, #1]
 8003198:	e00c      	b.n	80031b4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800319a:	78fa      	ldrb	r2, [r7, #3]
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	4413      	add	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2201      	movs	r2, #1
 80031b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031ba:	78fb      	ldrb	r3, [r7, #3]
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <HAL_PCD_EP_SetStall+0x7e>
 80031d0:	2302      	movs	r3, #2
 80031d2:	e00e      	b.n	80031f2 <HAL_PCD_EP_SetStall+0x9c>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68f9      	ldr	r1, [r7, #12]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f005 fb19 	bl	800881a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b084      	sub	sp, #16
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
 8003202:	460b      	mov	r3, r1
 8003204:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003206:	78fb      	ldrb	r3, [r7, #3]
 8003208:	f003 030f 	and.w	r3, r3, #15
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	7912      	ldrb	r2, [r2, #4]
 8003210:	4293      	cmp	r3, r2
 8003212:	d901      	bls.n	8003218 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e040      	b.n	800329a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003218:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800321c:	2b00      	cmp	r3, #0
 800321e:	da0e      	bge.n	800323e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003220:	78fb      	ldrb	r3, [r7, #3]
 8003222:	f003 0207 	and.w	r2, r3, #7
 8003226:	4613      	mov	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	3310      	adds	r3, #16
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	4413      	add	r3, r2
 8003234:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2201      	movs	r2, #1
 800323a:	705a      	strb	r2, [r3, #1]
 800323c:	e00e      	b.n	800325c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800323e:	78fb      	ldrb	r3, [r7, #3]
 8003240:	f003 0207 	and.w	r2, r3, #7
 8003244:	4613      	mov	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	4413      	add	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003262:	78fb      	ldrb	r3, [r7, #3]
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	b2da      	uxtb	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <HAL_PCD_EP_ClrStall+0x82>
 8003278:	2302      	movs	r3, #2
 800327a:	e00e      	b.n	800329a <HAL_PCD_EP_ClrStall+0xa0>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68f9      	ldr	r1, [r7, #12]
 800328a:	4618      	mov	r0, r3
 800328c:	f005 fb16 	bl	80088bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b096      	sub	sp, #88	@ 0x58
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80032aa:	e3bb      	b.n	8003a24 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80032b4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80032b8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 80032c6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f040 8175 	bne.w	80035ba <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80032d0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80032d4:	f003 0310 	and.w	r3, r3, #16
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d14e      	bne.n	800337a <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	881b      	ldrh	r3, [r3, #0]
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80032e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032ec:	81fb      	strh	r3, [r7, #14]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	89fb      	ldrh	r3, [r7, #14]
 80032f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3310      	adds	r3, #16
 8003304:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800330e:	b29b      	uxth	r3, r3
 8003310:	461a      	mov	r2, r3
 8003312:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	4413      	add	r3, r2
 800331a:	3302      	adds	r3, #2
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6812      	ldr	r2, [r2, #0]
 8003322:	4413      	add	r3, r2
 8003324:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800332e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003330:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003332:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003334:	695a      	ldr	r2, [r3, #20]
 8003336:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	441a      	add	r2, r3
 800333c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800333e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003340:	2100      	movs	r1, #0
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7fe f827 	bl	8001396 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	7b1b      	ldrb	r3, [r3, #12]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 8368 	beq.w	8003a24 <PCD_EP_ISR_Handler+0x782>
 8003354:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	2b00      	cmp	r3, #0
 800335a:	f040 8363 	bne.w	8003a24 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	7b1b      	ldrb	r3, [r3, #12]
 8003362:	b2db      	uxtb	r3, r3
 8003364:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003368:	b2da      	uxtb	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	731a      	strb	r2, [r3, #12]
 8003378:	e354      	b.n	8003a24 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003380:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800338c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003390:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003394:	2b00      	cmp	r3, #0
 8003396:	d034      	beq.n	8003402 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	461a      	mov	r2, r3
 80033a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	4413      	add	r3, r2
 80033ac:	3306      	adds	r3, #6
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6812      	ldr	r2, [r2, #0]
 80033b4:	4413      	add	r3, r2
 80033b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80033ba:	881b      	ldrh	r3, [r3, #0]
 80033bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033c2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6818      	ldr	r0, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80033ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033d0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80033d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033d4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	f005 fb93 	bl	8008b02 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	881b      	ldrh	r3, [r3, #0]
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80033e8:	4013      	ands	r3, r2
 80033ea:	823b      	strh	r3, [r7, #16]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	8a3a      	ldrh	r2, [r7, #16]
 80033f2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80033f6:	b292      	uxth	r2, r2
 80033f8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7fd ff9e 	bl	800133c <HAL_PCD_SetupStageCallback>
 8003400:	e310      	b.n	8003a24 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003402:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8003406:	2b00      	cmp	r3, #0
 8003408:	f280 830c 	bge.w	8003a24 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	881b      	ldrh	r3, [r3, #0]
 8003412:	b29a      	uxth	r2, r3
 8003414:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003418:	4013      	ands	r3, r2
 800341a:	83fb      	strh	r3, [r7, #30]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	8bfa      	ldrh	r2, [r7, #30]
 8003422:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003426:	b292      	uxth	r2, r2
 8003428:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003432:	b29b      	uxth	r3, r3
 8003434:	461a      	mov	r2, r3
 8003436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	4413      	add	r3, r2
 800343e:	3306      	adds	r3, #6
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6812      	ldr	r2, [r2, #0]
 8003446:	4413      	add	r3, r2
 8003448:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800344c:	881b      	ldrh	r3, [r3, #0]
 800344e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003452:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003454:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d019      	beq.n	8003492 <PCD_EP_ISR_Handler+0x1f0>
 800345e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d015      	beq.n	8003492 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6818      	ldr	r0, [r3, #0]
 800346a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800346c:	6959      	ldr	r1, [r3, #20]
 800346e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003470:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003472:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003474:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003476:	b29b      	uxth	r3, r3
 8003478:	f005 fb43 	bl	8008b02 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800347c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800347e:	695a      	ldr	r2, [r3, #20]
 8003480:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	441a      	add	r2, r3
 8003486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003488:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800348a:	2100      	movs	r1, #0
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f7fd ff67 	bl	8001360 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	881b      	ldrh	r3, [r3, #0]
 8003498:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800349c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80034a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f040 82bd 	bne.w	8003a24 <PCD_EP_ISR_Handler+0x782>
 80034aa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80034ae:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80034b2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80034b6:	f000 82b5 	beq.w	8003a24 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	61bb      	str	r3, [r7, #24]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	461a      	mov	r2, r3
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	4413      	add	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80034d8:	617b      	str	r3, [r7, #20]
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	881b      	ldrh	r3, [r3, #0]
 80034de:	b29b      	uxth	r3, r3
 80034e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	801a      	strh	r2, [r3, #0]
 80034ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10a      	bne.n	8003508 <PCD_EP_ISR_Handler+0x266>
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	881b      	ldrh	r3, [r3, #0]
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003500:	b29a      	uxth	r2, r3
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	801a      	strh	r2, [r3, #0]
 8003506:	e039      	b.n	800357c <PCD_EP_ISR_Handler+0x2da>
 8003508:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	2b3e      	cmp	r3, #62	@ 0x3e
 800350e:	d818      	bhi.n	8003542 <PCD_EP_ISR_Handler+0x2a0>
 8003510:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	085b      	lsrs	r3, r3, #1
 8003516:	647b      	str	r3, [r7, #68]	@ 0x44
 8003518:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	2b00      	cmp	r3, #0
 8003522:	d002      	beq.n	800352a <PCD_EP_ISR_Handler+0x288>
 8003524:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003526:	3301      	adds	r3, #1
 8003528:	647b      	str	r3, [r7, #68]	@ 0x44
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	b29a      	uxth	r2, r3
 8003530:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003532:	b29b      	uxth	r3, r3
 8003534:	029b      	lsls	r3, r3, #10
 8003536:	b29b      	uxth	r3, r3
 8003538:	4313      	orrs	r3, r2
 800353a:	b29a      	uxth	r2, r3
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	801a      	strh	r2, [r3, #0]
 8003540:	e01c      	b.n	800357c <PCD_EP_ISR_Handler+0x2da>
 8003542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	095b      	lsrs	r3, r3, #5
 8003548:	647b      	str	r3, [r7, #68]	@ 0x44
 800354a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	f003 031f 	and.w	r3, r3, #31
 8003552:	2b00      	cmp	r3, #0
 8003554:	d102      	bne.n	800355c <PCD_EP_ISR_Handler+0x2ba>
 8003556:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003558:	3b01      	subs	r3, #1
 800355a:	647b      	str	r3, [r7, #68]	@ 0x44
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	b29a      	uxth	r2, r3
 8003562:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003564:	b29b      	uxth	r3, r3
 8003566:	029b      	lsls	r3, r3, #10
 8003568:	b29b      	uxth	r3, r3
 800356a:	4313      	orrs	r3, r2
 800356c:	b29b      	uxth	r3, r3
 800356e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003572:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003576:	b29a      	uxth	r2, r3
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	b29b      	uxth	r3, r3
 8003584:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003588:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800358c:	827b      	strh	r3, [r7, #18]
 800358e:	8a7b      	ldrh	r3, [r7, #18]
 8003590:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003594:	827b      	strh	r3, [r7, #18]
 8003596:	8a7b      	ldrh	r3, [r7, #18]
 8003598:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800359c:	827b      	strh	r3, [r7, #18]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	8a7b      	ldrh	r3, [r7, #18]
 80035a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	8013      	strh	r3, [r2, #0]
 80035b8:	e234      	b.n	8003a24 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	461a      	mov	r2, r3
 80035c0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80035ce:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f280 80fc 	bge.w	80037d0 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	461a      	mov	r2, r3
 80035de:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	881b      	ldrh	r3, [r3, #0]
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80035ee:	4013      	ands	r3, r2
 80035f0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	461a      	mov	r2, r3
 80035fa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8003606:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800360a:	b292      	uxth	r2, r2
 800360c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800360e:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8003612:	4613      	mov	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	4413      	add	r3, r2
 8003622:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003624:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003626:	7b1b      	ldrb	r3, [r3, #12]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d125      	bne.n	8003678 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003634:	b29b      	uxth	r3, r3
 8003636:	461a      	mov	r2, r3
 8003638:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	4413      	add	r3, r2
 8003640:	3306      	adds	r3, #6
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6812      	ldr	r2, [r2, #0]
 8003648:	4413      	add	r3, r2
 800364a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003654:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003658:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 8092 	beq.w	8003786 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6818      	ldr	r0, [r3, #0]
 8003666:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003668:	6959      	ldr	r1, [r3, #20]
 800366a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800366c:	88da      	ldrh	r2, [r3, #6]
 800366e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003672:	f005 fa46 	bl	8008b02 <USB_ReadPMA>
 8003676:	e086      	b.n	8003786 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003678:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800367a:	78db      	ldrb	r3, [r3, #3]
 800367c:	2b02      	cmp	r3, #2
 800367e:	d10a      	bne.n	8003696 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003680:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003684:	461a      	mov	r2, r3
 8003686:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f9d9 	bl	8003a40 <HAL_PCD_EP_DB_Receive>
 800368e:	4603      	mov	r3, r0
 8003690:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003694:	e077      	b.n	8003786 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	461a      	mov	r2, r3
 800369c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036b0:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	461a      	mov	r2, r3
 80036ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	441a      	add	r2, r3
 80036c2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80036c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036d2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	461a      	mov	r2, r3
 80036e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d024      	beq.n	800373e <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	461a      	mov	r2, r3
 8003700:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	4413      	add	r3, r2
 8003708:	3302      	adds	r3, #2
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	6812      	ldr	r2, [r2, #0]
 8003710:	4413      	add	r3, r2
 8003712:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800371c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003720:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003724:	2b00      	cmp	r3, #0
 8003726:	d02e      	beq.n	8003786 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6818      	ldr	r0, [r3, #0]
 800372c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800372e:	6959      	ldr	r1, [r3, #20]
 8003730:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003732:	891a      	ldrh	r2, [r3, #8]
 8003734:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003738:	f005 f9e3 	bl	8008b02 <USB_ReadPMA>
 800373c:	e023      	b.n	8003786 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003746:	b29b      	uxth	r3, r3
 8003748:	461a      	mov	r2, r3
 800374a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	4413      	add	r3, r2
 8003752:	3306      	adds	r3, #6
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6812      	ldr	r2, [r2, #0]
 800375a:	4413      	add	r3, r2
 800375c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003760:	881b      	ldrh	r3, [r3, #0]
 8003762:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003766:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800376a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800376e:	2b00      	cmp	r3, #0
 8003770:	d009      	beq.n	8003786 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6818      	ldr	r0, [r3, #0]
 8003776:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003778:	6959      	ldr	r1, [r3, #20]
 800377a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800377c:	895a      	ldrh	r2, [r3, #10]
 800377e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003782:	f005 f9be 	bl	8008b02 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003786:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003788:	69da      	ldr	r2, [r3, #28]
 800378a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800378e:	441a      	add	r2, r3
 8003790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003792:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003796:	695a      	ldr	r2, [r3, #20]
 8003798:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800379c:	441a      	add	r2, r3
 800379e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037a0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80037a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d005      	beq.n	80037b6 <PCD_EP_ISR_Handler+0x514>
 80037aa:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80037ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d206      	bcs.n	80037c4 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80037b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	4619      	mov	r1, r3
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7fd fdcf 	bl	8001360 <HAL_PCD_DataOutStageCallback>
 80037c2:	e005      	b.n	80037d0 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037ca:	4618      	mov	r0, r3
 80037cc:	f003 fc73 	bl	80070b6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80037d0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80037d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 8123 	beq.w	8003a24 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80037de:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80037e2:	4613      	mov	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4413      	add	r3, r2
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	3310      	adds	r3, #16
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	4413      	add	r3, r2
 80037f0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	461a      	mov	r2, r3
 80037f8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	4413      	add	r3, r2
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	b29b      	uxth	r3, r3
 8003804:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003808:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800380c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	461a      	mov	r2, r3
 8003816:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	441a      	add	r2, r3
 800381e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003822:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003826:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800382a:	b29b      	uxth	r3, r3
 800382c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800382e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003830:	78db      	ldrb	r3, [r3, #3]
 8003832:	2b01      	cmp	r3, #1
 8003834:	f040 80a2 	bne.w	800397c <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8003838:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800383a:	2200      	movs	r2, #0
 800383c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800383e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003840:	7b1b      	ldrb	r3, [r3, #12]
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 8093 	beq.w	800396e <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003848:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800384c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003850:	2b00      	cmp	r3, #0
 8003852:	d046      	beq.n	80038e2 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003854:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003856:	785b      	ldrb	r3, [r3, #1]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d126      	bne.n	80038aa <PCD_EP_ISR_Handler+0x608>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	627b      	str	r3, [r7, #36]	@ 0x24
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800386a:	b29b      	uxth	r3, r3
 800386c:	461a      	mov	r2, r3
 800386e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003870:	4413      	add	r3, r2
 8003872:	627b      	str	r3, [r7, #36]	@ 0x24
 8003874:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	011a      	lsls	r2, r3, #4
 800387a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387c:	4413      	add	r3, r2
 800387e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003882:	623b      	str	r3, [r7, #32]
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	881b      	ldrh	r3, [r3, #0]
 8003888:	b29b      	uxth	r3, r3
 800388a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800388e:	b29a      	uxth	r2, r3
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	801a      	strh	r2, [r3, #0]
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	881b      	ldrh	r3, [r3, #0]
 8003898:	b29b      	uxth	r3, r3
 800389a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800389e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	801a      	strh	r2, [r3, #0]
 80038a8:	e061      	b.n	800396e <PCD_EP_ISR_Handler+0x6cc>
 80038aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ac:	785b      	ldrb	r3, [r3, #1]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d15d      	bne.n	800396e <PCD_EP_ISR_Handler+0x6cc>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	461a      	mov	r2, r3
 80038c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038c6:	4413      	add	r3, r2
 80038c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	011a      	lsls	r2, r3, #4
 80038d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038d2:	4413      	add	r3, r2
 80038d4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80038d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038dc:	2200      	movs	r2, #0
 80038de:	801a      	strh	r2, [r3, #0]
 80038e0:	e045      	b.n	800396e <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ea:	785b      	ldrb	r3, [r3, #1]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d126      	bne.n	800393e <PCD_EP_ISR_Handler+0x69c>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038fe:	b29b      	uxth	r3, r3
 8003900:	461a      	mov	r2, r3
 8003902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003904:	4413      	add	r3, r2
 8003906:	637b      	str	r3, [r7, #52]	@ 0x34
 8003908:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	011a      	lsls	r2, r3, #4
 800390e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003910:	4413      	add	r3, r2
 8003912:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003916:	633b      	str	r3, [r7, #48]	@ 0x30
 8003918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	b29b      	uxth	r3, r3
 800391e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003922:	b29a      	uxth	r2, r3
 8003924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003926:	801a      	strh	r2, [r3, #0]
 8003928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	b29b      	uxth	r3, r3
 800392e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003932:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003936:	b29a      	uxth	r2, r3
 8003938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800393a:	801a      	strh	r2, [r3, #0]
 800393c:	e017      	b.n	800396e <PCD_EP_ISR_Handler+0x6cc>
 800393e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003940:	785b      	ldrb	r3, [r3, #1]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d113      	bne.n	800396e <PCD_EP_ISR_Handler+0x6cc>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800394e:	b29b      	uxth	r3, r3
 8003950:	461a      	mov	r2, r3
 8003952:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003954:	4413      	add	r3, r2
 8003956:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003958:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	011a      	lsls	r2, r3, #4
 800395e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003960:	4413      	add	r3, r2
 8003962:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003966:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800396a:	2200      	movs	r2, #0
 800396c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800396e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	4619      	mov	r1, r3
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7fd fd0e 	bl	8001396 <HAL_PCD_DataInStageCallback>
 800397a:	e053      	b.n	8003a24 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800397c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003984:	2b00      	cmp	r3, #0
 8003986:	d146      	bne.n	8003a16 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003990:	b29b      	uxth	r3, r3
 8003992:	461a      	mov	r2, r3
 8003994:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	4413      	add	r3, r2
 800399c:	3302      	adds	r3, #2
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	6812      	ldr	r2, [r2, #0]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80039aa:	881b      	ldrh	r3, [r3, #0]
 80039ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039b0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80039b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039b6:	699a      	ldr	r2, [r3, #24]
 80039b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80039bc:	429a      	cmp	r2, r3
 80039be:	d907      	bls.n	80039d0 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80039c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039c2:	699a      	ldr	r2, [r3, #24]
 80039c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80039c8:	1ad2      	subs	r2, r2, r3
 80039ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039cc:	619a      	str	r2, [r3, #24]
 80039ce:	e002      	b.n	80039d6 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80039d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039d2:	2200      	movs	r2, #0
 80039d4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80039d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d106      	bne.n	80039ec <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	4619      	mov	r1, r3
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f7fd fcd6 	bl	8001396 <HAL_PCD_DataInStageCallback>
 80039ea:	e01b      	b.n	8003a24 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80039ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039ee:	695a      	ldr	r2, [r3, #20]
 80039f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80039f4:	441a      	add	r2, r3
 80039f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039f8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80039fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039fc:	69da      	ldr	r2, [r3, #28]
 80039fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003a02:	441a      	add	r2, r3
 8003a04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a06:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f003 fb51 	bl	80070b6 <USB_EPStartXfer>
 8003a14:	e006      	b.n	8003a24 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003a16:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f91b 	bl	8003c5a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	b21b      	sxth	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f6ff ac3b 	blt.w	80032ac <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3758      	adds	r7, #88	@ 0x58
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b088      	sub	sp, #32
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003a4e:	88fb      	ldrh	r3, [r7, #6]
 8003a50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d07e      	beq.n	8003b56 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	461a      	mov	r2, r3
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	4413      	add	r3, r2
 8003a6c:	3302      	adds	r3, #2
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	6812      	ldr	r2, [r2, #0]
 8003a74:	4413      	add	r3, r2
 8003a76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003a7a:	881b      	ldrh	r3, [r3, #0]
 8003a7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a80:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	699a      	ldr	r2, [r3, #24]
 8003a86:	8b7b      	ldrh	r3, [r7, #26]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d306      	bcc.n	8003a9a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	699a      	ldr	r2, [r3, #24]
 8003a90:	8b7b      	ldrh	r3, [r7, #26]
 8003a92:	1ad2      	subs	r2, r2, r3
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	619a      	str	r2, [r3, #24]
 8003a98:	e002      	b.n	8003aa0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d123      	bne.n	8003af0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	461a      	mov	r2, r3
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	881b      	ldrh	r3, [r3, #0]
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003abe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ac2:	833b      	strh	r3, [r7, #24]
 8003ac4:	8b3b      	ldrh	r3, [r7, #24]
 8003ac6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003aca:	833b      	strh	r3, [r7, #24]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	441a      	add	r2, r3
 8003ada:	8b3b      	ldrh	r3, [r7, #24]
 8003adc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ae0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ae4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ae8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003af0:	88fb      	ldrh	r3, [r7, #6]
 8003af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d01f      	beq.n	8003b3a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	461a      	mov	r2, r3
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4413      	add	r3, r2
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b14:	82fb      	strh	r3, [r7, #22]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	441a      	add	r2, r3
 8003b24:	8afb      	ldrh	r3, [r7, #22]
 8003b26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b32:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003b3a:	8b7b      	ldrh	r3, [r7, #26]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 8087 	beq.w	8003c50 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6818      	ldr	r0, [r3, #0]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	6959      	ldr	r1, [r3, #20]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	891a      	ldrh	r2, [r3, #8]
 8003b4e:	8b7b      	ldrh	r3, [r7, #26]
 8003b50:	f004 ffd7 	bl	8008b02 <USB_ReadPMA>
 8003b54:	e07c      	b.n	8003c50 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	461a      	mov	r2, r3
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	4413      	add	r3, r2
 8003b6a:	3306      	adds	r3, #6
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	6812      	ldr	r2, [r2, #0]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b78:	881b      	ldrh	r3, [r3, #0]
 8003b7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b7e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	699a      	ldr	r2, [r3, #24]
 8003b84:	8b7b      	ldrh	r3, [r7, #26]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d306      	bcc.n	8003b98 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	699a      	ldr	r2, [r3, #24]
 8003b8e:	8b7b      	ldrh	r3, [r7, #26]
 8003b90:	1ad2      	subs	r2, r2, r3
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	619a      	str	r2, [r3, #24]
 8003b96:	e002      	b.n	8003b9e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d123      	bne.n	8003bee <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4413      	add	r3, r2
 8003bb4:	881b      	ldrh	r3, [r3, #0]
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003bbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bc0:	83fb      	strh	r3, [r7, #30]
 8003bc2:	8bfb      	ldrh	r3, [r7, #30]
 8003bc4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003bc8:	83fb      	strh	r3, [r7, #30]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	441a      	add	r2, r3
 8003bd8:	8bfb      	ldrh	r3, [r7, #30]
 8003bda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003be2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003be6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003bee:	88fb      	ldrh	r3, [r7, #6]
 8003bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d11f      	bne.n	8003c38 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c12:	83bb      	strh	r3, [r7, #28]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	441a      	add	r2, r3
 8003c22:	8bbb      	ldrh	r3, [r7, #28]
 8003c24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c30:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003c38:	8b7b      	ldrh	r3, [r7, #26]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d008      	beq.n	8003c50 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6818      	ldr	r0, [r3, #0]
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	6959      	ldr	r1, [r3, #20]
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	895a      	ldrh	r2, [r3, #10]
 8003c4a:	8b7b      	ldrh	r3, [r7, #26]
 8003c4c:	f004 ff59 	bl	8008b02 <USB_ReadPMA>
    }
  }

  return count;
 8003c50:	8b7b      	ldrh	r3, [r7, #26]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3720      	adds	r7, #32
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b0a4      	sub	sp, #144	@ 0x90
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	60f8      	str	r0, [r7, #12]
 8003c62:	60b9      	str	r1, [r7, #8]
 8003c64:	4613      	mov	r3, r2
 8003c66:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c68:	88fb      	ldrh	r3, [r7, #6]
 8003c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 81dd 	beq.w	800402e <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	461a      	mov	r2, r3
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	4413      	add	r3, r2
 8003c88:	3302      	adds	r3, #2
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	6812      	ldr	r2, [r2, #0]
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c96:	881b      	ldrh	r3, [r3, #0]
 8003c98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c9c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	699a      	ldr	r2, [r3, #24]
 8003ca4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d907      	bls.n	8003cbc <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	699a      	ldr	r2, [r3, #24]
 8003cb0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003cb4:	1ad2      	subs	r2, r2, r3
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	619a      	str	r2, [r3, #24]
 8003cba:	e002      	b.n	8003cc2 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f040 80b9 	bne.w	8003e3e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	785b      	ldrb	r3, [r3, #1]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d126      	bne.n	8003d22 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce8:	4413      	add	r3, r2
 8003cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	011a      	lsls	r2, r3, #4
 8003cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cfe:	881b      	ldrh	r3, [r3, #0]
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d0a:	801a      	strh	r2, [r3, #0]
 8003d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d0e:	881b      	ldrh	r3, [r3, #0]
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d1e:	801a      	strh	r2, [r3, #0]
 8003d20:	e01a      	b.n	8003d58 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	785b      	ldrb	r3, [r3, #1]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d116      	bne.n	8003d58 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d3e:	4413      	add	r3, r2
 8003d40:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	011a      	lsls	r2, r3, #4
 8003d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003d50:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d54:	2200      	movs	r2, #0
 8003d56:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	785b      	ldrb	r3, [r3, #1]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d126      	bne.n	8003db4 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	61fb      	str	r3, [r7, #28]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	461a      	mov	r2, r3
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	61fb      	str	r3, [r7, #28]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	011a      	lsls	r2, r3, #4
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	4413      	add	r3, r2
 8003d88:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003d8c:	61bb      	str	r3, [r7, #24]
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	801a      	strh	r2, [r3, #0]
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003da8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	801a      	strh	r2, [r3, #0]
 8003db2:	e017      	b.n	8003de4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	785b      	ldrb	r3, [r3, #1]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d113      	bne.n	8003de4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dca:	4413      	add	r3, r2
 8003dcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	011a      	lsls	r2, r3, #4
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003ddc:	623b      	str	r3, [r7, #32]
 8003dde:	6a3b      	ldr	r3, [r7, #32]
 8003de0:	2200      	movs	r2, #0
 8003de2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	4619      	mov	r1, r3
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f7fd fad3 	bl	8001396 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003df0:	88fb      	ldrh	r3, [r7, #6]
 8003df2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 82fc 	beq.w	80043f4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	461a      	mov	r2, r3
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4413      	add	r3, r2
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e16:	82fb      	strh	r3, [r7, #22]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	441a      	add	r2, r3
 8003e26:	8afb      	ldrh	r3, [r7, #22]
 8003e28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	8013      	strh	r3, [r2, #0]
 8003e3c:	e2da      	b.n	80043f4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e3e:	88fb      	ldrh	r3, [r7, #6]
 8003e40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d021      	beq.n	8003e8c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e62:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	441a      	add	r2, r3
 8003e74:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003e78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	f040 82ae 	bne.w	80043f4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	695a      	ldr	r2, [r3, #20]
 8003e9c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003ea0:	441a      	add	r2, r3
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	69da      	ldr	r2, [r3, #28]
 8003eaa:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003eae:	441a      	add	r2, r3
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	6a1a      	ldr	r2, [r3, #32]
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d30b      	bcc.n	8003ed8 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	6a1a      	ldr	r2, [r3, #32]
 8003ecc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ed0:	1ad2      	subs	r2, r2, r3
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	621a      	str	r2, [r3, #32]
 8003ed6:	e017      	b.n	8003f08 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d108      	bne.n	8003ef2 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003ee0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003ee4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003ef0:	e00a      	b.n	8003f08 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	2200      	movs	r2, #0
 8003f06:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	785b      	ldrb	r3, [r3, #1]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d165      	bne.n	8003fdc <HAL_PCD_EP_DB_Transmit+0x382>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	461a      	mov	r2, r3
 8003f22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f24:	4413      	add	r3, r2
 8003f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	011a      	lsls	r2, r3, #4
 8003f2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f30:	4413      	add	r3, r2
 8003f32:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003f36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f46:	801a      	strh	r2, [r3, #0]
 8003f48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10a      	bne.n	8003f66 <HAL_PCD_EP_DB_Transmit+0x30c>
 8003f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f52:	881b      	ldrh	r3, [r3, #0]
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f62:	801a      	strh	r2, [r3, #0]
 8003f64:	e057      	b.n	8004016 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003f66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f6a:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f6c:	d818      	bhi.n	8003fa0 <HAL_PCD_EP_DB_Transmit+0x346>
 8003f6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f72:	085b      	lsrs	r3, r3, #1
 8003f74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d002      	beq.n	8003f88 <HAL_PCD_EP_DB_Transmit+0x32e>
 8003f82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f84:	3301      	adds	r3, #1
 8003f86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f8a:	881b      	ldrh	r3, [r3, #0]
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	029b      	lsls	r3, r3, #10
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	4313      	orrs	r3, r2
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f9c:	801a      	strh	r2, [r3, #0]
 8003f9e:	e03a      	b.n	8004016 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003fa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fa4:	095b      	lsrs	r3, r3, #5
 8003fa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fac:	f003 031f 	and.w	r3, r3, #31
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d102      	bne.n	8003fba <HAL_PCD_EP_DB_Transmit+0x360>
 8003fb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fbc:	881b      	ldrh	r3, [r3, #0]
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	029b      	lsls	r3, r3, #10
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fd8:	801a      	strh	r2, [r3, #0]
 8003fda:	e01c      	b.n	8004016 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	785b      	ldrb	r3, [r3, #1]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d118      	bne.n	8004016 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ff8:	4413      	add	r3, r2
 8003ffa:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	011a      	lsls	r2, r3, #4
 8004002:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004004:	4413      	add	r3, r2
 8004006:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800400a:	643b      	str	r3, [r7, #64]	@ 0x40
 800400c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004010:	b29a      	uxth	r2, r3
 8004012:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004014:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6818      	ldr	r0, [r3, #0]
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	6959      	ldr	r1, [r3, #20]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	891a      	ldrh	r2, [r3, #8]
 8004022:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004026:	b29b      	uxth	r3, r3
 8004028:	f004 fd25 	bl	8008a76 <USB_WritePMA>
 800402c:	e1e2      	b.n	80043f4 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004036:	b29b      	uxth	r3, r3
 8004038:	461a      	mov	r2, r3
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	4413      	add	r3, r2
 8004042:	3306      	adds	r3, #6
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	6812      	ldr	r2, [r2, #0]
 800404a:	4413      	add	r3, r2
 800404c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004050:	881b      	ldrh	r3, [r3, #0]
 8004052:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004056:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	699a      	ldr	r2, [r3, #24]
 800405e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004062:	429a      	cmp	r2, r3
 8004064:	d307      	bcc.n	8004076 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	699a      	ldr	r2, [r3, #24]
 800406a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800406e:	1ad2      	subs	r2, r2, r3
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	619a      	str	r2, [r3, #24]
 8004074:	e002      	b.n	800407c <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2200      	movs	r2, #0
 800407a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	2b00      	cmp	r3, #0
 8004082:	f040 80c0 	bne.w	8004206 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	785b      	ldrb	r3, [r3, #1]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d126      	bne.n	80040dc <HAL_PCD_EP_DB_Transmit+0x482>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800409c:	b29b      	uxth	r3, r3
 800409e:	461a      	mov	r2, r3
 80040a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80040a2:	4413      	add	r3, r2
 80040a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	011a      	lsls	r2, r3, #4
 80040ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80040ae:	4413      	add	r3, r2
 80040b0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80040b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040c4:	801a      	strh	r2, [r3, #0]
 80040c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040d8:	801a      	strh	r2, [r3, #0]
 80040da:	e01a      	b.n	8004112 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	785b      	ldrb	r3, [r3, #1]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d116      	bne.n	8004112 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	461a      	mov	r2, r3
 80040f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040f8:	4413      	add	r3, r2
 80040fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	011a      	lsls	r2, r3, #4
 8004102:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004104:	4413      	add	r3, r2
 8004106:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800410a:	663b      	str	r3, [r7, #96]	@ 0x60
 800410c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800410e:	2200      	movs	r2, #0
 8004110:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	677b      	str	r3, [r7, #116]	@ 0x74
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	785b      	ldrb	r3, [r3, #1]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d12b      	bne.n	8004178 <HAL_PCD_EP_DB_Transmit+0x51e>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800412e:	b29b      	uxth	r3, r3
 8004130:	461a      	mov	r2, r3
 8004132:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004134:	4413      	add	r3, r2
 8004136:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	011a      	lsls	r2, r3, #4
 800413e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004140:	4413      	add	r3, r2
 8004142:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004146:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800414a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800414e:	881b      	ldrh	r3, [r3, #0]
 8004150:	b29b      	uxth	r3, r3
 8004152:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004156:	b29a      	uxth	r2, r3
 8004158:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800415c:	801a      	strh	r2, [r3, #0]
 800415e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	b29b      	uxth	r3, r3
 8004166:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800416a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800416e:	b29a      	uxth	r2, r3
 8004170:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004174:	801a      	strh	r2, [r3, #0]
 8004176:	e017      	b.n	80041a8 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	785b      	ldrb	r3, [r3, #1]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d113      	bne.n	80041a8 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004188:	b29b      	uxth	r3, r3
 800418a:	461a      	mov	r2, r3
 800418c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800418e:	4413      	add	r3, r2
 8004190:	677b      	str	r3, [r7, #116]	@ 0x74
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	011a      	lsls	r2, r3, #4
 8004198:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800419a:	4413      	add	r3, r2
 800419c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80041a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80041a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041a4:	2200      	movs	r2, #0
 80041a6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	4619      	mov	r1, r3
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f7fd f8f1 	bl	8001396 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80041b4:	88fb      	ldrh	r3, [r7, #6]
 80041b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f040 811a 	bne.w	80043f4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	461a      	mov	r2, r3
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041da:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	461a      	mov	r2, r3
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	441a      	add	r2, r3
 80041ec:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80041f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004200:	b29b      	uxth	r3, r3
 8004202:	8013      	strh	r3, [r2, #0]
 8004204:	e0f6      	b.n	80043f4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004206:	88fb      	ldrh	r3, [r7, #6]
 8004208:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d121      	bne.n	8004254 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	461a      	mov	r2, r3
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	881b      	ldrh	r3, [r3, #0]
 8004220:	b29b      	uxth	r3, r3
 8004222:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004226:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800422a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	461a      	mov	r2, r3
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	441a      	add	r2, r3
 800423c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004240:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004244:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004248:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800424c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004250:	b29b      	uxth	r3, r3
 8004252:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800425a:	2b01      	cmp	r3, #1
 800425c:	f040 80ca 	bne.w	80043f4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	695a      	ldr	r2, [r3, #20]
 8004264:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004268:	441a      	add	r2, r3
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	69da      	ldr	r2, [r3, #28]
 8004272:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004276:	441a      	add	r2, r3
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	6a1a      	ldr	r2, [r3, #32]
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	429a      	cmp	r2, r3
 8004286:	d30b      	bcc.n	80042a0 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	6a1a      	ldr	r2, [r3, #32]
 8004294:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004298:	1ad2      	subs	r2, r2, r3
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	621a      	str	r2, [r3, #32]
 800429e:	e017      	b.n	80042d0 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d108      	bne.n	80042ba <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80042a8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80042ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80042b8:	e00a      	b.n	80042d0 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2200      	movs	r2, #0
 80042c6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	785b      	ldrb	r3, [r3, #1]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d165      	bne.n	80043aa <HAL_PCD_EP_DB_Transmit+0x750>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	461a      	mov	r2, r3
 80042f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042f2:	4413      	add	r3, r2
 80042f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	011a      	lsls	r2, r3, #4
 80042fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042fe:	4413      	add	r3, r2
 8004300:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004304:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004306:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004308:	881b      	ldrh	r3, [r3, #0]
 800430a:	b29b      	uxth	r3, r3
 800430c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004310:	b29a      	uxth	r2, r3
 8004312:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004314:	801a      	strh	r2, [r3, #0]
 8004316:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10a      	bne.n	8004334 <HAL_PCD_EP_DB_Transmit+0x6da>
 800431e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	b29b      	uxth	r3, r3
 8004324:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004328:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800432c:	b29a      	uxth	r2, r3
 800432e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004330:	801a      	strh	r2, [r3, #0]
 8004332:	e054      	b.n	80043de <HAL_PCD_EP_DB_Transmit+0x784>
 8004334:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004338:	2b3e      	cmp	r3, #62	@ 0x3e
 800433a:	d818      	bhi.n	800436e <HAL_PCD_EP_DB_Transmit+0x714>
 800433c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004340:	085b      	lsrs	r3, r3, #1
 8004342:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004344:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	2b00      	cmp	r3, #0
 800434e:	d002      	beq.n	8004356 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8004350:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004352:	3301      	adds	r3, #1
 8004354:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004356:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004358:	881b      	ldrh	r3, [r3, #0]
 800435a:	b29a      	uxth	r2, r3
 800435c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800435e:	b29b      	uxth	r3, r3
 8004360:	029b      	lsls	r3, r3, #10
 8004362:	b29b      	uxth	r3, r3
 8004364:	4313      	orrs	r3, r2
 8004366:	b29a      	uxth	r2, r3
 8004368:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800436a:	801a      	strh	r2, [r3, #0]
 800436c:	e037      	b.n	80043de <HAL_PCD_EP_DB_Transmit+0x784>
 800436e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004372:	095b      	lsrs	r3, r3, #5
 8004374:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004376:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800437a:	f003 031f 	and.w	r3, r3, #31
 800437e:	2b00      	cmp	r3, #0
 8004380:	d102      	bne.n	8004388 <HAL_PCD_EP_DB_Transmit+0x72e>
 8004382:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004384:	3b01      	subs	r3, #1
 8004386:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004388:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800438a:	881b      	ldrh	r3, [r3, #0]
 800438c:	b29a      	uxth	r2, r3
 800438e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004390:	b29b      	uxth	r3, r3
 8004392:	029b      	lsls	r3, r3, #10
 8004394:	b29b      	uxth	r3, r3
 8004396:	4313      	orrs	r3, r2
 8004398:	b29b      	uxth	r3, r3
 800439a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800439e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043a6:	801a      	strh	r2, [r3, #0]
 80043a8:	e019      	b.n	80043de <HAL_PCD_EP_DB_Transmit+0x784>
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	785b      	ldrb	r3, [r3, #1]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d115      	bne.n	80043de <HAL_PCD_EP_DB_Transmit+0x784>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	461a      	mov	r2, r3
 80043be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043c0:	4413      	add	r3, r2
 80043c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	011a      	lsls	r2, r3, #4
 80043ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043cc:	4413      	add	r3, r2
 80043ce:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80043d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80043d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043d8:	b29a      	uxth	r2, r3
 80043da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043dc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6818      	ldr	r0, [r3, #0]
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	6959      	ldr	r1, [r3, #20]
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	895a      	ldrh	r2, [r3, #10]
 80043ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	f004 fb41 	bl	8008a76 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	461a      	mov	r2, r3
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	881b      	ldrh	r3, [r3, #0]
 8004404:	b29b      	uxth	r3, r3
 8004406:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800440a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800440e:	82bb      	strh	r3, [r7, #20]
 8004410:	8abb      	ldrh	r3, [r7, #20]
 8004412:	f083 0310 	eor.w	r3, r3, #16
 8004416:	82bb      	strh	r3, [r7, #20]
 8004418:	8abb      	ldrh	r3, [r7, #20]
 800441a:	f083 0320 	eor.w	r3, r3, #32
 800441e:	82bb      	strh	r3, [r7, #20]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	461a      	mov	r2, r3
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	441a      	add	r2, r3
 800442e:	8abb      	ldrh	r3, [r7, #20]
 8004430:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004434:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004438:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800443c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004440:	b29b      	uxth	r3, r3
 8004442:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3790      	adds	r7, #144	@ 0x90
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800444e:	b480      	push	{r7}
 8004450:	b087      	sub	sp, #28
 8004452:	af00      	add	r7, sp, #0
 8004454:	60f8      	str	r0, [r7, #12]
 8004456:	607b      	str	r3, [r7, #4]
 8004458:	460b      	mov	r3, r1
 800445a:	817b      	strh	r3, [r7, #10]
 800445c:	4613      	mov	r3, r2
 800445e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004460:	897b      	ldrh	r3, [r7, #10]
 8004462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004466:	b29b      	uxth	r3, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00b      	beq.n	8004484 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800446c:	897b      	ldrh	r3, [r7, #10]
 800446e:	f003 0207 	and.w	r2, r3, #7
 8004472:	4613      	mov	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	00db      	lsls	r3, r3, #3
 800447a:	3310      	adds	r3, #16
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	4413      	add	r3, r2
 8004480:	617b      	str	r3, [r7, #20]
 8004482:	e009      	b.n	8004498 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004484:	897a      	ldrh	r2, [r7, #10]
 8004486:	4613      	mov	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	4413      	add	r3, r2
 8004496:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004498:	893b      	ldrh	r3, [r7, #8]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d107      	bne.n	80044ae <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2200      	movs	r2, #0
 80044a2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	80da      	strh	r2, [r3, #6]
 80044ac:	e00b      	b.n	80044c6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	2201      	movs	r2, #1
 80044b2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	0c1b      	lsrs	r3, r3, #16
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	371c      	adds	r7, #28
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80044da:	af00      	add	r7, sp, #0
 80044dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044e4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d102      	bne.n	80044fa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	f001 b823 	b.w	8005540 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b00      	cmp	r3, #0
 800450c:	f000 817d 	beq.w	800480a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004510:	4bbc      	ldr	r3, [pc, #752]	@ (8004804 <HAL_RCC_OscConfig+0x330>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f003 030c 	and.w	r3, r3, #12
 8004518:	2b04      	cmp	r3, #4
 800451a:	d00c      	beq.n	8004536 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800451c:	4bb9      	ldr	r3, [pc, #740]	@ (8004804 <HAL_RCC_OscConfig+0x330>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f003 030c 	and.w	r3, r3, #12
 8004524:	2b08      	cmp	r3, #8
 8004526:	d15c      	bne.n	80045e2 <HAL_RCC_OscConfig+0x10e>
 8004528:	4bb6      	ldr	r3, [pc, #728]	@ (8004804 <HAL_RCC_OscConfig+0x330>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004534:	d155      	bne.n	80045e2 <HAL_RCC_OscConfig+0x10e>
 8004536:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800453a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8004542:	fa93 f3a3 	rbit	r3, r3
 8004546:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800454a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800454e:	fab3 f383 	clz	r3, r3
 8004552:	b2db      	uxtb	r3, r3
 8004554:	095b      	lsrs	r3, r3, #5
 8004556:	b2db      	uxtb	r3, r3
 8004558:	f043 0301 	orr.w	r3, r3, #1
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b01      	cmp	r3, #1
 8004560:	d102      	bne.n	8004568 <HAL_RCC_OscConfig+0x94>
 8004562:	4ba8      	ldr	r3, [pc, #672]	@ (8004804 <HAL_RCC_OscConfig+0x330>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	e015      	b.n	8004594 <HAL_RCC_OscConfig+0xc0>
 8004568:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800456c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004570:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8004574:	fa93 f3a3 	rbit	r3, r3
 8004578:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800457c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004580:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8004584:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8004588:	fa93 f3a3 	rbit	r3, r3
 800458c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8004590:	4b9c      	ldr	r3, [pc, #624]	@ (8004804 <HAL_RCC_OscConfig+0x330>)
 8004592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004594:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004598:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800459c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80045a0:	fa92 f2a2 	rbit	r2, r2
 80045a4:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80045a8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80045ac:	fab2 f282 	clz	r2, r2
 80045b0:	b2d2      	uxtb	r2, r2
 80045b2:	f042 0220 	orr.w	r2, r2, #32
 80045b6:	b2d2      	uxtb	r2, r2
 80045b8:	f002 021f 	and.w	r2, r2, #31
 80045bc:	2101      	movs	r1, #1
 80045be:	fa01 f202 	lsl.w	r2, r1, r2
 80045c2:	4013      	ands	r3, r2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 811f 	beq.w	8004808 <HAL_RCC_OscConfig+0x334>
 80045ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f040 8116 	bne.w	8004808 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	f000 bfaf 	b.w	8005540 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045f2:	d106      	bne.n	8004602 <HAL_RCC_OscConfig+0x12e>
 80045f4:	4b83      	ldr	r3, [pc, #524]	@ (8004804 <HAL_RCC_OscConfig+0x330>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a82      	ldr	r2, [pc, #520]	@ (8004804 <HAL_RCC_OscConfig+0x330>)
 80045fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045fe:	6013      	str	r3, [r2, #0]
 8004600:	e036      	b.n	8004670 <HAL_RCC_OscConfig+0x19c>
 8004602:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004606:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10c      	bne.n	800462c <HAL_RCC_OscConfig+0x158>
 8004612:	4b7c      	ldr	r3, [pc, #496]	@ (8004804 <HAL_RCC_OscConfig+0x330>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a7b      	ldr	r2, [pc, #492]	@ (8004804 <HAL_RCC_OscConfig+0x330>)
 8004618:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800461c:	6013      	str	r3, [r2, #0]
 800461e:	4b79      	ldr	r3, [pc, #484]	@ (8004804 <HAL_RCC_OscConfig+0x330>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a78      	ldr	r2, [pc, #480]	@ (8004804 <HAL_RCC_OscConfig+0x330>)
 8004624:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004628:	6013      	str	r3, [r2, #0]
 800462a:	e021      	b.n	8004670 <HAL_RCC_OscConfig+0x19c>
 800462c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004630:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800463c:	d10c      	bne.n	8004658 <HAL_RCC_OscConfig+0x184>
 800463e:	4b71      	ldr	r3, [pc, #452]	@ (8004804 <HAL_RCC_OscConfig+0x330>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a70      	ldr	r2, [pc, #448]	@ (8004804 <HAL_RCC_OscConfig+0x330>)
 8004644:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004648:	6013      	str	r3, [r2, #0]
 800464a:	4b6e      	ldr	r3, [pc, #440]	@ (8004804 <HAL_RCC_OscConfig+0x330>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a6d      	ldr	r2, [pc, #436]	@ (8004804 <HAL_RCC_OscConfig+0x330>)
 8004650:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004654:	6013      	str	r3, [r2, #0]
 8004656:	e00b      	b.n	8004670 <HAL_RCC_OscConfig+0x19c>
 8004658:	4b6a      	ldr	r3, [pc, #424]	@ (8004804 <HAL_RCC_OscConfig+0x330>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a69      	ldr	r2, [pc, #420]	@ (8004804 <HAL_RCC_OscConfig+0x330>)
 800465e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004662:	6013      	str	r3, [r2, #0]
 8004664:	4b67      	ldr	r3, [pc, #412]	@ (8004804 <HAL_RCC_OscConfig+0x330>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a66      	ldr	r2, [pc, #408]	@ (8004804 <HAL_RCC_OscConfig+0x330>)
 800466a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800466e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004670:	4b64      	ldr	r3, [pc, #400]	@ (8004804 <HAL_RCC_OscConfig+0x330>)
 8004672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004674:	f023 020f 	bic.w	r2, r3, #15
 8004678:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800467c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	495f      	ldr	r1, [pc, #380]	@ (8004804 <HAL_RCC_OscConfig+0x330>)
 8004686:	4313      	orrs	r3, r2
 8004688:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800468a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800468e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d059      	beq.n	800474e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469a:	f7fd f943 	bl	8001924 <HAL_GetTick>
 800469e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046a2:	e00a      	b.n	80046ba <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046a4:	f7fd f93e 	bl	8001924 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b64      	cmp	r3, #100	@ 0x64
 80046b2:	d902      	bls.n	80046ba <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	f000 bf43 	b.w	8005540 <HAL_RCC_OscConfig+0x106c>
 80046ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80046be:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80046c6:	fa93 f3a3 	rbit	r3, r3
 80046ca:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80046ce:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046d2:	fab3 f383 	clz	r3, r3
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	095b      	lsrs	r3, r3, #5
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	f043 0301 	orr.w	r3, r3, #1
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d102      	bne.n	80046ec <HAL_RCC_OscConfig+0x218>
 80046e6:	4b47      	ldr	r3, [pc, #284]	@ (8004804 <HAL_RCC_OscConfig+0x330>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	e015      	b.n	8004718 <HAL_RCC_OscConfig+0x244>
 80046ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80046f0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80046f8:	fa93 f3a3 	rbit	r3, r3
 80046fc:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8004700:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004704:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8004708:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800470c:	fa93 f3a3 	rbit	r3, r3
 8004710:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8004714:	4b3b      	ldr	r3, [pc, #236]	@ (8004804 <HAL_RCC_OscConfig+0x330>)
 8004716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004718:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800471c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8004720:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8004724:	fa92 f2a2 	rbit	r2, r2
 8004728:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 800472c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8004730:	fab2 f282 	clz	r2, r2
 8004734:	b2d2      	uxtb	r2, r2
 8004736:	f042 0220 	orr.w	r2, r2, #32
 800473a:	b2d2      	uxtb	r2, r2
 800473c:	f002 021f 	and.w	r2, r2, #31
 8004740:	2101      	movs	r1, #1
 8004742:	fa01 f202 	lsl.w	r2, r1, r2
 8004746:	4013      	ands	r3, r2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d0ab      	beq.n	80046a4 <HAL_RCC_OscConfig+0x1d0>
 800474c:	e05d      	b.n	800480a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800474e:	f7fd f8e9 	bl	8001924 <HAL_GetTick>
 8004752:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004756:	e00a      	b.n	800476e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004758:	f7fd f8e4 	bl	8001924 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	2b64      	cmp	r3, #100	@ 0x64
 8004766:	d902      	bls.n	800476e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	f000 bee9 	b.w	8005540 <HAL_RCC_OscConfig+0x106c>
 800476e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004772:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004776:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800477a:	fa93 f3a3 	rbit	r3, r3
 800477e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8004782:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004786:	fab3 f383 	clz	r3, r3
 800478a:	b2db      	uxtb	r3, r3
 800478c:	095b      	lsrs	r3, r3, #5
 800478e:	b2db      	uxtb	r3, r3
 8004790:	f043 0301 	orr.w	r3, r3, #1
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b01      	cmp	r3, #1
 8004798:	d102      	bne.n	80047a0 <HAL_RCC_OscConfig+0x2cc>
 800479a:	4b1a      	ldr	r3, [pc, #104]	@ (8004804 <HAL_RCC_OscConfig+0x330>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	e015      	b.n	80047cc <HAL_RCC_OscConfig+0x2f8>
 80047a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80047a4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80047ac:	fa93 f3a3 	rbit	r3, r3
 80047b0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80047b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80047b8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80047bc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80047c0:	fa93 f3a3 	rbit	r3, r3
 80047c4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80047c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004804 <HAL_RCC_OscConfig+0x330>)
 80047ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047cc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80047d0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80047d4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80047d8:	fa92 f2a2 	rbit	r2, r2
 80047dc:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80047e0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80047e4:	fab2 f282 	clz	r2, r2
 80047e8:	b2d2      	uxtb	r2, r2
 80047ea:	f042 0220 	orr.w	r2, r2, #32
 80047ee:	b2d2      	uxtb	r2, r2
 80047f0:	f002 021f 	and.w	r2, r2, #31
 80047f4:	2101      	movs	r1, #1
 80047f6:	fa01 f202 	lsl.w	r2, r1, r2
 80047fa:	4013      	ands	r3, r2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1ab      	bne.n	8004758 <HAL_RCC_OscConfig+0x284>
 8004800:	e003      	b.n	800480a <HAL_RCC_OscConfig+0x336>
 8004802:	bf00      	nop
 8004804:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800480a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800480e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	f000 817d 	beq.w	8004b1a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004820:	4ba6      	ldr	r3, [pc, #664]	@ (8004abc <HAL_RCC_OscConfig+0x5e8>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f003 030c 	and.w	r3, r3, #12
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00b      	beq.n	8004844 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800482c:	4ba3      	ldr	r3, [pc, #652]	@ (8004abc <HAL_RCC_OscConfig+0x5e8>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f003 030c 	and.w	r3, r3, #12
 8004834:	2b08      	cmp	r3, #8
 8004836:	d172      	bne.n	800491e <HAL_RCC_OscConfig+0x44a>
 8004838:	4ba0      	ldr	r3, [pc, #640]	@ (8004abc <HAL_RCC_OscConfig+0x5e8>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d16c      	bne.n	800491e <HAL_RCC_OscConfig+0x44a>
 8004844:	2302      	movs	r3, #2
 8004846:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800484a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800484e:	fa93 f3a3 	rbit	r3, r3
 8004852:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8004856:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800485a:	fab3 f383 	clz	r3, r3
 800485e:	b2db      	uxtb	r3, r3
 8004860:	095b      	lsrs	r3, r3, #5
 8004862:	b2db      	uxtb	r3, r3
 8004864:	f043 0301 	orr.w	r3, r3, #1
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b01      	cmp	r3, #1
 800486c:	d102      	bne.n	8004874 <HAL_RCC_OscConfig+0x3a0>
 800486e:	4b93      	ldr	r3, [pc, #588]	@ (8004abc <HAL_RCC_OscConfig+0x5e8>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	e013      	b.n	800489c <HAL_RCC_OscConfig+0x3c8>
 8004874:	2302      	movs	r3, #2
 8004876:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800487e:	fa93 f3a3 	rbit	r3, r3
 8004882:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8004886:	2302      	movs	r3, #2
 8004888:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800488c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004890:	fa93 f3a3 	rbit	r3, r3
 8004894:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8004898:	4b88      	ldr	r3, [pc, #544]	@ (8004abc <HAL_RCC_OscConfig+0x5e8>)
 800489a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489c:	2202      	movs	r2, #2
 800489e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80048a2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80048a6:	fa92 f2a2 	rbit	r2, r2
 80048aa:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80048ae:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80048b2:	fab2 f282 	clz	r2, r2
 80048b6:	b2d2      	uxtb	r2, r2
 80048b8:	f042 0220 	orr.w	r2, r2, #32
 80048bc:	b2d2      	uxtb	r2, r2
 80048be:	f002 021f 	and.w	r2, r2, #31
 80048c2:	2101      	movs	r1, #1
 80048c4:	fa01 f202 	lsl.w	r2, r1, r2
 80048c8:	4013      	ands	r3, r2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00a      	beq.n	80048e4 <HAL_RCC_OscConfig+0x410>
 80048ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d002      	beq.n	80048e4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	f000 be2e 	b.w	8005540 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048e4:	4b75      	ldr	r3, [pc, #468]	@ (8004abc <HAL_RCC_OscConfig+0x5e8>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	21f8      	movs	r1, #248	@ 0xf8
 80048fa:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fe:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8004902:	fa91 f1a1 	rbit	r1, r1
 8004906:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800490a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800490e:	fab1 f181 	clz	r1, r1
 8004912:	b2c9      	uxtb	r1, r1
 8004914:	408b      	lsls	r3, r1
 8004916:	4969      	ldr	r1, [pc, #420]	@ (8004abc <HAL_RCC_OscConfig+0x5e8>)
 8004918:	4313      	orrs	r3, r2
 800491a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800491c:	e0fd      	b.n	8004b1a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800491e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004922:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	2b00      	cmp	r3, #0
 800492c:	f000 8088 	beq.w	8004a40 <HAL_RCC_OscConfig+0x56c>
 8004930:	2301      	movs	r3, #1
 8004932:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004936:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800493a:	fa93 f3a3 	rbit	r3, r3
 800493e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8004942:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004946:	fab3 f383 	clz	r3, r3
 800494a:	b2db      	uxtb	r3, r3
 800494c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004950:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	461a      	mov	r2, r3
 8004958:	2301      	movs	r3, #1
 800495a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800495c:	f7fc ffe2 	bl	8001924 <HAL_GetTick>
 8004960:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004964:	e00a      	b.n	800497c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004966:	f7fc ffdd 	bl	8001924 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d902      	bls.n	800497c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	f000 bde2 	b.w	8005540 <HAL_RCC_OscConfig+0x106c>
 800497c:	2302      	movs	r3, #2
 800497e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004982:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8004986:	fa93 f3a3 	rbit	r3, r3
 800498a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800498e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004992:	fab3 f383 	clz	r3, r3
 8004996:	b2db      	uxtb	r3, r3
 8004998:	095b      	lsrs	r3, r3, #5
 800499a:	b2db      	uxtb	r3, r3
 800499c:	f043 0301 	orr.w	r3, r3, #1
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d102      	bne.n	80049ac <HAL_RCC_OscConfig+0x4d8>
 80049a6:	4b45      	ldr	r3, [pc, #276]	@ (8004abc <HAL_RCC_OscConfig+0x5e8>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	e013      	b.n	80049d4 <HAL_RCC_OscConfig+0x500>
 80049ac:	2302      	movs	r3, #2
 80049ae:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80049b6:	fa93 f3a3 	rbit	r3, r3
 80049ba:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80049be:	2302      	movs	r3, #2
 80049c0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80049c4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80049c8:	fa93 f3a3 	rbit	r3, r3
 80049cc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80049d0:	4b3a      	ldr	r3, [pc, #232]	@ (8004abc <HAL_RCC_OscConfig+0x5e8>)
 80049d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d4:	2202      	movs	r2, #2
 80049d6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80049da:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80049de:	fa92 f2a2 	rbit	r2, r2
 80049e2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80049e6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80049ea:	fab2 f282 	clz	r2, r2
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	f042 0220 	orr.w	r2, r2, #32
 80049f4:	b2d2      	uxtb	r2, r2
 80049f6:	f002 021f 	and.w	r2, r2, #31
 80049fa:	2101      	movs	r1, #1
 80049fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004a00:	4013      	ands	r3, r2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d0af      	beq.n	8004966 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a06:	4b2d      	ldr	r3, [pc, #180]	@ (8004abc <HAL_RCC_OscConfig+0x5e8>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	21f8      	movs	r1, #248	@ 0xf8
 8004a1c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a20:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004a24:	fa91 f1a1 	rbit	r1, r1
 8004a28:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8004a2c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8004a30:	fab1 f181 	clz	r1, r1
 8004a34:	b2c9      	uxtb	r1, r1
 8004a36:	408b      	lsls	r3, r1
 8004a38:	4920      	ldr	r1, [pc, #128]	@ (8004abc <HAL_RCC_OscConfig+0x5e8>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	600b      	str	r3, [r1, #0]
 8004a3e:	e06c      	b.n	8004b1a <HAL_RCC_OscConfig+0x646>
 8004a40:	2301      	movs	r3, #1
 8004a42:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a46:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004a4a:	fa93 f3a3 	rbit	r3, r3
 8004a4e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8004a52:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a56:	fab3 f383 	clz	r3, r3
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004a60:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	461a      	mov	r2, r3
 8004a68:	2300      	movs	r3, #0
 8004a6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a6c:	f7fc ff5a 	bl	8001924 <HAL_GetTick>
 8004a70:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a74:	e00a      	b.n	8004a8c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a76:	f7fc ff55 	bl	8001924 <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d902      	bls.n	8004a8c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	f000 bd5a 	b.w	8005540 <HAL_RCC_OscConfig+0x106c>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a92:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004a96:	fa93 f3a3 	rbit	r3, r3
 8004a9a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8004a9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aa2:	fab3 f383 	clz	r3, r3
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	095b      	lsrs	r3, r3, #5
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	f043 0301 	orr.w	r3, r3, #1
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d104      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x5ec>
 8004ab6:	4b01      	ldr	r3, [pc, #4]	@ (8004abc <HAL_RCC_OscConfig+0x5e8>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	e015      	b.n	8004ae8 <HAL_RCC_OscConfig+0x614>
 8004abc:	40021000 	.word	0x40021000
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004aca:	fa93 f3a3 	rbit	r3, r3
 8004ace:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004ad8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004adc:	fa93 f3a3 	rbit	r3, r3
 8004ae0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8004ae4:	4bc8      	ldr	r3, [pc, #800]	@ (8004e08 <HAL_RCC_OscConfig+0x934>)
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae8:	2202      	movs	r2, #2
 8004aea:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8004aee:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8004af2:	fa92 f2a2 	rbit	r2, r2
 8004af6:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8004afa:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8004afe:	fab2 f282 	clz	r2, r2
 8004b02:	b2d2      	uxtb	r2, r2
 8004b04:	f042 0220 	orr.w	r2, r2, #32
 8004b08:	b2d2      	uxtb	r2, r2
 8004b0a:	f002 021f 	and.w	r2, r2, #31
 8004b0e:	2101      	movs	r1, #1
 8004b10:	fa01 f202 	lsl.w	r2, r1, r2
 8004b14:	4013      	ands	r3, r2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1ad      	bne.n	8004a76 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0308 	and.w	r3, r3, #8
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 8110 	beq.w	8004d50 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b34:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d079      	beq.n	8004c34 <HAL_RCC_OscConfig+0x760>
 8004b40:	2301      	movs	r3, #1
 8004b42:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b46:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004b4a:	fa93 f3a3 	rbit	r3, r3
 8004b4e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8004b52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b56:	fab3 f383 	clz	r3, r3
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	4bab      	ldr	r3, [pc, #684]	@ (8004e0c <HAL_RCC_OscConfig+0x938>)
 8004b60:	4413      	add	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	461a      	mov	r2, r3
 8004b66:	2301      	movs	r3, #1
 8004b68:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b6a:	f7fc fedb 	bl	8001924 <HAL_GetTick>
 8004b6e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b72:	e00a      	b.n	8004b8a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b74:	f7fc fed6 	bl	8001924 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d902      	bls.n	8004b8a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	f000 bcdb 	b.w	8005540 <HAL_RCC_OscConfig+0x106c>
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b90:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8004b94:	fa93 f3a3 	rbit	r3, r3
 8004b98:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004b9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ba0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004ba4:	2202      	movs	r2, #2
 8004ba6:	601a      	str	r2, [r3, #0]
 8004ba8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bac:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	fa93 f2a3 	rbit	r2, r3
 8004bb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bc8:	2202      	movs	r2, #2
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	fa93 f2a3 	rbit	r2, r3
 8004bda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bde:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004be2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004be4:	4b88      	ldr	r3, [pc, #544]	@ (8004e08 <HAL_RCC_OscConfig+0x934>)
 8004be6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004be8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004bf0:	2102      	movs	r1, #2
 8004bf2:	6019      	str	r1, [r3, #0]
 8004bf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bf8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	fa93 f1a3 	rbit	r1, r3
 8004c02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c06:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004c0a:	6019      	str	r1, [r3, #0]
  return result;
 8004c0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c10:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	fab3 f383 	clz	r3, r3
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	f003 031f 	and.w	r3, r3, #31
 8004c26:	2101      	movs	r1, #1
 8004c28:	fa01 f303 	lsl.w	r3, r1, r3
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0a0      	beq.n	8004b74 <HAL_RCC_OscConfig+0x6a0>
 8004c32:	e08d      	b.n	8004d50 <HAL_RCC_OscConfig+0x87c>
 8004c34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c38:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c44:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	fa93 f2a3 	rbit	r2, r3
 8004c4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c52:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004c56:	601a      	str	r2, [r3, #0]
  return result;
 8004c58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c5c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004c60:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c62:	fab3 f383 	clz	r3, r3
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	461a      	mov	r2, r3
 8004c6a:	4b68      	ldr	r3, [pc, #416]	@ (8004e0c <HAL_RCC_OscConfig+0x938>)
 8004c6c:	4413      	add	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	461a      	mov	r2, r3
 8004c72:	2300      	movs	r3, #0
 8004c74:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c76:	f7fc fe55 	bl	8001924 <HAL_GetTick>
 8004c7a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c7e:	e00a      	b.n	8004c96 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c80:	f7fc fe50 	bl	8001924 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d902      	bls.n	8004c96 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	f000 bc55 	b.w	8005540 <HAL_RCC_OscConfig+0x106c>
 8004c96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c9a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ca6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	fa93 f2a3 	rbit	r2, r3
 8004cb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cb4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cbe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	601a      	str	r2, [r3, #0]
 8004cc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cca:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	fa93 f2a3 	rbit	r2, r3
 8004cd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cd8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004cdc:	601a      	str	r2, [r3, #0]
 8004cde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ce2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cee:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	fa93 f2a3 	rbit	r2, r3
 8004cf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cfc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004d00:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d02:	4b41      	ldr	r3, [pc, #260]	@ (8004e08 <HAL_RCC_OscConfig+0x934>)
 8004d04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d0a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004d0e:	2102      	movs	r1, #2
 8004d10:	6019      	str	r1, [r3, #0]
 8004d12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d16:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	fa93 f1a3 	rbit	r1, r3
 8004d20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d24:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004d28:	6019      	str	r1, [r3, #0]
  return result;
 8004d2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d2e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	fab3 f383 	clz	r3, r3
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	f003 031f 	and.w	r3, r3, #31
 8004d44:	2101      	movs	r1, #1
 8004d46:	fa01 f303 	lsl.w	r3, r1, r3
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d197      	bne.n	8004c80 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0304 	and.w	r3, r3, #4
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 81a1 	beq.w	80050a8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d66:	2300      	movs	r3, #0
 8004d68:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d6c:	4b26      	ldr	r3, [pc, #152]	@ (8004e08 <HAL_RCC_OscConfig+0x934>)
 8004d6e:	69db      	ldr	r3, [r3, #28]
 8004d70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d116      	bne.n	8004da6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d78:	4b23      	ldr	r3, [pc, #140]	@ (8004e08 <HAL_RCC_OscConfig+0x934>)
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	4a22      	ldr	r2, [pc, #136]	@ (8004e08 <HAL_RCC_OscConfig+0x934>)
 8004d7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d82:	61d3      	str	r3, [r2, #28]
 8004d84:	4b20      	ldr	r3, [pc, #128]	@ (8004e08 <HAL_RCC_OscConfig+0x934>)
 8004d86:	69db      	ldr	r3, [r3, #28]
 8004d88:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8004d8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d90:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004d94:	601a      	str	r2, [r3, #0]
 8004d96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d9a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004d9e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004da0:	2301      	movs	r3, #1
 8004da2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004da6:	4b1a      	ldr	r3, [pc, #104]	@ (8004e10 <HAL_RCC_OscConfig+0x93c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d11a      	bne.n	8004de8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004db2:	4b17      	ldr	r3, [pc, #92]	@ (8004e10 <HAL_RCC_OscConfig+0x93c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a16      	ldr	r2, [pc, #88]	@ (8004e10 <HAL_RCC_OscConfig+0x93c>)
 8004db8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dbc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dbe:	f7fc fdb1 	bl	8001924 <HAL_GetTick>
 8004dc2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dc6:	e009      	b.n	8004ddc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dc8:	f7fc fdac 	bl	8001924 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b64      	cmp	r3, #100	@ 0x64
 8004dd6:	d901      	bls.n	8004ddc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e3b1      	b.n	8005540 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8004e10 <HAL_RCC_OscConfig+0x93c>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d0ef      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004de8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d10d      	bne.n	8004e14 <HAL_RCC_OscConfig+0x940>
 8004df8:	4b03      	ldr	r3, [pc, #12]	@ (8004e08 <HAL_RCC_OscConfig+0x934>)
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	4a02      	ldr	r2, [pc, #8]	@ (8004e08 <HAL_RCC_OscConfig+0x934>)
 8004dfe:	f043 0301 	orr.w	r3, r3, #1
 8004e02:	6213      	str	r3, [r2, #32]
 8004e04:	e03c      	b.n	8004e80 <HAL_RCC_OscConfig+0x9ac>
 8004e06:	bf00      	nop
 8004e08:	40021000 	.word	0x40021000
 8004e0c:	10908120 	.word	0x10908120
 8004e10:	40007000 	.word	0x40007000
 8004e14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10c      	bne.n	8004e3e <HAL_RCC_OscConfig+0x96a>
 8004e24:	4bc1      	ldr	r3, [pc, #772]	@ (800512c <HAL_RCC_OscConfig+0xc58>)
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	4ac0      	ldr	r2, [pc, #768]	@ (800512c <HAL_RCC_OscConfig+0xc58>)
 8004e2a:	f023 0301 	bic.w	r3, r3, #1
 8004e2e:	6213      	str	r3, [r2, #32]
 8004e30:	4bbe      	ldr	r3, [pc, #760]	@ (800512c <HAL_RCC_OscConfig+0xc58>)
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	4abd      	ldr	r2, [pc, #756]	@ (800512c <HAL_RCC_OscConfig+0xc58>)
 8004e36:	f023 0304 	bic.w	r3, r3, #4
 8004e3a:	6213      	str	r3, [r2, #32]
 8004e3c:	e020      	b.n	8004e80 <HAL_RCC_OscConfig+0x9ac>
 8004e3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e42:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	2b05      	cmp	r3, #5
 8004e4c:	d10c      	bne.n	8004e68 <HAL_RCC_OscConfig+0x994>
 8004e4e:	4bb7      	ldr	r3, [pc, #732]	@ (800512c <HAL_RCC_OscConfig+0xc58>)
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	4ab6      	ldr	r2, [pc, #728]	@ (800512c <HAL_RCC_OscConfig+0xc58>)
 8004e54:	f043 0304 	orr.w	r3, r3, #4
 8004e58:	6213      	str	r3, [r2, #32]
 8004e5a:	4bb4      	ldr	r3, [pc, #720]	@ (800512c <HAL_RCC_OscConfig+0xc58>)
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	4ab3      	ldr	r2, [pc, #716]	@ (800512c <HAL_RCC_OscConfig+0xc58>)
 8004e60:	f043 0301 	orr.w	r3, r3, #1
 8004e64:	6213      	str	r3, [r2, #32]
 8004e66:	e00b      	b.n	8004e80 <HAL_RCC_OscConfig+0x9ac>
 8004e68:	4bb0      	ldr	r3, [pc, #704]	@ (800512c <HAL_RCC_OscConfig+0xc58>)
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	4aaf      	ldr	r2, [pc, #700]	@ (800512c <HAL_RCC_OscConfig+0xc58>)
 8004e6e:	f023 0301 	bic.w	r3, r3, #1
 8004e72:	6213      	str	r3, [r2, #32]
 8004e74:	4bad      	ldr	r3, [pc, #692]	@ (800512c <HAL_RCC_OscConfig+0xc58>)
 8004e76:	6a1b      	ldr	r3, [r3, #32]
 8004e78:	4aac      	ldr	r2, [pc, #688]	@ (800512c <HAL_RCC_OscConfig+0xc58>)
 8004e7a:	f023 0304 	bic.w	r3, r3, #4
 8004e7e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e84:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 8081 	beq.w	8004f94 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e92:	f7fc fd47 	bl	8001924 <HAL_GetTick>
 8004e96:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e9a:	e00b      	b.n	8004eb4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e9c:	f7fc fd42 	bl	8001924 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d901      	bls.n	8004eb4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e345      	b.n	8005540 <HAL_RCC_OscConfig+0x106c>
 8004eb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004eb8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004ebc:	2202      	movs	r2, #2
 8004ebe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ec4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	fa93 f2a3 	rbit	r2, r3
 8004ece:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ed2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004ed6:	601a      	str	r2, [r3, #0]
 8004ed8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004edc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004ee0:	2202      	movs	r2, #2
 8004ee2:	601a      	str	r2, [r3, #0]
 8004ee4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ee8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	fa93 f2a3 	rbit	r2, r3
 8004ef2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ef6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004efa:	601a      	str	r2, [r3, #0]
  return result;
 8004efc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f00:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004f04:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f06:	fab3 f383 	clz	r3, r3
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	095b      	lsrs	r3, r3, #5
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	f043 0302 	orr.w	r3, r3, #2
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d102      	bne.n	8004f20 <HAL_RCC_OscConfig+0xa4c>
 8004f1a:	4b84      	ldr	r3, [pc, #528]	@ (800512c <HAL_RCC_OscConfig+0xc58>)
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	e013      	b.n	8004f48 <HAL_RCC_OscConfig+0xa74>
 8004f20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f24:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004f28:	2202      	movs	r2, #2
 8004f2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f30:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	fa93 f2a3 	rbit	r2, r3
 8004f3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f3e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	4b79      	ldr	r3, [pc, #484]	@ (800512c <HAL_RCC_OscConfig+0xc58>)
 8004f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f48:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004f4c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004f50:	2102      	movs	r1, #2
 8004f52:	6011      	str	r1, [r2, #0]
 8004f54:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004f58:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004f5c:	6812      	ldr	r2, [r2, #0]
 8004f5e:	fa92 f1a2 	rbit	r1, r2
 8004f62:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004f66:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004f6a:	6011      	str	r1, [r2, #0]
  return result;
 8004f6c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004f70:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004f74:	6812      	ldr	r2, [r2, #0]
 8004f76:	fab2 f282 	clz	r2, r2
 8004f7a:	b2d2      	uxtb	r2, r2
 8004f7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f80:	b2d2      	uxtb	r2, r2
 8004f82:	f002 021f 	and.w	r2, r2, #31
 8004f86:	2101      	movs	r1, #1
 8004f88:	fa01 f202 	lsl.w	r2, r1, r2
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d084      	beq.n	8004e9c <HAL_RCC_OscConfig+0x9c8>
 8004f92:	e07f      	b.n	8005094 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f94:	f7fc fcc6 	bl	8001924 <HAL_GetTick>
 8004f98:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f9c:	e00b      	b.n	8004fb6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f9e:	f7fc fcc1 	bl	8001924 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e2c4      	b.n	8005540 <HAL_RCC_OscConfig+0x106c>
 8004fb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fba:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fc6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	fa93 f2a3 	rbit	r2, r3
 8004fd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fd4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004fd8:	601a      	str	r2, [r3, #0]
 8004fda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fde:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	601a      	str	r2, [r3, #0]
 8004fe6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fea:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	fa93 f2a3 	rbit	r2, r3
 8004ff4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ff8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004ffc:	601a      	str	r2, [r3, #0]
  return result;
 8004ffe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005002:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8005006:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005008:	fab3 f383 	clz	r3, r3
 800500c:	b2db      	uxtb	r3, r3
 800500e:	095b      	lsrs	r3, r3, #5
 8005010:	b2db      	uxtb	r3, r3
 8005012:	f043 0302 	orr.w	r3, r3, #2
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b02      	cmp	r3, #2
 800501a:	d102      	bne.n	8005022 <HAL_RCC_OscConfig+0xb4e>
 800501c:	4b43      	ldr	r3, [pc, #268]	@ (800512c <HAL_RCC_OscConfig+0xc58>)
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	e013      	b.n	800504a <HAL_RCC_OscConfig+0xb76>
 8005022:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005026:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800502a:	2202      	movs	r2, #2
 800502c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800502e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005032:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	fa93 f2a3 	rbit	r2, r3
 800503c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005040:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8005044:	601a      	str	r2, [r3, #0]
 8005046:	4b39      	ldr	r3, [pc, #228]	@ (800512c <HAL_RCC_OscConfig+0xc58>)
 8005048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800504e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8005052:	2102      	movs	r1, #2
 8005054:	6011      	str	r1, [r2, #0]
 8005056:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800505a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800505e:	6812      	ldr	r2, [r2, #0]
 8005060:	fa92 f1a2 	rbit	r1, r2
 8005064:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005068:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800506c:	6011      	str	r1, [r2, #0]
  return result;
 800506e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005072:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8005076:	6812      	ldr	r2, [r2, #0]
 8005078:	fab2 f282 	clz	r2, r2
 800507c:	b2d2      	uxtb	r2, r2
 800507e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005082:	b2d2      	uxtb	r2, r2
 8005084:	f002 021f 	and.w	r2, r2, #31
 8005088:	2101      	movs	r1, #1
 800508a:	fa01 f202 	lsl.w	r2, r1, r2
 800508e:	4013      	ands	r3, r2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d184      	bne.n	8004f9e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005094:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8005098:	2b01      	cmp	r3, #1
 800509a:	d105      	bne.n	80050a8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800509c:	4b23      	ldr	r3, [pc, #140]	@ (800512c <HAL_RCC_OscConfig+0xc58>)
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	4a22      	ldr	r2, [pc, #136]	@ (800512c <HAL_RCC_OscConfig+0xc58>)
 80050a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050a6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	69db      	ldr	r3, [r3, #28]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 8242 	beq.w	800553e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050ba:	4b1c      	ldr	r3, [pc, #112]	@ (800512c <HAL_RCC_OscConfig+0xc58>)
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f003 030c 	and.w	r3, r3, #12
 80050c2:	2b08      	cmp	r3, #8
 80050c4:	f000 8213 	beq.w	80054ee <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	69db      	ldr	r3, [r3, #28]
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	f040 8162 	bne.w	800539e <HAL_RCC_OscConfig+0xeca>
 80050da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050de:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80050e2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80050e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050ec:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	fa93 f2a3 	rbit	r2, r3
 80050f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050fa:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80050fe:	601a      	str	r2, [r3, #0]
  return result;
 8005100:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005104:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005108:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800510a:	fab3 f383 	clz	r3, r3
 800510e:	b2db      	uxtb	r3, r3
 8005110:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005114:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	461a      	mov	r2, r3
 800511c:	2300      	movs	r3, #0
 800511e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005120:	f7fc fc00 	bl	8001924 <HAL_GetTick>
 8005124:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005128:	e00c      	b.n	8005144 <HAL_RCC_OscConfig+0xc70>
 800512a:	bf00      	nop
 800512c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005130:	f7fc fbf8 	bl	8001924 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	2b02      	cmp	r3, #2
 800513e:	d901      	bls.n	8005144 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e1fd      	b.n	8005540 <HAL_RCC_OscConfig+0x106c>
 8005144:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005148:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800514c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005150:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005152:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005156:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	fa93 f2a3 	rbit	r2, r3
 8005160:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005164:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8005168:	601a      	str	r2, [r3, #0]
  return result;
 800516a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800516e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8005172:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005174:	fab3 f383 	clz	r3, r3
 8005178:	b2db      	uxtb	r3, r3
 800517a:	095b      	lsrs	r3, r3, #5
 800517c:	b2db      	uxtb	r3, r3
 800517e:	f043 0301 	orr.w	r3, r3, #1
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2b01      	cmp	r3, #1
 8005186:	d102      	bne.n	800518e <HAL_RCC_OscConfig+0xcba>
 8005188:	4bb0      	ldr	r3, [pc, #704]	@ (800544c <HAL_RCC_OscConfig+0xf78>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	e027      	b.n	80051de <HAL_RCC_OscConfig+0xd0a>
 800518e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005192:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8005196:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800519a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800519c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051a0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	fa93 f2a3 	rbit	r2, r3
 80051aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051ae:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051b8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80051bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051c6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	fa93 f2a3 	rbit	r2, r3
 80051d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051d4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80051d8:	601a      	str	r2, [r3, #0]
 80051da:	4b9c      	ldr	r3, [pc, #624]	@ (800544c <HAL_RCC_OscConfig+0xf78>)
 80051dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051de:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80051e2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80051e6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80051ea:	6011      	str	r1, [r2, #0]
 80051ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80051f0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80051f4:	6812      	ldr	r2, [r2, #0]
 80051f6:	fa92 f1a2 	rbit	r1, r2
 80051fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80051fe:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8005202:	6011      	str	r1, [r2, #0]
  return result;
 8005204:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005208:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800520c:	6812      	ldr	r2, [r2, #0]
 800520e:	fab2 f282 	clz	r2, r2
 8005212:	b2d2      	uxtb	r2, r2
 8005214:	f042 0220 	orr.w	r2, r2, #32
 8005218:	b2d2      	uxtb	r2, r2
 800521a:	f002 021f 	and.w	r2, r2, #31
 800521e:	2101      	movs	r1, #1
 8005220:	fa01 f202 	lsl.w	r2, r1, r2
 8005224:	4013      	ands	r3, r2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d182      	bne.n	8005130 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800522a:	4b88      	ldr	r3, [pc, #544]	@ (800544c <HAL_RCC_OscConfig+0xf78>)
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005232:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005236:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800523e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005242:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	430b      	orrs	r3, r1
 800524c:	497f      	ldr	r1, [pc, #508]	@ (800544c <HAL_RCC_OscConfig+0xf78>)
 800524e:	4313      	orrs	r3, r2
 8005250:	604b      	str	r3, [r1, #4]
 8005252:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005256:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800525a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800525e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005260:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005264:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	fa93 f2a3 	rbit	r2, r3
 800526e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005272:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005276:	601a      	str	r2, [r3, #0]
  return result;
 8005278:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800527c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005280:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005282:	fab3 f383 	clz	r3, r3
 8005286:	b2db      	uxtb	r3, r3
 8005288:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800528c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	461a      	mov	r2, r3
 8005294:	2301      	movs	r3, #1
 8005296:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005298:	f7fc fb44 	bl	8001924 <HAL_GetTick>
 800529c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052a0:	e009      	b.n	80052b6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052a2:	f7fc fb3f 	bl	8001924 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e144      	b.n	8005540 <HAL_RCC_OscConfig+0x106c>
 80052b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052ba:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80052be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80052c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052c8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	fa93 f2a3 	rbit	r2, r3
 80052d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052d6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80052da:	601a      	str	r2, [r3, #0]
  return result;
 80052dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052e0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80052e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052e6:	fab3 f383 	clz	r3, r3
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	095b      	lsrs	r3, r3, #5
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	f043 0301 	orr.w	r3, r3, #1
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d102      	bne.n	8005300 <HAL_RCC_OscConfig+0xe2c>
 80052fa:	4b54      	ldr	r3, [pc, #336]	@ (800544c <HAL_RCC_OscConfig+0xf78>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	e027      	b.n	8005350 <HAL_RCC_OscConfig+0xe7c>
 8005300:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005304:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8005308:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800530c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800530e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005312:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	fa93 f2a3 	rbit	r2, r3
 800531c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005320:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8005324:	601a      	str	r2, [r3, #0]
 8005326:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800532a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800532e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005332:	601a      	str	r2, [r3, #0]
 8005334:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005338:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	fa93 f2a3 	rbit	r2, r3
 8005342:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005346:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800534a:	601a      	str	r2, [r3, #0]
 800534c:	4b3f      	ldr	r3, [pc, #252]	@ (800544c <HAL_RCC_OscConfig+0xf78>)
 800534e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005350:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005354:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8005358:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800535c:	6011      	str	r1, [r2, #0]
 800535e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005362:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8005366:	6812      	ldr	r2, [r2, #0]
 8005368:	fa92 f1a2 	rbit	r1, r2
 800536c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005370:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005374:	6011      	str	r1, [r2, #0]
  return result;
 8005376:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800537a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800537e:	6812      	ldr	r2, [r2, #0]
 8005380:	fab2 f282 	clz	r2, r2
 8005384:	b2d2      	uxtb	r2, r2
 8005386:	f042 0220 	orr.w	r2, r2, #32
 800538a:	b2d2      	uxtb	r2, r2
 800538c:	f002 021f 	and.w	r2, r2, #31
 8005390:	2101      	movs	r1, #1
 8005392:	fa01 f202 	lsl.w	r2, r1, r2
 8005396:	4013      	ands	r3, r2
 8005398:	2b00      	cmp	r3, #0
 800539a:	d082      	beq.n	80052a2 <HAL_RCC_OscConfig+0xdce>
 800539c:	e0cf      	b.n	800553e <HAL_RCC_OscConfig+0x106a>
 800539e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053a2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80053a6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80053aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053b0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	fa93 f2a3 	rbit	r2, r3
 80053ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053be:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80053c2:	601a      	str	r2, [r3, #0]
  return result;
 80053c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053c8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80053cc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ce:	fab3 f383 	clz	r3, r3
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80053d8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	461a      	mov	r2, r3
 80053e0:	2300      	movs	r3, #0
 80053e2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e4:	f7fc fa9e 	bl	8001924 <HAL_GetTick>
 80053e8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053ec:	e009      	b.n	8005402 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053ee:	f7fc fa99 	bl	8001924 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e09e      	b.n	8005540 <HAL_RCC_OscConfig+0x106c>
 8005402:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005406:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800540a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800540e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005410:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005414:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	fa93 f2a3 	rbit	r2, r3
 800541e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005422:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005426:	601a      	str	r2, [r3, #0]
  return result;
 8005428:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800542c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005430:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005432:	fab3 f383 	clz	r3, r3
 8005436:	b2db      	uxtb	r3, r3
 8005438:	095b      	lsrs	r3, r3, #5
 800543a:	b2db      	uxtb	r3, r3
 800543c:	f043 0301 	orr.w	r3, r3, #1
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b01      	cmp	r3, #1
 8005444:	d104      	bne.n	8005450 <HAL_RCC_OscConfig+0xf7c>
 8005446:	4b01      	ldr	r3, [pc, #4]	@ (800544c <HAL_RCC_OscConfig+0xf78>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	e029      	b.n	80054a0 <HAL_RCC_OscConfig+0xfcc>
 800544c:	40021000 	.word	0x40021000
 8005450:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005454:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005458:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800545c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800545e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005462:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	fa93 f2a3 	rbit	r2, r3
 800546c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005470:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8005474:	601a      	str	r2, [r3, #0]
 8005476:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800547a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800547e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005482:	601a      	str	r2, [r3, #0]
 8005484:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005488:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	fa93 f2a3 	rbit	r2, r3
 8005492:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005496:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800549a:	601a      	str	r2, [r3, #0]
 800549c:	4b2b      	ldr	r3, [pc, #172]	@ (800554c <HAL_RCC_OscConfig+0x1078>)
 800549e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80054a4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80054a8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80054ac:	6011      	str	r1, [r2, #0]
 80054ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80054b2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80054b6:	6812      	ldr	r2, [r2, #0]
 80054b8:	fa92 f1a2 	rbit	r1, r2
 80054bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80054c0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80054c4:	6011      	str	r1, [r2, #0]
  return result;
 80054c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80054ca:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80054ce:	6812      	ldr	r2, [r2, #0]
 80054d0:	fab2 f282 	clz	r2, r2
 80054d4:	b2d2      	uxtb	r2, r2
 80054d6:	f042 0220 	orr.w	r2, r2, #32
 80054da:	b2d2      	uxtb	r2, r2
 80054dc:	f002 021f 	and.w	r2, r2, #31
 80054e0:	2101      	movs	r1, #1
 80054e2:	fa01 f202 	lsl.w	r2, r1, r2
 80054e6:	4013      	ands	r3, r2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d180      	bne.n	80053ee <HAL_RCC_OscConfig+0xf1a>
 80054ec:	e027      	b.n	800553e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80054f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d101      	bne.n	8005502 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e01e      	b.n	8005540 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005502:	4b12      	ldr	r3, [pc, #72]	@ (800554c <HAL_RCC_OscConfig+0x1078>)
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800550a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800550e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005512:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005516:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	429a      	cmp	r2, r3
 8005520:	d10b      	bne.n	800553a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005522:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8005526:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800552a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800552e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005536:	429a      	cmp	r2, r3
 8005538:	d001      	beq.n	800553e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e000      	b.n	8005540 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	40021000 	.word	0x40021000

08005550 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b09e      	sub	sp, #120	@ 0x78
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d101      	bne.n	8005568 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e162      	b.n	800582e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005568:	4b90      	ldr	r3, [pc, #576]	@ (80057ac <HAL_RCC_ClockConfig+0x25c>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0307 	and.w	r3, r3, #7
 8005570:	683a      	ldr	r2, [r7, #0]
 8005572:	429a      	cmp	r2, r3
 8005574:	d910      	bls.n	8005598 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005576:	4b8d      	ldr	r3, [pc, #564]	@ (80057ac <HAL_RCC_ClockConfig+0x25c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f023 0207 	bic.w	r2, r3, #7
 800557e:	498b      	ldr	r1, [pc, #556]	@ (80057ac <HAL_RCC_ClockConfig+0x25c>)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	4313      	orrs	r3, r2
 8005584:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005586:	4b89      	ldr	r3, [pc, #548]	@ (80057ac <HAL_RCC_ClockConfig+0x25c>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0307 	and.w	r3, r3, #7
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	429a      	cmp	r2, r3
 8005592:	d001      	beq.n	8005598 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e14a      	b.n	800582e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d008      	beq.n	80055b6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055a4:	4b82      	ldr	r3, [pc, #520]	@ (80057b0 <HAL_RCC_ClockConfig+0x260>)
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	497f      	ldr	r1, [pc, #508]	@ (80057b0 <HAL_RCC_ClockConfig+0x260>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0301 	and.w	r3, r3, #1
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f000 80dc 	beq.w	800577c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d13c      	bne.n	8005646 <HAL_RCC_ClockConfig+0xf6>
 80055cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80055d0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80055d4:	fa93 f3a3 	rbit	r3, r3
 80055d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80055da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055dc:	fab3 f383 	clz	r3, r3
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	095b      	lsrs	r3, r3, #5
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	f043 0301 	orr.w	r3, r3, #1
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d102      	bne.n	80055f6 <HAL_RCC_ClockConfig+0xa6>
 80055f0:	4b6f      	ldr	r3, [pc, #444]	@ (80057b0 <HAL_RCC_ClockConfig+0x260>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	e00f      	b.n	8005616 <HAL_RCC_ClockConfig+0xc6>
 80055f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80055fa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055fe:	fa93 f3a3 	rbit	r3, r3
 8005602:	667b      	str	r3, [r7, #100]	@ 0x64
 8005604:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005608:	663b      	str	r3, [r7, #96]	@ 0x60
 800560a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800560c:	fa93 f3a3 	rbit	r3, r3
 8005610:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005612:	4b67      	ldr	r3, [pc, #412]	@ (80057b0 <HAL_RCC_ClockConfig+0x260>)
 8005614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005616:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800561a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800561c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800561e:	fa92 f2a2 	rbit	r2, r2
 8005622:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8005624:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005626:	fab2 f282 	clz	r2, r2
 800562a:	b2d2      	uxtb	r2, r2
 800562c:	f042 0220 	orr.w	r2, r2, #32
 8005630:	b2d2      	uxtb	r2, r2
 8005632:	f002 021f 	and.w	r2, r2, #31
 8005636:	2101      	movs	r1, #1
 8005638:	fa01 f202 	lsl.w	r2, r1, r2
 800563c:	4013      	ands	r3, r2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d17b      	bne.n	800573a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e0f3      	b.n	800582e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	2b02      	cmp	r3, #2
 800564c:	d13c      	bne.n	80056c8 <HAL_RCC_ClockConfig+0x178>
 800564e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005652:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005654:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005656:	fa93 f3a3 	rbit	r3, r3
 800565a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800565c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800565e:	fab3 f383 	clz	r3, r3
 8005662:	b2db      	uxtb	r3, r3
 8005664:	095b      	lsrs	r3, r3, #5
 8005666:	b2db      	uxtb	r3, r3
 8005668:	f043 0301 	orr.w	r3, r3, #1
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b01      	cmp	r3, #1
 8005670:	d102      	bne.n	8005678 <HAL_RCC_ClockConfig+0x128>
 8005672:	4b4f      	ldr	r3, [pc, #316]	@ (80057b0 <HAL_RCC_ClockConfig+0x260>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	e00f      	b.n	8005698 <HAL_RCC_ClockConfig+0x148>
 8005678:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800567c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800567e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005680:	fa93 f3a3 	rbit	r3, r3
 8005684:	647b      	str	r3, [r7, #68]	@ 0x44
 8005686:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800568a:	643b      	str	r3, [r7, #64]	@ 0x40
 800568c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800568e:	fa93 f3a3 	rbit	r3, r3
 8005692:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005694:	4b46      	ldr	r3, [pc, #280]	@ (80057b0 <HAL_RCC_ClockConfig+0x260>)
 8005696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005698:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800569c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800569e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80056a0:	fa92 f2a2 	rbit	r2, r2
 80056a4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80056a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056a8:	fab2 f282 	clz	r2, r2
 80056ac:	b2d2      	uxtb	r2, r2
 80056ae:	f042 0220 	orr.w	r2, r2, #32
 80056b2:	b2d2      	uxtb	r2, r2
 80056b4:	f002 021f 	and.w	r2, r2, #31
 80056b8:	2101      	movs	r1, #1
 80056ba:	fa01 f202 	lsl.w	r2, r1, r2
 80056be:	4013      	ands	r3, r2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d13a      	bne.n	800573a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e0b2      	b.n	800582e <HAL_RCC_ClockConfig+0x2de>
 80056c8:	2302      	movs	r3, #2
 80056ca:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ce:	fa93 f3a3 	rbit	r3, r3
 80056d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80056d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056d6:	fab3 f383 	clz	r3, r3
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	095b      	lsrs	r3, r3, #5
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	f043 0301 	orr.w	r3, r3, #1
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d102      	bne.n	80056f0 <HAL_RCC_ClockConfig+0x1a0>
 80056ea:	4b31      	ldr	r3, [pc, #196]	@ (80057b0 <HAL_RCC_ClockConfig+0x260>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	e00d      	b.n	800570c <HAL_RCC_ClockConfig+0x1bc>
 80056f0:	2302      	movs	r3, #2
 80056f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f6:	fa93 f3a3 	rbit	r3, r3
 80056fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80056fc:	2302      	movs	r3, #2
 80056fe:	623b      	str	r3, [r7, #32]
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	fa93 f3a3 	rbit	r3, r3
 8005706:	61fb      	str	r3, [r7, #28]
 8005708:	4b29      	ldr	r3, [pc, #164]	@ (80057b0 <HAL_RCC_ClockConfig+0x260>)
 800570a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800570c:	2202      	movs	r2, #2
 800570e:	61ba      	str	r2, [r7, #24]
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	fa92 f2a2 	rbit	r2, r2
 8005716:	617a      	str	r2, [r7, #20]
  return result;
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	fab2 f282 	clz	r2, r2
 800571e:	b2d2      	uxtb	r2, r2
 8005720:	f042 0220 	orr.w	r2, r2, #32
 8005724:	b2d2      	uxtb	r2, r2
 8005726:	f002 021f 	and.w	r2, r2, #31
 800572a:	2101      	movs	r1, #1
 800572c:	fa01 f202 	lsl.w	r2, r1, r2
 8005730:	4013      	ands	r3, r2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d101      	bne.n	800573a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e079      	b.n	800582e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800573a:	4b1d      	ldr	r3, [pc, #116]	@ (80057b0 <HAL_RCC_ClockConfig+0x260>)
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f023 0203 	bic.w	r2, r3, #3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	491a      	ldr	r1, [pc, #104]	@ (80057b0 <HAL_RCC_ClockConfig+0x260>)
 8005748:	4313      	orrs	r3, r2
 800574a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800574c:	f7fc f8ea 	bl	8001924 <HAL_GetTick>
 8005750:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005752:	e00a      	b.n	800576a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005754:	f7fc f8e6 	bl	8001924 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005762:	4293      	cmp	r3, r2
 8005764:	d901      	bls.n	800576a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e061      	b.n	800582e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800576a:	4b11      	ldr	r3, [pc, #68]	@ (80057b0 <HAL_RCC_ClockConfig+0x260>)
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f003 020c 	and.w	r2, r3, #12
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	429a      	cmp	r2, r3
 800577a:	d1eb      	bne.n	8005754 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800577c:	4b0b      	ldr	r3, [pc, #44]	@ (80057ac <HAL_RCC_ClockConfig+0x25c>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0307 	and.w	r3, r3, #7
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	429a      	cmp	r2, r3
 8005788:	d214      	bcs.n	80057b4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800578a:	4b08      	ldr	r3, [pc, #32]	@ (80057ac <HAL_RCC_ClockConfig+0x25c>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f023 0207 	bic.w	r2, r3, #7
 8005792:	4906      	ldr	r1, [pc, #24]	@ (80057ac <HAL_RCC_ClockConfig+0x25c>)
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	4313      	orrs	r3, r2
 8005798:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800579a:	4b04      	ldr	r3, [pc, #16]	@ (80057ac <HAL_RCC_ClockConfig+0x25c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0307 	and.w	r3, r3, #7
 80057a2:	683a      	ldr	r2, [r7, #0]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d005      	beq.n	80057b4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e040      	b.n	800582e <HAL_RCC_ClockConfig+0x2de>
 80057ac:	40022000 	.word	0x40022000
 80057b0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0304 	and.w	r3, r3, #4
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d008      	beq.n	80057d2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005838 <HAL_RCC_ClockConfig+0x2e8>)
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	491a      	ldr	r1, [pc, #104]	@ (8005838 <HAL_RCC_ClockConfig+0x2e8>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0308 	and.w	r3, r3, #8
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d009      	beq.n	80057f2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057de:	4b16      	ldr	r3, [pc, #88]	@ (8005838 <HAL_RCC_ClockConfig+0x2e8>)
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	4912      	ldr	r1, [pc, #72]	@ (8005838 <HAL_RCC_ClockConfig+0x2e8>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80057f2:	f000 f829 	bl	8005848 <HAL_RCC_GetSysClockFreq>
 80057f6:	4601      	mov	r1, r0
 80057f8:	4b0f      	ldr	r3, [pc, #60]	@ (8005838 <HAL_RCC_ClockConfig+0x2e8>)
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005800:	22f0      	movs	r2, #240	@ 0xf0
 8005802:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	fa92 f2a2 	rbit	r2, r2
 800580a:	60fa      	str	r2, [r7, #12]
  return result;
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	fab2 f282 	clz	r2, r2
 8005812:	b2d2      	uxtb	r2, r2
 8005814:	40d3      	lsrs	r3, r2
 8005816:	4a09      	ldr	r2, [pc, #36]	@ (800583c <HAL_RCC_ClockConfig+0x2ec>)
 8005818:	5cd3      	ldrb	r3, [r2, r3]
 800581a:	fa21 f303 	lsr.w	r3, r1, r3
 800581e:	4a08      	ldr	r2, [pc, #32]	@ (8005840 <HAL_RCC_ClockConfig+0x2f0>)
 8005820:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005822:	4b08      	ldr	r3, [pc, #32]	@ (8005844 <HAL_RCC_ClockConfig+0x2f4>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4618      	mov	r0, r3
 8005828:	f7fc f838 	bl	800189c <HAL_InitTick>
  
  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3778      	adds	r7, #120	@ 0x78
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	40021000 	.word	0x40021000
 800583c:	0800ac50 	.word	0x0800ac50
 8005840:	20000060 	.word	0x20000060
 8005844:	20000064 	.word	0x20000064

08005848 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005848:	b480      	push	{r7}
 800584a:	b087      	sub	sp, #28
 800584c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800584e:	2300      	movs	r3, #0
 8005850:	60fb      	str	r3, [r7, #12]
 8005852:	2300      	movs	r3, #0
 8005854:	60bb      	str	r3, [r7, #8]
 8005856:	2300      	movs	r3, #0
 8005858:	617b      	str	r3, [r7, #20]
 800585a:	2300      	movs	r3, #0
 800585c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800585e:	2300      	movs	r3, #0
 8005860:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005862:	4b1e      	ldr	r3, [pc, #120]	@ (80058dc <HAL_RCC_GetSysClockFreq+0x94>)
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f003 030c 	and.w	r3, r3, #12
 800586e:	2b04      	cmp	r3, #4
 8005870:	d002      	beq.n	8005878 <HAL_RCC_GetSysClockFreq+0x30>
 8005872:	2b08      	cmp	r3, #8
 8005874:	d003      	beq.n	800587e <HAL_RCC_GetSysClockFreq+0x36>
 8005876:	e026      	b.n	80058c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005878:	4b19      	ldr	r3, [pc, #100]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800587a:	613b      	str	r3, [r7, #16]
      break;
 800587c:	e026      	b.n	80058cc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	0c9b      	lsrs	r3, r3, #18
 8005882:	f003 030f 	and.w	r3, r3, #15
 8005886:	4a17      	ldr	r2, [pc, #92]	@ (80058e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005888:	5cd3      	ldrb	r3, [r2, r3]
 800588a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800588c:	4b13      	ldr	r3, [pc, #76]	@ (80058dc <HAL_RCC_GetSysClockFreq+0x94>)
 800588e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005890:	f003 030f 	and.w	r3, r3, #15
 8005894:	4a14      	ldr	r2, [pc, #80]	@ (80058e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005896:	5cd3      	ldrb	r3, [r2, r3]
 8005898:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d008      	beq.n	80058b6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80058a4:	4a0e      	ldr	r2, [pc, #56]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	fb02 f303 	mul.w	r3, r2, r3
 80058b2:	617b      	str	r3, [r7, #20]
 80058b4:	e004      	b.n	80058c0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a0c      	ldr	r2, [pc, #48]	@ (80058ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80058ba:	fb02 f303 	mul.w	r3, r2, r3
 80058be:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	613b      	str	r3, [r7, #16]
      break;
 80058c4:	e002      	b.n	80058cc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80058c6:	4b06      	ldr	r3, [pc, #24]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80058c8:	613b      	str	r3, [r7, #16]
      break;
 80058ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058cc:	693b      	ldr	r3, [r7, #16]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	371c      	adds	r7, #28
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	40021000 	.word	0x40021000
 80058e0:	007a1200 	.word	0x007a1200
 80058e4:	0800ac60 	.word	0x0800ac60
 80058e8:	0800ac70 	.word	0x0800ac70
 80058ec:	003d0900 	.word	0x003d0900

080058f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b092      	sub	sp, #72	@ 0x48
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058f8:	2300      	movs	r3, #0
 80058fa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80058fc:	2300      	movs	r3, #0
 80058fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005900:	2300      	movs	r3, #0
 8005902:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800590e:	2b00      	cmp	r3, #0
 8005910:	f000 80d4 	beq.w	8005abc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005914:	4b4e      	ldr	r3, [pc, #312]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10e      	bne.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005920:	4b4b      	ldr	r3, [pc, #300]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005922:	69db      	ldr	r3, [r3, #28]
 8005924:	4a4a      	ldr	r2, [pc, #296]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005926:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800592a:	61d3      	str	r3, [r2, #28]
 800592c:	4b48      	ldr	r3, [pc, #288]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005934:	60bb      	str	r3, [r7, #8]
 8005936:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005938:	2301      	movs	r3, #1
 800593a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800593e:	4b45      	ldr	r3, [pc, #276]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005946:	2b00      	cmp	r3, #0
 8005948:	d118      	bne.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800594a:	4b42      	ldr	r3, [pc, #264]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a41      	ldr	r2, [pc, #260]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005950:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005954:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005956:	f7fb ffe5 	bl	8001924 <HAL_GetTick>
 800595a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800595c:	e008      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800595e:	f7fb ffe1 	bl	8001924 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	2b64      	cmp	r3, #100	@ 0x64
 800596a:	d901      	bls.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e169      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005970:	4b38      	ldr	r3, [pc, #224]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005978:	2b00      	cmp	r3, #0
 800597a:	d0f0      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800597c:	4b34      	ldr	r3, [pc, #208]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800597e:	6a1b      	ldr	r3, [r3, #32]
 8005980:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005984:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005986:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005988:	2b00      	cmp	r3, #0
 800598a:	f000 8084 	beq.w	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005996:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005998:	429a      	cmp	r2, r3
 800599a:	d07c      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800599c:	4b2c      	ldr	r3, [pc, #176]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800599e:	6a1b      	ldr	r3, [r3, #32]
 80059a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80059aa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ae:	fa93 f3a3 	rbit	r3, r3
 80059b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80059b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80059b6:	fab3 f383 	clz	r3, r3
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	461a      	mov	r2, r3
 80059be:	4b26      	ldr	r3, [pc, #152]	@ (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80059c0:	4413      	add	r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	461a      	mov	r2, r3
 80059c6:	2301      	movs	r3, #1
 80059c8:	6013      	str	r3, [r2, #0]
 80059ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80059ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d2:	fa93 f3a3 	rbit	r3, r3
 80059d6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80059d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80059da:	fab3 f383 	clz	r3, r3
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	461a      	mov	r2, r3
 80059e2:	4b1d      	ldr	r3, [pc, #116]	@ (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80059e4:	4413      	add	r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	461a      	mov	r2, r3
 80059ea:	2300      	movs	r3, #0
 80059ec:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80059ee:	4a18      	ldr	r2, [pc, #96]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059f2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80059f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d04b      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059fe:	f7fb ff91 	bl	8001924 <HAL_GetTick>
 8005a02:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a04:	e00a      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a06:	f7fb ff8d 	bl	8001924 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d901      	bls.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e113      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a22:	fa93 f3a3 	rbit	r3, r3
 8005a26:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a28:	2302      	movs	r3, #2
 8005a2a:	623b      	str	r3, [r7, #32]
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	fa93 f3a3 	rbit	r3, r3
 8005a32:	61fb      	str	r3, [r7, #28]
  return result;
 8005a34:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a36:	fab3 f383 	clz	r3, r3
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	095b      	lsrs	r3, r3, #5
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	f043 0302 	orr.w	r3, r3, #2
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d108      	bne.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005a4a:	4b01      	ldr	r3, [pc, #4]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	e00d      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005a50:	40021000 	.word	0x40021000
 8005a54:	40007000 	.word	0x40007000
 8005a58:	10908100 	.word	0x10908100
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	fa93 f3a3 	rbit	r3, r3
 8005a66:	617b      	str	r3, [r7, #20]
 8005a68:	4b78      	ldr	r3, [pc, #480]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a6c:	2202      	movs	r2, #2
 8005a6e:	613a      	str	r2, [r7, #16]
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	fa92 f2a2 	rbit	r2, r2
 8005a76:	60fa      	str	r2, [r7, #12]
  return result;
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	fab2 f282 	clz	r2, r2
 8005a7e:	b2d2      	uxtb	r2, r2
 8005a80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a84:	b2d2      	uxtb	r2, r2
 8005a86:	f002 021f 	and.w	r2, r2, #31
 8005a8a:	2101      	movs	r1, #1
 8005a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8005a90:	4013      	ands	r3, r2
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d0b7      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005a96:	4b6d      	ldr	r3, [pc, #436]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	496a      	ldr	r1, [pc, #424]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005aa8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d105      	bne.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ab0:	4b66      	ldr	r3, [pc, #408]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ab2:	69db      	ldr	r3, [r3, #28]
 8005ab4:	4a65      	ldr	r2, [pc, #404]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ab6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005aba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d008      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ac8:	4b60      	ldr	r3, [pc, #384]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005acc:	f023 0203 	bic.w	r2, r3, #3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	495d      	ldr	r1, [pc, #372]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d008      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ae6:	4b59      	ldr	r3, [pc, #356]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aea:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	4956      	ldr	r1, [pc, #344]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0304 	and.w	r3, r3, #4
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d008      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b04:	4b51      	ldr	r3, [pc, #324]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b08:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	494e      	ldr	r1, [pc, #312]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0320 	and.w	r3, r3, #32
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d008      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b22:	4b4a      	ldr	r3, [pc, #296]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b26:	f023 0210 	bic.w	r2, r3, #16
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	4947      	ldr	r1, [pc, #284]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d008      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005b40:	4b42      	ldr	r3, [pc, #264]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b4c:	493f      	ldr	r1, [pc, #252]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d008      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b5e:	4b3b      	ldr	r3, [pc, #236]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b62:	f023 0220 	bic.w	r2, r3, #32
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	4938      	ldr	r1, [pc, #224]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0308 	and.w	r3, r3, #8
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d008      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b7c:	4b33      	ldr	r3, [pc, #204]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b80:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	695b      	ldr	r3, [r3, #20]
 8005b88:	4930      	ldr	r1, [pc, #192]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0310 	and.w	r3, r3, #16
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d008      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b9a:	4b2c      	ldr	r3, [pc, #176]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b9e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	4929      	ldr	r1, [pc, #164]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d008      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005bb8:	4b24      	ldr	r3, [pc, #144]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc4:	4921      	ldr	r1, [pc, #132]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d008      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005bd6:	4b1d      	ldr	r3, [pc, #116]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bda:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be2:	491a      	ldr	r1, [pc, #104]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d008      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005bf4:	4b15      	ldr	r3, [pc, #84]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf8:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c00:	4912      	ldr	r1, [pc, #72]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d008      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005c12:	4b0e      	ldr	r3, [pc, #56]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c16:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c1e:	490b      	ldr	r1, [pc, #44]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d008      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005c30:	4b06      	ldr	r3, [pc, #24]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c34:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c3c:	4903      	ldr	r1, [pc, #12]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3748      	adds	r7, #72	@ 0x48
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	40021000 	.word	0x40021000

08005c50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e09d      	b.n	8005d9e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d108      	bne.n	8005c7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c72:	d009      	beq.n	8005c88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	61da      	str	r2, [r3, #28]
 8005c7a:	e005      	b.n	8005c88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d106      	bne.n	8005ca8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f7fb f828 	bl	8000cf8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2202      	movs	r2, #2
 8005cac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cbe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005cc8:	d902      	bls.n	8005cd0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	60fb      	str	r3, [r7, #12]
 8005cce:	e002      	b.n	8005cd6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005cd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005cd4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005cde:	d007      	beq.n	8005cf0 <HAL_SPI_Init+0xa0>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ce8:	d002      	beq.n	8005cf0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005d00:	431a      	orrs	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	431a      	orrs	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	695b      	ldr	r3, [r3, #20]
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	431a      	orrs	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	69db      	ldr	r3, [r3, #28]
 8005d24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d32:	ea42 0103 	orr.w	r1, r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d3a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	430a      	orrs	r2, r1
 8005d44:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	0c1b      	lsrs	r3, r3, #16
 8005d4c:	f003 0204 	and.w	r2, r3, #4
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d54:	f003 0310 	and.w	r3, r3, #16
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d5e:	f003 0308 	and.w	r3, r3, #8
 8005d62:	431a      	orrs	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005d6c:	ea42 0103 	orr.w	r1, r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	69da      	ldr	r2, [r3, #28]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b08a      	sub	sp, #40	@ 0x28
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	60f8      	str	r0, [r7, #12]
 8005dae:	60b9      	str	r1, [r7, #8]
 8005db0:	607a      	str	r2, [r7, #4]
 8005db2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005db4:	2301      	movs	r3, #1
 8005db6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005db8:	2300      	movs	r3, #0
 8005dba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d101      	bne.n	8005dcc <HAL_SPI_TransmitReceive+0x26>
 8005dc8:	2302      	movs	r3, #2
 8005dca:	e20a      	b.n	80061e2 <HAL_SPI_TransmitReceive+0x43c>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dd4:	f7fb fda6 	bl	8001924 <HAL_GetTick>
 8005dd8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005de0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005de8:	887b      	ldrh	r3, [r7, #2]
 8005dea:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005dec:	887b      	ldrh	r3, [r7, #2]
 8005dee:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005df0:	7efb      	ldrb	r3, [r7, #27]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d00e      	beq.n	8005e14 <HAL_SPI_TransmitReceive+0x6e>
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005dfc:	d106      	bne.n	8005e0c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d102      	bne.n	8005e0c <HAL_SPI_TransmitReceive+0x66>
 8005e06:	7efb      	ldrb	r3, [r7, #27]
 8005e08:	2b04      	cmp	r3, #4
 8005e0a:	d003      	beq.n	8005e14 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005e12:	e1e0      	b.n	80061d6 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d005      	beq.n	8005e26 <HAL_SPI_TransmitReceive+0x80>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d002      	beq.n	8005e26 <HAL_SPI_TransmitReceive+0x80>
 8005e20:	887b      	ldrh	r3, [r7, #2]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d103      	bne.n	8005e2e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005e2c:	e1d3      	b.n	80061d6 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b04      	cmp	r3, #4
 8005e38:	d003      	beq.n	8005e42 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2205      	movs	r2, #5
 8005e3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	887a      	ldrh	r2, [r7, #2]
 8005e52:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	887a      	ldrh	r2, [r7, #2]
 8005e5a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	68ba      	ldr	r2, [r7, #8]
 8005e62:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	887a      	ldrh	r2, [r7, #2]
 8005e68:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	887a      	ldrh	r2, [r7, #2]
 8005e6e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e84:	d802      	bhi.n	8005e8c <HAL_SPI_TransmitReceive+0xe6>
 8005e86:	8a3b      	ldrh	r3, [r7, #16]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d908      	bls.n	8005e9e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	685a      	ldr	r2, [r3, #4]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005e9a:	605a      	str	r2, [r3, #4]
 8005e9c:	e007      	b.n	8005eae <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	685a      	ldr	r2, [r3, #4]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005eac:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eb8:	2b40      	cmp	r3, #64	@ 0x40
 8005eba:	d007      	beq.n	8005ecc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005eca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ed4:	f240 8081 	bls.w	8005fda <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d002      	beq.n	8005ee6 <HAL_SPI_TransmitReceive+0x140>
 8005ee0:	8a7b      	ldrh	r3, [r7, #18]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d16d      	bne.n	8005fc2 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eea:	881a      	ldrh	r2, [r3, #0]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef6:	1c9a      	adds	r2, r3, #2
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	3b01      	subs	r3, #1
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f0a:	e05a      	b.n	8005fc2 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d11b      	bne.n	8005f52 <HAL_SPI_TransmitReceive+0x1ac>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d016      	beq.n	8005f52 <HAL_SPI_TransmitReceive+0x1ac>
 8005f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d113      	bne.n	8005f52 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f2e:	881a      	ldrh	r2, [r3, #0]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f3a:	1c9a      	adds	r2, r3, #2
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	3b01      	subs	r3, #1
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d11c      	bne.n	8005f9a <HAL_SPI_TransmitReceive+0x1f4>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d016      	beq.n	8005f9a <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68da      	ldr	r2, [r3, #12]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f76:	b292      	uxth	r2, r2
 8005f78:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f7e:	1c9a      	adds	r2, r3, #2
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f96:	2301      	movs	r3, #1
 8005f98:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f9a:	f7fb fcc3 	bl	8001924 <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d80b      	bhi.n	8005fc2 <HAL_SPI_TransmitReceive+0x21c>
 8005faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb0:	d007      	beq.n	8005fc2 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005fc0:	e109      	b.n	80061d6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d19f      	bne.n	8005f0c <HAL_SPI_TransmitReceive+0x166>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d199      	bne.n	8005f0c <HAL_SPI_TransmitReceive+0x166>
 8005fd8:	e0e3      	b.n	80061a2 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d003      	beq.n	8005fea <HAL_SPI_TransmitReceive+0x244>
 8005fe2:	8a7b      	ldrh	r3, [r7, #18]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	f040 80cf 	bne.w	8006188 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d912      	bls.n	800601a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff8:	881a      	ldrh	r2, [r3, #0]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006004:	1c9a      	adds	r2, r3, #2
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800600e:	b29b      	uxth	r3, r3
 8006010:	3b02      	subs	r3, #2
 8006012:	b29a      	uxth	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006018:	e0b6      	b.n	8006188 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	330c      	adds	r3, #12
 8006024:	7812      	ldrb	r2, [r2, #0]
 8006026:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800602c:	1c5a      	adds	r2, r3, #1
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006036:	b29b      	uxth	r3, r3
 8006038:	3b01      	subs	r3, #1
 800603a:	b29a      	uxth	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006040:	e0a2      	b.n	8006188 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f003 0302 	and.w	r3, r3, #2
 800604c:	2b02      	cmp	r3, #2
 800604e:	d134      	bne.n	80060ba <HAL_SPI_TransmitReceive+0x314>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006054:	b29b      	uxth	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d02f      	beq.n	80060ba <HAL_SPI_TransmitReceive+0x314>
 800605a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605c:	2b01      	cmp	r3, #1
 800605e:	d12c      	bne.n	80060ba <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006064:	b29b      	uxth	r3, r3
 8006066:	2b01      	cmp	r3, #1
 8006068:	d912      	bls.n	8006090 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800606e:	881a      	ldrh	r2, [r3, #0]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800607a:	1c9a      	adds	r2, r3, #2
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006084:	b29b      	uxth	r3, r3
 8006086:	3b02      	subs	r3, #2
 8006088:	b29a      	uxth	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800608e:	e012      	b.n	80060b6 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	330c      	adds	r3, #12
 800609a:	7812      	ldrb	r2, [r2, #0]
 800609c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a2:	1c5a      	adds	r2, r3, #1
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	3b01      	subs	r3, #1
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060b6:	2300      	movs	r3, #0
 80060b8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f003 0301 	and.w	r3, r3, #1
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d148      	bne.n	800615a <HAL_SPI_TransmitReceive+0x3b4>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d042      	beq.n	800615a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80060da:	b29b      	uxth	r3, r3
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d923      	bls.n	8006128 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68da      	ldr	r2, [r3, #12]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ea:	b292      	uxth	r2, r2
 80060ec:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f2:	1c9a      	adds	r2, r3, #2
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80060fe:	b29b      	uxth	r3, r3
 8006100:	3b02      	subs	r3, #2
 8006102:	b29a      	uxth	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006110:	b29b      	uxth	r3, r3
 8006112:	2b01      	cmp	r3, #1
 8006114:	d81f      	bhi.n	8006156 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006124:	605a      	str	r2, [r3, #4]
 8006126:	e016      	b.n	8006156 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f103 020c 	add.w	r2, r3, #12
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006134:	7812      	ldrb	r2, [r2, #0]
 8006136:	b2d2      	uxtb	r2, r2
 8006138:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800613e:	1c5a      	adds	r2, r3, #1
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800614a:	b29b      	uxth	r3, r3
 800614c:	3b01      	subs	r3, #1
 800614e:	b29a      	uxth	r2, r3
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006156:	2301      	movs	r3, #1
 8006158:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800615a:	f7fb fbe3 	bl	8001924 <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006166:	429a      	cmp	r2, r3
 8006168:	d803      	bhi.n	8006172 <HAL_SPI_TransmitReceive+0x3cc>
 800616a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800616c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006170:	d102      	bne.n	8006178 <HAL_SPI_TransmitReceive+0x3d2>
 8006172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006174:	2b00      	cmp	r3, #0
 8006176:	d107      	bne.n	8006188 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8006186:	e026      	b.n	80061d6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800618c:	b29b      	uxth	r3, r3
 800618e:	2b00      	cmp	r3, #0
 8006190:	f47f af57 	bne.w	8006042 <HAL_SPI_TransmitReceive+0x29c>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800619a:	b29b      	uxth	r3, r3
 800619c:	2b00      	cmp	r3, #0
 800619e:	f47f af50 	bne.w	8006042 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061a2:	69fa      	ldr	r2, [r7, #28]
 80061a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f000 f93e 	bl	8006428 <SPI_EndRxTxTransaction>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d005      	beq.n	80061be <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2220      	movs	r2, #32
 80061bc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061cc:	e003      	b.n	80061d6 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80061de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3728      	adds	r7, #40	@ 0x28
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
	...

080061ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b088      	sub	sp, #32
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	603b      	str	r3, [r7, #0]
 80061f8:	4613      	mov	r3, r2
 80061fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061fc:	f7fb fb92 	bl	8001924 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006204:	1a9b      	subs	r3, r3, r2
 8006206:	683a      	ldr	r2, [r7, #0]
 8006208:	4413      	add	r3, r2
 800620a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800620c:	f7fb fb8a 	bl	8001924 <HAL_GetTick>
 8006210:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006212:	4b39      	ldr	r3, [pc, #228]	@ (80062f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	015b      	lsls	r3, r3, #5
 8006218:	0d1b      	lsrs	r3, r3, #20
 800621a:	69fa      	ldr	r2, [r7, #28]
 800621c:	fb02 f303 	mul.w	r3, r2, r3
 8006220:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006222:	e054      	b.n	80062ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622a:	d050      	beq.n	80062ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800622c:	f7fb fb7a 	bl	8001924 <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	69fa      	ldr	r2, [r7, #28]
 8006238:	429a      	cmp	r2, r3
 800623a:	d902      	bls.n	8006242 <SPI_WaitFlagStateUntilTimeout+0x56>
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d13d      	bne.n	80062be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	685a      	ldr	r2, [r3, #4]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006250:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800625a:	d111      	bne.n	8006280 <SPI_WaitFlagStateUntilTimeout+0x94>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006264:	d004      	beq.n	8006270 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800626e:	d107      	bne.n	8006280 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800627e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006284:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006288:	d10f      	bne.n	80062aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006298:	601a      	str	r2, [r3, #0]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80062a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e017      	b.n	80062ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d101      	bne.n	80062c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80062c4:	2300      	movs	r3, #0
 80062c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	3b01      	subs	r3, #1
 80062cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	689a      	ldr	r2, [r3, #8]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	4013      	ands	r3, r2
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	429a      	cmp	r2, r3
 80062dc:	bf0c      	ite	eq
 80062de:	2301      	moveq	r3, #1
 80062e0:	2300      	movne	r3, #0
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	461a      	mov	r2, r3
 80062e6:	79fb      	ldrb	r3, [r7, #7]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d19b      	bne.n	8006224 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3720      	adds	r7, #32
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	20000060 	.word	0x20000060

080062fc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b08a      	sub	sp, #40	@ 0x28
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
 8006308:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800630a:	2300      	movs	r3, #0
 800630c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800630e:	f7fb fb09 	bl	8001924 <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006316:	1a9b      	subs	r3, r3, r2
 8006318:	683a      	ldr	r2, [r7, #0]
 800631a:	4413      	add	r3, r2
 800631c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800631e:	f7fb fb01 	bl	8001924 <HAL_GetTick>
 8006322:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	330c      	adds	r3, #12
 800632a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800632c:	4b3d      	ldr	r3, [pc, #244]	@ (8006424 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	4613      	mov	r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	4413      	add	r3, r2
 8006336:	00da      	lsls	r2, r3, #3
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	0d1b      	lsrs	r3, r3, #20
 800633c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800633e:	fb02 f303 	mul.w	r3, r2, r3
 8006342:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006344:	e060      	b.n	8006408 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800634c:	d107      	bne.n	800635e <SPI_WaitFifoStateUntilTimeout+0x62>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d104      	bne.n	800635e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	b2db      	uxtb	r3, r3
 800635a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800635c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006364:	d050      	beq.n	8006408 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006366:	f7fb fadd 	bl	8001924 <HAL_GetTick>
 800636a:	4602      	mov	r2, r0
 800636c:	6a3b      	ldr	r3, [r7, #32]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006372:	429a      	cmp	r2, r3
 8006374:	d902      	bls.n	800637c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006378:	2b00      	cmp	r3, #0
 800637a:	d13d      	bne.n	80063f8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	685a      	ldr	r2, [r3, #4]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800638a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006394:	d111      	bne.n	80063ba <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800639e:	d004      	beq.n	80063aa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063a8:	d107      	bne.n	80063ba <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063c2:	d10f      	bne.n	80063e4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80063e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e010      	b.n	800641a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d101      	bne.n	8006402 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80063fe:	2300      	movs	r3, #0
 8006400:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	3b01      	subs	r3, #1
 8006406:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689a      	ldr	r2, [r3, #8]
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	4013      	ands	r3, r2
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	429a      	cmp	r2, r3
 8006416:	d196      	bne.n	8006346 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3728      	adds	r7, #40	@ 0x28
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	20000060 	.word	0x20000060

08006428 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b086      	sub	sp, #24
 800642c:	af02      	add	r7, sp, #8
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	9300      	str	r3, [sp, #0]
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	2200      	movs	r2, #0
 800643c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f7ff ff5b 	bl	80062fc <SPI_WaitFifoStateUntilTimeout>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d007      	beq.n	800645c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006450:	f043 0220 	orr.w	r2, r3, #32
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e027      	b.n	80064ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	2200      	movs	r2, #0
 8006464:	2180      	movs	r1, #128	@ 0x80
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f7ff fec0 	bl	80061ec <SPI_WaitFlagStateUntilTimeout>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d007      	beq.n	8006482 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006476:	f043 0220 	orr.w	r2, r3, #32
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e014      	b.n	80064ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	9300      	str	r3, [sp, #0]
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	2200      	movs	r2, #0
 800648a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f7ff ff34 	bl	80062fc <SPI_WaitFifoStateUntilTimeout>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d007      	beq.n	80064aa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800649e:	f043 0220 	orr.w	r2, r3, #32
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e000      	b.n	80064ac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80064c4:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80064c8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3714      	adds	r7, #20
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr

080064e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80064e2:	b480      	push	{r7}
 80064e4:	b085      	sub	sp, #20
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80064ea:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80064ee:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	43db      	mvns	r3, r3
 80064fe:	b29b      	uxth	r3, r3
 8006500:	4013      	ands	r3, r2
 8006502:	b29a      	uxth	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3714      	adds	r7, #20
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	1d3b      	adds	r3, r7, #4
 8006522:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2201      	movs	r2, #1
 800652a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	3714      	adds	r7, #20
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006554:	b480      	push	{r7}
 8006556:	b09d      	sub	sp, #116	@ 0x74
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800655e:	2300      	movs	r3, #0
 8006560:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	4413      	add	r3, r2
 800656e:	881b      	ldrh	r3, [r3, #0]
 8006570:	b29b      	uxth	r3, r3
 8006572:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006576:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800657a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	78db      	ldrb	r3, [r3, #3]
 8006582:	2b03      	cmp	r3, #3
 8006584:	d81f      	bhi.n	80065c6 <USB_ActivateEndpoint+0x72>
 8006586:	a201      	add	r2, pc, #4	@ (adr r2, 800658c <USB_ActivateEndpoint+0x38>)
 8006588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800658c:	0800659d 	.word	0x0800659d
 8006590:	080065b9 	.word	0x080065b9
 8006594:	080065cf 	.word	0x080065cf
 8006598:	080065ab 	.word	0x080065ab
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800659c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80065a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80065a4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80065a8:	e012      	b.n	80065d0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80065aa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80065ae:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80065b2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80065b6:	e00b      	b.n	80065d0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80065b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80065bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80065c0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80065c4:	e004      	b.n	80065d0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80065cc:	e000      	b.n	80065d0 <USB_ActivateEndpoint+0x7c>
      break;
 80065ce:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	441a      	add	r2, r3
 80065da:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80065de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4413      	add	r3, r2
 80065fc:	881b      	ldrh	r3, [r3, #0]
 80065fe:	b29b      	uxth	r3, r3
 8006600:	b21b      	sxth	r3, r3
 8006602:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006606:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800660a:	b21a      	sxth	r2, r3
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	b21b      	sxth	r3, r3
 8006612:	4313      	orrs	r3, r2
 8006614:	b21b      	sxth	r3, r3
 8006616:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	441a      	add	r2, r3
 8006624:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006628:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800662c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006630:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006634:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006638:	b29b      	uxth	r3, r3
 800663a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	7b1b      	ldrb	r3, [r3, #12]
 8006640:	2b00      	cmp	r3, #0
 8006642:	f040 8178 	bne.w	8006936 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	785b      	ldrb	r3, [r3, #1]
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 8084 	beq.w	8006758 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	61bb      	str	r3, [r7, #24]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800665a:	b29b      	uxth	r3, r3
 800665c:	461a      	mov	r2, r3
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	4413      	add	r3, r2
 8006662:	61bb      	str	r3, [r7, #24]
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	011a      	lsls	r2, r3, #4
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	4413      	add	r3, r2
 800666e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006672:	617b      	str	r3, [r7, #20]
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	88db      	ldrh	r3, [r3, #6]
 8006678:	085b      	lsrs	r3, r3, #1
 800667a:	b29b      	uxth	r3, r3
 800667c:	005b      	lsls	r3, r3, #1
 800667e:	b29a      	uxth	r2, r3
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4413      	add	r3, r2
 800668e:	881b      	ldrh	r3, [r3, #0]
 8006690:	827b      	strh	r3, [r7, #18]
 8006692:	8a7b      	ldrh	r3, [r7, #18]
 8006694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006698:	2b00      	cmp	r3, #0
 800669a:	d01b      	beq.n	80066d4 <USB_ActivateEndpoint+0x180>
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	4413      	add	r3, r2
 80066a6:	881b      	ldrh	r3, [r3, #0]
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066b2:	823b      	strh	r3, [r7, #16]
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	441a      	add	r2, r3
 80066be:	8a3b      	ldrh	r3, [r7, #16]
 80066c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066cc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	78db      	ldrb	r3, [r3, #3]
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d020      	beq.n	800671e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	4413      	add	r3, r2
 80066e6:	881b      	ldrh	r3, [r3, #0]
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066f2:	81bb      	strh	r3, [r7, #12]
 80066f4:	89bb      	ldrh	r3, [r7, #12]
 80066f6:	f083 0320 	eor.w	r3, r3, #32
 80066fa:	81bb      	strh	r3, [r7, #12]
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	441a      	add	r2, r3
 8006706:	89bb      	ldrh	r3, [r7, #12]
 8006708:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800670c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006710:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006714:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006718:	b29b      	uxth	r3, r3
 800671a:	8013      	strh	r3, [r2, #0]
 800671c:	e2d5      	b.n	8006cca <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	881b      	ldrh	r3, [r3, #0]
 800672a:	b29b      	uxth	r3, r3
 800672c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006730:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006734:	81fb      	strh	r3, [r7, #14]
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	441a      	add	r2, r3
 8006740:	89fb      	ldrh	r3, [r7, #14]
 8006742:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006746:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800674a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800674e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006752:	b29b      	uxth	r3, r3
 8006754:	8013      	strh	r3, [r2, #0]
 8006756:	e2b8      	b.n	8006cca <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	633b      	str	r3, [r7, #48]	@ 0x30
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006762:	b29b      	uxth	r3, r3
 8006764:	461a      	mov	r2, r3
 8006766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006768:	4413      	add	r3, r2
 800676a:	633b      	str	r3, [r7, #48]	@ 0x30
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	011a      	lsls	r2, r3, #4
 8006772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006774:	4413      	add	r3, r2
 8006776:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800677a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	88db      	ldrh	r3, [r3, #6]
 8006780:	085b      	lsrs	r3, r3, #1
 8006782:	b29b      	uxth	r3, r3
 8006784:	005b      	lsls	r3, r3, #1
 8006786:	b29a      	uxth	r2, r3
 8006788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800678a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006796:	b29b      	uxth	r3, r3
 8006798:	461a      	mov	r2, r3
 800679a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800679c:	4413      	add	r3, r2
 800679e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	011a      	lsls	r2, r3, #4
 80067a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a8:	4413      	add	r3, r2
 80067aa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80067ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80067b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b2:	881b      	ldrh	r3, [r3, #0]
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067be:	801a      	strh	r2, [r3, #0]
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d10a      	bne.n	80067de <USB_ActivateEndpoint+0x28a>
 80067c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ca:	881b      	ldrh	r3, [r3, #0]
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067d6:	b29a      	uxth	r2, r3
 80067d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067da:	801a      	strh	r2, [r3, #0]
 80067dc:	e039      	b.n	8006852 <USB_ActivateEndpoint+0x2fe>
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80067e4:	d818      	bhi.n	8006818 <USB_ActivateEndpoint+0x2c4>
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	085b      	lsrs	r3, r3, #1
 80067ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d002      	beq.n	8006800 <USB_ActivateEndpoint+0x2ac>
 80067fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067fc:	3301      	adds	r3, #1
 80067fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006802:	881b      	ldrh	r3, [r3, #0]
 8006804:	b29a      	uxth	r2, r3
 8006806:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006808:	b29b      	uxth	r3, r3
 800680a:	029b      	lsls	r3, r3, #10
 800680c:	b29b      	uxth	r3, r3
 800680e:	4313      	orrs	r3, r2
 8006810:	b29a      	uxth	r2, r3
 8006812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006814:	801a      	strh	r2, [r3, #0]
 8006816:	e01c      	b.n	8006852 <USB_ActivateEndpoint+0x2fe>
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	095b      	lsrs	r3, r3, #5
 800681e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	f003 031f 	and.w	r3, r3, #31
 8006828:	2b00      	cmp	r3, #0
 800682a:	d102      	bne.n	8006832 <USB_ActivateEndpoint+0x2de>
 800682c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800682e:	3b01      	subs	r3, #1
 8006830:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006834:	881b      	ldrh	r3, [r3, #0]
 8006836:	b29a      	uxth	r2, r3
 8006838:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800683a:	b29b      	uxth	r3, r3
 800683c:	029b      	lsls	r3, r3, #10
 800683e:	b29b      	uxth	r3, r3
 8006840:	4313      	orrs	r3, r2
 8006842:	b29b      	uxth	r3, r3
 8006844:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006848:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800684c:	b29a      	uxth	r2, r3
 800684e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006850:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	4413      	add	r3, r2
 800685c:	881b      	ldrh	r3, [r3, #0]
 800685e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006860:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006862:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006866:	2b00      	cmp	r3, #0
 8006868:	d01b      	beq.n	80068a2 <USB_ActivateEndpoint+0x34e>
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	4413      	add	r3, r2
 8006874:	881b      	ldrh	r3, [r3, #0]
 8006876:	b29b      	uxth	r3, r3
 8006878:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800687c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006880:	843b      	strh	r3, [r7, #32]
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	441a      	add	r2, r3
 800688c:	8c3b      	ldrh	r3, [r7, #32]
 800688e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006892:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006896:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800689a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800689e:	b29b      	uxth	r3, r3
 80068a0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d124      	bne.n	80068f4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	4413      	add	r3, r2
 80068b4:	881b      	ldrh	r3, [r3, #0]
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068c0:	83bb      	strh	r3, [r7, #28]
 80068c2:	8bbb      	ldrh	r3, [r7, #28]
 80068c4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80068c8:	83bb      	strh	r3, [r7, #28]
 80068ca:	8bbb      	ldrh	r3, [r7, #28]
 80068cc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80068d0:	83bb      	strh	r3, [r7, #28]
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	441a      	add	r2, r3
 80068dc:	8bbb      	ldrh	r3, [r7, #28]
 80068de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	8013      	strh	r3, [r2, #0]
 80068f2:	e1ea      	b.n	8006cca <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	4413      	add	r3, r2
 80068fe:	881b      	ldrh	r3, [r3, #0]
 8006900:	b29b      	uxth	r3, r3
 8006902:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006906:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800690a:	83fb      	strh	r3, [r7, #30]
 800690c:	8bfb      	ldrh	r3, [r7, #30]
 800690e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006912:	83fb      	strh	r3, [r7, #30]
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	441a      	add	r2, r3
 800691e:	8bfb      	ldrh	r3, [r7, #30]
 8006920:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006924:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006928:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800692c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006930:	b29b      	uxth	r3, r3
 8006932:	8013      	strh	r3, [r2, #0]
 8006934:	e1c9      	b.n	8006cca <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	78db      	ldrb	r3, [r3, #3]
 800693a:	2b02      	cmp	r3, #2
 800693c:	d11e      	bne.n	800697c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4413      	add	r3, r2
 8006948:	881b      	ldrh	r3, [r3, #0]
 800694a:	b29b      	uxth	r3, r3
 800694c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006950:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006954:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	441a      	add	r2, r3
 8006962:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006966:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800696a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800696e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006972:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006976:	b29b      	uxth	r3, r3
 8006978:	8013      	strh	r3, [r2, #0]
 800697a:	e01d      	b.n	80069b8 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	4413      	add	r3, r2
 8006986:	881b      	ldrh	r3, [r3, #0]
 8006988:	b29b      	uxth	r3, r3
 800698a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800698e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006992:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	441a      	add	r2, r3
 80069a0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80069a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	461a      	mov	r2, r3
 80069c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069c8:	4413      	add	r3, r2
 80069ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	011a      	lsls	r2, r3, #4
 80069d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069d4:	4413      	add	r3, r2
 80069d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80069da:	65bb      	str	r3, [r7, #88]	@ 0x58
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	891b      	ldrh	r3, [r3, #8]
 80069e0:	085b      	lsrs	r3, r3, #1
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	005b      	lsls	r3, r3, #1
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80069ea:	801a      	strh	r2, [r3, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	461a      	mov	r2, r3
 80069fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069fc:	4413      	add	r3, r2
 80069fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	011a      	lsls	r2, r3, #4
 8006a06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a08:	4413      	add	r3, r2
 8006a0a:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006a0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	895b      	ldrh	r3, [r3, #10]
 8006a14:	085b      	lsrs	r3, r3, #1
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	005b      	lsls	r3, r3, #1
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a1e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	785b      	ldrb	r3, [r3, #1]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f040 8093 	bne.w	8006b50 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4413      	add	r3, r2
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006a3a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006a3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d01b      	beq.n	8006a7e <USB_ActivateEndpoint+0x52a>
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a5c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	441a      	add	r2, r3
 8006a68:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006a6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a72:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006a76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	4413      	add	r3, r2
 8006a88:	881b      	ldrh	r3, [r3, #0]
 8006a8a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006a8c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d01b      	beq.n	8006ace <USB_ActivateEndpoint+0x57a>
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4413      	add	r3, r2
 8006aa0:	881b      	ldrh	r3, [r3, #0]
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aac:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	441a      	add	r2, r3
 8006ab8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006aba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006abe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ac2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ac6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4413      	add	r3, r2
 8006ad8:	881b      	ldrh	r3, [r3, #0]
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ae0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ae4:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006ae6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006ae8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006aec:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006aee:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006af0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006af4:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	441a      	add	r2, r3
 8006b00:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006b02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4413      	add	r3, r2
 8006b20:	881b      	ldrh	r3, [r3, #0]
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b2c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	441a      	add	r2, r3
 8006b38:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006b3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	8013      	strh	r3, [r2, #0]
 8006b4e:	e0bc      	b.n	8006cca <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4413      	add	r3, r2
 8006b5a:	881b      	ldrh	r3, [r3, #0]
 8006b5c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006b60:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006b64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d01d      	beq.n	8006ba8 <USB_ActivateEndpoint+0x654>
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4413      	add	r3, r2
 8006b76:	881b      	ldrh	r3, [r3, #0]
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b82:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	441a      	add	r2, r3
 8006b90:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006b94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b9c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006ba0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	4413      	add	r3, r2
 8006bb2:	881b      	ldrh	r3, [r3, #0]
 8006bb4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006bb8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d01d      	beq.n	8006c00 <USB_ActivateEndpoint+0x6ac>
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4413      	add	r3, r2
 8006bce:	881b      	ldrh	r3, [r3, #0]
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bda:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	441a      	add	r2, r3
 8006be8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006bec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bf0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bf4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bf8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	78db      	ldrb	r3, [r3, #3]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d024      	beq.n	8006c52 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4413      	add	r3, r2
 8006c12:	881b      	ldrh	r3, [r3, #0]
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c1e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006c22:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006c26:	f083 0320 	eor.w	r3, r3, #32
 8006c2a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	441a      	add	r2, r3
 8006c38:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006c3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	8013      	strh	r3, [r2, #0]
 8006c50:	e01d      	b.n	8006c8e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	4413      	add	r3, r2
 8006c5c:	881b      	ldrh	r3, [r3, #0]
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c68:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	441a      	add	r2, r3
 8006c76:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006c7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4413      	add	r3, r2
 8006c98:	881b      	ldrh	r3, [r3, #0]
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ca0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ca4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	441a      	add	r2, r3
 8006cb2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006cb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006cca:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3774      	adds	r7, #116	@ 0x74
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop

08006cdc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b08d      	sub	sp, #52	@ 0x34
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	7b1b      	ldrb	r3, [r3, #12]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f040 808e 	bne.w	8006e0c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	785b      	ldrb	r3, [r3, #1]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d044      	beq.n	8006d82 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	4413      	add	r3, r2
 8006d02:	881b      	ldrh	r3, [r3, #0]
 8006d04:	81bb      	strh	r3, [r7, #12]
 8006d06:	89bb      	ldrh	r3, [r7, #12]
 8006d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d01b      	beq.n	8006d48 <USB_DeactivateEndpoint+0x6c>
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	4413      	add	r3, r2
 8006d1a:	881b      	ldrh	r3, [r3, #0]
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d26:	817b      	strh	r3, [r7, #10]
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	441a      	add	r2, r3
 8006d32:	897b      	ldrh	r3, [r7, #10]
 8006d34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d40:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4413      	add	r3, r2
 8006d52:	881b      	ldrh	r3, [r3, #0]
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d5e:	813b      	strh	r3, [r7, #8]
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	441a      	add	r2, r3
 8006d6a:	893b      	ldrh	r3, [r7, #8]
 8006d6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	8013      	strh	r3, [r2, #0]
 8006d80:	e192      	b.n	80070a8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	4413      	add	r3, r2
 8006d8c:	881b      	ldrh	r3, [r3, #0]
 8006d8e:	827b      	strh	r3, [r7, #18]
 8006d90:	8a7b      	ldrh	r3, [r7, #18]
 8006d92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d01b      	beq.n	8006dd2 <USB_DeactivateEndpoint+0xf6>
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4413      	add	r3, r2
 8006da4:	881b      	ldrh	r3, [r3, #0]
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006db0:	823b      	strh	r3, [r7, #16]
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	441a      	add	r2, r3
 8006dbc:	8a3b      	ldrh	r3, [r7, #16]
 8006dbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dc6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006dca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	4413      	add	r3, r2
 8006ddc:	881b      	ldrh	r3, [r3, #0]
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006de4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006de8:	81fb      	strh	r3, [r7, #14]
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	441a      	add	r2, r3
 8006df4:	89fb      	ldrh	r3, [r7, #14]
 8006df6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	8013      	strh	r3, [r2, #0]
 8006e0a:	e14d      	b.n	80070a8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	785b      	ldrb	r3, [r3, #1]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f040 80a5 	bne.w	8006f60 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	4413      	add	r3, r2
 8006e20:	881b      	ldrh	r3, [r3, #0]
 8006e22:	843b      	strh	r3, [r7, #32]
 8006e24:	8c3b      	ldrh	r3, [r7, #32]
 8006e26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d01b      	beq.n	8006e66 <USB_DeactivateEndpoint+0x18a>
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	4413      	add	r3, r2
 8006e38:	881b      	ldrh	r3, [r3, #0]
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e44:	83fb      	strh	r3, [r7, #30]
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	441a      	add	r2, r3
 8006e50:	8bfb      	ldrh	r3, [r7, #30]
 8006e52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e5a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	4413      	add	r3, r2
 8006e70:	881b      	ldrh	r3, [r3, #0]
 8006e72:	83bb      	strh	r3, [r7, #28]
 8006e74:	8bbb      	ldrh	r3, [r7, #28]
 8006e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d01b      	beq.n	8006eb6 <USB_DeactivateEndpoint+0x1da>
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	4413      	add	r3, r2
 8006e88:	881b      	ldrh	r3, [r3, #0]
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e94:	837b      	strh	r3, [r7, #26]
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	441a      	add	r2, r3
 8006ea0:	8b7b      	ldrh	r3, [r7, #26]
 8006ea2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ea6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006eaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006eae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	4413      	add	r3, r2
 8006ec0:	881b      	ldrh	r3, [r3, #0]
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ec8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ecc:	833b      	strh	r3, [r7, #24]
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	441a      	add	r2, r3
 8006ed8:	8b3b      	ldrh	r3, [r7, #24]
 8006eda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ede:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ee2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ee6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	4413      	add	r3, r2
 8006ef8:	881b      	ldrh	r3, [r3, #0]
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f04:	82fb      	strh	r3, [r7, #22]
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	441a      	add	r2, r3
 8006f10:	8afb      	ldrh	r3, [r7, #22]
 8006f12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4413      	add	r3, r2
 8006f30:	881b      	ldrh	r3, [r3, #0]
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f3c:	82bb      	strh	r3, [r7, #20]
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	441a      	add	r2, r3
 8006f48:	8abb      	ldrh	r3, [r7, #20]
 8006f4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	8013      	strh	r3, [r2, #0]
 8006f5e:	e0a3      	b.n	80070a8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	4413      	add	r3, r2
 8006f6a:	881b      	ldrh	r3, [r3, #0]
 8006f6c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006f6e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006f70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d01b      	beq.n	8006fb0 <USB_DeactivateEndpoint+0x2d4>
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	4413      	add	r3, r2
 8006f82:	881b      	ldrh	r3, [r3, #0]
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f8e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	441a      	add	r2, r3
 8006f9a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006f9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fa0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fa4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006fa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	4413      	add	r3, r2
 8006fba:	881b      	ldrh	r3, [r3, #0]
 8006fbc:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006fbe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d01b      	beq.n	8007000 <USB_DeactivateEndpoint+0x324>
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	4413      	add	r3, r2
 8006fd2:	881b      	ldrh	r3, [r3, #0]
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fde:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	441a      	add	r2, r3
 8006fea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006fec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ff0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ff4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ff8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	4413      	add	r3, r2
 800700a:	881b      	ldrh	r3, [r3, #0]
 800700c:	b29b      	uxth	r3, r3
 800700e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007016:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	441a      	add	r2, r3
 8007022:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007024:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007028:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800702c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007030:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007034:	b29b      	uxth	r3, r3
 8007036:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4413      	add	r3, r2
 8007042:	881b      	ldrh	r3, [r3, #0]
 8007044:	b29b      	uxth	r3, r3
 8007046:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800704a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800704e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	441a      	add	r2, r3
 800705a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800705c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007060:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007064:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007068:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800706c:	b29b      	uxth	r3, r3
 800706e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	881b      	ldrh	r3, [r3, #0]
 800707c:	b29b      	uxth	r3, r3
 800707e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007086:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	441a      	add	r2, r3
 8007092:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007094:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007098:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800709c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3734      	adds	r7, #52	@ 0x34
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr

080070b6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b0c2      	sub	sp, #264	@ 0x108
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070c4:	6018      	str	r0, [r3, #0]
 80070c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ce:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80070d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	785b      	ldrb	r3, [r3, #1]
 80070dc:	2b01      	cmp	r3, #1
 80070de:	f040 86b7 	bne.w	8007e50 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80070e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	699a      	ldr	r2, [r3, #24]
 80070ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d908      	bls.n	8007110 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80070fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007102:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800710e:	e007      	b.n	8007120 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007114:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007120:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007124:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	7b1b      	ldrb	r3, [r3, #12]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d13a      	bne.n	80071a6 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007130:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007134:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	6959      	ldr	r1, [r3, #20]
 800713c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007140:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	88da      	ldrh	r2, [r3, #6]
 8007148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800714c:	b29b      	uxth	r3, r3
 800714e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007152:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007156:	6800      	ldr	r0, [r0, #0]
 8007158:	f001 fc8d 	bl	8008a76 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800715c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007160:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	613b      	str	r3, [r7, #16]
 8007168:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800716c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007176:	b29b      	uxth	r3, r3
 8007178:	461a      	mov	r2, r3
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	4413      	add	r3, r2
 800717e:	613b      	str	r3, [r7, #16]
 8007180:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007184:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	011a      	lsls	r2, r3, #4
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	4413      	add	r3, r2
 8007192:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007196:	60fb      	str	r3, [r7, #12]
 8007198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800719c:	b29a      	uxth	r2, r3
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	801a      	strh	r2, [r3, #0]
 80071a2:	f000 be1f 	b.w	8007de4 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80071a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	78db      	ldrb	r3, [r3, #3]
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	f040 8462 	bne.w	8007a7c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80071b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	6a1a      	ldr	r2, [r3, #32]
 80071c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	f240 83df 	bls.w	8007994 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80071d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	4413      	add	r3, r2
 80071f0:	881b      	ldrh	r3, [r3, #0]
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071fc:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007204:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800720e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	441a      	add	r2, r3
 800721a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800721e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007222:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007226:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800722a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800722e:	b29b      	uxth	r3, r3
 8007230:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007232:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007236:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	6a1a      	ldr	r2, [r3, #32]
 800723e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007242:	1ad2      	subs	r2, r2, r3
 8007244:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007248:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007250:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007254:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800725e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	4413      	add	r3, r2
 800726a:	881b      	ldrh	r3, [r3, #0]
 800726c:	b29b      	uxth	r3, r3
 800726e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007272:	2b00      	cmp	r3, #0
 8007274:	f000 81c7 	beq.w	8007606 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007278:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800727c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	633b      	str	r3, [r7, #48]	@ 0x30
 8007284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	785b      	ldrb	r3, [r3, #1]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d177      	bne.n	8007384 <USB_EPStartXfer+0x2ce>
 8007294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007298:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	461a      	mov	r2, r3
 80072b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b4:	4413      	add	r3, r2
 80072b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	011a      	lsls	r2, r3, #4
 80072c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c8:	4413      	add	r3, r2
 80072ca:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80072ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80072d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d2:	881b      	ldrh	r3, [r3, #0]
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072da:	b29a      	uxth	r2, r3
 80072dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072de:	801a      	strh	r2, [r3, #0]
 80072e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d10a      	bne.n	80072fe <USB_EPStartXfer+0x248>
 80072e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ea:	881b      	ldrh	r3, [r3, #0]
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072fa:	801a      	strh	r2, [r3, #0]
 80072fc:	e067      	b.n	80073ce <USB_EPStartXfer+0x318>
 80072fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007302:	2b3e      	cmp	r3, #62	@ 0x3e
 8007304:	d81c      	bhi.n	8007340 <USB_EPStartXfer+0x28a>
 8007306:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800730a:	085b      	lsrs	r3, r3, #1
 800730c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007314:	f003 0301 	and.w	r3, r3, #1
 8007318:	2b00      	cmp	r3, #0
 800731a:	d004      	beq.n	8007326 <USB_EPStartXfer+0x270>
 800731c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007320:	3301      	adds	r3, #1
 8007322:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007328:	881b      	ldrh	r3, [r3, #0]
 800732a:	b29a      	uxth	r2, r3
 800732c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007330:	b29b      	uxth	r3, r3
 8007332:	029b      	lsls	r3, r3, #10
 8007334:	b29b      	uxth	r3, r3
 8007336:	4313      	orrs	r3, r2
 8007338:	b29a      	uxth	r2, r3
 800733a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733c:	801a      	strh	r2, [r3, #0]
 800733e:	e046      	b.n	80073ce <USB_EPStartXfer+0x318>
 8007340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007344:	095b      	lsrs	r3, r3, #5
 8007346:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800734a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800734e:	f003 031f 	and.w	r3, r3, #31
 8007352:	2b00      	cmp	r3, #0
 8007354:	d104      	bne.n	8007360 <USB_EPStartXfer+0x2aa>
 8007356:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800735a:	3b01      	subs	r3, #1
 800735c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007362:	881b      	ldrh	r3, [r3, #0]
 8007364:	b29a      	uxth	r2, r3
 8007366:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800736a:	b29b      	uxth	r3, r3
 800736c:	029b      	lsls	r3, r3, #10
 800736e:	b29b      	uxth	r3, r3
 8007370:	4313      	orrs	r3, r2
 8007372:	b29b      	uxth	r3, r3
 8007374:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007378:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800737c:	b29a      	uxth	r2, r3
 800737e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007380:	801a      	strh	r2, [r3, #0]
 8007382:	e024      	b.n	80073ce <USB_EPStartXfer+0x318>
 8007384:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007388:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	785b      	ldrb	r3, [r3, #1]
 8007390:	2b01      	cmp	r3, #1
 8007392:	d11c      	bne.n	80073ce <USB_EPStartXfer+0x318>
 8007394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007398:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	461a      	mov	r2, r3
 80073a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a8:	4413      	add	r3, r2
 80073aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80073ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	011a      	lsls	r2, r3, #4
 80073ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073bc:	4413      	add	r3, r2
 80073be:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80073c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073c8:	b29a      	uxth	r2, r3
 80073ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80073ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	895b      	ldrh	r3, [r3, #10]
 80073da:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	6959      	ldr	r1, [r3, #20]
 80073ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80073f4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80073f8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80073fc:	6800      	ldr	r0, [r0, #0]
 80073fe:	f001 fb3a 	bl	8008a76 <USB_WritePMA>
            ep->xfer_buff += len;
 8007402:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007406:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	695a      	ldr	r2, [r3, #20]
 800740e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007412:	441a      	add	r2, r3
 8007414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007418:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	6a1a      	ldr	r2, [r3, #32]
 800742c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007430:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	691b      	ldr	r3, [r3, #16]
 8007438:	429a      	cmp	r2, r3
 800743a:	d90f      	bls.n	800745c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800743c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007440:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	6a1a      	ldr	r2, [r3, #32]
 8007448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800744c:	1ad2      	subs	r2, r2, r3
 800744e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007452:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	621a      	str	r2, [r3, #32]
 800745a:	e00e      	b.n	800747a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800745c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007460:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	6a1b      	ldr	r3, [r3, #32]
 8007468:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800746c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007470:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2200      	movs	r2, #0
 8007478:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800747a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800747e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	785b      	ldrb	r3, [r3, #1]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d177      	bne.n	800757a <USB_EPStartXfer+0x4c4>
 800748a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800748e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	61bb      	str	r3, [r7, #24]
 8007496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800749a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	461a      	mov	r2, r3
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	4413      	add	r3, r2
 80074ac:	61bb      	str	r3, [r7, #24]
 80074ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	011a      	lsls	r2, r3, #4
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	4413      	add	r3, r2
 80074c0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80074c4:	617b      	str	r3, [r7, #20]
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	881b      	ldrh	r3, [r3, #0]
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074d0:	b29a      	uxth	r2, r3
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	801a      	strh	r2, [r3, #0]
 80074d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d10a      	bne.n	80074f4 <USB_EPStartXfer+0x43e>
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	881b      	ldrh	r3, [r3, #0]
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074ec:	b29a      	uxth	r2, r3
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	801a      	strh	r2, [r3, #0]
 80074f2:	e06d      	b.n	80075d0 <USB_EPStartXfer+0x51a>
 80074f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80074fa:	d81c      	bhi.n	8007536 <USB_EPStartXfer+0x480>
 80074fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007500:	085b      	lsrs	r3, r3, #1
 8007502:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800750a:	f003 0301 	and.w	r3, r3, #1
 800750e:	2b00      	cmp	r3, #0
 8007510:	d004      	beq.n	800751c <USB_EPStartXfer+0x466>
 8007512:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007516:	3301      	adds	r3, #1
 8007518:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	881b      	ldrh	r3, [r3, #0]
 8007520:	b29a      	uxth	r2, r3
 8007522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007526:	b29b      	uxth	r3, r3
 8007528:	029b      	lsls	r3, r3, #10
 800752a:	b29b      	uxth	r3, r3
 800752c:	4313      	orrs	r3, r2
 800752e:	b29a      	uxth	r2, r3
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	801a      	strh	r2, [r3, #0]
 8007534:	e04c      	b.n	80075d0 <USB_EPStartXfer+0x51a>
 8007536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800753a:	095b      	lsrs	r3, r3, #5
 800753c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007544:	f003 031f 	and.w	r3, r3, #31
 8007548:	2b00      	cmp	r3, #0
 800754a:	d104      	bne.n	8007556 <USB_EPStartXfer+0x4a0>
 800754c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007550:	3b01      	subs	r3, #1
 8007552:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	881b      	ldrh	r3, [r3, #0]
 800755a:	b29a      	uxth	r2, r3
 800755c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007560:	b29b      	uxth	r3, r3
 8007562:	029b      	lsls	r3, r3, #10
 8007564:	b29b      	uxth	r3, r3
 8007566:	4313      	orrs	r3, r2
 8007568:	b29b      	uxth	r3, r3
 800756a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800756e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007572:	b29a      	uxth	r2, r3
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	801a      	strh	r2, [r3, #0]
 8007578:	e02a      	b.n	80075d0 <USB_EPStartXfer+0x51a>
 800757a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800757e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	785b      	ldrb	r3, [r3, #1]
 8007586:	2b01      	cmp	r3, #1
 8007588:	d122      	bne.n	80075d0 <USB_EPStartXfer+0x51a>
 800758a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800758e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	623b      	str	r3, [r7, #32]
 8007596:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800759a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	461a      	mov	r2, r3
 80075a8:	6a3b      	ldr	r3, [r7, #32]
 80075aa:	4413      	add	r3, r2
 80075ac:	623b      	str	r3, [r7, #32]
 80075ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	011a      	lsls	r2, r3, #4
 80075bc:	6a3b      	ldr	r3, [r7, #32]
 80075be:	4413      	add	r3, r2
 80075c0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80075c4:	61fb      	str	r3, [r7, #28]
 80075c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ca:	b29a      	uxth	r2, r3
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80075d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	891b      	ldrh	r3, [r3, #8]
 80075dc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	6959      	ldr	r1, [r3, #20]
 80075ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80075f6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80075fa:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80075fe:	6800      	ldr	r0, [r0, #0]
 8007600:	f001 fa39 	bl	8008a76 <USB_WritePMA>
 8007604:	e3ee      	b.n	8007de4 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800760a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	785b      	ldrb	r3, [r3, #1]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d177      	bne.n	8007706 <USB_EPStartXfer+0x650>
 8007616:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800761a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007626:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007630:	b29b      	uxth	r3, r3
 8007632:	461a      	mov	r2, r3
 8007634:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007636:	4413      	add	r3, r2
 8007638:	64bb      	str	r3, [r7, #72]	@ 0x48
 800763a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800763e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	011a      	lsls	r2, r3, #4
 8007648:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800764a:	4413      	add	r3, r2
 800764c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007650:	647b      	str	r3, [r7, #68]	@ 0x44
 8007652:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007654:	881b      	ldrh	r3, [r3, #0]
 8007656:	b29b      	uxth	r3, r3
 8007658:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800765c:	b29a      	uxth	r2, r3
 800765e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007660:	801a      	strh	r2, [r3, #0]
 8007662:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007666:	2b00      	cmp	r3, #0
 8007668:	d10a      	bne.n	8007680 <USB_EPStartXfer+0x5ca>
 800766a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800766c:	881b      	ldrh	r3, [r3, #0]
 800766e:	b29b      	uxth	r3, r3
 8007670:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007674:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007678:	b29a      	uxth	r2, r3
 800767a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800767c:	801a      	strh	r2, [r3, #0]
 800767e:	e06d      	b.n	800775c <USB_EPStartXfer+0x6a6>
 8007680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007684:	2b3e      	cmp	r3, #62	@ 0x3e
 8007686:	d81c      	bhi.n	80076c2 <USB_EPStartXfer+0x60c>
 8007688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800768c:	085b      	lsrs	r3, r3, #1
 800768e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007692:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	2b00      	cmp	r3, #0
 800769c:	d004      	beq.n	80076a8 <USB_EPStartXfer+0x5f2>
 800769e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80076a2:	3301      	adds	r3, #1
 80076a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80076a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076aa:	881b      	ldrh	r3, [r3, #0]
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	029b      	lsls	r3, r3, #10
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	4313      	orrs	r3, r2
 80076ba:	b29a      	uxth	r2, r3
 80076bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076be:	801a      	strh	r2, [r3, #0]
 80076c0:	e04c      	b.n	800775c <USB_EPStartXfer+0x6a6>
 80076c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076c6:	095b      	lsrs	r3, r3, #5
 80076c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80076cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076d0:	f003 031f 	and.w	r3, r3, #31
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d104      	bne.n	80076e2 <USB_EPStartXfer+0x62c>
 80076d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80076dc:	3b01      	subs	r3, #1
 80076de:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80076e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076e4:	881b      	ldrh	r3, [r3, #0]
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	029b      	lsls	r3, r3, #10
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	4313      	orrs	r3, r2
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076fe:	b29a      	uxth	r2, r3
 8007700:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007702:	801a      	strh	r2, [r3, #0]
 8007704:	e02a      	b.n	800775c <USB_EPStartXfer+0x6a6>
 8007706:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800770a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	785b      	ldrb	r3, [r3, #1]
 8007712:	2b01      	cmp	r3, #1
 8007714:	d122      	bne.n	800775c <USB_EPStartXfer+0x6a6>
 8007716:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800771a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	653b      	str	r3, [r7, #80]	@ 0x50
 8007722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007726:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007730:	b29b      	uxth	r3, r3
 8007732:	461a      	mov	r2, r3
 8007734:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007736:	4413      	add	r3, r2
 8007738:	653b      	str	r3, [r7, #80]	@ 0x50
 800773a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800773e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	011a      	lsls	r2, r3, #4
 8007748:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800774a:	4413      	add	r3, r2
 800774c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007750:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007752:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007756:	b29a      	uxth	r2, r3
 8007758:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800775a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800775c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007760:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	891b      	ldrh	r3, [r3, #8]
 8007768:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800776c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007770:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	6959      	ldr	r1, [r3, #20]
 8007778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800777c:	b29b      	uxth	r3, r3
 800777e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007782:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007786:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800778a:	6800      	ldr	r0, [r0, #0]
 800778c:	f001 f973 	bl	8008a76 <USB_WritePMA>
            ep->xfer_buff += len;
 8007790:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007794:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	695a      	ldr	r2, [r3, #20]
 800779c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077a0:	441a      	add	r2, r3
 80077a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80077ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	6a1a      	ldr	r2, [r3, #32]
 80077ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d90f      	bls.n	80077ea <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80077ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	6a1a      	ldr	r2, [r3, #32]
 80077d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077da:	1ad2      	subs	r2, r2, r3
 80077dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	621a      	str	r2, [r3, #32]
 80077e8:	e00e      	b.n	8007808 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80077ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	6a1b      	ldr	r3, [r3, #32]
 80077f6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80077fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2200      	movs	r2, #0
 8007806:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007808:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800780c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	643b      	str	r3, [r7, #64]	@ 0x40
 8007814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007818:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	785b      	ldrb	r3, [r3, #1]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d177      	bne.n	8007914 <USB_EPStartXfer+0x85e>
 8007824:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007828:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007830:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007834:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800783e:	b29b      	uxth	r3, r3
 8007840:	461a      	mov	r2, r3
 8007842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007844:	4413      	add	r3, r2
 8007846:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007848:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800784c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	011a      	lsls	r2, r3, #4
 8007856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007858:	4413      	add	r3, r2
 800785a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800785e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007862:	881b      	ldrh	r3, [r3, #0]
 8007864:	b29b      	uxth	r3, r3
 8007866:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800786a:	b29a      	uxth	r2, r3
 800786c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800786e:	801a      	strh	r2, [r3, #0]
 8007870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007874:	2b00      	cmp	r3, #0
 8007876:	d10a      	bne.n	800788e <USB_EPStartXfer+0x7d8>
 8007878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800787a:	881b      	ldrh	r3, [r3, #0]
 800787c:	b29b      	uxth	r3, r3
 800787e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007882:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007886:	b29a      	uxth	r2, r3
 8007888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800788a:	801a      	strh	r2, [r3, #0]
 800788c:	e067      	b.n	800795e <USB_EPStartXfer+0x8a8>
 800788e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007892:	2b3e      	cmp	r3, #62	@ 0x3e
 8007894:	d81c      	bhi.n	80078d0 <USB_EPStartXfer+0x81a>
 8007896:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800789a:	085b      	lsrs	r3, r3, #1
 800789c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80078a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078a4:	f003 0301 	and.w	r3, r3, #1
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d004      	beq.n	80078b6 <USB_EPStartXfer+0x800>
 80078ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078b0:	3301      	adds	r3, #1
 80078b2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80078b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078b8:	881b      	ldrh	r3, [r3, #0]
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	029b      	lsls	r3, r3, #10
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	4313      	orrs	r3, r2
 80078c8:	b29a      	uxth	r2, r3
 80078ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078cc:	801a      	strh	r2, [r3, #0]
 80078ce:	e046      	b.n	800795e <USB_EPStartXfer+0x8a8>
 80078d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078d4:	095b      	lsrs	r3, r3, #5
 80078d6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80078da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078de:	f003 031f 	and.w	r3, r3, #31
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d104      	bne.n	80078f0 <USB_EPStartXfer+0x83a>
 80078e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078ea:	3b01      	subs	r3, #1
 80078ec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80078f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078f2:	881b      	ldrh	r3, [r3, #0]
 80078f4:	b29a      	uxth	r2, r3
 80078f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	029b      	lsls	r3, r3, #10
 80078fe:	b29b      	uxth	r3, r3
 8007900:	4313      	orrs	r3, r2
 8007902:	b29b      	uxth	r3, r3
 8007904:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007908:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800790c:	b29a      	uxth	r2, r3
 800790e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007910:	801a      	strh	r2, [r3, #0]
 8007912:	e024      	b.n	800795e <USB_EPStartXfer+0x8a8>
 8007914:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007918:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	785b      	ldrb	r3, [r3, #1]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d11c      	bne.n	800795e <USB_EPStartXfer+0x8a8>
 8007924:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007928:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007932:	b29b      	uxth	r3, r3
 8007934:	461a      	mov	r2, r3
 8007936:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007938:	4413      	add	r3, r2
 800793a:	643b      	str	r3, [r7, #64]	@ 0x40
 800793c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007940:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	011a      	lsls	r2, r3, #4
 800794a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800794c:	4413      	add	r3, r2
 800794e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007952:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007954:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007958:	b29a      	uxth	r2, r3
 800795a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800795c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800795e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007962:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	895b      	ldrh	r3, [r3, #10]
 800796a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800796e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007972:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	6959      	ldr	r1, [r3, #20]
 800797a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800797e:	b29b      	uxth	r3, r3
 8007980:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007984:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007988:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800798c:	6800      	ldr	r0, [r0, #0]
 800798e:	f001 f872 	bl	8008a76 <USB_WritePMA>
 8007992:	e227      	b.n	8007de4 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007994:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007998:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	6a1b      	ldr	r3, [r3, #32]
 80079a0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80079a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	4413      	add	r3, r2
 80079be:	881b      	ldrh	r3, [r3, #0]
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80079c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079ca:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80079ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	441a      	add	r2, r3
 80079e8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80079ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007a00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a20:	4413      	add	r3, r2
 8007a22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	011a      	lsls	r2, r3, #4
 8007a32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a34:	4413      	add	r3, r2
 8007a36:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007a3a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a40:	b29a      	uxth	r2, r3
 8007a42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a44:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007a46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	891b      	ldrh	r3, [r3, #8]
 8007a52:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	6959      	ldr	r1, [r3, #20]
 8007a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007a6c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007a70:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007a74:	6800      	ldr	r0, [r0, #0]
 8007a76:	f000 fffe 	bl	8008a76 <USB_WritePMA>
 8007a7a:	e1b3      	b.n	8007de4 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007a7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	6a1a      	ldr	r2, [r3, #32]
 8007a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a8c:	1ad2      	subs	r2, r2, r3
 8007a8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007a9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	4413      	add	r3, r2
 8007ab4:	881b      	ldrh	r3, [r3, #0]
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f000 80c6 	beq.w	8007c4e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007ac2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ac6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	673b      	str	r3, [r7, #112]	@ 0x70
 8007ace:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ad2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	785b      	ldrb	r3, [r3, #1]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d177      	bne.n	8007bce <USB_EPStartXfer+0xb18>
 8007ade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ae2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007aea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	461a      	mov	r2, r3
 8007afc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007afe:	4413      	add	r3, r2
 8007b00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	011a      	lsls	r2, r3, #4
 8007b10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b12:	4413      	add	r3, r2
 8007b14:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007b18:	667b      	str	r3, [r7, #100]	@ 0x64
 8007b1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b1c:	881b      	ldrh	r3, [r3, #0]
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b24:	b29a      	uxth	r2, r3
 8007b26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b28:	801a      	strh	r2, [r3, #0]
 8007b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d10a      	bne.n	8007b48 <USB_EPStartXfer+0xa92>
 8007b32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b34:	881b      	ldrh	r3, [r3, #0]
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b44:	801a      	strh	r2, [r3, #0]
 8007b46:	e067      	b.n	8007c18 <USB_EPStartXfer+0xb62>
 8007b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b4c:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b4e:	d81c      	bhi.n	8007b8a <USB_EPStartXfer+0xad4>
 8007b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b54:	085b      	lsrs	r3, r3, #1
 8007b56:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b5e:	f003 0301 	and.w	r3, r3, #1
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d004      	beq.n	8007b70 <USB_EPStartXfer+0xaba>
 8007b66:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007b70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b72:	881b      	ldrh	r3, [r3, #0]
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	029b      	lsls	r3, r3, #10
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	4313      	orrs	r3, r2
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b86:	801a      	strh	r2, [r3, #0]
 8007b88:	e046      	b.n	8007c18 <USB_EPStartXfer+0xb62>
 8007b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b8e:	095b      	lsrs	r3, r3, #5
 8007b90:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b98:	f003 031f 	and.w	r3, r3, #31
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d104      	bne.n	8007baa <USB_EPStartXfer+0xaf4>
 8007ba0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007baa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bac:	881b      	ldrh	r3, [r3, #0]
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	029b      	lsls	r3, r3, #10
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bca:	801a      	strh	r2, [r3, #0]
 8007bcc:	e024      	b.n	8007c18 <USB_EPStartXfer+0xb62>
 8007bce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	785b      	ldrb	r3, [r3, #1]
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d11c      	bne.n	8007c18 <USB_EPStartXfer+0xb62>
 8007bde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007be2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	461a      	mov	r2, r3
 8007bf0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007bf2:	4413      	add	r3, r2
 8007bf4:	673b      	str	r3, [r7, #112]	@ 0x70
 8007bf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	011a      	lsls	r2, r3, #4
 8007c04:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c06:	4413      	add	r3, r2
 8007c08:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007c0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c16:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	895b      	ldrh	r3, [r3, #10]
 8007c24:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	6959      	ldr	r1, [r3, #20]
 8007c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007c3e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007c42:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007c46:	6800      	ldr	r0, [r0, #0]
 8007c48:	f000 ff15 	bl	8008a76 <USB_WritePMA>
 8007c4c:	e0ca      	b.n	8007de4 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007c4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	785b      	ldrb	r3, [r3, #1]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d177      	bne.n	8007d4e <USB_EPStartXfer+0xc98>
 8007c5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007c6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007c7e:	4413      	add	r3, r2
 8007c80:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007c82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	011a      	lsls	r2, r3, #4
 8007c90:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007c92:	4413      	add	r3, r2
 8007c94:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007c98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007c9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c9c:	881b      	ldrh	r3, [r3, #0]
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ca4:	b29a      	uxth	r2, r3
 8007ca6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ca8:	801a      	strh	r2, [r3, #0]
 8007caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d10a      	bne.n	8007cc8 <USB_EPStartXfer+0xc12>
 8007cb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cb4:	881b      	ldrh	r3, [r3, #0]
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cc0:	b29a      	uxth	r2, r3
 8007cc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cc4:	801a      	strh	r2, [r3, #0]
 8007cc6:	e073      	b.n	8007db0 <USB_EPStartXfer+0xcfa>
 8007cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ccc:	2b3e      	cmp	r3, #62	@ 0x3e
 8007cce:	d81c      	bhi.n	8007d0a <USB_EPStartXfer+0xc54>
 8007cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cd4:	085b      	lsrs	r3, r3, #1
 8007cd6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cde:	f003 0301 	and.w	r3, r3, #1
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d004      	beq.n	8007cf0 <USB_EPStartXfer+0xc3a>
 8007ce6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007cea:	3301      	adds	r3, #1
 8007cec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007cf0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cf2:	881b      	ldrh	r3, [r3, #0]
 8007cf4:	b29a      	uxth	r2, r3
 8007cf6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	029b      	lsls	r3, r3, #10
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	4313      	orrs	r3, r2
 8007d02:	b29a      	uxth	r2, r3
 8007d04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d06:	801a      	strh	r2, [r3, #0]
 8007d08:	e052      	b.n	8007db0 <USB_EPStartXfer+0xcfa>
 8007d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d0e:	095b      	lsrs	r3, r3, #5
 8007d10:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d18:	f003 031f 	and.w	r3, r3, #31
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d104      	bne.n	8007d2a <USB_EPStartXfer+0xc74>
 8007d20:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007d24:	3b01      	subs	r3, #1
 8007d26:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007d2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d2c:	881b      	ldrh	r3, [r3, #0]
 8007d2e:	b29a      	uxth	r2, r3
 8007d30:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	029b      	lsls	r3, r3, #10
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d4a:	801a      	strh	r2, [r3, #0]
 8007d4c:	e030      	b.n	8007db0 <USB_EPStartXfer+0xcfa>
 8007d4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	785b      	ldrb	r3, [r3, #1]
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d128      	bne.n	8007db0 <USB_EPStartXfer+0xcfa>
 8007d5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d82:	4413      	add	r3, r2
 8007d84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	011a      	lsls	r2, r3, #4
 8007d96:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d9a:	4413      	add	r3, r2
 8007d9c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007da0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007da8:	b29a      	uxth	r2, r3
 8007daa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007dae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007db0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007db4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	891b      	ldrh	r3, [r3, #8]
 8007dbc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007dc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	6959      	ldr	r1, [r3, #20]
 8007dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007dd6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007dda:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007dde:	6800      	ldr	r0, [r0, #0]
 8007de0:	f000 fe49 	bl	8008a76 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007de4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007de8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007df2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	4413      	add	r3, r2
 8007dfe:	881b      	ldrh	r3, [r3, #0]
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e0a:	817b      	strh	r3, [r7, #10]
 8007e0c:	897b      	ldrh	r3, [r7, #10]
 8007e0e:	f083 0310 	eor.w	r3, r3, #16
 8007e12:	817b      	strh	r3, [r7, #10]
 8007e14:	897b      	ldrh	r3, [r7, #10]
 8007e16:	f083 0320 	eor.w	r3, r3, #32
 8007e1a:	817b      	strh	r3, [r7, #10]
 8007e1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	441a      	add	r2, r3
 8007e36:	897b      	ldrh	r3, [r7, #10]
 8007e38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	8013      	strh	r3, [r2, #0]
 8007e4c:	f000 bcdf 	b.w	800880e <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007e50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	7b1b      	ldrb	r3, [r3, #12]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	f040 80bc 	bne.w	8007fda <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007e62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	699a      	ldr	r2, [r3, #24]
 8007e6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d917      	bls.n	8007eae <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007e7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007e8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	699a      	ldr	r2, [r3, #24]
 8007e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e9e:	1ad2      	subs	r2, r2, r3
 8007ea0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ea4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	619a      	str	r2, [r3, #24]
 8007eac:	e00e      	b.n	8007ecc <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007eae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	699b      	ldr	r3, [r3, #24]
 8007eba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ec2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007ecc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ed0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007eda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ede:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	461a      	mov	r2, r3
 8007eec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007ef0:	4413      	add	r3, r2
 8007ef2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007ef6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007efa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	011a      	lsls	r2, r3, #4
 8007f04:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f08:	4413      	add	r3, r2
 8007f0a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007f0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007f12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f16:	881b      	ldrh	r3, [r3, #0]
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f24:	801a      	strh	r2, [r3, #0]
 8007f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d10d      	bne.n	8007f4a <USB_EPStartXfer+0xe94>
 8007f2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f32:	881b      	ldrh	r3, [r3, #0]
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f44:	801a      	strh	r2, [r3, #0]
 8007f46:	f000 bc28 	b.w	800879a <USB_EPStartXfer+0x16e4>
 8007f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f4e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f50:	d81f      	bhi.n	8007f92 <USB_EPStartXfer+0xedc>
 8007f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f56:	085b      	lsrs	r3, r3, #1
 8007f58:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f60:	f003 0301 	and.w	r3, r3, #1
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d004      	beq.n	8007f72 <USB_EPStartXfer+0xebc>
 8007f68:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f76:	881b      	ldrh	r3, [r3, #0]
 8007f78:	b29a      	uxth	r2, r3
 8007f7a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	029b      	lsls	r3, r3, #10
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	4313      	orrs	r3, r2
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f8c:	801a      	strh	r2, [r3, #0]
 8007f8e:	f000 bc04 	b.w	800879a <USB_EPStartXfer+0x16e4>
 8007f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f96:	095b      	lsrs	r3, r3, #5
 8007f98:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fa0:	f003 031f 	and.w	r3, r3, #31
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d104      	bne.n	8007fb2 <USB_EPStartXfer+0xefc>
 8007fa8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007fac:	3b01      	subs	r3, #1
 8007fae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007fb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007fb6:	881b      	ldrh	r3, [r3, #0]
 8007fb8:	b29a      	uxth	r2, r3
 8007fba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	029b      	lsls	r3, r3, #10
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007fd6:	801a      	strh	r2, [r3, #0]
 8007fd8:	e3df      	b.n	800879a <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007fda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	78db      	ldrb	r3, [r3, #3]
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	f040 8218 	bne.w	800841c <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007fec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ff0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	785b      	ldrb	r3, [r3, #1]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	f040 809d 	bne.w	8008138 <USB_EPStartXfer+0x1082>
 8007ffe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008002:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800800c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008010:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800801a:	b29b      	uxth	r3, r3
 800801c:	461a      	mov	r2, r3
 800801e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008022:	4413      	add	r3, r2
 8008024:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800802c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	011a      	lsls	r2, r3, #4
 8008036:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800803a:	4413      	add	r3, r2
 800803c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008040:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008044:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008048:	881b      	ldrh	r3, [r3, #0]
 800804a:	b29b      	uxth	r3, r3
 800804c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008050:	b29a      	uxth	r2, r3
 8008052:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008056:	801a      	strh	r2, [r3, #0]
 8008058:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800805c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	691b      	ldr	r3, [r3, #16]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d10c      	bne.n	8008082 <USB_EPStartXfer+0xfcc>
 8008068:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800806c:	881b      	ldrh	r3, [r3, #0]
 800806e:	b29b      	uxth	r3, r3
 8008070:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008074:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008078:	b29a      	uxth	r2, r3
 800807a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800807e:	801a      	strh	r2, [r3, #0]
 8008080:	e08f      	b.n	80081a2 <USB_EPStartXfer+0x10ec>
 8008082:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008086:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008090:	d826      	bhi.n	80080e0 <USB_EPStartXfer+0x102a>
 8008092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008096:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	691b      	ldr	r3, [r3, #16]
 800809e:	085b      	lsrs	r3, r3, #1
 80080a0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80080a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	691b      	ldr	r3, [r3, #16]
 80080b0:	f003 0301 	and.w	r3, r3, #1
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d004      	beq.n	80080c2 <USB_EPStartXfer+0x100c>
 80080b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080bc:	3301      	adds	r3, #1
 80080be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80080c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080c6:	881b      	ldrh	r3, [r3, #0]
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	029b      	lsls	r3, r3, #10
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	4313      	orrs	r3, r2
 80080d6:	b29a      	uxth	r2, r3
 80080d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080dc:	801a      	strh	r2, [r3, #0]
 80080de:	e060      	b.n	80081a2 <USB_EPStartXfer+0x10ec>
 80080e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	095b      	lsrs	r3, r3, #5
 80080ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80080f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	f003 031f 	and.w	r3, r3, #31
 8008102:	2b00      	cmp	r3, #0
 8008104:	d104      	bne.n	8008110 <USB_EPStartXfer+0x105a>
 8008106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800810a:	3b01      	subs	r3, #1
 800810c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008110:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008114:	881b      	ldrh	r3, [r3, #0]
 8008116:	b29a      	uxth	r2, r3
 8008118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800811c:	b29b      	uxth	r3, r3
 800811e:	029b      	lsls	r3, r3, #10
 8008120:	b29b      	uxth	r3, r3
 8008122:	4313      	orrs	r3, r2
 8008124:	b29b      	uxth	r3, r3
 8008126:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800812a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800812e:	b29a      	uxth	r2, r3
 8008130:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008134:	801a      	strh	r2, [r3, #0]
 8008136:	e034      	b.n	80081a2 <USB_EPStartXfer+0x10ec>
 8008138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800813c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	785b      	ldrb	r3, [r3, #1]
 8008144:	2b01      	cmp	r3, #1
 8008146:	d12c      	bne.n	80081a2 <USB_EPStartXfer+0x10ec>
 8008148:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800814c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800815a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008164:	b29b      	uxth	r3, r3
 8008166:	461a      	mov	r2, r3
 8008168:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800816c:	4413      	add	r3, r2
 800816e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008176:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	011a      	lsls	r2, r3, #4
 8008180:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008184:	4413      	add	r3, r2
 8008186:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800818a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800818e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008192:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	b29a      	uxth	r2, r3
 800819c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80081a0:	801a      	strh	r2, [r3, #0]
 80081a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80081b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	785b      	ldrb	r3, [r3, #1]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f040 809d 	bne.w	80082fc <USB_EPStartXfer+0x1246>
 80081c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80081d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081de:	b29b      	uxth	r3, r3
 80081e0:	461a      	mov	r2, r3
 80081e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80081e6:	4413      	add	r3, r2
 80081e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80081ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	011a      	lsls	r2, r3, #4
 80081fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80081fe:	4413      	add	r3, r2
 8008200:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008204:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008208:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800820c:	881b      	ldrh	r3, [r3, #0]
 800820e:	b29b      	uxth	r3, r3
 8008210:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008214:	b29a      	uxth	r2, r3
 8008216:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800821a:	801a      	strh	r2, [r3, #0]
 800821c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008220:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d10c      	bne.n	8008246 <USB_EPStartXfer+0x1190>
 800822c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008230:	881b      	ldrh	r3, [r3, #0]
 8008232:	b29b      	uxth	r3, r3
 8008234:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008238:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800823c:	b29a      	uxth	r2, r3
 800823e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008242:	801a      	strh	r2, [r3, #0]
 8008244:	e088      	b.n	8008358 <USB_EPStartXfer+0x12a2>
 8008246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800824a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	2b3e      	cmp	r3, #62	@ 0x3e
 8008254:	d826      	bhi.n	80082a4 <USB_EPStartXfer+0x11ee>
 8008256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800825a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	691b      	ldr	r3, [r3, #16]
 8008262:	085b      	lsrs	r3, r3, #1
 8008264:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008268:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800826c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	691b      	ldr	r3, [r3, #16]
 8008274:	f003 0301 	and.w	r3, r3, #1
 8008278:	2b00      	cmp	r3, #0
 800827a:	d004      	beq.n	8008286 <USB_EPStartXfer+0x11d0>
 800827c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008280:	3301      	adds	r3, #1
 8008282:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008286:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800828a:	881b      	ldrh	r3, [r3, #0]
 800828c:	b29a      	uxth	r2, r3
 800828e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008292:	b29b      	uxth	r3, r3
 8008294:	029b      	lsls	r3, r3, #10
 8008296:	b29b      	uxth	r3, r3
 8008298:	4313      	orrs	r3, r2
 800829a:	b29a      	uxth	r2, r3
 800829c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082a0:	801a      	strh	r2, [r3, #0]
 80082a2:	e059      	b.n	8008358 <USB_EPStartXfer+0x12a2>
 80082a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	095b      	lsrs	r3, r3, #5
 80082b2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80082b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	691b      	ldr	r3, [r3, #16]
 80082c2:	f003 031f 	and.w	r3, r3, #31
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d104      	bne.n	80082d4 <USB_EPStartXfer+0x121e>
 80082ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082ce:	3b01      	subs	r3, #1
 80082d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80082d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082d8:	881b      	ldrh	r3, [r3, #0]
 80082da:	b29a      	uxth	r2, r3
 80082dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	029b      	lsls	r3, r3, #10
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	4313      	orrs	r3, r2
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082f2:	b29a      	uxth	r2, r3
 80082f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082f8:	801a      	strh	r2, [r3, #0]
 80082fa:	e02d      	b.n	8008358 <USB_EPStartXfer+0x12a2>
 80082fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008300:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	785b      	ldrb	r3, [r3, #1]
 8008308:	2b01      	cmp	r3, #1
 800830a:	d125      	bne.n	8008358 <USB_EPStartXfer+0x12a2>
 800830c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008310:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800831a:	b29b      	uxth	r3, r3
 800831c:	461a      	mov	r2, r3
 800831e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008322:	4413      	add	r3, r2
 8008324:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800832c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	011a      	lsls	r2, r3, #4
 8008336:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800833a:	4413      	add	r3, r2
 800833c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008340:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008348:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	b29a      	uxth	r2, r3
 8008352:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008356:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008358:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800835c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	69db      	ldr	r3, [r3, #28]
 8008364:	2b00      	cmp	r3, #0
 8008366:	f000 8218 	beq.w	800879a <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800836a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800836e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008378:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	4413      	add	r3, r2
 8008384:	881b      	ldrh	r3, [r3, #0]
 8008386:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800838a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800838e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008392:	2b00      	cmp	r3, #0
 8008394:	d005      	beq.n	80083a2 <USB_EPStartXfer+0x12ec>
 8008396:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800839a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d10d      	bne.n	80083be <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80083a2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80083a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	f040 81f5 	bne.w	800879a <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80083b0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80083b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	f040 81ee 	bne.w	800879a <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80083be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	4413      	add	r3, r2
 80083d8:	881b      	ldrh	r3, [r3, #0]
 80083da:	b29b      	uxth	r3, r3
 80083dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083e4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80083e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	441a      	add	r2, r3
 8008402:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008406:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800840a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800840e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008412:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008416:	b29b      	uxth	r3, r3
 8008418:	8013      	strh	r3, [r2, #0]
 800841a:	e1be      	b.n	800879a <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800841c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008420:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	78db      	ldrb	r3, [r3, #3]
 8008428:	2b01      	cmp	r3, #1
 800842a:	f040 81b4 	bne.w	8008796 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800842e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008432:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	699a      	ldr	r2, [r3, #24]
 800843a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800843e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	691b      	ldr	r3, [r3, #16]
 8008446:	429a      	cmp	r2, r3
 8008448:	d917      	bls.n	800847a <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800844a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800844e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	691b      	ldr	r3, [r3, #16]
 8008456:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800845a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800845e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	699a      	ldr	r2, [r3, #24]
 8008466:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800846a:	1ad2      	subs	r2, r2, r3
 800846c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008470:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	619a      	str	r2, [r3, #24]
 8008478:	e00e      	b.n	8008498 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800847a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800847e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800848a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800848e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2200      	movs	r2, #0
 8008496:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008498:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800849c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	785b      	ldrb	r3, [r3, #1]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f040 8085 	bne.w	80085b4 <USB_EPStartXfer+0x14fe>
 80084aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80084b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	461a      	mov	r2, r3
 80084ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80084ce:	4413      	add	r3, r2
 80084d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80084d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	011a      	lsls	r2, r3, #4
 80084e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80084e6:	4413      	add	r3, r2
 80084e8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80084ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80084f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80084f4:	881b      	ldrh	r3, [r3, #0]
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084fc:	b29a      	uxth	r2, r3
 80084fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008502:	801a      	strh	r2, [r3, #0]
 8008504:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008508:	2b00      	cmp	r3, #0
 800850a:	d10c      	bne.n	8008526 <USB_EPStartXfer+0x1470>
 800850c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008510:	881b      	ldrh	r3, [r3, #0]
 8008512:	b29b      	uxth	r3, r3
 8008514:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008518:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800851c:	b29a      	uxth	r2, r3
 800851e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008522:	801a      	strh	r2, [r3, #0]
 8008524:	e077      	b.n	8008616 <USB_EPStartXfer+0x1560>
 8008526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800852a:	2b3e      	cmp	r3, #62	@ 0x3e
 800852c:	d81e      	bhi.n	800856c <USB_EPStartXfer+0x14b6>
 800852e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008532:	085b      	lsrs	r3, r3, #1
 8008534:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800853c:	f003 0301 	and.w	r3, r3, #1
 8008540:	2b00      	cmp	r3, #0
 8008542:	d004      	beq.n	800854e <USB_EPStartXfer+0x1498>
 8008544:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008548:	3301      	adds	r3, #1
 800854a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800854e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008552:	881b      	ldrh	r3, [r3, #0]
 8008554:	b29a      	uxth	r2, r3
 8008556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800855a:	b29b      	uxth	r3, r3
 800855c:	029b      	lsls	r3, r3, #10
 800855e:	b29b      	uxth	r3, r3
 8008560:	4313      	orrs	r3, r2
 8008562:	b29a      	uxth	r2, r3
 8008564:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008568:	801a      	strh	r2, [r3, #0]
 800856a:	e054      	b.n	8008616 <USB_EPStartXfer+0x1560>
 800856c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008570:	095b      	lsrs	r3, r3, #5
 8008572:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008576:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800857a:	f003 031f 	and.w	r3, r3, #31
 800857e:	2b00      	cmp	r3, #0
 8008580:	d104      	bne.n	800858c <USB_EPStartXfer+0x14d6>
 8008582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008586:	3b01      	subs	r3, #1
 8008588:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800858c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008590:	881b      	ldrh	r3, [r3, #0]
 8008592:	b29a      	uxth	r2, r3
 8008594:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008598:	b29b      	uxth	r3, r3
 800859a:	029b      	lsls	r3, r3, #10
 800859c:	b29b      	uxth	r3, r3
 800859e:	4313      	orrs	r3, r2
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085aa:	b29a      	uxth	r2, r3
 80085ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80085b0:	801a      	strh	r2, [r3, #0]
 80085b2:	e030      	b.n	8008616 <USB_EPStartXfer+0x1560>
 80085b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	785b      	ldrb	r3, [r3, #1]
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d128      	bne.n	8008616 <USB_EPStartXfer+0x1560>
 80085c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80085d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	461a      	mov	r2, r3
 80085e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80085e8:	4413      	add	r3, r2
 80085ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80085ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	011a      	lsls	r2, r3, #4
 80085fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008600:	4413      	add	r3, r2
 8008602:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008606:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800860a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800860e:	b29a      	uxth	r2, r3
 8008610:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008614:	801a      	strh	r2, [r3, #0]
 8008616:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800861a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008624:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008628:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	785b      	ldrb	r3, [r3, #1]
 8008630:	2b00      	cmp	r3, #0
 8008632:	f040 8085 	bne.w	8008740 <USB_EPStartXfer+0x168a>
 8008636:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800863a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008648:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008652:	b29b      	uxth	r3, r3
 8008654:	461a      	mov	r2, r3
 8008656:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800865a:	4413      	add	r3, r2
 800865c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008660:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008664:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	011a      	lsls	r2, r3, #4
 800866e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008672:	4413      	add	r3, r2
 8008674:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008678:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800867c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008680:	881b      	ldrh	r3, [r3, #0]
 8008682:	b29b      	uxth	r3, r3
 8008684:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008688:	b29a      	uxth	r2, r3
 800868a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800868e:	801a      	strh	r2, [r3, #0]
 8008690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008694:	2b00      	cmp	r3, #0
 8008696:	d10c      	bne.n	80086b2 <USB_EPStartXfer+0x15fc>
 8008698:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800869c:	881b      	ldrh	r3, [r3, #0]
 800869e:	b29b      	uxth	r3, r3
 80086a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086a8:	b29a      	uxth	r2, r3
 80086aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80086ae:	801a      	strh	r2, [r3, #0]
 80086b0:	e073      	b.n	800879a <USB_EPStartXfer+0x16e4>
 80086b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80086b8:	d81e      	bhi.n	80086f8 <USB_EPStartXfer+0x1642>
 80086ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086be:	085b      	lsrs	r3, r3, #1
 80086c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80086c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086c8:	f003 0301 	and.w	r3, r3, #1
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d004      	beq.n	80086da <USB_EPStartXfer+0x1624>
 80086d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086d4:	3301      	adds	r3, #1
 80086d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80086da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80086de:	881b      	ldrh	r3, [r3, #0]
 80086e0:	b29a      	uxth	r2, r3
 80086e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	029b      	lsls	r3, r3, #10
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	4313      	orrs	r3, r2
 80086ee:	b29a      	uxth	r2, r3
 80086f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80086f4:	801a      	strh	r2, [r3, #0]
 80086f6:	e050      	b.n	800879a <USB_EPStartXfer+0x16e4>
 80086f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086fc:	095b      	lsrs	r3, r3, #5
 80086fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008706:	f003 031f 	and.w	r3, r3, #31
 800870a:	2b00      	cmp	r3, #0
 800870c:	d104      	bne.n	8008718 <USB_EPStartXfer+0x1662>
 800870e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008712:	3b01      	subs	r3, #1
 8008714:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008718:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800871c:	881b      	ldrh	r3, [r3, #0]
 800871e:	b29a      	uxth	r2, r3
 8008720:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008724:	b29b      	uxth	r3, r3
 8008726:	029b      	lsls	r3, r3, #10
 8008728:	b29b      	uxth	r3, r3
 800872a:	4313      	orrs	r3, r2
 800872c:	b29b      	uxth	r3, r3
 800872e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008732:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008736:	b29a      	uxth	r2, r3
 8008738:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800873c:	801a      	strh	r2, [r3, #0]
 800873e:	e02c      	b.n	800879a <USB_EPStartXfer+0x16e4>
 8008740:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008744:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	785b      	ldrb	r3, [r3, #1]
 800874c:	2b01      	cmp	r3, #1
 800874e:	d124      	bne.n	800879a <USB_EPStartXfer+0x16e4>
 8008750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008754:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800875e:	b29b      	uxth	r3, r3
 8008760:	461a      	mov	r2, r3
 8008762:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008766:	4413      	add	r3, r2
 8008768:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800876c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008770:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	011a      	lsls	r2, r3, #4
 800877a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800877e:	4413      	add	r3, r2
 8008780:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008784:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800878c:	b29a      	uxth	r2, r3
 800878e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008792:	801a      	strh	r2, [r3, #0]
 8008794:	e001      	b.n	800879a <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	e03a      	b.n	8008810 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800879a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800879e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	4413      	add	r3, r2
 80087b4:	881b      	ldrh	r3, [r3, #0]
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80087bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087c0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80087c4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80087c8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80087cc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80087d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80087d4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80087d8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80087dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	441a      	add	r2, r3
 80087f6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80087fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008802:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008806:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800880a:	b29b      	uxth	r3, r3
 800880c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800880e:	2300      	movs	r3, #0
}
 8008810:	4618      	mov	r0, r3
 8008812:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800881a:	b480      	push	{r7}
 800881c:	b085      	sub	sp, #20
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
 8008822:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	785b      	ldrb	r3, [r3, #1]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d020      	beq.n	800886e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	4413      	add	r3, r2
 8008836:	881b      	ldrh	r3, [r3, #0]
 8008838:	b29b      	uxth	r3, r3
 800883a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800883e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008842:	81bb      	strh	r3, [r7, #12]
 8008844:	89bb      	ldrh	r3, [r7, #12]
 8008846:	f083 0310 	eor.w	r3, r3, #16
 800884a:	81bb      	strh	r3, [r7, #12]
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	441a      	add	r2, r3
 8008856:	89bb      	ldrh	r3, [r7, #12]
 8008858:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800885c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008860:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008864:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008868:	b29b      	uxth	r3, r3
 800886a:	8013      	strh	r3, [r2, #0]
 800886c:	e01f      	b.n	80088ae <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	4413      	add	r3, r2
 8008878:	881b      	ldrh	r3, [r3, #0]
 800887a:	b29b      	uxth	r3, r3
 800887c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008880:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008884:	81fb      	strh	r3, [r7, #14]
 8008886:	89fb      	ldrh	r3, [r7, #14]
 8008888:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800888c:	81fb      	strh	r3, [r7, #14]
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	441a      	add	r2, r3
 8008898:	89fb      	ldrh	r3, [r7, #14]
 800889a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800889e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3714      	adds	r7, #20
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80088bc:	b480      	push	{r7}
 80088be:	b087      	sub	sp, #28
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	7b1b      	ldrb	r3, [r3, #12]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	f040 809d 	bne.w	8008a0a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	785b      	ldrb	r3, [r3, #1]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d04c      	beq.n	8008972 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	4413      	add	r3, r2
 80088e2:	881b      	ldrh	r3, [r3, #0]
 80088e4:	823b      	strh	r3, [r7, #16]
 80088e6:	8a3b      	ldrh	r3, [r7, #16]
 80088e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d01b      	beq.n	8008928 <USB_EPClearStall+0x6c>
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	4413      	add	r3, r2
 80088fa:	881b      	ldrh	r3, [r3, #0]
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008902:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008906:	81fb      	strh	r3, [r7, #14]
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	441a      	add	r2, r3
 8008912:	89fb      	ldrh	r3, [r7, #14]
 8008914:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008918:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800891c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008920:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008924:	b29b      	uxth	r3, r3
 8008926:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	78db      	ldrb	r3, [r3, #3]
 800892c:	2b01      	cmp	r3, #1
 800892e:	d06c      	beq.n	8008a0a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	4413      	add	r3, r2
 800893a:	881b      	ldrh	r3, [r3, #0]
 800893c:	b29b      	uxth	r3, r3
 800893e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008942:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008946:	81bb      	strh	r3, [r7, #12]
 8008948:	89bb      	ldrh	r3, [r7, #12]
 800894a:	f083 0320 	eor.w	r3, r3, #32
 800894e:	81bb      	strh	r3, [r7, #12]
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	441a      	add	r2, r3
 800895a:	89bb      	ldrh	r3, [r7, #12]
 800895c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008960:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008964:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008968:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800896c:	b29b      	uxth	r3, r3
 800896e:	8013      	strh	r3, [r2, #0]
 8008970:	e04b      	b.n	8008a0a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	4413      	add	r3, r2
 800897c:	881b      	ldrh	r3, [r3, #0]
 800897e:	82fb      	strh	r3, [r7, #22]
 8008980:	8afb      	ldrh	r3, [r7, #22]
 8008982:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008986:	2b00      	cmp	r3, #0
 8008988:	d01b      	beq.n	80089c2 <USB_EPClearStall+0x106>
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	4413      	add	r3, r2
 8008994:	881b      	ldrh	r3, [r3, #0]
 8008996:	b29b      	uxth	r3, r3
 8008998:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800899c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089a0:	82bb      	strh	r3, [r7, #20]
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	441a      	add	r2, r3
 80089ac:	8abb      	ldrh	r3, [r7, #20]
 80089ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80089ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089be:	b29b      	uxth	r3, r3
 80089c0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	4413      	add	r3, r2
 80089cc:	881b      	ldrh	r3, [r3, #0]
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80089d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089d8:	827b      	strh	r3, [r7, #18]
 80089da:	8a7b      	ldrh	r3, [r7, #18]
 80089dc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80089e0:	827b      	strh	r3, [r7, #18]
 80089e2:	8a7b      	ldrh	r3, [r7, #18]
 80089e4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80089e8:	827b      	strh	r3, [r7, #18]
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	441a      	add	r2, r3
 80089f4:	8a7b      	ldrh	r3, [r7, #18]
 80089f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	371c      	adds	r7, #28
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr

08008a18 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	460b      	mov	r3, r1
 8008a22:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008a24:	78fb      	ldrb	r3, [r7, #3]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d103      	bne.n	8008a32 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2280      	movs	r2, #128	@ 0x80
 8008a2e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008a48:	2300      	movs	r3, #0
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	370c      	adds	r7, #12
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr

08008a56 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008a56:	b480      	push	{r7}
 8008a58:	b085      	sub	sp, #20
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008a68:	68fb      	ldr	r3, [r7, #12]
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3714      	adds	r7, #20
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr

08008a76 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008a76:	b480      	push	{r7}
 8008a78:	b08b      	sub	sp, #44	@ 0x2c
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	60f8      	str	r0, [r7, #12]
 8008a7e:	60b9      	str	r1, [r7, #8]
 8008a80:	4611      	mov	r1, r2
 8008a82:	461a      	mov	r2, r3
 8008a84:	460b      	mov	r3, r1
 8008a86:	80fb      	strh	r3, [r7, #6]
 8008a88:	4613      	mov	r3, r2
 8008a8a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008a8c:	88bb      	ldrh	r3, [r7, #4]
 8008a8e:	3301      	adds	r3, #1
 8008a90:	085b      	lsrs	r3, r3, #1
 8008a92:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008a9c:	88fb      	ldrh	r3, [r7, #6]
 8008a9e:	005a      	lsls	r2, r3, #1
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008aa8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008aaa:	69bb      	ldr	r3, [r7, #24]
 8008aac:	627b      	str	r3, [r7, #36]	@ 0x24
 8008aae:	e01e      	b.n	8008aee <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	3301      	adds	r3, #1
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	021b      	lsls	r3, r3, #8
 8008abe:	b21a      	sxth	r2, r3
 8008ac0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	b21b      	sxth	r3, r3
 8008ac8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008aca:	6a3b      	ldr	r3, [r7, #32]
 8008acc:	8a7a      	ldrh	r2, [r7, #18]
 8008ace:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008ad0:	6a3b      	ldr	r3, [r7, #32]
 8008ad2:	3302      	adds	r3, #2
 8008ad4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008ad6:	6a3b      	ldr	r3, [r7, #32]
 8008ad8:	3302      	adds	r3, #2
 8008ada:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008adc:	69fb      	ldr	r3, [r7, #28]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aea:	3b01      	subs	r3, #1
 8008aec:	627b      	str	r3, [r7, #36]	@ 0x24
 8008aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d1dd      	bne.n	8008ab0 <USB_WritePMA+0x3a>
  }
}
 8008af4:	bf00      	nop
 8008af6:	bf00      	nop
 8008af8:	372c      	adds	r7, #44	@ 0x2c
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr

08008b02 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008b02:	b480      	push	{r7}
 8008b04:	b08b      	sub	sp, #44	@ 0x2c
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	60f8      	str	r0, [r7, #12]
 8008b0a:	60b9      	str	r1, [r7, #8]
 8008b0c:	4611      	mov	r1, r2
 8008b0e:	461a      	mov	r2, r3
 8008b10:	460b      	mov	r3, r1
 8008b12:	80fb      	strh	r3, [r7, #6]
 8008b14:	4613      	mov	r3, r2
 8008b16:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008b18:	88bb      	ldrh	r3, [r7, #4]
 8008b1a:	085b      	lsrs	r3, r3, #1
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008b28:	88fb      	ldrh	r3, [r7, #6]
 8008b2a:	005a      	lsls	r2, r3, #1
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	4413      	add	r3, r2
 8008b30:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b34:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b3a:	e01b      	b.n	8008b74 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008b3c:	6a3b      	ldr	r3, [r7, #32]
 8008b3e:	881b      	ldrh	r3, [r3, #0]
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008b44:	6a3b      	ldr	r3, [r7, #32]
 8008b46:	3302      	adds	r3, #2
 8008b48:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	b2da      	uxtb	r2, r3
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	3301      	adds	r3, #1
 8008b56:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	0a1b      	lsrs	r3, r3, #8
 8008b5c:	b2da      	uxtb	r2, r3
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008b62:	69fb      	ldr	r3, [r7, #28]
 8008b64:	3301      	adds	r3, #1
 8008b66:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008b68:	6a3b      	ldr	r3, [r7, #32]
 8008b6a:	3302      	adds	r3, #2
 8008b6c:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b70:	3b01      	subs	r3, #1
 8008b72:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d1e0      	bne.n	8008b3c <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008b7a:	88bb      	ldrh	r3, [r7, #4]
 8008b7c:	f003 0301 	and.w	r3, r3, #1
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d007      	beq.n	8008b96 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008b86:	6a3b      	ldr	r3, [r7, #32]
 8008b88:	881b      	ldrh	r3, [r3, #0]
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	b2da      	uxtb	r2, r3
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	701a      	strb	r2, [r3, #0]
  }
}
 8008b96:	bf00      	nop
 8008b98:	372c      	adds	r7, #44	@ 0x2c
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr

08008ba2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b084      	sub	sp, #16
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
 8008baa:	460b      	mov	r3, r1
 8008bac:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	7c1b      	ldrb	r3, [r3, #16]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d115      	bne.n	8008be6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008bba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008bbe:	2202      	movs	r2, #2
 8008bc0:	2181      	movs	r1, #129	@ 0x81
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f7f8 fccb 	bl	800155e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008bce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008bd2:	2202      	movs	r2, #2
 8008bd4:	2101      	movs	r1, #1
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f7f8 fcc1 	bl	800155e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2201      	movs	r2, #1
 8008be0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8008be4:	e012      	b.n	8008c0c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008be6:	2340      	movs	r3, #64	@ 0x40
 8008be8:	2202      	movs	r2, #2
 8008bea:	2181      	movs	r1, #129	@ 0x81
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f7f8 fcb6 	bl	800155e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008bf8:	2340      	movs	r3, #64	@ 0x40
 8008bfa:	2202      	movs	r2, #2
 8008bfc:	2101      	movs	r1, #1
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f7f8 fcad 	bl	800155e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008c0c:	2308      	movs	r3, #8
 8008c0e:	2203      	movs	r2, #3
 8008c10:	2182      	movs	r1, #130	@ 0x82
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f7f8 fca3 	bl	800155e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008c1e:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008c22:	f7f8 fdc3 	bl	80017ac <USBD_static_malloc>
 8008c26:	4602      	mov	r2, r0
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d102      	bne.n	8008c3e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	73fb      	strb	r3, [r7, #15]
 8008c3c:	e026      	b.n	8008c8c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c44:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	7c1b      	ldrb	r3, [r3, #16]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d109      	bne.n	8008c7c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008c6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008c72:	2101      	movs	r1, #1
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f7f8 fd63 	bl	8001740 <USBD_LL_PrepareReceive>
 8008c7a:	e007      	b.n	8008c8c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008c82:	2340      	movs	r3, #64	@ 0x40
 8008c84:	2101      	movs	r1, #1
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f7f8 fd5a 	bl	8001740 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3710      	adds	r7, #16
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b084      	sub	sp, #16
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008ca6:	2181      	movs	r1, #129	@ 0x81
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f7f8 fc7e 	bl	80015aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008cb4:	2101      	movs	r1, #1
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f7f8 fc77 	bl	80015aa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008cc4:	2182      	movs	r1, #130	@ 0x82
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f7f8 fc6f 	bl	80015aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00e      	beq.n	8008cfa <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7f8 fd6b 	bl	80017c8 <USBD_static_free>
    pdev->pClassData = NULL;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8008cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3710      	adds	r7, #16
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b086      	sub	sp, #24
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d14:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008d16:	2300      	movs	r3, #0
 8008d18:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d039      	beq.n	8008da2 <USBD_CDC_Setup+0x9e>
 8008d2e:	2b20      	cmp	r3, #32
 8008d30:	d17f      	bne.n	8008e32 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	88db      	ldrh	r3, [r3, #6]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d029      	beq.n	8008d8e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	b25b      	sxtb	r3, r3
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	da11      	bge.n	8008d68 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	683a      	ldr	r2, [r7, #0]
 8008d4e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008d50:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d52:	683a      	ldr	r2, [r7, #0]
 8008d54:	88d2      	ldrh	r2, [r2, #6]
 8008d56:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008d58:	6939      	ldr	r1, [r7, #16]
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	88db      	ldrh	r3, [r3, #6]
 8008d5e:	461a      	mov	r2, r3
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f001 fa0f 	bl	800a184 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008d66:	e06b      	b.n	8008e40 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	785a      	ldrb	r2, [r3, #1]
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	88db      	ldrh	r3, [r3, #6]
 8008d76:	b2da      	uxtb	r2, r3
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008d7e:	6939      	ldr	r1, [r7, #16]
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	88db      	ldrh	r3, [r3, #6]
 8008d84:	461a      	mov	r2, r3
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f001 fa2a 	bl	800a1e0 <USBD_CtlPrepareRx>
      break;
 8008d8c:	e058      	b.n	8008e40 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008d94:	689b      	ldr	r3, [r3, #8]
 8008d96:	683a      	ldr	r2, [r7, #0]
 8008d98:	7850      	ldrb	r0, [r2, #1]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	6839      	ldr	r1, [r7, #0]
 8008d9e:	4798      	blx	r3
      break;
 8008da0:	e04e      	b.n	8008e40 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	785b      	ldrb	r3, [r3, #1]
 8008da6:	2b0b      	cmp	r3, #11
 8008da8:	d02e      	beq.n	8008e08 <USBD_CDC_Setup+0x104>
 8008daa:	2b0b      	cmp	r3, #11
 8008dac:	dc38      	bgt.n	8008e20 <USBD_CDC_Setup+0x11c>
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d002      	beq.n	8008db8 <USBD_CDC_Setup+0xb4>
 8008db2:	2b0a      	cmp	r3, #10
 8008db4:	d014      	beq.n	8008de0 <USBD_CDC_Setup+0xdc>
 8008db6:	e033      	b.n	8008e20 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dbe:	2b03      	cmp	r3, #3
 8008dc0:	d107      	bne.n	8008dd2 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008dc2:	f107 030c 	add.w	r3, r7, #12
 8008dc6:	2202      	movs	r2, #2
 8008dc8:	4619      	mov	r1, r3
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f001 f9da 	bl	800a184 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008dd0:	e02e      	b.n	8008e30 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008dd2:	6839      	ldr	r1, [r7, #0]
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f001 f96a 	bl	800a0ae <USBD_CtlError>
            ret = USBD_FAIL;
 8008dda:	2302      	movs	r3, #2
 8008ddc:	75fb      	strb	r3, [r7, #23]
          break;
 8008dde:	e027      	b.n	8008e30 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008de6:	2b03      	cmp	r3, #3
 8008de8:	d107      	bne.n	8008dfa <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008dea:	f107 030f 	add.w	r3, r7, #15
 8008dee:	2201      	movs	r2, #1
 8008df0:	4619      	mov	r1, r3
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f001 f9c6 	bl	800a184 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008df8:	e01a      	b.n	8008e30 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008dfa:	6839      	ldr	r1, [r7, #0]
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f001 f956 	bl	800a0ae <USBD_CtlError>
            ret = USBD_FAIL;
 8008e02:	2302      	movs	r3, #2
 8008e04:	75fb      	strb	r3, [r7, #23]
          break;
 8008e06:	e013      	b.n	8008e30 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e0e:	2b03      	cmp	r3, #3
 8008e10:	d00d      	beq.n	8008e2e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008e12:	6839      	ldr	r1, [r7, #0]
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f001 f94a 	bl	800a0ae <USBD_CtlError>
            ret = USBD_FAIL;
 8008e1a:	2302      	movs	r3, #2
 8008e1c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008e1e:	e006      	b.n	8008e2e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008e20:	6839      	ldr	r1, [r7, #0]
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f001 f943 	bl	800a0ae <USBD_CtlError>
          ret = USBD_FAIL;
 8008e28:	2302      	movs	r3, #2
 8008e2a:	75fb      	strb	r3, [r7, #23]
          break;
 8008e2c:	e000      	b.n	8008e30 <USBD_CDC_Setup+0x12c>
          break;
 8008e2e:	bf00      	nop
      }
      break;
 8008e30:	e006      	b.n	8008e40 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008e32:	6839      	ldr	r1, [r7, #0]
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f001 f93a 	bl	800a0ae <USBD_CtlError>
      ret = USBD_FAIL;
 8008e3a:	2302      	movs	r3, #2
 8008e3c:	75fb      	strb	r3, [r7, #23]
      break;
 8008e3e:	bf00      	nop
  }

  return ret;
 8008e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3718      	adds	r7, #24
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e4a:	b580      	push	{r7, lr}
 8008e4c:	b084      	sub	sp, #16
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]
 8008e52:	460b      	mov	r3, r1
 8008e54:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e5c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008e64:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d03a      	beq.n	8008ee6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008e70:	78fa      	ldrb	r2, [r7, #3]
 8008e72:	6879      	ldr	r1, [r7, #4]
 8008e74:	4613      	mov	r3, r2
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	4413      	add	r3, r2
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	440b      	add	r3, r1
 8008e7e:	331c      	adds	r3, #28
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d029      	beq.n	8008eda <USBD_CDC_DataIn+0x90>
 8008e86:	78fa      	ldrb	r2, [r7, #3]
 8008e88:	6879      	ldr	r1, [r7, #4]
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	4413      	add	r3, r2
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	440b      	add	r3, r1
 8008e94:	331c      	adds	r3, #28
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	78f9      	ldrb	r1, [r7, #3]
 8008e9a:	68b8      	ldr	r0, [r7, #8]
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	440b      	add	r3, r1
 8008ea2:	00db      	lsls	r3, r3, #3
 8008ea4:	4403      	add	r3, r0
 8008ea6:	3320      	adds	r3, #32
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	fbb2 f1f3 	udiv	r1, r2, r3
 8008eae:	fb01 f303 	mul.w	r3, r1, r3
 8008eb2:	1ad3      	subs	r3, r2, r3
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d110      	bne.n	8008eda <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008eb8:	78fa      	ldrb	r2, [r7, #3]
 8008eba:	6879      	ldr	r1, [r7, #4]
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	4413      	add	r3, r2
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	440b      	add	r3, r1
 8008ec6:	331c      	adds	r3, #28
 8008ec8:	2200      	movs	r2, #0
 8008eca:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008ecc:	78f9      	ldrb	r1, [r7, #3]
 8008ece:	2300      	movs	r3, #0
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f7f8 fc11 	bl	80016fa <USBD_LL_Transmit>
 8008ed8:	e003      	b.n	8008ee2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2200      	movs	r2, #0
 8008ede:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	e000      	b.n	8008ee8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008ee6:	2302      	movs	r3, #2
  }
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3710      	adds	r7, #16
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	460b      	mov	r3, r1
 8008efa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f02:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008f04:	78fb      	ldrb	r3, [r7, #3]
 8008f06:	4619      	mov	r1, r3
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f7f8 fc3c 	bl	8001786 <USBD_LL_GetRxDataSize>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00d      	beq.n	8008f3c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	68fa      	ldr	r2, [r7, #12]
 8008f2a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008f2e:	68fa      	ldr	r2, [r7, #12]
 8008f30:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008f34:	4611      	mov	r1, r2
 8008f36:	4798      	blx	r3

    return USBD_OK;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	e000      	b.n	8008f3e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008f3c:	2302      	movs	r3, #2
  }
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3710      	adds	r7, #16
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b084      	sub	sp, #16
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f54:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d014      	beq.n	8008f8a <USBD_CDC_EP0_RxReady+0x44>
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008f66:	2bff      	cmp	r3, #255	@ 0xff
 8008f68:	d00f      	beq.n	8008f8a <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	68fa      	ldr	r2, [r7, #12]
 8008f74:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008f78:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008f7a:	68fa      	ldr	r2, [r7, #12]
 8008f7c:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008f80:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	22ff      	movs	r2, #255	@ 0xff
 8008f86:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3710      	adds	r7, #16
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2243      	movs	r2, #67	@ 0x43
 8008fa0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008fa2:	4b03      	ldr	r3, [pc, #12]	@ (8008fb0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr
 8008fb0:	200000f4 	.word	0x200000f4

08008fb4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2243      	movs	r2, #67	@ 0x43
 8008fc0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008fc2:	4b03      	ldr	r3, [pc, #12]	@ (8008fd0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	370c      	adds	r7, #12
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr
 8008fd0:	200000b0 	.word	0x200000b0

08008fd4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b083      	sub	sp, #12
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2243      	movs	r2, #67	@ 0x43
 8008fe0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008fe2:	4b03      	ldr	r3, [pc, #12]	@ (8008ff0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	370c      	adds	r7, #12
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr
 8008ff0:	20000138 	.word	0x20000138

08008ff4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	220a      	movs	r2, #10
 8009000:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009002:	4b03      	ldr	r3, [pc, #12]	@ (8009010 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009004:	4618      	mov	r0, r3
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr
 8009010:	2000006c 	.word	0x2000006c

08009014 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009014:	b480      	push	{r7}
 8009016:	b085      	sub	sp, #20
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800901e:	2302      	movs	r3, #2
 8009020:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d005      	beq.n	8009034 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	683a      	ldr	r2, [r7, #0]
 800902c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8009030:	2300      	movs	r3, #0
 8009032:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009034:	7bfb      	ldrb	r3, [r7, #15]
}
 8009036:	4618      	mov	r0, r3
 8009038:	3714      	adds	r7, #20
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr

08009042 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009042:	b480      	push	{r7}
 8009044:	b087      	sub	sp, #28
 8009046:	af00      	add	r7, sp, #0
 8009048:	60f8      	str	r0, [r7, #12]
 800904a:	60b9      	str	r1, [r7, #8]
 800904c:	4613      	mov	r3, r2
 800904e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009056:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	68ba      	ldr	r2, [r7, #8]
 800905c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009060:	88fa      	ldrh	r2, [r7, #6]
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	371c      	adds	r7, #28
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr

08009076 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009076:	b480      	push	{r7}
 8009078:	b085      	sub	sp, #20
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
 800907e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009086:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	683a      	ldr	r2, [r7, #0]
 800908c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8009090:	2300      	movs	r3, #0
}
 8009092:	4618      	mov	r0, r3
 8009094:	3714      	adds	r7, #20
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr

0800909e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b084      	sub	sp, #16
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090ac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d01c      	beq.n	80090f2 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d115      	bne.n	80090ee <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2201      	movs	r2, #1
 80090c6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	2181      	movs	r1, #129	@ 0x81
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f7f8 fb08 	bl	80016fa <USBD_LL_Transmit>

      return USBD_OK;
 80090ea:	2300      	movs	r3, #0
 80090ec:	e002      	b.n	80090f4 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80090ee:	2301      	movs	r3, #1
 80090f0:	e000      	b.n	80090f4 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80090f2:	2302      	movs	r3, #2
  }
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3710      	adds	r7, #16
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800910a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009112:	2b00      	cmp	r3, #0
 8009114:	d017      	beq.n	8009146 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	7c1b      	ldrb	r3, [r3, #16]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d109      	bne.n	8009132 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009124:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009128:	2101      	movs	r1, #1
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f7f8 fb08 	bl	8001740 <USBD_LL_PrepareReceive>
 8009130:	e007      	b.n	8009142 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009138:	2340      	movs	r3, #64	@ 0x40
 800913a:	2101      	movs	r1, #1
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f7f8 faff 	bl	8001740 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009142:	2300      	movs	r3, #0
 8009144:	e000      	b.n	8009148 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009146:	2302      	movs	r3, #2
  }
}
 8009148:	4618      	mov	r0, r3
 800914a:	3710      	adds	r7, #16
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	4613      	mov	r3, r2
 800915c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d101      	bne.n	8009168 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009164:	2302      	movs	r3, #2
 8009166:	e01a      	b.n	800919e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800916e:	2b00      	cmp	r3, #0
 8009170:	d003      	beq.n	800917a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2200      	movs	r2, #0
 8009176:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d003      	beq.n	8009188 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	68ba      	ldr	r2, [r7, #8]
 8009184:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2201      	movs	r2, #1
 800918c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	79fa      	ldrb	r2, [r7, #7]
 8009194:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	f7f8 f96c 	bl	8001474 <USBD_LL_Init>

  return USBD_OK;
 800919c:	2300      	movs	r3, #0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3710      	adds	r7, #16
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80091a6:	b480      	push	{r7}
 80091a8:	b085      	sub	sp, #20
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
 80091ae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80091b0:	2300      	movs	r3, #0
 80091b2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d006      	beq.n	80091c8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	683a      	ldr	r2, [r7, #0]
 80091be:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80091c2:	2300      	movs	r3, #0
 80091c4:	73fb      	strb	r3, [r7, #15]
 80091c6:	e001      	b.n	80091cc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80091c8:	2302      	movs	r3, #2
 80091ca:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80091cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3714      	adds	r7, #20
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr

080091da <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b082      	sub	sp, #8
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f7f8 f9a0 	bl	8001528 <USBD_LL_Start>

  return USBD_OK;
 80091e8:	2300      	movs	r3, #0
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3708      	adds	r7, #8
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}

080091f2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80091f2:	b480      	push	{r7}
 80091f4:	b083      	sub	sp, #12
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80091fa:	2300      	movs	r3, #0
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	370c      	adds	r7, #12
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr

08009208 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b084      	sub	sp, #16
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	460b      	mov	r3, r1
 8009212:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009214:	2302      	movs	r3, #2
 8009216:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00c      	beq.n	800923c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	78fa      	ldrb	r2, [r7, #3]
 800922c:	4611      	mov	r1, r2
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	4798      	blx	r3
 8009232:	4603      	mov	r3, r0
 8009234:	2b00      	cmp	r3, #0
 8009236:	d101      	bne.n	800923c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009238:	2300      	movs	r3, #0
 800923a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800923c:	7bfb      	ldrb	r3, [r7, #15]
}
 800923e:	4618      	mov	r0, r3
 8009240:	3710      	adds	r7, #16
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}

08009246 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009246:	b580      	push	{r7, lr}
 8009248:	b082      	sub	sp, #8
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
 800924e:	460b      	mov	r3, r1
 8009250:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	78fa      	ldrb	r2, [r7, #3]
 800925c:	4611      	mov	r1, r2
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	4798      	blx	r3

  return USBD_OK;
 8009262:	2300      	movs	r3, #0
}
 8009264:	4618      	mov	r0, r3
 8009266:	3708      	adds	r7, #8
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800927c:	6839      	ldr	r1, [r7, #0]
 800927e:	4618      	mov	r0, r3
 8009280:	f000 fedb 	bl	800a03a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2201      	movs	r2, #1
 8009288:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009292:	461a      	mov	r2, r3
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80092a0:	f003 031f 	and.w	r3, r3, #31
 80092a4:	2b02      	cmp	r3, #2
 80092a6:	d016      	beq.n	80092d6 <USBD_LL_SetupStage+0x6a>
 80092a8:	2b02      	cmp	r3, #2
 80092aa:	d81c      	bhi.n	80092e6 <USBD_LL_SetupStage+0x7a>
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d002      	beq.n	80092b6 <USBD_LL_SetupStage+0x4a>
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d008      	beq.n	80092c6 <USBD_LL_SetupStage+0x5a>
 80092b4:	e017      	b.n	80092e6 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80092bc:	4619      	mov	r1, r3
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 f9ce 	bl	8009660 <USBD_StdDevReq>
      break;
 80092c4:	e01a      	b.n	80092fc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80092cc:	4619      	mov	r1, r3
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 fa30 	bl	8009734 <USBD_StdItfReq>
      break;
 80092d4:	e012      	b.n	80092fc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80092dc:	4619      	mov	r1, r3
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 fa70 	bl	80097c4 <USBD_StdEPReq>
      break;
 80092e4:	e00a      	b.n	80092fc <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80092ec:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	4619      	mov	r1, r3
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f7f8 f977 	bl	80015e8 <USBD_LL_StallEP>
      break;
 80092fa:	bf00      	nop
  }

  return USBD_OK;
 80092fc:	2300      	movs	r3, #0
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3708      	adds	r7, #8
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}

08009306 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009306:	b580      	push	{r7, lr}
 8009308:	b086      	sub	sp, #24
 800930a:	af00      	add	r7, sp, #0
 800930c:	60f8      	str	r0, [r7, #12]
 800930e:	460b      	mov	r3, r1
 8009310:	607a      	str	r2, [r7, #4]
 8009312:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009314:	7afb      	ldrb	r3, [r7, #11]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d14b      	bne.n	80093b2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009320:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009328:	2b03      	cmp	r3, #3
 800932a:	d134      	bne.n	8009396 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	68da      	ldr	r2, [r3, #12]
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	691b      	ldr	r3, [r3, #16]
 8009334:	429a      	cmp	r2, r3
 8009336:	d919      	bls.n	800936c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	68da      	ldr	r2, [r3, #12]
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	691b      	ldr	r3, [r3, #16]
 8009340:	1ad2      	subs	r2, r2, r3
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	68da      	ldr	r2, [r3, #12]
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800934e:	429a      	cmp	r2, r3
 8009350:	d203      	bcs.n	800935a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009356:	b29b      	uxth	r3, r3
 8009358:	e002      	b.n	8009360 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800935e:	b29b      	uxth	r3, r3
 8009360:	461a      	mov	r2, r3
 8009362:	6879      	ldr	r1, [r7, #4]
 8009364:	68f8      	ldr	r0, [r7, #12]
 8009366:	f000 ff59 	bl	800a21c <USBD_CtlContinueRx>
 800936a:	e038      	b.n	80093de <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009372:	691b      	ldr	r3, [r3, #16]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d00a      	beq.n	800938e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800937e:	2b03      	cmp	r3, #3
 8009380:	d105      	bne.n	800938e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800938e:	68f8      	ldr	r0, [r7, #12]
 8009390:	f000 ff56 	bl	800a240 <USBD_CtlSendStatus>
 8009394:	e023      	b.n	80093de <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800939c:	2b05      	cmp	r3, #5
 800939e:	d11e      	bne.n	80093de <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80093a8:	2100      	movs	r1, #0
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	f7f8 f91c 	bl	80015e8 <USBD_LL_StallEP>
 80093b0:	e015      	b.n	80093de <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093b8:	699b      	ldr	r3, [r3, #24]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d00d      	beq.n	80093da <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80093c4:	2b03      	cmp	r3, #3
 80093c6:	d108      	bne.n	80093da <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093ce:	699b      	ldr	r3, [r3, #24]
 80093d0:	7afa      	ldrb	r2, [r7, #11]
 80093d2:	4611      	mov	r1, r2
 80093d4:	68f8      	ldr	r0, [r7, #12]
 80093d6:	4798      	blx	r3
 80093d8:	e001      	b.n	80093de <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80093da:	2302      	movs	r3, #2
 80093dc:	e000      	b.n	80093e0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80093de:	2300      	movs	r3, #0
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3718      	adds	r7, #24
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b086      	sub	sp, #24
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	60f8      	str	r0, [r7, #12]
 80093f0:	460b      	mov	r3, r1
 80093f2:	607a      	str	r2, [r7, #4]
 80093f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80093f6:	7afb      	ldrb	r3, [r7, #11]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d17f      	bne.n	80094fc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	3314      	adds	r3, #20
 8009400:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009408:	2b02      	cmp	r3, #2
 800940a:	d15c      	bne.n	80094c6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	68da      	ldr	r2, [r3, #12]
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	691b      	ldr	r3, [r3, #16]
 8009414:	429a      	cmp	r2, r3
 8009416:	d915      	bls.n	8009444 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	68da      	ldr	r2, [r3, #12]
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	691b      	ldr	r3, [r3, #16]
 8009420:	1ad2      	subs	r2, r2, r3
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	68db      	ldr	r3, [r3, #12]
 800942a:	b29b      	uxth	r3, r3
 800942c:	461a      	mov	r2, r3
 800942e:	6879      	ldr	r1, [r7, #4]
 8009430:	68f8      	ldr	r0, [r7, #12]
 8009432:	f000 fec3 	bl	800a1bc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009436:	2300      	movs	r3, #0
 8009438:	2200      	movs	r2, #0
 800943a:	2100      	movs	r1, #0
 800943c:	68f8      	ldr	r0, [r7, #12]
 800943e:	f7f8 f97f 	bl	8001740 <USBD_LL_PrepareReceive>
 8009442:	e04e      	b.n	80094e2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	697a      	ldr	r2, [r7, #20]
 800944a:	6912      	ldr	r2, [r2, #16]
 800944c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009450:	fb01 f202 	mul.w	r2, r1, r2
 8009454:	1a9b      	subs	r3, r3, r2
 8009456:	2b00      	cmp	r3, #0
 8009458:	d11c      	bne.n	8009494 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	689a      	ldr	r2, [r3, #8]
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009462:	429a      	cmp	r2, r3
 8009464:	d316      	bcc.n	8009494 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	689a      	ldr	r2, [r3, #8]
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009470:	429a      	cmp	r2, r3
 8009472:	d20f      	bcs.n	8009494 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009474:	2200      	movs	r2, #0
 8009476:	2100      	movs	r1, #0
 8009478:	68f8      	ldr	r0, [r7, #12]
 800947a:	f000 fe9f 	bl	800a1bc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2200      	movs	r2, #0
 8009482:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009486:	2300      	movs	r3, #0
 8009488:	2200      	movs	r2, #0
 800948a:	2100      	movs	r1, #0
 800948c:	68f8      	ldr	r0, [r7, #12]
 800948e:	f7f8 f957 	bl	8001740 <USBD_LL_PrepareReceive>
 8009492:	e026      	b.n	80094e2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800949a:	68db      	ldr	r3, [r3, #12]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d00a      	beq.n	80094b6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80094a6:	2b03      	cmp	r3, #3
 80094a8:	d105      	bne.n	80094b6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	68f8      	ldr	r0, [r7, #12]
 80094b4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80094b6:	2180      	movs	r1, #128	@ 0x80
 80094b8:	68f8      	ldr	r0, [r7, #12]
 80094ba:	f7f8 f895 	bl	80015e8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80094be:	68f8      	ldr	r0, [r7, #12]
 80094c0:	f000 fed1 	bl	800a266 <USBD_CtlReceiveStatus>
 80094c4:	e00d      	b.n	80094e2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80094cc:	2b04      	cmp	r3, #4
 80094ce:	d004      	beq.n	80094da <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d103      	bne.n	80094e2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80094da:	2180      	movs	r1, #128	@ 0x80
 80094dc:	68f8      	ldr	r0, [r7, #12]
 80094de:	f7f8 f883 	bl	80015e8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d11d      	bne.n	8009528 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80094ec:	68f8      	ldr	r0, [r7, #12]
 80094ee:	f7ff fe80 	bl	80091f2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2200      	movs	r2, #0
 80094f6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80094fa:	e015      	b.n	8009528 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009502:	695b      	ldr	r3, [r3, #20]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d00d      	beq.n	8009524 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800950e:	2b03      	cmp	r3, #3
 8009510:	d108      	bne.n	8009524 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009518:	695b      	ldr	r3, [r3, #20]
 800951a:	7afa      	ldrb	r2, [r7, #11]
 800951c:	4611      	mov	r1, r2
 800951e:	68f8      	ldr	r0, [r7, #12]
 8009520:	4798      	blx	r3
 8009522:	e001      	b.n	8009528 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009524:	2302      	movs	r3, #2
 8009526:	e000      	b.n	800952a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	3718      	adds	r7, #24
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b082      	sub	sp, #8
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800953a:	2340      	movs	r3, #64	@ 0x40
 800953c:	2200      	movs	r2, #0
 800953e:	2100      	movs	r1, #0
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f7f8 f80c 	bl	800155e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2201      	movs	r2, #1
 800954a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2240      	movs	r2, #64	@ 0x40
 8009552:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009556:	2340      	movs	r3, #64	@ 0x40
 8009558:	2200      	movs	r2, #0
 800955a:	2180      	movs	r1, #128	@ 0x80
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f7f7 fffe 	bl	800155e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2201      	movs	r2, #1
 8009566:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2240      	movs	r2, #64	@ 0x40
 800956c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2201      	movs	r2, #1
 8009572:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2200      	movs	r2, #0
 8009588:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009592:	2b00      	cmp	r3, #0
 8009594:	d009      	beq.n	80095aa <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	6852      	ldr	r2, [r2, #4]
 80095a2:	b2d2      	uxtb	r2, r2
 80095a4:	4611      	mov	r1, r2
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	4798      	blx	r3
  }

  return USBD_OK;
 80095aa:	2300      	movs	r3, #0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3708      	adds	r7, #8
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	460b      	mov	r3, r1
 80095be:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	78fa      	ldrb	r2, [r7, #3]
 80095c4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2204      	movs	r2, #4
 80095ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	370c      	adds	r7, #12
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr

080095fe <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80095fe:	b480      	push	{r7}
 8009600:	b083      	sub	sp, #12
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800960c:	2b04      	cmp	r3, #4
 800960e:	d105      	bne.n	800961c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800961c:	2300      	movs	r3, #0
}
 800961e:	4618      	mov	r0, r3
 8009620:	370c      	adds	r7, #12
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr

0800962a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800962a:	b580      	push	{r7, lr}
 800962c:	b082      	sub	sp, #8
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009638:	2b03      	cmp	r3, #3
 800963a:	d10b      	bne.n	8009654 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009642:	69db      	ldr	r3, [r3, #28]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d005      	beq.n	8009654 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800964e:	69db      	ldr	r3, [r3, #28]
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3708      	adds	r7, #8
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
	...

08009660 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800966a:	2300      	movs	r3, #0
 800966c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009676:	2b40      	cmp	r3, #64	@ 0x40
 8009678:	d005      	beq.n	8009686 <USBD_StdDevReq+0x26>
 800967a:	2b40      	cmp	r3, #64	@ 0x40
 800967c:	d84f      	bhi.n	800971e <USBD_StdDevReq+0xbe>
 800967e:	2b00      	cmp	r3, #0
 8009680:	d009      	beq.n	8009696 <USBD_StdDevReq+0x36>
 8009682:	2b20      	cmp	r3, #32
 8009684:	d14b      	bne.n	800971e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	6839      	ldr	r1, [r7, #0]
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	4798      	blx	r3
      break;
 8009694:	e048      	b.n	8009728 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	785b      	ldrb	r3, [r3, #1]
 800969a:	2b09      	cmp	r3, #9
 800969c:	d839      	bhi.n	8009712 <USBD_StdDevReq+0xb2>
 800969e:	a201      	add	r2, pc, #4	@ (adr r2, 80096a4 <USBD_StdDevReq+0x44>)
 80096a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a4:	080096f5 	.word	0x080096f5
 80096a8:	08009709 	.word	0x08009709
 80096ac:	08009713 	.word	0x08009713
 80096b0:	080096ff 	.word	0x080096ff
 80096b4:	08009713 	.word	0x08009713
 80096b8:	080096d7 	.word	0x080096d7
 80096bc:	080096cd 	.word	0x080096cd
 80096c0:	08009713 	.word	0x08009713
 80096c4:	080096eb 	.word	0x080096eb
 80096c8:	080096e1 	.word	0x080096e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80096cc:	6839      	ldr	r1, [r7, #0]
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 f9dc 	bl	8009a8c <USBD_GetDescriptor>
          break;
 80096d4:	e022      	b.n	800971c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80096d6:	6839      	ldr	r1, [r7, #0]
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f000 fb3f 	bl	8009d5c <USBD_SetAddress>
          break;
 80096de:	e01d      	b.n	800971c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80096e0:	6839      	ldr	r1, [r7, #0]
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 fb7e 	bl	8009de4 <USBD_SetConfig>
          break;
 80096e8:	e018      	b.n	800971c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80096ea:	6839      	ldr	r1, [r7, #0]
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 fc07 	bl	8009f00 <USBD_GetConfig>
          break;
 80096f2:	e013      	b.n	800971c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80096f4:	6839      	ldr	r1, [r7, #0]
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 fc37 	bl	8009f6a <USBD_GetStatus>
          break;
 80096fc:	e00e      	b.n	800971c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80096fe:	6839      	ldr	r1, [r7, #0]
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 fc65 	bl	8009fd0 <USBD_SetFeature>
          break;
 8009706:	e009      	b.n	800971c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009708:	6839      	ldr	r1, [r7, #0]
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 fc74 	bl	8009ff8 <USBD_ClrFeature>
          break;
 8009710:	e004      	b.n	800971c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009712:	6839      	ldr	r1, [r7, #0]
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 fcca 	bl	800a0ae <USBD_CtlError>
          break;
 800971a:	bf00      	nop
      }
      break;
 800971c:	e004      	b.n	8009728 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800971e:	6839      	ldr	r1, [r7, #0]
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 fcc4 	bl	800a0ae <USBD_CtlError>
      break;
 8009726:	bf00      	nop
  }

  return ret;
 8009728:	7bfb      	ldrb	r3, [r7, #15]
}
 800972a:	4618      	mov	r0, r3
 800972c:	3710      	adds	r7, #16
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop

08009734 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800973e:	2300      	movs	r3, #0
 8009740:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800974a:	2b40      	cmp	r3, #64	@ 0x40
 800974c:	d005      	beq.n	800975a <USBD_StdItfReq+0x26>
 800974e:	2b40      	cmp	r3, #64	@ 0x40
 8009750:	d82e      	bhi.n	80097b0 <USBD_StdItfReq+0x7c>
 8009752:	2b00      	cmp	r3, #0
 8009754:	d001      	beq.n	800975a <USBD_StdItfReq+0x26>
 8009756:	2b20      	cmp	r3, #32
 8009758:	d12a      	bne.n	80097b0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009760:	3b01      	subs	r3, #1
 8009762:	2b02      	cmp	r3, #2
 8009764:	d81d      	bhi.n	80097a2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	889b      	ldrh	r3, [r3, #4]
 800976a:	b2db      	uxtb	r3, r3
 800976c:	2b01      	cmp	r3, #1
 800976e:	d813      	bhi.n	8009798 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009776:	689b      	ldr	r3, [r3, #8]
 8009778:	6839      	ldr	r1, [r7, #0]
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	4798      	blx	r3
 800977e:	4603      	mov	r3, r0
 8009780:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	88db      	ldrh	r3, [r3, #6]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d110      	bne.n	80097ac <USBD_StdItfReq+0x78>
 800978a:	7bfb      	ldrb	r3, [r7, #15]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d10d      	bne.n	80097ac <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 fd55 	bl	800a240 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009796:	e009      	b.n	80097ac <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009798:	6839      	ldr	r1, [r7, #0]
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 fc87 	bl	800a0ae <USBD_CtlError>
          break;
 80097a0:	e004      	b.n	80097ac <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80097a2:	6839      	ldr	r1, [r7, #0]
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 fc82 	bl	800a0ae <USBD_CtlError>
          break;
 80097aa:	e000      	b.n	80097ae <USBD_StdItfReq+0x7a>
          break;
 80097ac:	bf00      	nop
      }
      break;
 80097ae:	e004      	b.n	80097ba <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80097b0:	6839      	ldr	r1, [r7, #0]
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 fc7b 	bl	800a0ae <USBD_CtlError>
      break;
 80097b8:	bf00      	nop
  }

  return USBD_OK;
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3710      	adds	r7, #16
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80097ce:	2300      	movs	r3, #0
 80097d0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	889b      	ldrh	r3, [r3, #4]
 80097d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80097e0:	2b40      	cmp	r3, #64	@ 0x40
 80097e2:	d007      	beq.n	80097f4 <USBD_StdEPReq+0x30>
 80097e4:	2b40      	cmp	r3, #64	@ 0x40
 80097e6:	f200 8146 	bhi.w	8009a76 <USBD_StdEPReq+0x2b2>
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d00a      	beq.n	8009804 <USBD_StdEPReq+0x40>
 80097ee:	2b20      	cmp	r3, #32
 80097f0:	f040 8141 	bne.w	8009a76 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097fa:	689b      	ldr	r3, [r3, #8]
 80097fc:	6839      	ldr	r1, [r7, #0]
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	4798      	blx	r3
      break;
 8009802:	e13d      	b.n	8009a80 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800980c:	2b20      	cmp	r3, #32
 800980e:	d10a      	bne.n	8009826 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	6839      	ldr	r1, [r7, #0]
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	4798      	blx	r3
 800981e:	4603      	mov	r3, r0
 8009820:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009822:	7bfb      	ldrb	r3, [r7, #15]
 8009824:	e12d      	b.n	8009a82 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	785b      	ldrb	r3, [r3, #1]
 800982a:	2b03      	cmp	r3, #3
 800982c:	d007      	beq.n	800983e <USBD_StdEPReq+0x7a>
 800982e:	2b03      	cmp	r3, #3
 8009830:	f300 811b 	bgt.w	8009a6a <USBD_StdEPReq+0x2a6>
 8009834:	2b00      	cmp	r3, #0
 8009836:	d072      	beq.n	800991e <USBD_StdEPReq+0x15a>
 8009838:	2b01      	cmp	r3, #1
 800983a:	d03a      	beq.n	80098b2 <USBD_StdEPReq+0xee>
 800983c:	e115      	b.n	8009a6a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009844:	2b02      	cmp	r3, #2
 8009846:	d002      	beq.n	800984e <USBD_StdEPReq+0x8a>
 8009848:	2b03      	cmp	r3, #3
 800984a:	d015      	beq.n	8009878 <USBD_StdEPReq+0xb4>
 800984c:	e02b      	b.n	80098a6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800984e:	7bbb      	ldrb	r3, [r7, #14]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d00c      	beq.n	800986e <USBD_StdEPReq+0xaa>
 8009854:	7bbb      	ldrb	r3, [r7, #14]
 8009856:	2b80      	cmp	r3, #128	@ 0x80
 8009858:	d009      	beq.n	800986e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800985a:	7bbb      	ldrb	r3, [r7, #14]
 800985c:	4619      	mov	r1, r3
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f7f7 fec2 	bl	80015e8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009864:	2180      	movs	r1, #128	@ 0x80
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f7f7 febe 	bl	80015e8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800986c:	e020      	b.n	80098b0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800986e:	6839      	ldr	r1, [r7, #0]
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f000 fc1c 	bl	800a0ae <USBD_CtlError>
              break;
 8009876:	e01b      	b.n	80098b0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	885b      	ldrh	r3, [r3, #2]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d10e      	bne.n	800989e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009880:	7bbb      	ldrb	r3, [r7, #14]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d00b      	beq.n	800989e <USBD_StdEPReq+0xda>
 8009886:	7bbb      	ldrb	r3, [r7, #14]
 8009888:	2b80      	cmp	r3, #128	@ 0x80
 800988a:	d008      	beq.n	800989e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	88db      	ldrh	r3, [r3, #6]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d104      	bne.n	800989e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009894:	7bbb      	ldrb	r3, [r7, #14]
 8009896:	4619      	mov	r1, r3
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f7f7 fea5 	bl	80015e8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 fcce 	bl	800a240 <USBD_CtlSendStatus>

              break;
 80098a4:	e004      	b.n	80098b0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80098a6:	6839      	ldr	r1, [r7, #0]
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 fc00 	bl	800a0ae <USBD_CtlError>
              break;
 80098ae:	bf00      	nop
          }
          break;
 80098b0:	e0e0      	b.n	8009a74 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098b8:	2b02      	cmp	r3, #2
 80098ba:	d002      	beq.n	80098c2 <USBD_StdEPReq+0xfe>
 80098bc:	2b03      	cmp	r3, #3
 80098be:	d015      	beq.n	80098ec <USBD_StdEPReq+0x128>
 80098c0:	e026      	b.n	8009910 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80098c2:	7bbb      	ldrb	r3, [r7, #14]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d00c      	beq.n	80098e2 <USBD_StdEPReq+0x11e>
 80098c8:	7bbb      	ldrb	r3, [r7, #14]
 80098ca:	2b80      	cmp	r3, #128	@ 0x80
 80098cc:	d009      	beq.n	80098e2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80098ce:	7bbb      	ldrb	r3, [r7, #14]
 80098d0:	4619      	mov	r1, r3
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f7f7 fe88 	bl	80015e8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80098d8:	2180      	movs	r1, #128	@ 0x80
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f7f7 fe84 	bl	80015e8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80098e0:	e01c      	b.n	800991c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80098e2:	6839      	ldr	r1, [r7, #0]
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 fbe2 	bl	800a0ae <USBD_CtlError>
              break;
 80098ea:	e017      	b.n	800991c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	885b      	ldrh	r3, [r3, #2]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d112      	bne.n	800991a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80098f4:	7bbb      	ldrb	r3, [r7, #14]
 80098f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d004      	beq.n	8009908 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80098fe:	7bbb      	ldrb	r3, [r7, #14]
 8009900:	4619      	mov	r1, r3
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f7f7 fe8f 	bl	8001626 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 fc99 	bl	800a240 <USBD_CtlSendStatus>
              }
              break;
 800990e:	e004      	b.n	800991a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009910:	6839      	ldr	r1, [r7, #0]
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 fbcb 	bl	800a0ae <USBD_CtlError>
              break;
 8009918:	e000      	b.n	800991c <USBD_StdEPReq+0x158>
              break;
 800991a:	bf00      	nop
          }
          break;
 800991c:	e0aa      	b.n	8009a74 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009924:	2b02      	cmp	r3, #2
 8009926:	d002      	beq.n	800992e <USBD_StdEPReq+0x16a>
 8009928:	2b03      	cmp	r3, #3
 800992a:	d032      	beq.n	8009992 <USBD_StdEPReq+0x1ce>
 800992c:	e097      	b.n	8009a5e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800992e:	7bbb      	ldrb	r3, [r7, #14]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d007      	beq.n	8009944 <USBD_StdEPReq+0x180>
 8009934:	7bbb      	ldrb	r3, [r7, #14]
 8009936:	2b80      	cmp	r3, #128	@ 0x80
 8009938:	d004      	beq.n	8009944 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800993a:	6839      	ldr	r1, [r7, #0]
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 fbb6 	bl	800a0ae <USBD_CtlError>
                break;
 8009942:	e091      	b.n	8009a68 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009944:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009948:	2b00      	cmp	r3, #0
 800994a:	da0b      	bge.n	8009964 <USBD_StdEPReq+0x1a0>
 800994c:	7bbb      	ldrb	r3, [r7, #14]
 800994e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009952:	4613      	mov	r3, r2
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	4413      	add	r3, r2
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	3310      	adds	r3, #16
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	4413      	add	r3, r2
 8009960:	3304      	adds	r3, #4
 8009962:	e00b      	b.n	800997c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009964:	7bbb      	ldrb	r3, [r7, #14]
 8009966:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800996a:	4613      	mov	r3, r2
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	4413      	add	r3, r2
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	4413      	add	r3, r2
 800997a:	3304      	adds	r3, #4
 800997c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	2200      	movs	r2, #0
 8009982:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	2202      	movs	r2, #2
 8009988:	4619      	mov	r1, r3
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 fbfa 	bl	800a184 <USBD_CtlSendData>
              break;
 8009990:	e06a      	b.n	8009a68 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009992:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009996:	2b00      	cmp	r3, #0
 8009998:	da11      	bge.n	80099be <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800999a:	7bbb      	ldrb	r3, [r7, #14]
 800999c:	f003 020f 	and.w	r2, r3, #15
 80099a0:	6879      	ldr	r1, [r7, #4]
 80099a2:	4613      	mov	r3, r2
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	4413      	add	r3, r2
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	440b      	add	r3, r1
 80099ac:	3318      	adds	r3, #24
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d117      	bne.n	80099e4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80099b4:	6839      	ldr	r1, [r7, #0]
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 fb79 	bl	800a0ae <USBD_CtlError>
                  break;
 80099bc:	e054      	b.n	8009a68 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80099be:	7bbb      	ldrb	r3, [r7, #14]
 80099c0:	f003 020f 	and.w	r2, r3, #15
 80099c4:	6879      	ldr	r1, [r7, #4]
 80099c6:	4613      	mov	r3, r2
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	4413      	add	r3, r2
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	440b      	add	r3, r1
 80099d0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d104      	bne.n	80099e4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80099da:	6839      	ldr	r1, [r7, #0]
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 fb66 	bl	800a0ae <USBD_CtlError>
                  break;
 80099e2:	e041      	b.n	8009a68 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80099e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	da0b      	bge.n	8009a04 <USBD_StdEPReq+0x240>
 80099ec:	7bbb      	ldrb	r3, [r7, #14]
 80099ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80099f2:	4613      	mov	r3, r2
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	4413      	add	r3, r2
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	3310      	adds	r3, #16
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	4413      	add	r3, r2
 8009a00:	3304      	adds	r3, #4
 8009a02:	e00b      	b.n	8009a1c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a04:	7bbb      	ldrb	r3, [r7, #14]
 8009a06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a0a:	4613      	mov	r3, r2
 8009a0c:	009b      	lsls	r3, r3, #2
 8009a0e:	4413      	add	r3, r2
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	4413      	add	r3, r2
 8009a1a:	3304      	adds	r3, #4
 8009a1c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009a1e:	7bbb      	ldrb	r3, [r7, #14]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d002      	beq.n	8009a2a <USBD_StdEPReq+0x266>
 8009a24:	7bbb      	ldrb	r3, [r7, #14]
 8009a26:	2b80      	cmp	r3, #128	@ 0x80
 8009a28:	d103      	bne.n	8009a32 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	601a      	str	r2, [r3, #0]
 8009a30:	e00e      	b.n	8009a50 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009a32:	7bbb      	ldrb	r3, [r7, #14]
 8009a34:	4619      	mov	r1, r3
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f7f7 fe14 	bl	8001664 <USBD_LL_IsStallEP>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d003      	beq.n	8009a4a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	2201      	movs	r2, #1
 8009a46:	601a      	str	r2, [r3, #0]
 8009a48:	e002      	b.n	8009a50 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	2202      	movs	r2, #2
 8009a54:	4619      	mov	r1, r3
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 fb94 	bl	800a184 <USBD_CtlSendData>
              break;
 8009a5c:	e004      	b.n	8009a68 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009a5e:	6839      	ldr	r1, [r7, #0]
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 fb24 	bl	800a0ae <USBD_CtlError>
              break;
 8009a66:	bf00      	nop
          }
          break;
 8009a68:	e004      	b.n	8009a74 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009a6a:	6839      	ldr	r1, [r7, #0]
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 fb1e 	bl	800a0ae <USBD_CtlError>
          break;
 8009a72:	bf00      	nop
      }
      break;
 8009a74:	e004      	b.n	8009a80 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009a76:	6839      	ldr	r1, [r7, #0]
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f000 fb18 	bl	800a0ae <USBD_CtlError>
      break;
 8009a7e:	bf00      	nop
  }

  return ret;
 8009a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3710      	adds	r7, #16
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
	...

08009a8c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009a96:	2300      	movs	r3, #0
 8009a98:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	885b      	ldrh	r3, [r3, #2]
 8009aa6:	0a1b      	lsrs	r3, r3, #8
 8009aa8:	b29b      	uxth	r3, r3
 8009aaa:	3b01      	subs	r3, #1
 8009aac:	2b06      	cmp	r3, #6
 8009aae:	f200 8128 	bhi.w	8009d02 <USBD_GetDescriptor+0x276>
 8009ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ab8 <USBD_GetDescriptor+0x2c>)
 8009ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab8:	08009ad5 	.word	0x08009ad5
 8009abc:	08009aed 	.word	0x08009aed
 8009ac0:	08009b2d 	.word	0x08009b2d
 8009ac4:	08009d03 	.word	0x08009d03
 8009ac8:	08009d03 	.word	0x08009d03
 8009acc:	08009ca3 	.word	0x08009ca3
 8009ad0:	08009ccf 	.word	0x08009ccf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	687a      	ldr	r2, [r7, #4]
 8009ade:	7c12      	ldrb	r2, [r2, #16]
 8009ae0:	f107 0108 	add.w	r1, r7, #8
 8009ae4:	4610      	mov	r0, r2
 8009ae6:	4798      	blx	r3
 8009ae8:	60f8      	str	r0, [r7, #12]
      break;
 8009aea:	e112      	b.n	8009d12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	7c1b      	ldrb	r3, [r3, #16]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d10d      	bne.n	8009b10 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009afc:	f107 0208 	add.w	r2, r7, #8
 8009b00:	4610      	mov	r0, r2
 8009b02:	4798      	blx	r3
 8009b04:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	3301      	adds	r3, #1
 8009b0a:	2202      	movs	r2, #2
 8009b0c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009b0e:	e100      	b.n	8009d12 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b18:	f107 0208 	add.w	r2, r7, #8
 8009b1c:	4610      	mov	r0, r2
 8009b1e:	4798      	blx	r3
 8009b20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	3301      	adds	r3, #1
 8009b26:	2202      	movs	r2, #2
 8009b28:	701a      	strb	r2, [r3, #0]
      break;
 8009b2a:	e0f2      	b.n	8009d12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	885b      	ldrh	r3, [r3, #2]
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	2b05      	cmp	r3, #5
 8009b34:	f200 80ac 	bhi.w	8009c90 <USBD_GetDescriptor+0x204>
 8009b38:	a201      	add	r2, pc, #4	@ (adr r2, 8009b40 <USBD_GetDescriptor+0xb4>)
 8009b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b3e:	bf00      	nop
 8009b40:	08009b59 	.word	0x08009b59
 8009b44:	08009b8d 	.word	0x08009b8d
 8009b48:	08009bc1 	.word	0x08009bc1
 8009b4c:	08009bf5 	.word	0x08009bf5
 8009b50:	08009c29 	.word	0x08009c29
 8009b54:	08009c5d 	.word	0x08009c5d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d00b      	beq.n	8009b7c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	7c12      	ldrb	r2, [r2, #16]
 8009b70:	f107 0108 	add.w	r1, r7, #8
 8009b74:	4610      	mov	r0, r2
 8009b76:	4798      	blx	r3
 8009b78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b7a:	e091      	b.n	8009ca0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b7c:	6839      	ldr	r1, [r7, #0]
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 fa95 	bl	800a0ae <USBD_CtlError>
            err++;
 8009b84:	7afb      	ldrb	r3, [r7, #11]
 8009b86:	3301      	adds	r3, #1
 8009b88:	72fb      	strb	r3, [r7, #11]
          break;
 8009b8a:	e089      	b.n	8009ca0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009b92:	689b      	ldr	r3, [r3, #8]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d00b      	beq.n	8009bb0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	7c12      	ldrb	r2, [r2, #16]
 8009ba4:	f107 0108 	add.w	r1, r7, #8
 8009ba8:	4610      	mov	r0, r2
 8009baa:	4798      	blx	r3
 8009bac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bae:	e077      	b.n	8009ca0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bb0:	6839      	ldr	r1, [r7, #0]
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 fa7b 	bl	800a0ae <USBD_CtlError>
            err++;
 8009bb8:	7afb      	ldrb	r3, [r7, #11]
 8009bba:	3301      	adds	r3, #1
 8009bbc:	72fb      	strb	r3, [r7, #11]
          break;
 8009bbe:	e06f      	b.n	8009ca0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d00b      	beq.n	8009be4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009bd2:	68db      	ldr	r3, [r3, #12]
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	7c12      	ldrb	r2, [r2, #16]
 8009bd8:	f107 0108 	add.w	r1, r7, #8
 8009bdc:	4610      	mov	r0, r2
 8009bde:	4798      	blx	r3
 8009be0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009be2:	e05d      	b.n	8009ca0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009be4:	6839      	ldr	r1, [r7, #0]
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 fa61 	bl	800a0ae <USBD_CtlError>
            err++;
 8009bec:	7afb      	ldrb	r3, [r7, #11]
 8009bee:	3301      	adds	r3, #1
 8009bf0:	72fb      	strb	r3, [r7, #11]
          break;
 8009bf2:	e055      	b.n	8009ca0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009bfa:	691b      	ldr	r3, [r3, #16]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d00b      	beq.n	8009c18 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c06:	691b      	ldr	r3, [r3, #16]
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	7c12      	ldrb	r2, [r2, #16]
 8009c0c:	f107 0108 	add.w	r1, r7, #8
 8009c10:	4610      	mov	r0, r2
 8009c12:	4798      	blx	r3
 8009c14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c16:	e043      	b.n	8009ca0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c18:	6839      	ldr	r1, [r7, #0]
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f000 fa47 	bl	800a0ae <USBD_CtlError>
            err++;
 8009c20:	7afb      	ldrb	r3, [r7, #11]
 8009c22:	3301      	adds	r3, #1
 8009c24:	72fb      	strb	r3, [r7, #11]
          break;
 8009c26:	e03b      	b.n	8009ca0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c2e:	695b      	ldr	r3, [r3, #20]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d00b      	beq.n	8009c4c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c3a:	695b      	ldr	r3, [r3, #20]
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	7c12      	ldrb	r2, [r2, #16]
 8009c40:	f107 0108 	add.w	r1, r7, #8
 8009c44:	4610      	mov	r0, r2
 8009c46:	4798      	blx	r3
 8009c48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c4a:	e029      	b.n	8009ca0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c4c:	6839      	ldr	r1, [r7, #0]
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 fa2d 	bl	800a0ae <USBD_CtlError>
            err++;
 8009c54:	7afb      	ldrb	r3, [r7, #11]
 8009c56:	3301      	adds	r3, #1
 8009c58:	72fb      	strb	r3, [r7, #11]
          break;
 8009c5a:	e021      	b.n	8009ca0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c62:	699b      	ldr	r3, [r3, #24]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d00b      	beq.n	8009c80 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c6e:	699b      	ldr	r3, [r3, #24]
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	7c12      	ldrb	r2, [r2, #16]
 8009c74:	f107 0108 	add.w	r1, r7, #8
 8009c78:	4610      	mov	r0, r2
 8009c7a:	4798      	blx	r3
 8009c7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c7e:	e00f      	b.n	8009ca0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c80:	6839      	ldr	r1, [r7, #0]
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 fa13 	bl	800a0ae <USBD_CtlError>
            err++;
 8009c88:	7afb      	ldrb	r3, [r7, #11]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	72fb      	strb	r3, [r7, #11]
          break;
 8009c8e:	e007      	b.n	8009ca0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009c90:	6839      	ldr	r1, [r7, #0]
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 fa0b 	bl	800a0ae <USBD_CtlError>
          err++;
 8009c98:	7afb      	ldrb	r3, [r7, #11]
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009c9e:	e038      	b.n	8009d12 <USBD_GetDescriptor+0x286>
 8009ca0:	e037      	b.n	8009d12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	7c1b      	ldrb	r3, [r3, #16]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d109      	bne.n	8009cbe <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cb2:	f107 0208 	add.w	r2, r7, #8
 8009cb6:	4610      	mov	r0, r2
 8009cb8:	4798      	blx	r3
 8009cba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009cbc:	e029      	b.n	8009d12 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009cbe:	6839      	ldr	r1, [r7, #0]
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f000 f9f4 	bl	800a0ae <USBD_CtlError>
        err++;
 8009cc6:	7afb      	ldrb	r3, [r7, #11]
 8009cc8:	3301      	adds	r3, #1
 8009cca:	72fb      	strb	r3, [r7, #11]
      break;
 8009ccc:	e021      	b.n	8009d12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	7c1b      	ldrb	r3, [r3, #16]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d10d      	bne.n	8009cf2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cde:	f107 0208 	add.w	r2, r7, #8
 8009ce2:	4610      	mov	r0, r2
 8009ce4:	4798      	blx	r3
 8009ce6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	3301      	adds	r3, #1
 8009cec:	2207      	movs	r2, #7
 8009cee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009cf0:	e00f      	b.n	8009d12 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009cf2:	6839      	ldr	r1, [r7, #0]
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 f9da 	bl	800a0ae <USBD_CtlError>
        err++;
 8009cfa:	7afb      	ldrb	r3, [r7, #11]
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	72fb      	strb	r3, [r7, #11]
      break;
 8009d00:	e007      	b.n	8009d12 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009d02:	6839      	ldr	r1, [r7, #0]
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 f9d2 	bl	800a0ae <USBD_CtlError>
      err++;
 8009d0a:	7afb      	ldrb	r3, [r7, #11]
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	72fb      	strb	r3, [r7, #11]
      break;
 8009d10:	bf00      	nop
  }

  if (err != 0U)
 8009d12:	7afb      	ldrb	r3, [r7, #11]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d11c      	bne.n	8009d52 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009d18:	893b      	ldrh	r3, [r7, #8]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d011      	beq.n	8009d42 <USBD_GetDescriptor+0x2b6>
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	88db      	ldrh	r3, [r3, #6]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d00d      	beq.n	8009d42 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	88da      	ldrh	r2, [r3, #6]
 8009d2a:	893b      	ldrh	r3, [r7, #8]
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	bf28      	it	cs
 8009d30:	4613      	movcs	r3, r2
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009d36:	893b      	ldrh	r3, [r7, #8]
 8009d38:	461a      	mov	r2, r3
 8009d3a:	68f9      	ldr	r1, [r7, #12]
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f000 fa21 	bl	800a184 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	88db      	ldrh	r3, [r3, #6]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d104      	bne.n	8009d54 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 fa78 	bl	800a240 <USBD_CtlSendStatus>
 8009d50:	e000      	b.n	8009d54 <USBD_GetDescriptor+0x2c8>
    return;
 8009d52:	bf00      	nop
    }
  }
}
 8009d54:	3710      	adds	r7, #16
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop

08009d5c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	889b      	ldrh	r3, [r3, #4]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d130      	bne.n	8009dd0 <USBD_SetAddress+0x74>
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	88db      	ldrh	r3, [r3, #6]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d12c      	bne.n	8009dd0 <USBD_SetAddress+0x74>
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	885b      	ldrh	r3, [r3, #2]
 8009d7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8009d7c:	d828      	bhi.n	8009dd0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	885b      	ldrh	r3, [r3, #2]
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d90:	2b03      	cmp	r3, #3
 8009d92:	d104      	bne.n	8009d9e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009d94:	6839      	ldr	r1, [r7, #0]
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 f989 	bl	800a0ae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d9c:	e01d      	b.n	8009dda <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	7bfa      	ldrb	r2, [r7, #15]
 8009da2:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009da6:	7bfb      	ldrb	r3, [r7, #15]
 8009da8:	4619      	mov	r1, r3
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f7f7 fc86 	bl	80016bc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 fa45 	bl	800a240 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009db6:	7bfb      	ldrb	r3, [r7, #15]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d004      	beq.n	8009dc6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2202      	movs	r2, #2
 8009dc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dc4:	e009      	b.n	8009dda <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2201      	movs	r2, #1
 8009dca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dce:	e004      	b.n	8009dda <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009dd0:	6839      	ldr	r1, [r7, #0]
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 f96b 	bl	800a0ae <USBD_CtlError>
  }
}
 8009dd8:	bf00      	nop
 8009dda:	bf00      	nop
 8009ddc:	3710      	adds	r7, #16
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
	...

08009de4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b082      	sub	sp, #8
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	885b      	ldrh	r3, [r3, #2]
 8009df2:	b2da      	uxtb	r2, r3
 8009df4:	4b41      	ldr	r3, [pc, #260]	@ (8009efc <USBD_SetConfig+0x118>)
 8009df6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009df8:	4b40      	ldr	r3, [pc, #256]	@ (8009efc <USBD_SetConfig+0x118>)
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d904      	bls.n	8009e0a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009e00:	6839      	ldr	r1, [r7, #0]
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 f953 	bl	800a0ae <USBD_CtlError>
 8009e08:	e075      	b.n	8009ef6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e10:	2b02      	cmp	r3, #2
 8009e12:	d002      	beq.n	8009e1a <USBD_SetConfig+0x36>
 8009e14:	2b03      	cmp	r3, #3
 8009e16:	d023      	beq.n	8009e60 <USBD_SetConfig+0x7c>
 8009e18:	e062      	b.n	8009ee0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009e1a:	4b38      	ldr	r3, [pc, #224]	@ (8009efc <USBD_SetConfig+0x118>)
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d01a      	beq.n	8009e58 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009e22:	4b36      	ldr	r3, [pc, #216]	@ (8009efc <USBD_SetConfig+0x118>)
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	461a      	mov	r2, r3
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2203      	movs	r2, #3
 8009e30:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009e34:	4b31      	ldr	r3, [pc, #196]	@ (8009efc <USBD_SetConfig+0x118>)
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	4619      	mov	r1, r3
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f7ff f9e4 	bl	8009208 <USBD_SetClassConfig>
 8009e40:	4603      	mov	r3, r0
 8009e42:	2b02      	cmp	r3, #2
 8009e44:	d104      	bne.n	8009e50 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009e46:	6839      	ldr	r1, [r7, #0]
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 f930 	bl	800a0ae <USBD_CtlError>
            return;
 8009e4e:	e052      	b.n	8009ef6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 f9f5 	bl	800a240 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009e56:	e04e      	b.n	8009ef6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 f9f1 	bl	800a240 <USBD_CtlSendStatus>
        break;
 8009e5e:	e04a      	b.n	8009ef6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009e60:	4b26      	ldr	r3, [pc, #152]	@ (8009efc <USBD_SetConfig+0x118>)
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d112      	bne.n	8009e8e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2202      	movs	r2, #2
 8009e6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009e70:	4b22      	ldr	r3, [pc, #136]	@ (8009efc <USBD_SetConfig+0x118>)
 8009e72:	781b      	ldrb	r3, [r3, #0]
 8009e74:	461a      	mov	r2, r3
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009e7a:	4b20      	ldr	r3, [pc, #128]	@ (8009efc <USBD_SetConfig+0x118>)
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	4619      	mov	r1, r3
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f7ff f9e0 	bl	8009246 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 f9da 	bl	800a240 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009e8c:	e033      	b.n	8009ef6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8009efc <USBD_SetConfig+0x118>)
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	461a      	mov	r2, r3
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d01d      	beq.n	8009ed8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f7ff f9ce 	bl	8009246 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009eaa:	4b14      	ldr	r3, [pc, #80]	@ (8009efc <USBD_SetConfig+0x118>)
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	461a      	mov	r2, r3
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009eb4:	4b11      	ldr	r3, [pc, #68]	@ (8009efc <USBD_SetConfig+0x118>)
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	4619      	mov	r1, r3
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f7ff f9a4 	bl	8009208 <USBD_SetClassConfig>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	2b02      	cmp	r3, #2
 8009ec4:	d104      	bne.n	8009ed0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009ec6:	6839      	ldr	r1, [r7, #0]
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f000 f8f0 	bl	800a0ae <USBD_CtlError>
            return;
 8009ece:	e012      	b.n	8009ef6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 f9b5 	bl	800a240 <USBD_CtlSendStatus>
        break;
 8009ed6:	e00e      	b.n	8009ef6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f000 f9b1 	bl	800a240 <USBD_CtlSendStatus>
        break;
 8009ede:	e00a      	b.n	8009ef6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009ee0:	6839      	ldr	r1, [r7, #0]
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 f8e3 	bl	800a0ae <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009ee8:	4b04      	ldr	r3, [pc, #16]	@ (8009efc <USBD_SetConfig+0x118>)
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	4619      	mov	r1, r3
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f7ff f9a9 	bl	8009246 <USBD_ClrClassConfig>
        break;
 8009ef4:	bf00      	nop
    }
  }
}
 8009ef6:	3708      	adds	r7, #8
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}
 8009efc:	200014d4 	.word	0x200014d4

08009f00 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	88db      	ldrh	r3, [r3, #6]
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	d004      	beq.n	8009f1c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009f12:	6839      	ldr	r1, [r7, #0]
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 f8ca 	bl	800a0ae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009f1a:	e022      	b.n	8009f62 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f22:	2b02      	cmp	r3, #2
 8009f24:	dc02      	bgt.n	8009f2c <USBD_GetConfig+0x2c>
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	dc03      	bgt.n	8009f32 <USBD_GetConfig+0x32>
 8009f2a:	e015      	b.n	8009f58 <USBD_GetConfig+0x58>
 8009f2c:	2b03      	cmp	r3, #3
 8009f2e:	d00b      	beq.n	8009f48 <USBD_GetConfig+0x48>
 8009f30:	e012      	b.n	8009f58 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2200      	movs	r2, #0
 8009f36:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	3308      	adds	r3, #8
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	4619      	mov	r1, r3
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f000 f91f 	bl	800a184 <USBD_CtlSendData>
        break;
 8009f46:	e00c      	b.n	8009f62 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	3304      	adds	r3, #4
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	4619      	mov	r1, r3
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 f917 	bl	800a184 <USBD_CtlSendData>
        break;
 8009f56:	e004      	b.n	8009f62 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009f58:	6839      	ldr	r1, [r7, #0]
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 f8a7 	bl	800a0ae <USBD_CtlError>
        break;
 8009f60:	bf00      	nop
}
 8009f62:	bf00      	nop
 8009f64:	3708      	adds	r7, #8
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b082      	sub	sp, #8
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
 8009f72:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f7a:	3b01      	subs	r3, #1
 8009f7c:	2b02      	cmp	r3, #2
 8009f7e:	d81e      	bhi.n	8009fbe <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	88db      	ldrh	r3, [r3, #6]
 8009f84:	2b02      	cmp	r3, #2
 8009f86:	d004      	beq.n	8009f92 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009f88:	6839      	ldr	r1, [r7, #0]
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 f88f 	bl	800a0ae <USBD_CtlError>
        break;
 8009f90:	e01a      	b.n	8009fc8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2201      	movs	r2, #1
 8009f96:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d005      	beq.n	8009fae <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	f043 0202 	orr.w	r2, r3, #2
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	330c      	adds	r3, #12
 8009fb2:	2202      	movs	r2, #2
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 f8e4 	bl	800a184 <USBD_CtlSendData>
      break;
 8009fbc:	e004      	b.n	8009fc8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009fbe:	6839      	ldr	r1, [r7, #0]
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 f874 	bl	800a0ae <USBD_CtlError>
      break;
 8009fc6:	bf00      	nop
  }
}
 8009fc8:	bf00      	nop
 8009fca:	3708      	adds	r7, #8
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b082      	sub	sp, #8
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	885b      	ldrh	r3, [r3, #2]
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d106      	bne.n	8009ff0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 f928 	bl	800a240 <USBD_CtlSendStatus>
  }
}
 8009ff0:	bf00      	nop
 8009ff2:	3708      	adds	r7, #8
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a008:	3b01      	subs	r3, #1
 800a00a:	2b02      	cmp	r3, #2
 800a00c:	d80b      	bhi.n	800a026 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	885b      	ldrh	r3, [r3, #2]
 800a012:	2b01      	cmp	r3, #1
 800a014:	d10c      	bne.n	800a030 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2200      	movs	r2, #0
 800a01a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 f90e 	bl	800a240 <USBD_CtlSendStatus>
      }
      break;
 800a024:	e004      	b.n	800a030 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a026:	6839      	ldr	r1, [r7, #0]
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f000 f840 	bl	800a0ae <USBD_CtlError>
      break;
 800a02e:	e000      	b.n	800a032 <USBD_ClrFeature+0x3a>
      break;
 800a030:	bf00      	nop
  }
}
 800a032:	bf00      	nop
 800a034:	3708      	adds	r7, #8
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}

0800a03a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a03a:	b480      	push	{r7}
 800a03c:	b083      	sub	sp, #12
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
 800a042:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	781a      	ldrb	r2, [r3, #0]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	785a      	ldrb	r2, [r3, #1]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	3302      	adds	r3, #2
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	461a      	mov	r2, r3
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	3303      	adds	r3, #3
 800a060:	781b      	ldrb	r3, [r3, #0]
 800a062:	021b      	lsls	r3, r3, #8
 800a064:	b29b      	uxth	r3, r3
 800a066:	4413      	add	r3, r2
 800a068:	b29a      	uxth	r2, r3
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	3304      	adds	r3, #4
 800a072:	781b      	ldrb	r3, [r3, #0]
 800a074:	461a      	mov	r2, r3
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	3305      	adds	r3, #5
 800a07a:	781b      	ldrb	r3, [r3, #0]
 800a07c:	021b      	lsls	r3, r3, #8
 800a07e:	b29b      	uxth	r3, r3
 800a080:	4413      	add	r3, r2
 800a082:	b29a      	uxth	r2, r3
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	3306      	adds	r3, #6
 800a08c:	781b      	ldrb	r3, [r3, #0]
 800a08e:	461a      	mov	r2, r3
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	3307      	adds	r3, #7
 800a094:	781b      	ldrb	r3, [r3, #0]
 800a096:	021b      	lsls	r3, r3, #8
 800a098:	b29b      	uxth	r3, r3
 800a09a:	4413      	add	r3, r2
 800a09c:	b29a      	uxth	r2, r3
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	80da      	strh	r2, [r3, #6]

}
 800a0a2:	bf00      	nop
 800a0a4:	370c      	adds	r7, #12
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ac:	4770      	bx	lr

0800a0ae <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a0ae:	b580      	push	{r7, lr}
 800a0b0:	b082      	sub	sp, #8
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
 800a0b6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a0b8:	2180      	movs	r1, #128	@ 0x80
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f7f7 fa94 	bl	80015e8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a0c0:	2100      	movs	r1, #0
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f7f7 fa90 	bl	80015e8 <USBD_LL_StallEP>
}
 800a0c8:	bf00      	nop
 800a0ca:	3708      	adds	r7, #8
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b086      	sub	sp, #24
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	60f8      	str	r0, [r7, #12]
 800a0d8:	60b9      	str	r1, [r7, #8]
 800a0da:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d032      	beq.n	800a14c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a0e6:	68f8      	ldr	r0, [r7, #12]
 800a0e8:	f000 f834 	bl	800a154 <USBD_GetLen>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	b29b      	uxth	r3, r3
 800a0f2:	005b      	lsls	r3, r3, #1
 800a0f4:	b29a      	uxth	r2, r3
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a0fa:	7dfb      	ldrb	r3, [r7, #23]
 800a0fc:	1c5a      	adds	r2, r3, #1
 800a0fe:	75fa      	strb	r2, [r7, #23]
 800a100:	461a      	mov	r2, r3
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	4413      	add	r3, r2
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	7812      	ldrb	r2, [r2, #0]
 800a10a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a10c:	7dfb      	ldrb	r3, [r7, #23]
 800a10e:	1c5a      	adds	r2, r3, #1
 800a110:	75fa      	strb	r2, [r7, #23]
 800a112:	461a      	mov	r2, r3
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	4413      	add	r3, r2
 800a118:	2203      	movs	r2, #3
 800a11a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a11c:	e012      	b.n	800a144 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	1c5a      	adds	r2, r3, #1
 800a122:	60fa      	str	r2, [r7, #12]
 800a124:	7dfa      	ldrb	r2, [r7, #23]
 800a126:	1c51      	adds	r1, r2, #1
 800a128:	75f9      	strb	r1, [r7, #23]
 800a12a:	4611      	mov	r1, r2
 800a12c:	68ba      	ldr	r2, [r7, #8]
 800a12e:	440a      	add	r2, r1
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a134:	7dfb      	ldrb	r3, [r7, #23]
 800a136:	1c5a      	adds	r2, r3, #1
 800a138:	75fa      	strb	r2, [r7, #23]
 800a13a:	461a      	mov	r2, r3
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	4413      	add	r3, r2
 800a140:	2200      	movs	r2, #0
 800a142:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d1e8      	bne.n	800a11e <USBD_GetString+0x4e>
    }
  }
}
 800a14c:	bf00      	nop
 800a14e:	3718      	adds	r7, #24
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a154:	b480      	push	{r7}
 800a156:	b085      	sub	sp, #20
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a15c:	2300      	movs	r3, #0
 800a15e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a160:	e005      	b.n	800a16e <USBD_GetLen+0x1a>
  {
    len++;
 800a162:	7bfb      	ldrb	r3, [r7, #15]
 800a164:	3301      	adds	r3, #1
 800a166:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	3301      	adds	r3, #1
 800a16c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d1f5      	bne.n	800a162 <USBD_GetLen+0xe>
  }

  return len;
 800a176:	7bfb      	ldrb	r3, [r7, #15]
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3714      	adds	r7, #20
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr

0800a184 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	60f8      	str	r0, [r7, #12]
 800a18c:	60b9      	str	r1, [r7, #8]
 800a18e:	4613      	mov	r3, r2
 800a190:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2202      	movs	r2, #2
 800a196:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a19a:	88fa      	ldrh	r2, [r7, #6]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a1a0:	88fa      	ldrh	r2, [r7, #6]
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a1a6:	88fb      	ldrh	r3, [r7, #6]
 800a1a8:	68ba      	ldr	r2, [r7, #8]
 800a1aa:	2100      	movs	r1, #0
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f7f7 faa4 	bl	80016fa <USBD_LL_Transmit>

  return USBD_OK;
 800a1b2:	2300      	movs	r3, #0
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3710      	adds	r7, #16
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	60b9      	str	r1, [r7, #8]
 800a1c6:	4613      	mov	r3, r2
 800a1c8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a1ca:	88fb      	ldrh	r3, [r7, #6]
 800a1cc:	68ba      	ldr	r2, [r7, #8]
 800a1ce:	2100      	movs	r1, #0
 800a1d0:	68f8      	ldr	r0, [r7, #12]
 800a1d2:	f7f7 fa92 	bl	80016fa <USBD_LL_Transmit>

  return USBD_OK;
 800a1d6:	2300      	movs	r3, #0
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3710      	adds	r7, #16
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}

0800a1e0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	60f8      	str	r0, [r7, #12]
 800a1e8:	60b9      	str	r1, [r7, #8]
 800a1ea:	4613      	mov	r3, r2
 800a1ec:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2203      	movs	r2, #3
 800a1f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a1f6:	88fa      	ldrh	r2, [r7, #6]
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a1fe:	88fa      	ldrh	r2, [r7, #6]
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a206:	88fb      	ldrh	r3, [r7, #6]
 800a208:	68ba      	ldr	r2, [r7, #8]
 800a20a:	2100      	movs	r1, #0
 800a20c:	68f8      	ldr	r0, [r7, #12]
 800a20e:	f7f7 fa97 	bl	8001740 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a212:	2300      	movs	r3, #0
}
 800a214:	4618      	mov	r0, r3
 800a216:	3710      	adds	r7, #16
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b084      	sub	sp, #16
 800a220:	af00      	add	r7, sp, #0
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	4613      	mov	r3, r2
 800a228:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a22a:	88fb      	ldrh	r3, [r7, #6]
 800a22c:	68ba      	ldr	r2, [r7, #8]
 800a22e:	2100      	movs	r1, #0
 800a230:	68f8      	ldr	r0, [r7, #12]
 800a232:	f7f7 fa85 	bl	8001740 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a236:	2300      	movs	r3, #0
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3710      	adds	r7, #16
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b082      	sub	sp, #8
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2204      	movs	r2, #4
 800a24c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a250:	2300      	movs	r3, #0
 800a252:	2200      	movs	r2, #0
 800a254:	2100      	movs	r1, #0
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f7f7 fa4f 	bl	80016fa <USBD_LL_Transmit>

  return USBD_OK;
 800a25c:	2300      	movs	r3, #0
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3708      	adds	r7, #8
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}

0800a266 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a266:	b580      	push	{r7, lr}
 800a268:	b082      	sub	sp, #8
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2205      	movs	r2, #5
 800a272:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a276:	2300      	movs	r3, #0
 800a278:	2200      	movs	r2, #0
 800a27a:	2100      	movs	r1, #0
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f7f7 fa5f 	bl	8001740 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a282:	2300      	movs	r3, #0
}
 800a284:	4618      	mov	r0, r3
 800a286:	3708      	adds	r7, #8
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <siprintf>:
 800a28c:	b40e      	push	{r1, r2, r3}
 800a28e:	b500      	push	{lr}
 800a290:	b09c      	sub	sp, #112	@ 0x70
 800a292:	ab1d      	add	r3, sp, #116	@ 0x74
 800a294:	9002      	str	r0, [sp, #8]
 800a296:	9006      	str	r0, [sp, #24]
 800a298:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a29c:	4809      	ldr	r0, [pc, #36]	@ (800a2c4 <siprintf+0x38>)
 800a29e:	9107      	str	r1, [sp, #28]
 800a2a0:	9104      	str	r1, [sp, #16]
 800a2a2:	4909      	ldr	r1, [pc, #36]	@ (800a2c8 <siprintf+0x3c>)
 800a2a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2a8:	9105      	str	r1, [sp, #20]
 800a2aa:	6800      	ldr	r0, [r0, #0]
 800a2ac:	9301      	str	r3, [sp, #4]
 800a2ae:	a902      	add	r1, sp, #8
 800a2b0:	f000 f994 	bl	800a5dc <_svfiprintf_r>
 800a2b4:	9b02      	ldr	r3, [sp, #8]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	701a      	strb	r2, [r3, #0]
 800a2ba:	b01c      	add	sp, #112	@ 0x70
 800a2bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2c0:	b003      	add	sp, #12
 800a2c2:	4770      	bx	lr
 800a2c4:	2000017c 	.word	0x2000017c
 800a2c8:	ffff0208 	.word	0xffff0208

0800a2cc <memset>:
 800a2cc:	4402      	add	r2, r0
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d100      	bne.n	800a2d6 <memset+0xa>
 800a2d4:	4770      	bx	lr
 800a2d6:	f803 1b01 	strb.w	r1, [r3], #1
 800a2da:	e7f9      	b.n	800a2d0 <memset+0x4>

0800a2dc <__errno>:
 800a2dc:	4b01      	ldr	r3, [pc, #4]	@ (800a2e4 <__errno+0x8>)
 800a2de:	6818      	ldr	r0, [r3, #0]
 800a2e0:	4770      	bx	lr
 800a2e2:	bf00      	nop
 800a2e4:	2000017c 	.word	0x2000017c

0800a2e8 <__libc_init_array>:
 800a2e8:	b570      	push	{r4, r5, r6, lr}
 800a2ea:	4d0d      	ldr	r5, [pc, #52]	@ (800a320 <__libc_init_array+0x38>)
 800a2ec:	4c0d      	ldr	r4, [pc, #52]	@ (800a324 <__libc_init_array+0x3c>)
 800a2ee:	1b64      	subs	r4, r4, r5
 800a2f0:	10a4      	asrs	r4, r4, #2
 800a2f2:	2600      	movs	r6, #0
 800a2f4:	42a6      	cmp	r6, r4
 800a2f6:	d109      	bne.n	800a30c <__libc_init_array+0x24>
 800a2f8:	4d0b      	ldr	r5, [pc, #44]	@ (800a328 <__libc_init_array+0x40>)
 800a2fa:	4c0c      	ldr	r4, [pc, #48]	@ (800a32c <__libc_init_array+0x44>)
 800a2fc:	f000 fc66 	bl	800abcc <_init>
 800a300:	1b64      	subs	r4, r4, r5
 800a302:	10a4      	asrs	r4, r4, #2
 800a304:	2600      	movs	r6, #0
 800a306:	42a6      	cmp	r6, r4
 800a308:	d105      	bne.n	800a316 <__libc_init_array+0x2e>
 800a30a:	bd70      	pop	{r4, r5, r6, pc}
 800a30c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a310:	4798      	blx	r3
 800a312:	3601      	adds	r6, #1
 800a314:	e7ee      	b.n	800a2f4 <__libc_init_array+0xc>
 800a316:	f855 3b04 	ldr.w	r3, [r5], #4
 800a31a:	4798      	blx	r3
 800a31c:	3601      	adds	r6, #1
 800a31e:	e7f2      	b.n	800a306 <__libc_init_array+0x1e>
 800a320:	0800acbc 	.word	0x0800acbc
 800a324:	0800acbc 	.word	0x0800acbc
 800a328:	0800acbc 	.word	0x0800acbc
 800a32c:	0800acc0 	.word	0x0800acc0

0800a330 <__retarget_lock_acquire_recursive>:
 800a330:	4770      	bx	lr

0800a332 <__retarget_lock_release_recursive>:
 800a332:	4770      	bx	lr

0800a334 <_free_r>:
 800a334:	b538      	push	{r3, r4, r5, lr}
 800a336:	4605      	mov	r5, r0
 800a338:	2900      	cmp	r1, #0
 800a33a:	d041      	beq.n	800a3c0 <_free_r+0x8c>
 800a33c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a340:	1f0c      	subs	r4, r1, #4
 800a342:	2b00      	cmp	r3, #0
 800a344:	bfb8      	it	lt
 800a346:	18e4      	addlt	r4, r4, r3
 800a348:	f000 f8e0 	bl	800a50c <__malloc_lock>
 800a34c:	4a1d      	ldr	r2, [pc, #116]	@ (800a3c4 <_free_r+0x90>)
 800a34e:	6813      	ldr	r3, [r2, #0]
 800a350:	b933      	cbnz	r3, 800a360 <_free_r+0x2c>
 800a352:	6063      	str	r3, [r4, #4]
 800a354:	6014      	str	r4, [r2, #0]
 800a356:	4628      	mov	r0, r5
 800a358:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a35c:	f000 b8dc 	b.w	800a518 <__malloc_unlock>
 800a360:	42a3      	cmp	r3, r4
 800a362:	d908      	bls.n	800a376 <_free_r+0x42>
 800a364:	6820      	ldr	r0, [r4, #0]
 800a366:	1821      	adds	r1, r4, r0
 800a368:	428b      	cmp	r3, r1
 800a36a:	bf01      	itttt	eq
 800a36c:	6819      	ldreq	r1, [r3, #0]
 800a36e:	685b      	ldreq	r3, [r3, #4]
 800a370:	1809      	addeq	r1, r1, r0
 800a372:	6021      	streq	r1, [r4, #0]
 800a374:	e7ed      	b.n	800a352 <_free_r+0x1e>
 800a376:	461a      	mov	r2, r3
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	b10b      	cbz	r3, 800a380 <_free_r+0x4c>
 800a37c:	42a3      	cmp	r3, r4
 800a37e:	d9fa      	bls.n	800a376 <_free_r+0x42>
 800a380:	6811      	ldr	r1, [r2, #0]
 800a382:	1850      	adds	r0, r2, r1
 800a384:	42a0      	cmp	r0, r4
 800a386:	d10b      	bne.n	800a3a0 <_free_r+0x6c>
 800a388:	6820      	ldr	r0, [r4, #0]
 800a38a:	4401      	add	r1, r0
 800a38c:	1850      	adds	r0, r2, r1
 800a38e:	4283      	cmp	r3, r0
 800a390:	6011      	str	r1, [r2, #0]
 800a392:	d1e0      	bne.n	800a356 <_free_r+0x22>
 800a394:	6818      	ldr	r0, [r3, #0]
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	6053      	str	r3, [r2, #4]
 800a39a:	4408      	add	r0, r1
 800a39c:	6010      	str	r0, [r2, #0]
 800a39e:	e7da      	b.n	800a356 <_free_r+0x22>
 800a3a0:	d902      	bls.n	800a3a8 <_free_r+0x74>
 800a3a2:	230c      	movs	r3, #12
 800a3a4:	602b      	str	r3, [r5, #0]
 800a3a6:	e7d6      	b.n	800a356 <_free_r+0x22>
 800a3a8:	6820      	ldr	r0, [r4, #0]
 800a3aa:	1821      	adds	r1, r4, r0
 800a3ac:	428b      	cmp	r3, r1
 800a3ae:	bf04      	itt	eq
 800a3b0:	6819      	ldreq	r1, [r3, #0]
 800a3b2:	685b      	ldreq	r3, [r3, #4]
 800a3b4:	6063      	str	r3, [r4, #4]
 800a3b6:	bf04      	itt	eq
 800a3b8:	1809      	addeq	r1, r1, r0
 800a3ba:	6021      	streq	r1, [r4, #0]
 800a3bc:	6054      	str	r4, [r2, #4]
 800a3be:	e7ca      	b.n	800a356 <_free_r+0x22>
 800a3c0:	bd38      	pop	{r3, r4, r5, pc}
 800a3c2:	bf00      	nop
 800a3c4:	2000161c 	.word	0x2000161c

0800a3c8 <sbrk_aligned>:
 800a3c8:	b570      	push	{r4, r5, r6, lr}
 800a3ca:	4e0f      	ldr	r6, [pc, #60]	@ (800a408 <sbrk_aligned+0x40>)
 800a3cc:	460c      	mov	r4, r1
 800a3ce:	6831      	ldr	r1, [r6, #0]
 800a3d0:	4605      	mov	r5, r0
 800a3d2:	b911      	cbnz	r1, 800a3da <sbrk_aligned+0x12>
 800a3d4:	f000 fba6 	bl	800ab24 <_sbrk_r>
 800a3d8:	6030      	str	r0, [r6, #0]
 800a3da:	4621      	mov	r1, r4
 800a3dc:	4628      	mov	r0, r5
 800a3de:	f000 fba1 	bl	800ab24 <_sbrk_r>
 800a3e2:	1c43      	adds	r3, r0, #1
 800a3e4:	d103      	bne.n	800a3ee <sbrk_aligned+0x26>
 800a3e6:	f04f 34ff 	mov.w	r4, #4294967295
 800a3ea:	4620      	mov	r0, r4
 800a3ec:	bd70      	pop	{r4, r5, r6, pc}
 800a3ee:	1cc4      	adds	r4, r0, #3
 800a3f0:	f024 0403 	bic.w	r4, r4, #3
 800a3f4:	42a0      	cmp	r0, r4
 800a3f6:	d0f8      	beq.n	800a3ea <sbrk_aligned+0x22>
 800a3f8:	1a21      	subs	r1, r4, r0
 800a3fa:	4628      	mov	r0, r5
 800a3fc:	f000 fb92 	bl	800ab24 <_sbrk_r>
 800a400:	3001      	adds	r0, #1
 800a402:	d1f2      	bne.n	800a3ea <sbrk_aligned+0x22>
 800a404:	e7ef      	b.n	800a3e6 <sbrk_aligned+0x1e>
 800a406:	bf00      	nop
 800a408:	20001618 	.word	0x20001618

0800a40c <_malloc_r>:
 800a40c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a410:	1ccd      	adds	r5, r1, #3
 800a412:	f025 0503 	bic.w	r5, r5, #3
 800a416:	3508      	adds	r5, #8
 800a418:	2d0c      	cmp	r5, #12
 800a41a:	bf38      	it	cc
 800a41c:	250c      	movcc	r5, #12
 800a41e:	2d00      	cmp	r5, #0
 800a420:	4606      	mov	r6, r0
 800a422:	db01      	blt.n	800a428 <_malloc_r+0x1c>
 800a424:	42a9      	cmp	r1, r5
 800a426:	d904      	bls.n	800a432 <_malloc_r+0x26>
 800a428:	230c      	movs	r3, #12
 800a42a:	6033      	str	r3, [r6, #0]
 800a42c:	2000      	movs	r0, #0
 800a42e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a432:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a508 <_malloc_r+0xfc>
 800a436:	f000 f869 	bl	800a50c <__malloc_lock>
 800a43a:	f8d8 3000 	ldr.w	r3, [r8]
 800a43e:	461c      	mov	r4, r3
 800a440:	bb44      	cbnz	r4, 800a494 <_malloc_r+0x88>
 800a442:	4629      	mov	r1, r5
 800a444:	4630      	mov	r0, r6
 800a446:	f7ff ffbf 	bl	800a3c8 <sbrk_aligned>
 800a44a:	1c43      	adds	r3, r0, #1
 800a44c:	4604      	mov	r4, r0
 800a44e:	d158      	bne.n	800a502 <_malloc_r+0xf6>
 800a450:	f8d8 4000 	ldr.w	r4, [r8]
 800a454:	4627      	mov	r7, r4
 800a456:	2f00      	cmp	r7, #0
 800a458:	d143      	bne.n	800a4e2 <_malloc_r+0xd6>
 800a45a:	2c00      	cmp	r4, #0
 800a45c:	d04b      	beq.n	800a4f6 <_malloc_r+0xea>
 800a45e:	6823      	ldr	r3, [r4, #0]
 800a460:	4639      	mov	r1, r7
 800a462:	4630      	mov	r0, r6
 800a464:	eb04 0903 	add.w	r9, r4, r3
 800a468:	f000 fb5c 	bl	800ab24 <_sbrk_r>
 800a46c:	4581      	cmp	r9, r0
 800a46e:	d142      	bne.n	800a4f6 <_malloc_r+0xea>
 800a470:	6821      	ldr	r1, [r4, #0]
 800a472:	1a6d      	subs	r5, r5, r1
 800a474:	4629      	mov	r1, r5
 800a476:	4630      	mov	r0, r6
 800a478:	f7ff ffa6 	bl	800a3c8 <sbrk_aligned>
 800a47c:	3001      	adds	r0, #1
 800a47e:	d03a      	beq.n	800a4f6 <_malloc_r+0xea>
 800a480:	6823      	ldr	r3, [r4, #0]
 800a482:	442b      	add	r3, r5
 800a484:	6023      	str	r3, [r4, #0]
 800a486:	f8d8 3000 	ldr.w	r3, [r8]
 800a48a:	685a      	ldr	r2, [r3, #4]
 800a48c:	bb62      	cbnz	r2, 800a4e8 <_malloc_r+0xdc>
 800a48e:	f8c8 7000 	str.w	r7, [r8]
 800a492:	e00f      	b.n	800a4b4 <_malloc_r+0xa8>
 800a494:	6822      	ldr	r2, [r4, #0]
 800a496:	1b52      	subs	r2, r2, r5
 800a498:	d420      	bmi.n	800a4dc <_malloc_r+0xd0>
 800a49a:	2a0b      	cmp	r2, #11
 800a49c:	d917      	bls.n	800a4ce <_malloc_r+0xc2>
 800a49e:	1961      	adds	r1, r4, r5
 800a4a0:	42a3      	cmp	r3, r4
 800a4a2:	6025      	str	r5, [r4, #0]
 800a4a4:	bf18      	it	ne
 800a4a6:	6059      	strne	r1, [r3, #4]
 800a4a8:	6863      	ldr	r3, [r4, #4]
 800a4aa:	bf08      	it	eq
 800a4ac:	f8c8 1000 	streq.w	r1, [r8]
 800a4b0:	5162      	str	r2, [r4, r5]
 800a4b2:	604b      	str	r3, [r1, #4]
 800a4b4:	4630      	mov	r0, r6
 800a4b6:	f000 f82f 	bl	800a518 <__malloc_unlock>
 800a4ba:	f104 000b 	add.w	r0, r4, #11
 800a4be:	1d23      	adds	r3, r4, #4
 800a4c0:	f020 0007 	bic.w	r0, r0, #7
 800a4c4:	1ac2      	subs	r2, r0, r3
 800a4c6:	bf1c      	itt	ne
 800a4c8:	1a1b      	subne	r3, r3, r0
 800a4ca:	50a3      	strne	r3, [r4, r2]
 800a4cc:	e7af      	b.n	800a42e <_malloc_r+0x22>
 800a4ce:	6862      	ldr	r2, [r4, #4]
 800a4d0:	42a3      	cmp	r3, r4
 800a4d2:	bf0c      	ite	eq
 800a4d4:	f8c8 2000 	streq.w	r2, [r8]
 800a4d8:	605a      	strne	r2, [r3, #4]
 800a4da:	e7eb      	b.n	800a4b4 <_malloc_r+0xa8>
 800a4dc:	4623      	mov	r3, r4
 800a4de:	6864      	ldr	r4, [r4, #4]
 800a4e0:	e7ae      	b.n	800a440 <_malloc_r+0x34>
 800a4e2:	463c      	mov	r4, r7
 800a4e4:	687f      	ldr	r7, [r7, #4]
 800a4e6:	e7b6      	b.n	800a456 <_malloc_r+0x4a>
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	42a3      	cmp	r3, r4
 800a4ee:	d1fb      	bne.n	800a4e8 <_malloc_r+0xdc>
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	6053      	str	r3, [r2, #4]
 800a4f4:	e7de      	b.n	800a4b4 <_malloc_r+0xa8>
 800a4f6:	230c      	movs	r3, #12
 800a4f8:	6033      	str	r3, [r6, #0]
 800a4fa:	4630      	mov	r0, r6
 800a4fc:	f000 f80c 	bl	800a518 <__malloc_unlock>
 800a500:	e794      	b.n	800a42c <_malloc_r+0x20>
 800a502:	6005      	str	r5, [r0, #0]
 800a504:	e7d6      	b.n	800a4b4 <_malloc_r+0xa8>
 800a506:	bf00      	nop
 800a508:	2000161c 	.word	0x2000161c

0800a50c <__malloc_lock>:
 800a50c:	4801      	ldr	r0, [pc, #4]	@ (800a514 <__malloc_lock+0x8>)
 800a50e:	f7ff bf0f 	b.w	800a330 <__retarget_lock_acquire_recursive>
 800a512:	bf00      	nop
 800a514:	20001614 	.word	0x20001614

0800a518 <__malloc_unlock>:
 800a518:	4801      	ldr	r0, [pc, #4]	@ (800a520 <__malloc_unlock+0x8>)
 800a51a:	f7ff bf0a 	b.w	800a332 <__retarget_lock_release_recursive>
 800a51e:	bf00      	nop
 800a520:	20001614 	.word	0x20001614

0800a524 <__ssputs_r>:
 800a524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a528:	688e      	ldr	r6, [r1, #8]
 800a52a:	461f      	mov	r7, r3
 800a52c:	42be      	cmp	r6, r7
 800a52e:	680b      	ldr	r3, [r1, #0]
 800a530:	4682      	mov	sl, r0
 800a532:	460c      	mov	r4, r1
 800a534:	4690      	mov	r8, r2
 800a536:	d82d      	bhi.n	800a594 <__ssputs_r+0x70>
 800a538:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a53c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a540:	d026      	beq.n	800a590 <__ssputs_r+0x6c>
 800a542:	6965      	ldr	r5, [r4, #20]
 800a544:	6909      	ldr	r1, [r1, #16]
 800a546:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a54a:	eba3 0901 	sub.w	r9, r3, r1
 800a54e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a552:	1c7b      	adds	r3, r7, #1
 800a554:	444b      	add	r3, r9
 800a556:	106d      	asrs	r5, r5, #1
 800a558:	429d      	cmp	r5, r3
 800a55a:	bf38      	it	cc
 800a55c:	461d      	movcc	r5, r3
 800a55e:	0553      	lsls	r3, r2, #21
 800a560:	d527      	bpl.n	800a5b2 <__ssputs_r+0x8e>
 800a562:	4629      	mov	r1, r5
 800a564:	f7ff ff52 	bl	800a40c <_malloc_r>
 800a568:	4606      	mov	r6, r0
 800a56a:	b360      	cbz	r0, 800a5c6 <__ssputs_r+0xa2>
 800a56c:	6921      	ldr	r1, [r4, #16]
 800a56e:	464a      	mov	r2, r9
 800a570:	f000 fae8 	bl	800ab44 <memcpy>
 800a574:	89a3      	ldrh	r3, [r4, #12]
 800a576:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a57a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a57e:	81a3      	strh	r3, [r4, #12]
 800a580:	6126      	str	r6, [r4, #16]
 800a582:	6165      	str	r5, [r4, #20]
 800a584:	444e      	add	r6, r9
 800a586:	eba5 0509 	sub.w	r5, r5, r9
 800a58a:	6026      	str	r6, [r4, #0]
 800a58c:	60a5      	str	r5, [r4, #8]
 800a58e:	463e      	mov	r6, r7
 800a590:	42be      	cmp	r6, r7
 800a592:	d900      	bls.n	800a596 <__ssputs_r+0x72>
 800a594:	463e      	mov	r6, r7
 800a596:	6820      	ldr	r0, [r4, #0]
 800a598:	4632      	mov	r2, r6
 800a59a:	4641      	mov	r1, r8
 800a59c:	f000 faa8 	bl	800aaf0 <memmove>
 800a5a0:	68a3      	ldr	r3, [r4, #8]
 800a5a2:	1b9b      	subs	r3, r3, r6
 800a5a4:	60a3      	str	r3, [r4, #8]
 800a5a6:	6823      	ldr	r3, [r4, #0]
 800a5a8:	4433      	add	r3, r6
 800a5aa:	6023      	str	r3, [r4, #0]
 800a5ac:	2000      	movs	r0, #0
 800a5ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5b2:	462a      	mov	r2, r5
 800a5b4:	f000 fad4 	bl	800ab60 <_realloc_r>
 800a5b8:	4606      	mov	r6, r0
 800a5ba:	2800      	cmp	r0, #0
 800a5bc:	d1e0      	bne.n	800a580 <__ssputs_r+0x5c>
 800a5be:	6921      	ldr	r1, [r4, #16]
 800a5c0:	4650      	mov	r0, sl
 800a5c2:	f7ff feb7 	bl	800a334 <_free_r>
 800a5c6:	230c      	movs	r3, #12
 800a5c8:	f8ca 3000 	str.w	r3, [sl]
 800a5cc:	89a3      	ldrh	r3, [r4, #12]
 800a5ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5d2:	81a3      	strh	r3, [r4, #12]
 800a5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5d8:	e7e9      	b.n	800a5ae <__ssputs_r+0x8a>
	...

0800a5dc <_svfiprintf_r>:
 800a5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5e0:	4698      	mov	r8, r3
 800a5e2:	898b      	ldrh	r3, [r1, #12]
 800a5e4:	061b      	lsls	r3, r3, #24
 800a5e6:	b09d      	sub	sp, #116	@ 0x74
 800a5e8:	4607      	mov	r7, r0
 800a5ea:	460d      	mov	r5, r1
 800a5ec:	4614      	mov	r4, r2
 800a5ee:	d510      	bpl.n	800a612 <_svfiprintf_r+0x36>
 800a5f0:	690b      	ldr	r3, [r1, #16]
 800a5f2:	b973      	cbnz	r3, 800a612 <_svfiprintf_r+0x36>
 800a5f4:	2140      	movs	r1, #64	@ 0x40
 800a5f6:	f7ff ff09 	bl	800a40c <_malloc_r>
 800a5fa:	6028      	str	r0, [r5, #0]
 800a5fc:	6128      	str	r0, [r5, #16]
 800a5fe:	b930      	cbnz	r0, 800a60e <_svfiprintf_r+0x32>
 800a600:	230c      	movs	r3, #12
 800a602:	603b      	str	r3, [r7, #0]
 800a604:	f04f 30ff 	mov.w	r0, #4294967295
 800a608:	b01d      	add	sp, #116	@ 0x74
 800a60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a60e:	2340      	movs	r3, #64	@ 0x40
 800a610:	616b      	str	r3, [r5, #20]
 800a612:	2300      	movs	r3, #0
 800a614:	9309      	str	r3, [sp, #36]	@ 0x24
 800a616:	2320      	movs	r3, #32
 800a618:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a61c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a620:	2330      	movs	r3, #48	@ 0x30
 800a622:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a7c0 <_svfiprintf_r+0x1e4>
 800a626:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a62a:	f04f 0901 	mov.w	r9, #1
 800a62e:	4623      	mov	r3, r4
 800a630:	469a      	mov	sl, r3
 800a632:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a636:	b10a      	cbz	r2, 800a63c <_svfiprintf_r+0x60>
 800a638:	2a25      	cmp	r2, #37	@ 0x25
 800a63a:	d1f9      	bne.n	800a630 <_svfiprintf_r+0x54>
 800a63c:	ebba 0b04 	subs.w	fp, sl, r4
 800a640:	d00b      	beq.n	800a65a <_svfiprintf_r+0x7e>
 800a642:	465b      	mov	r3, fp
 800a644:	4622      	mov	r2, r4
 800a646:	4629      	mov	r1, r5
 800a648:	4638      	mov	r0, r7
 800a64a:	f7ff ff6b 	bl	800a524 <__ssputs_r>
 800a64e:	3001      	adds	r0, #1
 800a650:	f000 80a7 	beq.w	800a7a2 <_svfiprintf_r+0x1c6>
 800a654:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a656:	445a      	add	r2, fp
 800a658:	9209      	str	r2, [sp, #36]	@ 0x24
 800a65a:	f89a 3000 	ldrb.w	r3, [sl]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	f000 809f 	beq.w	800a7a2 <_svfiprintf_r+0x1c6>
 800a664:	2300      	movs	r3, #0
 800a666:	f04f 32ff 	mov.w	r2, #4294967295
 800a66a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a66e:	f10a 0a01 	add.w	sl, sl, #1
 800a672:	9304      	str	r3, [sp, #16]
 800a674:	9307      	str	r3, [sp, #28]
 800a676:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a67a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a67c:	4654      	mov	r4, sl
 800a67e:	2205      	movs	r2, #5
 800a680:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a684:	484e      	ldr	r0, [pc, #312]	@ (800a7c0 <_svfiprintf_r+0x1e4>)
 800a686:	f7f5 fdab 	bl	80001e0 <memchr>
 800a68a:	9a04      	ldr	r2, [sp, #16]
 800a68c:	b9d8      	cbnz	r0, 800a6c6 <_svfiprintf_r+0xea>
 800a68e:	06d0      	lsls	r0, r2, #27
 800a690:	bf44      	itt	mi
 800a692:	2320      	movmi	r3, #32
 800a694:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a698:	0711      	lsls	r1, r2, #28
 800a69a:	bf44      	itt	mi
 800a69c:	232b      	movmi	r3, #43	@ 0x2b
 800a69e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6a2:	f89a 3000 	ldrb.w	r3, [sl]
 800a6a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6a8:	d015      	beq.n	800a6d6 <_svfiprintf_r+0xfa>
 800a6aa:	9a07      	ldr	r2, [sp, #28]
 800a6ac:	4654      	mov	r4, sl
 800a6ae:	2000      	movs	r0, #0
 800a6b0:	f04f 0c0a 	mov.w	ip, #10
 800a6b4:	4621      	mov	r1, r4
 800a6b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6ba:	3b30      	subs	r3, #48	@ 0x30
 800a6bc:	2b09      	cmp	r3, #9
 800a6be:	d94b      	bls.n	800a758 <_svfiprintf_r+0x17c>
 800a6c0:	b1b0      	cbz	r0, 800a6f0 <_svfiprintf_r+0x114>
 800a6c2:	9207      	str	r2, [sp, #28]
 800a6c4:	e014      	b.n	800a6f0 <_svfiprintf_r+0x114>
 800a6c6:	eba0 0308 	sub.w	r3, r0, r8
 800a6ca:	fa09 f303 	lsl.w	r3, r9, r3
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	9304      	str	r3, [sp, #16]
 800a6d2:	46a2      	mov	sl, r4
 800a6d4:	e7d2      	b.n	800a67c <_svfiprintf_r+0xa0>
 800a6d6:	9b03      	ldr	r3, [sp, #12]
 800a6d8:	1d19      	adds	r1, r3, #4
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	9103      	str	r1, [sp, #12]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	bfbb      	ittet	lt
 800a6e2:	425b      	neglt	r3, r3
 800a6e4:	f042 0202 	orrlt.w	r2, r2, #2
 800a6e8:	9307      	strge	r3, [sp, #28]
 800a6ea:	9307      	strlt	r3, [sp, #28]
 800a6ec:	bfb8      	it	lt
 800a6ee:	9204      	strlt	r2, [sp, #16]
 800a6f0:	7823      	ldrb	r3, [r4, #0]
 800a6f2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a6f4:	d10a      	bne.n	800a70c <_svfiprintf_r+0x130>
 800a6f6:	7863      	ldrb	r3, [r4, #1]
 800a6f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6fa:	d132      	bne.n	800a762 <_svfiprintf_r+0x186>
 800a6fc:	9b03      	ldr	r3, [sp, #12]
 800a6fe:	1d1a      	adds	r2, r3, #4
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	9203      	str	r2, [sp, #12]
 800a704:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a708:	3402      	adds	r4, #2
 800a70a:	9305      	str	r3, [sp, #20]
 800a70c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a7d0 <_svfiprintf_r+0x1f4>
 800a710:	7821      	ldrb	r1, [r4, #0]
 800a712:	2203      	movs	r2, #3
 800a714:	4650      	mov	r0, sl
 800a716:	f7f5 fd63 	bl	80001e0 <memchr>
 800a71a:	b138      	cbz	r0, 800a72c <_svfiprintf_r+0x150>
 800a71c:	9b04      	ldr	r3, [sp, #16]
 800a71e:	eba0 000a 	sub.w	r0, r0, sl
 800a722:	2240      	movs	r2, #64	@ 0x40
 800a724:	4082      	lsls	r2, r0
 800a726:	4313      	orrs	r3, r2
 800a728:	3401      	adds	r4, #1
 800a72a:	9304      	str	r3, [sp, #16]
 800a72c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a730:	4824      	ldr	r0, [pc, #144]	@ (800a7c4 <_svfiprintf_r+0x1e8>)
 800a732:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a736:	2206      	movs	r2, #6
 800a738:	f7f5 fd52 	bl	80001e0 <memchr>
 800a73c:	2800      	cmp	r0, #0
 800a73e:	d036      	beq.n	800a7ae <_svfiprintf_r+0x1d2>
 800a740:	4b21      	ldr	r3, [pc, #132]	@ (800a7c8 <_svfiprintf_r+0x1ec>)
 800a742:	bb1b      	cbnz	r3, 800a78c <_svfiprintf_r+0x1b0>
 800a744:	9b03      	ldr	r3, [sp, #12]
 800a746:	3307      	adds	r3, #7
 800a748:	f023 0307 	bic.w	r3, r3, #7
 800a74c:	3308      	adds	r3, #8
 800a74e:	9303      	str	r3, [sp, #12]
 800a750:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a752:	4433      	add	r3, r6
 800a754:	9309      	str	r3, [sp, #36]	@ 0x24
 800a756:	e76a      	b.n	800a62e <_svfiprintf_r+0x52>
 800a758:	fb0c 3202 	mla	r2, ip, r2, r3
 800a75c:	460c      	mov	r4, r1
 800a75e:	2001      	movs	r0, #1
 800a760:	e7a8      	b.n	800a6b4 <_svfiprintf_r+0xd8>
 800a762:	2300      	movs	r3, #0
 800a764:	3401      	adds	r4, #1
 800a766:	9305      	str	r3, [sp, #20]
 800a768:	4619      	mov	r1, r3
 800a76a:	f04f 0c0a 	mov.w	ip, #10
 800a76e:	4620      	mov	r0, r4
 800a770:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a774:	3a30      	subs	r2, #48	@ 0x30
 800a776:	2a09      	cmp	r2, #9
 800a778:	d903      	bls.n	800a782 <_svfiprintf_r+0x1a6>
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d0c6      	beq.n	800a70c <_svfiprintf_r+0x130>
 800a77e:	9105      	str	r1, [sp, #20]
 800a780:	e7c4      	b.n	800a70c <_svfiprintf_r+0x130>
 800a782:	fb0c 2101 	mla	r1, ip, r1, r2
 800a786:	4604      	mov	r4, r0
 800a788:	2301      	movs	r3, #1
 800a78a:	e7f0      	b.n	800a76e <_svfiprintf_r+0x192>
 800a78c:	ab03      	add	r3, sp, #12
 800a78e:	9300      	str	r3, [sp, #0]
 800a790:	462a      	mov	r2, r5
 800a792:	4b0e      	ldr	r3, [pc, #56]	@ (800a7cc <_svfiprintf_r+0x1f0>)
 800a794:	a904      	add	r1, sp, #16
 800a796:	4638      	mov	r0, r7
 800a798:	f3af 8000 	nop.w
 800a79c:	1c42      	adds	r2, r0, #1
 800a79e:	4606      	mov	r6, r0
 800a7a0:	d1d6      	bne.n	800a750 <_svfiprintf_r+0x174>
 800a7a2:	89ab      	ldrh	r3, [r5, #12]
 800a7a4:	065b      	lsls	r3, r3, #25
 800a7a6:	f53f af2d 	bmi.w	800a604 <_svfiprintf_r+0x28>
 800a7aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a7ac:	e72c      	b.n	800a608 <_svfiprintf_r+0x2c>
 800a7ae:	ab03      	add	r3, sp, #12
 800a7b0:	9300      	str	r3, [sp, #0]
 800a7b2:	462a      	mov	r2, r5
 800a7b4:	4b05      	ldr	r3, [pc, #20]	@ (800a7cc <_svfiprintf_r+0x1f0>)
 800a7b6:	a904      	add	r1, sp, #16
 800a7b8:	4638      	mov	r0, r7
 800a7ba:	f000 f879 	bl	800a8b0 <_printf_i>
 800a7be:	e7ed      	b.n	800a79c <_svfiprintf_r+0x1c0>
 800a7c0:	0800ac80 	.word	0x0800ac80
 800a7c4:	0800ac8a 	.word	0x0800ac8a
 800a7c8:	00000000 	.word	0x00000000
 800a7cc:	0800a525 	.word	0x0800a525
 800a7d0:	0800ac86 	.word	0x0800ac86

0800a7d4 <_printf_common>:
 800a7d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7d8:	4616      	mov	r6, r2
 800a7da:	4698      	mov	r8, r3
 800a7dc:	688a      	ldr	r2, [r1, #8]
 800a7de:	690b      	ldr	r3, [r1, #16]
 800a7e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	bfb8      	it	lt
 800a7e8:	4613      	movlt	r3, r2
 800a7ea:	6033      	str	r3, [r6, #0]
 800a7ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a7f0:	4607      	mov	r7, r0
 800a7f2:	460c      	mov	r4, r1
 800a7f4:	b10a      	cbz	r2, 800a7fa <_printf_common+0x26>
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	6033      	str	r3, [r6, #0]
 800a7fa:	6823      	ldr	r3, [r4, #0]
 800a7fc:	0699      	lsls	r1, r3, #26
 800a7fe:	bf42      	ittt	mi
 800a800:	6833      	ldrmi	r3, [r6, #0]
 800a802:	3302      	addmi	r3, #2
 800a804:	6033      	strmi	r3, [r6, #0]
 800a806:	6825      	ldr	r5, [r4, #0]
 800a808:	f015 0506 	ands.w	r5, r5, #6
 800a80c:	d106      	bne.n	800a81c <_printf_common+0x48>
 800a80e:	f104 0a19 	add.w	sl, r4, #25
 800a812:	68e3      	ldr	r3, [r4, #12]
 800a814:	6832      	ldr	r2, [r6, #0]
 800a816:	1a9b      	subs	r3, r3, r2
 800a818:	42ab      	cmp	r3, r5
 800a81a:	dc26      	bgt.n	800a86a <_printf_common+0x96>
 800a81c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a820:	6822      	ldr	r2, [r4, #0]
 800a822:	3b00      	subs	r3, #0
 800a824:	bf18      	it	ne
 800a826:	2301      	movne	r3, #1
 800a828:	0692      	lsls	r2, r2, #26
 800a82a:	d42b      	bmi.n	800a884 <_printf_common+0xb0>
 800a82c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a830:	4641      	mov	r1, r8
 800a832:	4638      	mov	r0, r7
 800a834:	47c8      	blx	r9
 800a836:	3001      	adds	r0, #1
 800a838:	d01e      	beq.n	800a878 <_printf_common+0xa4>
 800a83a:	6823      	ldr	r3, [r4, #0]
 800a83c:	6922      	ldr	r2, [r4, #16]
 800a83e:	f003 0306 	and.w	r3, r3, #6
 800a842:	2b04      	cmp	r3, #4
 800a844:	bf02      	ittt	eq
 800a846:	68e5      	ldreq	r5, [r4, #12]
 800a848:	6833      	ldreq	r3, [r6, #0]
 800a84a:	1aed      	subeq	r5, r5, r3
 800a84c:	68a3      	ldr	r3, [r4, #8]
 800a84e:	bf0c      	ite	eq
 800a850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a854:	2500      	movne	r5, #0
 800a856:	4293      	cmp	r3, r2
 800a858:	bfc4      	itt	gt
 800a85a:	1a9b      	subgt	r3, r3, r2
 800a85c:	18ed      	addgt	r5, r5, r3
 800a85e:	2600      	movs	r6, #0
 800a860:	341a      	adds	r4, #26
 800a862:	42b5      	cmp	r5, r6
 800a864:	d11a      	bne.n	800a89c <_printf_common+0xc8>
 800a866:	2000      	movs	r0, #0
 800a868:	e008      	b.n	800a87c <_printf_common+0xa8>
 800a86a:	2301      	movs	r3, #1
 800a86c:	4652      	mov	r2, sl
 800a86e:	4641      	mov	r1, r8
 800a870:	4638      	mov	r0, r7
 800a872:	47c8      	blx	r9
 800a874:	3001      	adds	r0, #1
 800a876:	d103      	bne.n	800a880 <_printf_common+0xac>
 800a878:	f04f 30ff 	mov.w	r0, #4294967295
 800a87c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a880:	3501      	adds	r5, #1
 800a882:	e7c6      	b.n	800a812 <_printf_common+0x3e>
 800a884:	18e1      	adds	r1, r4, r3
 800a886:	1c5a      	adds	r2, r3, #1
 800a888:	2030      	movs	r0, #48	@ 0x30
 800a88a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a88e:	4422      	add	r2, r4
 800a890:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a894:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a898:	3302      	adds	r3, #2
 800a89a:	e7c7      	b.n	800a82c <_printf_common+0x58>
 800a89c:	2301      	movs	r3, #1
 800a89e:	4622      	mov	r2, r4
 800a8a0:	4641      	mov	r1, r8
 800a8a2:	4638      	mov	r0, r7
 800a8a4:	47c8      	blx	r9
 800a8a6:	3001      	adds	r0, #1
 800a8a8:	d0e6      	beq.n	800a878 <_printf_common+0xa4>
 800a8aa:	3601      	adds	r6, #1
 800a8ac:	e7d9      	b.n	800a862 <_printf_common+0x8e>
	...

0800a8b0 <_printf_i>:
 800a8b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8b4:	7e0f      	ldrb	r7, [r1, #24]
 800a8b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a8b8:	2f78      	cmp	r7, #120	@ 0x78
 800a8ba:	4691      	mov	r9, r2
 800a8bc:	4680      	mov	r8, r0
 800a8be:	460c      	mov	r4, r1
 800a8c0:	469a      	mov	sl, r3
 800a8c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a8c6:	d807      	bhi.n	800a8d8 <_printf_i+0x28>
 800a8c8:	2f62      	cmp	r7, #98	@ 0x62
 800a8ca:	d80a      	bhi.n	800a8e2 <_printf_i+0x32>
 800a8cc:	2f00      	cmp	r7, #0
 800a8ce:	f000 80d2 	beq.w	800aa76 <_printf_i+0x1c6>
 800a8d2:	2f58      	cmp	r7, #88	@ 0x58
 800a8d4:	f000 80b9 	beq.w	800aa4a <_printf_i+0x19a>
 800a8d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a8dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a8e0:	e03a      	b.n	800a958 <_printf_i+0xa8>
 800a8e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a8e6:	2b15      	cmp	r3, #21
 800a8e8:	d8f6      	bhi.n	800a8d8 <_printf_i+0x28>
 800a8ea:	a101      	add	r1, pc, #4	@ (adr r1, 800a8f0 <_printf_i+0x40>)
 800a8ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a8f0:	0800a949 	.word	0x0800a949
 800a8f4:	0800a95d 	.word	0x0800a95d
 800a8f8:	0800a8d9 	.word	0x0800a8d9
 800a8fc:	0800a8d9 	.word	0x0800a8d9
 800a900:	0800a8d9 	.word	0x0800a8d9
 800a904:	0800a8d9 	.word	0x0800a8d9
 800a908:	0800a95d 	.word	0x0800a95d
 800a90c:	0800a8d9 	.word	0x0800a8d9
 800a910:	0800a8d9 	.word	0x0800a8d9
 800a914:	0800a8d9 	.word	0x0800a8d9
 800a918:	0800a8d9 	.word	0x0800a8d9
 800a91c:	0800aa5d 	.word	0x0800aa5d
 800a920:	0800a987 	.word	0x0800a987
 800a924:	0800aa17 	.word	0x0800aa17
 800a928:	0800a8d9 	.word	0x0800a8d9
 800a92c:	0800a8d9 	.word	0x0800a8d9
 800a930:	0800aa7f 	.word	0x0800aa7f
 800a934:	0800a8d9 	.word	0x0800a8d9
 800a938:	0800a987 	.word	0x0800a987
 800a93c:	0800a8d9 	.word	0x0800a8d9
 800a940:	0800a8d9 	.word	0x0800a8d9
 800a944:	0800aa1f 	.word	0x0800aa1f
 800a948:	6833      	ldr	r3, [r6, #0]
 800a94a:	1d1a      	adds	r2, r3, #4
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	6032      	str	r2, [r6, #0]
 800a950:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a954:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a958:	2301      	movs	r3, #1
 800a95a:	e09d      	b.n	800aa98 <_printf_i+0x1e8>
 800a95c:	6833      	ldr	r3, [r6, #0]
 800a95e:	6820      	ldr	r0, [r4, #0]
 800a960:	1d19      	adds	r1, r3, #4
 800a962:	6031      	str	r1, [r6, #0]
 800a964:	0606      	lsls	r6, r0, #24
 800a966:	d501      	bpl.n	800a96c <_printf_i+0xbc>
 800a968:	681d      	ldr	r5, [r3, #0]
 800a96a:	e003      	b.n	800a974 <_printf_i+0xc4>
 800a96c:	0645      	lsls	r5, r0, #25
 800a96e:	d5fb      	bpl.n	800a968 <_printf_i+0xb8>
 800a970:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a974:	2d00      	cmp	r5, #0
 800a976:	da03      	bge.n	800a980 <_printf_i+0xd0>
 800a978:	232d      	movs	r3, #45	@ 0x2d
 800a97a:	426d      	negs	r5, r5
 800a97c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a980:	4859      	ldr	r0, [pc, #356]	@ (800aae8 <_printf_i+0x238>)
 800a982:	230a      	movs	r3, #10
 800a984:	e011      	b.n	800a9aa <_printf_i+0xfa>
 800a986:	6821      	ldr	r1, [r4, #0]
 800a988:	6833      	ldr	r3, [r6, #0]
 800a98a:	0608      	lsls	r0, r1, #24
 800a98c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a990:	d402      	bmi.n	800a998 <_printf_i+0xe8>
 800a992:	0649      	lsls	r1, r1, #25
 800a994:	bf48      	it	mi
 800a996:	b2ad      	uxthmi	r5, r5
 800a998:	2f6f      	cmp	r7, #111	@ 0x6f
 800a99a:	4853      	ldr	r0, [pc, #332]	@ (800aae8 <_printf_i+0x238>)
 800a99c:	6033      	str	r3, [r6, #0]
 800a99e:	bf14      	ite	ne
 800a9a0:	230a      	movne	r3, #10
 800a9a2:	2308      	moveq	r3, #8
 800a9a4:	2100      	movs	r1, #0
 800a9a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a9aa:	6866      	ldr	r6, [r4, #4]
 800a9ac:	60a6      	str	r6, [r4, #8]
 800a9ae:	2e00      	cmp	r6, #0
 800a9b0:	bfa2      	ittt	ge
 800a9b2:	6821      	ldrge	r1, [r4, #0]
 800a9b4:	f021 0104 	bicge.w	r1, r1, #4
 800a9b8:	6021      	strge	r1, [r4, #0]
 800a9ba:	b90d      	cbnz	r5, 800a9c0 <_printf_i+0x110>
 800a9bc:	2e00      	cmp	r6, #0
 800a9be:	d04b      	beq.n	800aa58 <_printf_i+0x1a8>
 800a9c0:	4616      	mov	r6, r2
 800a9c2:	fbb5 f1f3 	udiv	r1, r5, r3
 800a9c6:	fb03 5711 	mls	r7, r3, r1, r5
 800a9ca:	5dc7      	ldrb	r7, [r0, r7]
 800a9cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a9d0:	462f      	mov	r7, r5
 800a9d2:	42bb      	cmp	r3, r7
 800a9d4:	460d      	mov	r5, r1
 800a9d6:	d9f4      	bls.n	800a9c2 <_printf_i+0x112>
 800a9d8:	2b08      	cmp	r3, #8
 800a9da:	d10b      	bne.n	800a9f4 <_printf_i+0x144>
 800a9dc:	6823      	ldr	r3, [r4, #0]
 800a9de:	07df      	lsls	r7, r3, #31
 800a9e0:	d508      	bpl.n	800a9f4 <_printf_i+0x144>
 800a9e2:	6923      	ldr	r3, [r4, #16]
 800a9e4:	6861      	ldr	r1, [r4, #4]
 800a9e6:	4299      	cmp	r1, r3
 800a9e8:	bfde      	ittt	le
 800a9ea:	2330      	movle	r3, #48	@ 0x30
 800a9ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a9f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a9f4:	1b92      	subs	r2, r2, r6
 800a9f6:	6122      	str	r2, [r4, #16]
 800a9f8:	f8cd a000 	str.w	sl, [sp]
 800a9fc:	464b      	mov	r3, r9
 800a9fe:	aa03      	add	r2, sp, #12
 800aa00:	4621      	mov	r1, r4
 800aa02:	4640      	mov	r0, r8
 800aa04:	f7ff fee6 	bl	800a7d4 <_printf_common>
 800aa08:	3001      	adds	r0, #1
 800aa0a:	d14a      	bne.n	800aaa2 <_printf_i+0x1f2>
 800aa0c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa10:	b004      	add	sp, #16
 800aa12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa16:	6823      	ldr	r3, [r4, #0]
 800aa18:	f043 0320 	orr.w	r3, r3, #32
 800aa1c:	6023      	str	r3, [r4, #0]
 800aa1e:	4833      	ldr	r0, [pc, #204]	@ (800aaec <_printf_i+0x23c>)
 800aa20:	2778      	movs	r7, #120	@ 0x78
 800aa22:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aa26:	6823      	ldr	r3, [r4, #0]
 800aa28:	6831      	ldr	r1, [r6, #0]
 800aa2a:	061f      	lsls	r7, r3, #24
 800aa2c:	f851 5b04 	ldr.w	r5, [r1], #4
 800aa30:	d402      	bmi.n	800aa38 <_printf_i+0x188>
 800aa32:	065f      	lsls	r7, r3, #25
 800aa34:	bf48      	it	mi
 800aa36:	b2ad      	uxthmi	r5, r5
 800aa38:	6031      	str	r1, [r6, #0]
 800aa3a:	07d9      	lsls	r1, r3, #31
 800aa3c:	bf44      	itt	mi
 800aa3e:	f043 0320 	orrmi.w	r3, r3, #32
 800aa42:	6023      	strmi	r3, [r4, #0]
 800aa44:	b11d      	cbz	r5, 800aa4e <_printf_i+0x19e>
 800aa46:	2310      	movs	r3, #16
 800aa48:	e7ac      	b.n	800a9a4 <_printf_i+0xf4>
 800aa4a:	4827      	ldr	r0, [pc, #156]	@ (800aae8 <_printf_i+0x238>)
 800aa4c:	e7e9      	b.n	800aa22 <_printf_i+0x172>
 800aa4e:	6823      	ldr	r3, [r4, #0]
 800aa50:	f023 0320 	bic.w	r3, r3, #32
 800aa54:	6023      	str	r3, [r4, #0]
 800aa56:	e7f6      	b.n	800aa46 <_printf_i+0x196>
 800aa58:	4616      	mov	r6, r2
 800aa5a:	e7bd      	b.n	800a9d8 <_printf_i+0x128>
 800aa5c:	6833      	ldr	r3, [r6, #0]
 800aa5e:	6825      	ldr	r5, [r4, #0]
 800aa60:	6961      	ldr	r1, [r4, #20]
 800aa62:	1d18      	adds	r0, r3, #4
 800aa64:	6030      	str	r0, [r6, #0]
 800aa66:	062e      	lsls	r6, r5, #24
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	d501      	bpl.n	800aa70 <_printf_i+0x1c0>
 800aa6c:	6019      	str	r1, [r3, #0]
 800aa6e:	e002      	b.n	800aa76 <_printf_i+0x1c6>
 800aa70:	0668      	lsls	r0, r5, #25
 800aa72:	d5fb      	bpl.n	800aa6c <_printf_i+0x1bc>
 800aa74:	8019      	strh	r1, [r3, #0]
 800aa76:	2300      	movs	r3, #0
 800aa78:	6123      	str	r3, [r4, #16]
 800aa7a:	4616      	mov	r6, r2
 800aa7c:	e7bc      	b.n	800a9f8 <_printf_i+0x148>
 800aa7e:	6833      	ldr	r3, [r6, #0]
 800aa80:	1d1a      	adds	r2, r3, #4
 800aa82:	6032      	str	r2, [r6, #0]
 800aa84:	681e      	ldr	r6, [r3, #0]
 800aa86:	6862      	ldr	r2, [r4, #4]
 800aa88:	2100      	movs	r1, #0
 800aa8a:	4630      	mov	r0, r6
 800aa8c:	f7f5 fba8 	bl	80001e0 <memchr>
 800aa90:	b108      	cbz	r0, 800aa96 <_printf_i+0x1e6>
 800aa92:	1b80      	subs	r0, r0, r6
 800aa94:	6060      	str	r0, [r4, #4]
 800aa96:	6863      	ldr	r3, [r4, #4]
 800aa98:	6123      	str	r3, [r4, #16]
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aaa0:	e7aa      	b.n	800a9f8 <_printf_i+0x148>
 800aaa2:	6923      	ldr	r3, [r4, #16]
 800aaa4:	4632      	mov	r2, r6
 800aaa6:	4649      	mov	r1, r9
 800aaa8:	4640      	mov	r0, r8
 800aaaa:	47d0      	blx	sl
 800aaac:	3001      	adds	r0, #1
 800aaae:	d0ad      	beq.n	800aa0c <_printf_i+0x15c>
 800aab0:	6823      	ldr	r3, [r4, #0]
 800aab2:	079b      	lsls	r3, r3, #30
 800aab4:	d413      	bmi.n	800aade <_printf_i+0x22e>
 800aab6:	68e0      	ldr	r0, [r4, #12]
 800aab8:	9b03      	ldr	r3, [sp, #12]
 800aaba:	4298      	cmp	r0, r3
 800aabc:	bfb8      	it	lt
 800aabe:	4618      	movlt	r0, r3
 800aac0:	e7a6      	b.n	800aa10 <_printf_i+0x160>
 800aac2:	2301      	movs	r3, #1
 800aac4:	4632      	mov	r2, r6
 800aac6:	4649      	mov	r1, r9
 800aac8:	4640      	mov	r0, r8
 800aaca:	47d0      	blx	sl
 800aacc:	3001      	adds	r0, #1
 800aace:	d09d      	beq.n	800aa0c <_printf_i+0x15c>
 800aad0:	3501      	adds	r5, #1
 800aad2:	68e3      	ldr	r3, [r4, #12]
 800aad4:	9903      	ldr	r1, [sp, #12]
 800aad6:	1a5b      	subs	r3, r3, r1
 800aad8:	42ab      	cmp	r3, r5
 800aada:	dcf2      	bgt.n	800aac2 <_printf_i+0x212>
 800aadc:	e7eb      	b.n	800aab6 <_printf_i+0x206>
 800aade:	2500      	movs	r5, #0
 800aae0:	f104 0619 	add.w	r6, r4, #25
 800aae4:	e7f5      	b.n	800aad2 <_printf_i+0x222>
 800aae6:	bf00      	nop
 800aae8:	0800ac91 	.word	0x0800ac91
 800aaec:	0800aca2 	.word	0x0800aca2

0800aaf0 <memmove>:
 800aaf0:	4288      	cmp	r0, r1
 800aaf2:	b510      	push	{r4, lr}
 800aaf4:	eb01 0402 	add.w	r4, r1, r2
 800aaf8:	d902      	bls.n	800ab00 <memmove+0x10>
 800aafa:	4284      	cmp	r4, r0
 800aafc:	4623      	mov	r3, r4
 800aafe:	d807      	bhi.n	800ab10 <memmove+0x20>
 800ab00:	1e43      	subs	r3, r0, #1
 800ab02:	42a1      	cmp	r1, r4
 800ab04:	d008      	beq.n	800ab18 <memmove+0x28>
 800ab06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ab0e:	e7f8      	b.n	800ab02 <memmove+0x12>
 800ab10:	4402      	add	r2, r0
 800ab12:	4601      	mov	r1, r0
 800ab14:	428a      	cmp	r2, r1
 800ab16:	d100      	bne.n	800ab1a <memmove+0x2a>
 800ab18:	bd10      	pop	{r4, pc}
 800ab1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab22:	e7f7      	b.n	800ab14 <memmove+0x24>

0800ab24 <_sbrk_r>:
 800ab24:	b538      	push	{r3, r4, r5, lr}
 800ab26:	4d06      	ldr	r5, [pc, #24]	@ (800ab40 <_sbrk_r+0x1c>)
 800ab28:	2300      	movs	r3, #0
 800ab2a:	4604      	mov	r4, r0
 800ab2c:	4608      	mov	r0, r1
 800ab2e:	602b      	str	r3, [r5, #0]
 800ab30:	f7f6 f964 	bl	8000dfc <_sbrk>
 800ab34:	1c43      	adds	r3, r0, #1
 800ab36:	d102      	bne.n	800ab3e <_sbrk_r+0x1a>
 800ab38:	682b      	ldr	r3, [r5, #0]
 800ab3a:	b103      	cbz	r3, 800ab3e <_sbrk_r+0x1a>
 800ab3c:	6023      	str	r3, [r4, #0]
 800ab3e:	bd38      	pop	{r3, r4, r5, pc}
 800ab40:	20001610 	.word	0x20001610

0800ab44 <memcpy>:
 800ab44:	440a      	add	r2, r1
 800ab46:	4291      	cmp	r1, r2
 800ab48:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab4c:	d100      	bne.n	800ab50 <memcpy+0xc>
 800ab4e:	4770      	bx	lr
 800ab50:	b510      	push	{r4, lr}
 800ab52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab5a:	4291      	cmp	r1, r2
 800ab5c:	d1f9      	bne.n	800ab52 <memcpy+0xe>
 800ab5e:	bd10      	pop	{r4, pc}

0800ab60 <_realloc_r>:
 800ab60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab64:	4680      	mov	r8, r0
 800ab66:	4615      	mov	r5, r2
 800ab68:	460c      	mov	r4, r1
 800ab6a:	b921      	cbnz	r1, 800ab76 <_realloc_r+0x16>
 800ab6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab70:	4611      	mov	r1, r2
 800ab72:	f7ff bc4b 	b.w	800a40c <_malloc_r>
 800ab76:	b92a      	cbnz	r2, 800ab84 <_realloc_r+0x24>
 800ab78:	f7ff fbdc 	bl	800a334 <_free_r>
 800ab7c:	2400      	movs	r4, #0
 800ab7e:	4620      	mov	r0, r4
 800ab80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab84:	f000 f81a 	bl	800abbc <_malloc_usable_size_r>
 800ab88:	4285      	cmp	r5, r0
 800ab8a:	4606      	mov	r6, r0
 800ab8c:	d802      	bhi.n	800ab94 <_realloc_r+0x34>
 800ab8e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ab92:	d8f4      	bhi.n	800ab7e <_realloc_r+0x1e>
 800ab94:	4629      	mov	r1, r5
 800ab96:	4640      	mov	r0, r8
 800ab98:	f7ff fc38 	bl	800a40c <_malloc_r>
 800ab9c:	4607      	mov	r7, r0
 800ab9e:	2800      	cmp	r0, #0
 800aba0:	d0ec      	beq.n	800ab7c <_realloc_r+0x1c>
 800aba2:	42b5      	cmp	r5, r6
 800aba4:	462a      	mov	r2, r5
 800aba6:	4621      	mov	r1, r4
 800aba8:	bf28      	it	cs
 800abaa:	4632      	movcs	r2, r6
 800abac:	f7ff ffca 	bl	800ab44 <memcpy>
 800abb0:	4621      	mov	r1, r4
 800abb2:	4640      	mov	r0, r8
 800abb4:	f7ff fbbe 	bl	800a334 <_free_r>
 800abb8:	463c      	mov	r4, r7
 800abba:	e7e0      	b.n	800ab7e <_realloc_r+0x1e>

0800abbc <_malloc_usable_size_r>:
 800abbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abc0:	1f18      	subs	r0, r3, #4
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	bfbc      	itt	lt
 800abc6:	580b      	ldrlt	r3, [r1, r0]
 800abc8:	18c0      	addlt	r0, r0, r3
 800abca:	4770      	bx	lr

0800abcc <_init>:
 800abcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abce:	bf00      	nop
 800abd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abd2:	bc08      	pop	{r3}
 800abd4:	469e      	mov	lr, r3
 800abd6:	4770      	bx	lr

0800abd8 <_fini>:
 800abd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abda:	bf00      	nop
 800abdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abde:	bc08      	pop	{r3}
 800abe0:	469e      	mov	lr, r3
 800abe2:	4770      	bx	lr
